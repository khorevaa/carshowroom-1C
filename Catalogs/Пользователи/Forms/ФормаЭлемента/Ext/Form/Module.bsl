#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыЗаписиПриПроверкеПервогоАдминистратора;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьУсловноеОформление();

	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если БазоваяПодсистемаСервер.ЭтоУчебнаяПлатформа() Тогда
		Элементы.СвойстваАутентификацииОС.ТолькоПросмотр = Истина;
	КонецЕсли;

	// Заполнение вспомогательных данных.

	// Заполнение списка выбора режимов запуска.
	Для каждого РежимЗапуска Из РежимЗапускаКлиентскогоПриложения Цикл
		ПолноеИмяЗначения	= ПолучитьПолноеИмяПредопределенногоЗначения(РежимЗапуска);
		ИмяЗначения			= Сред(ПолноеИмяЗначения, СтрНайти(ПолноеИмяЗначения, ".") + 1);
		Элементы.ПользовательИБРежимЗапуска.СписокВыбора.Добавить(ИмяЗначения, Строка(РежимЗапуска));
	КонецЦикла;
	Элементы.ПользовательИБРежимЗапуска.СписокВыбора.СортироватьПоПредставлению();

	// Заполнение списка выбора языка.
	Если Метаданные.Языки.Количество() < 2 Тогда
		Элементы.ПользовательИБЯзык.Видимость = Ложь;
	Иначе
		Для каждого МетаданныеЯзыка Из Метаданные.Языки Цикл
			Элементы.ПользовательИБЯзык.СписокВыбора.Добавить(МетаданныеЯзыка.Имя, МетаданныеЯзыка.Синоним);
		КонецЦикла;
	КонецЕсли;

	УровеньДоступа = ПользователиСервер.УровеньДоступаКСвойствамПользователя(Объект);

	// Подготовка к интерактивным действиям с учетом сценариев открытия формы.
	УстановитьПривилегированныйРежим(Истина);

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// Создание нового элемента.
		Если Параметры.ГруппаНовогоПользователя <> Справочники.ГруппыПользователей.ВсеПользователи Тогда
			ГруппаНовогоПользователя = Параметры.ГруппаНовогоПользователя;
		КонецЕсли;

		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			// Копирование элемента.
			ЗначениеКопирования = Параметры.ЗначениеКопирования;
			Объект.Наименование = "";

			Если Не ПользователиСервер.УровеньДоступаПользователяВыше(ЗначениеКопирования, УровеньДоступа) Тогда
				ПрочитатьПользователяИБ(ЗначениеЗаполнено(ЗначениеКопирования.ИдентификаторПользователяИБ));
			Иначе
				ПрочитатьПользователяИБ();
			КонецЕсли;

			Если Не УровеньДоступа.ИзменениеРазрешенияНаВход Тогда
				ВходВПрограммуРазрешен							= Ложь;
				ВходВПрограммуРазрешенЗначениеПрямогоИзменения	= Ложь;
			КонецЕсли;
		Иначе
			// Добавление элемента.

			// Чтение начальных значений свойств пользователя ИБ.
			ПрочитатьПользователяИБ();

			Если Не ЗначениеЗаполнено(Параметры.ИдентификаторПользователяИБ) Тогда
				ПользовательИБАутентификацияСтандартная = Истина;

				Если УровеньДоступа.ИзменениеРазрешенияНаВход Тогда
					ВходВПрограммуРазрешен							= Истина;
					ВходВПрограммуРазрешенЗначениеПрямогоИзменения	= Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Открытие существующего элемента.
		ПрочитатьПользователяИБ();
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

	ОбработатьИнтерфейсРолей("НастроитьИнтерфейсРолейПриСозданииФормы", ПользовательИБСуществует);
	НачальноеОписаниеПользователяИБ = НачальноеОписаниеПользователяИБ();
	ТребуетсяСинхронизацияССервисом = Объект.Ссылка.Пустая();

	// Зарезервировано для новых подсистем

	ОбщаяНастройкаФормы(Объект, Истина);

	Если БазоваяПодсистемаСервер.ЭтоАвтономноеРабочееМесто() Тогда
		Элементы.ГруппаШапка.ТолькоПросмотр						= Истина;
		Элементы.КонтактнаяИнформация.ТолькоПросмотр			= Истина;
		Элементы.СтраницаДополнительныеРеквизиты.ТолькоПросмотр	= Истина;
		Элементы.СтраницаКомментарий.ТолькоПросмотр				= Истина;
	КонецЕсли;

	// Зарезервировано для новых подсистем

	ОбновитьВидимостьРеквизитаПоказыватьВСпискеВыбора();

	Если Не ПользователиСерверПовтИсп.Настройки().ОбщиеНастройкиВхода Тогда
		Элементы.ГруппаИзменитьОграничение.Видимость = Ложь;
		Элементы.ПотребоватьСменуПароляПриВходе.Видимость = Ложь;
	Иначе
		Элементы.ПотребоватьСменуПароляПриВходе.РасширеннаяПодсказка.Заголовок = ПодсказкаПотребоватьСменуПароляПриВходе();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	#Если ВебКлиент Тогда
	Элементы.ПользовательИБПользовательОС.КнопкаВыбора = Ложь;
	#КонецЕсли

	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// Зарезервировано для новых подсистем

	Если ВРег(ИмяСобытия) = ВРег("Запись_НаборКонстант") И ВРег(Источник) = ВРег("ИспользоватьВнешнихПользователей") Тогда
		ПодключитьОбработчикОжидания("ПриИзмененияИспользованияВнешнихПользователей", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// Зарезервировано для новых подсистем

	ОбщаяНастройкаФормы(ТекущийОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ОчиститьСообщения();
	ЗаголовокВопросов = "Запись пользователя информационной базы";

	// Копирование прав пользователя.
	// Зарезервировано для новых подсистем

	Если ВходВПрограммуРазрешен Тогда
		Если ДействияВФорме.Роли = "Редактирование" И ПользовательИБРоли.Количество() = 0 Тогда
			Если НЕ ПараметрыЗаписи.Свойство("СПустымСпискомРолей") Тогда
				Отказ = Истина;
				ПоказатьВопрос(Новый ОписаниеОповещения("ПослеОтветаНаВопросОЗаписиСПустымСпискомРолей", ЭтотОбъект, ПараметрыЗаписи),
					"Пользователю информационной базы не установлено ни одной роли. Продолжить?",
					РежимДиалогаВопрос.ДаНет,
					,
					,
					ЗаголовокВопросов);
				Возврат;
			КонецЕсли;
		КонецЕсли;

		// Обработка записи первого администратора.
		Если НЕ ПараметрыЗаписи.Свойство("ССозданиемПервогоАдминистратора") Тогда
			Отказ = Истина;
			ПараметрыЗаписиПриПроверкеПервогоАдминистратора = ПараметрыЗаписи;
			ПодключитьОбработчикОжидания("ПроверитьПервогоАдминистратора", 0.1, Истина);

			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗначениеКопирования", ЗначениеКопирования);

	Если ТребуетсяЗаписьПользователяИБ(ЭтотОбъект) Тогда
		ОписаниеПользователяИБ = ОписаниеПользователяИБ();

		Если ЗначениеЗаполнено(Объект.ИдентификаторПользователяИБ) Тогда
			ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор", Объект.ИдентификаторПользователяИБ);
		КонецЕсли;
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");

		ТекущийОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);

		Если ПараметрыЗаписи.Свойство("ССозданиемПервогоАдминистратора") Тогда
			ТекущийОбъект.ДополнительныеСвойства.Вставить("СозданиеАдминистратора", "Первый пользователь информационной базы назначается администратором.");
		КонецЕсли;
	КонецЕсли;

	Если ДействияВФорме.СвойстваЭлемента <> "Редактирование" Тогда
		ЗаполнитьЗначенияСвойств(ТекущийОбъект, БазоваяПодсистемаСервер.ЗначенияРеквизитовОбъекта(ТекущийОбъект.Ссылка, "Наименование, ПометкаУдаления"));
	КонецЕсли;

	ТекущийОбъект.ДополнительныеСвойства.Вставить("ГруппаНовогоПользователя", ГруппаНовогоПользователя);

	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	УстановитьПривилегированныйРежим(Истина);
	ПользователиСервер.ЗаписатьСведенияОПользователе(ЭтотОбъект, ТекущийОбъект);
	УстановитьПривилегированныйРежим(Ложь);

	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если ТребуетсяЗаписьПользователяИБ(ЭтотОбъект) Тогда
		ПараметрыЗаписи.Вставить(ТекущийОбъект.ДополнительныеСвойства.ОписаниеПользователяИБ.РезультатДействия);
	КонецЕсли;

	ОбщаяНастройкаФормы(ТекущийОбъект, , ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_Пользователи", Новый Структура, Объект.Ссылка);

	Если ПараметрыЗаписи.Свойство("ДобавленПользовательИБ") Тогда
		Оповестить("ДобавленПользовательИБ", ПараметрыЗаписи.ДобавленПользовательИБ, ЭтотОбъект);
	ИначеЕсли ПараметрыЗаписи.Свойство("ИзмененПользовательИБ") Тогда
		Оповестить("ИзмененПользовательИБ", ПараметрыЗаписи.ИзмененПользовательИБ, ЭтотОбъект);
	ИначеЕсли ПараметрыЗаписи.Свойство("УдаленПользовательИБ") Тогда
		Оповестить("УдаленПользовательИБ", ПараметрыЗаписи.УдаленПользовательИБ, ЭтотОбъект);
	ИначеЕсли ПараметрыЗаписи.Свойство("ОчищеноСопоставлениеСНесуществующимПользователемИБ") Тогда
		Оповестить("ОчищеноСопоставлениеСНесуществующимПользователемИБ", ПараметрыЗаписи.ОчищеноСопоставлениеСНесуществующимПользователемИБ, ЭтотОбъект);
	КонецЕсли;

	Если ЗначениеЗаполнено(ГруппаНовогоПользователя) Тогда
		ОповеститьОбИзменении(ГруппаНовогоПользователя);
		Оповестить("Запись_ГруппыПользователей", Новый Структура, ГруппаНовогоПользователя);
		ГруппаНовогоПользователя = Неопределено;
	КонецЕсли;

	Если ПараметрыЗаписи.Свойство("ЗаписатьИЗакрыть") Тогда
		ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если ТребуетсяЗаписьПользователяИБ(ЭтотОбъект) Тогда
		ОписаниеПользователяИБ = ОписаниеПользователяИБ();
		ОписаниеПользователяИБ.Вставить("ИдентификаторПользователяИБ", Объект.ИдентификаторПользователяИБ);
		ПользователиСервер.ПроверитьОписаниеПользователяИБ(ОписаниеПользователяИБ, Отказ);
	КонецЕсли;

	Если ВходВПрограммуРазрешен
	   И ЗначениеЗаполнено(СрокДействия)
	   И СрокДействия <= НачалоДня(ТекущаяДатаСеанса()) Тогда

		БазоваяПодсистемаКлиентСервер.СообщитьПользователю("Ограничение должно быть до завтра или более.",, "ВходВПрограммуРазрешен",, Отказ);
	КонецЕсли;

	// Проверка наличия ролей в метаданных.
	Если Не Элементы.Роли.ТолькоПросмотр Тогда
		Ошибки			= Неопределено;
		ЭлементыДерева	= Роли.ПолучитьЭлементы();
		Для Каждого Строка Из ЭлементыДерева Цикл
			Если Не Строка.Пометка Тогда
				Продолжить;
			КонецЕсли;
			Если Строка.ЭтоНесуществующаяРоль Тогда
				БазоваяПодсистемаКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
					"Роли[%1].РолиСиноним",
					СтрШаблон("Роль ""%1"" не найдена в метаданных.", Строка.Синоним),
					"Роли",
					ЭлементыДерева.Индекс(Строка),
					СтрШаблон("Роль ""%1"" в строке %%1 не найдена в метаданных.", Строка.Синоним));
			КонецЕсли;
			Если Строка.ЭтоНедоступнаяРоль Тогда
				БазоваяПодсистемаКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
					"Роли[%1].РолиСиноним",
					СтрШаблон("Роль ""%1"" недоступна для пользователей.", Строка.Синоним),
					"Роли",
					ЭлементыДерева.Индекс(Строка),
					СтрШаблон("Роль ""%1"" в строке %%1 недоступна для пользователей.", Строка.Синоним));
			КонецЕсли;
		КонецЦикла;
		БазоваяПодсистемаКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	КонецЕсли;

	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ОбработатьИнтерфейсРолей("НастроитьИнтерфейсРолейПриЗагрузкеНастроек", Настройки);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗаполнитьИзПользователяИБ(Команда)
	ЗаполнитьПоляПоПользователюИБНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	ОбновитьИмяДляВхода(ЭтотОбъект, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НедействителенПриИзменении(Элемент)
	Если Объект.Недействителен Тогда
		ВходВПрограммуРазрешен = Ложь;
	Иначе
		ВходВПрограммуРазрешен = ВходВПрограммуРазрешенЗначениеПрямогоИзменения И (ПользовательИБАутентификацияOpenID Или ПользовательИБАутентификацияСтандартная Или ПользовательИБАутентификацияОС);
	КонецЕсли;

	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВходВПрограммуРазрешенПриИзменении(Элемент)
	Если Объект.ПометкаУдаления И ВходВПрограммуРазрешен Тогда
		ВходВПрограммуРазрешен = Ложь;
		ПоказатьПредупреждение(, "Чтобы разрешить вход в программу, требуется снять
			           |пометку на удаление с этого пользователя.");
		Возврат;
	КонецЕсли;

	ОбновитьИмяДляВхода(ЭтотОбъект);

	Если ВходВПрограммуРазрешен И НЕ ПользовательИБАутентификацияOpenID И НЕ ПользовательИБАутентификацияСтандартная И НЕ ПользовательИБАутентификацияОС Тогда
		ПользовательИБАутентификацияСтандартная = Истина;
	КонецЕсли;

	УстановитьДоступностьСвойств(ЭтотОбъект);

	Если Не УровеньДоступа.ИзменениеРазрешенияНаВход И Не ВходВПрограммуРазрешен Тогда
		ПоказатьПредупреждение(, "После записи вход в программу сможет разрешить только администратор.");
	КонецЕсли;

	ВходВПрограммуРазрешенЗначениеПрямогоИзменения = ВходВПрограммуРазрешен;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОграничениеНаВходВПрограмму(Команда)
	ОткрытьФорму("Справочник.Пользователи.Форма.ОграничениеНаВходВПрограмму",, ЭтотОбъект,,,, Новый ОписаниеОповещения("ИзменитьОграничениеНаВходВПрограммуЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБИмяПриИзменении(Элемент)
	ПользовательИБИмя							= СокрЛП(ПользовательИБИмя);
	ПользовательИБИмяЗначениеПрямогоИзменения	= ПользовательИБИмя;

	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБАутентификацияСтандартнаяПриИзменении(Элемент)
	АутентификацияПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ПотребоватьСменуПароляПриВходеПриИзменении(Элемент)
	Если ПотребоватьСменуПароляПриВходе Тогда
		ПользовательИБЗапрещеноИзменятьПароль = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБПоказыватьВСпискеВыбораПриИзменении(Элемент)
	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБЗапрещеноИзменятьПарольПриИзменении(Элемент)
	Если ПользовательИБЗапрещеноИзменятьПароль Тогда
		ПотребоватьСменуПароляПриВходе = Ложь;
	КонецЕсли;

	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБАутентификацияOpenIDПриИзменении(Элемент)
	АутентификацияПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБАутентификацияОСПриИзменении(Элемент)
	АутентификацияПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБПользовательОСПриИзменении(Элемент)
	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБПользовательОСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	#Если НЕ ВебКлиент Тогда
		ОткрытьФорму("Справочник.Пользователи.Форма.ВыборПользователяОперационнойСистемы", , Элемент);
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБЯзыкПриИзменении(Элемент)
	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБРежимЗапускаПриИзменении(Элемент)
	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБРежимЗапускаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	БазоваяПодсистемаКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаКлиенте
Процедура ПотребоватьСменуПароляПриВходеРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ОткрытьФорму("ОбщаяФорма.НастройкиВходаПользователей", , ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРоли

&НаКлиенте
Процедура РолиПометкаПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.Роли.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если СтрокаТаблицы.Пометка И СтрокаТаблицы.Имя = "ИнтерактивноеОткрытиеВнешнихОтчетовИОбработок" Тогда
		Оповещение		= Новый ОписаниеОповещения("РолиПометкаПриИзмененииПослеПодтверждения", ЭтотОбъект);
		ПараметрыФормы	= Новый Структура("Ключ", "ПередВыборомРоли");
		ОткрытьФорму("ОбщаяФорма.ПредупреждениеБезопасности", ПараметрыФормы, , , , , Оповещение);
	Иначе
		ОбработатьИнтерфейсРолей("ОбновитьСоставРолей");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РолиПометкаПриИзмененииПослеПодтверждения(Ответ, ПараметрыВыполнения) Экспорт
	СтрокаТаблицы = Элементы.Роли.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Ответ = "Продолжить" Тогда
		ОбработатьИнтерфейсРолей("ОбновитьСоставРолей");
	Иначе
		СтрокаТаблицы.Пометка = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Записать(Новый Структура("ЗаписатьИЗакрыть"));
КонецПроцедуры

&НаКлиенте
Процедура СменитьПароль(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВернутьПарольБезУстановки",	Истина);
	ДополнительныеПараметры.Вставить("СтарыйПароль",				ПользовательИБСтарыйПароль);

	ПользователиКлиент.ОткрытьФормуСменыПароля(Объект.Ссылка, Новый ОписаниеОповещения("СменитьПарольПослеПолученияПароля", ЭтотОбъект), ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТолькоВыбранныеРоли(Команда)
	ОбработатьИнтерфейсРолей("ТолькоВыбранныеРоли");
	ПользователиКлиент.РазвернутьПодсистемыРолей(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаРолейПоПодсистемам(Команда)
	ОбработатьИнтерфейсРолей("ГруппировкаПоПодсистемам");
	ПользователиКлиент.РазвернутьПодсистемыРолей(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРоли(Команда)
	ОбработатьИнтерфейсРолей("ОбновитьСоставРолей", "ВключитьВсе");

	ПользователиКлиент.РазвернутьПодсистемыРолей(ЭтотОбъект, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьРоли(Команда)
	ОбработатьИнтерфейсРолей("ОбновитьСоставРолей", "ИсключитьВсе");
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьУсловноеОформление()
	УсловноеОформление.Элементы.Очистить();

	Элемент				= УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента		= Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле	= Новый ПолеКомпоновкиДанных(Элементы.РолиПометка.Имя);

	ГруппаОтбора1			= Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента					= ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Роли.Имя");
	ОтборЭлемента.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение	= "ПолныеПрава";

	ОтборЭлемента					= ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ЗапретИзмененияАдминистративногоДоступа");
	ОтборЭлемента.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение	= Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

	Элемент				= УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента		= Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле	= Новый ПолеКомпоновкиДанных(Элементы.РолиПометка.Имя);

	ПолеЭлемента		= Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле	= Новый ПолеКомпоновкиДанных(Элементы.РолиСиноним.Имя);

	ГруппаОтбора1			= Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы	= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента					= ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Роли.Имя");
	ОтборЭлемента.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение	= "ПолныеПрава";

	ОтборЭлемента					= ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ЗапретИзмененияАдминистративногоДоступа");
	ОтборЭлемента.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение	= Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененияИспользованияВнешнихПользователей()
	ОбновитьВидимостьРеквизитаПоказыватьВСпискеВыбора();
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьРеквизитаПоказыватьВСпискеВыбора()
	Элементы.ПользовательИБПоказыватьВСпискеВыбора.Видимость = Не ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей");
КонецПроцедуры

&НаСервере
Процедура ОбщаяНастройкаФормы(ТекущийОбъект, ПриСозданииНаСервере = Ложь, ПараметрыЗаписи = Неопределено)
	Если НачальноеОписаниеПользователяИБ = Неопределено Тогда
		Возврат; // Вызов ПриЧтенииНаСервере до вызова ПриСозданииНаСервере.
	КонецЕсли;

	Если Не ПриСозданииНаСервере Тогда
		ПрочитатьПользователяИБ();
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	ПользователиСервер.ПрочитатьСведенияОПользователе(ЭтотОбъект);
	УстановитьПривилегированныйРежим(Ложь);

	УровеньДоступа = ПользователиСервер.УровеньДоступаКСвойствамПользователя(ТекущийОбъект);

	ОпределитьДействияВФорме();

	ОпределитьНесоответствияПользователяСПользователемИБ(ПараметрыЗаписи);

	ОбработатьИнтерфейсРолей("УстановитьТолькоПросмотрРолей", ПользователиСерверПовтИсп.Настройки().РедактированиеРолей <> Истина Или ДействияВФорме.Роли <> "Редактирование" Или Не УровеньДоступа.НастройкиДляВхода);

	// Настройка возможности просмотра.
	Элементы.КонтактнаяИнформация.Видимость						= ЗначениеЗаполнено(ДействияВФорме.КонтактнаяИнформация);
	Элементы.СвойстваПользователяИБ.Видимость					= ЗначениеЗаполнено(ДействияВФорме.СвойстваПользователяИБ);

	ВыводитьСписокРолей											= ЗначениеЗаполнено(ДействияВФорме.Роли);
	Элементы.ОтображениеРолей.Видимость							= ВыводитьСписокРолей;
	Элементы.СвойстваАутентификации1СПредприятия.Отображение	= ?(ВыводитьСписокРолей, ОтображениеОбычнойГруппы.Нет, ОтображениеОбычнойГруппы.ОбычноеВыделение);
	Элементы.РекомендуетсяПроверитьНастройкиДляВхода.Видимость	= УровеньДоступа.ИзменениеРазрешенияНаВход И ТекущийОбъект.Подготовлен И Не ПриЧтенииВходВПрограммуРазрешен;

	// Настройка возможности изменения.
	Если ТекущийОбъект.Служебный Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	Элементы.ГруппаСлужебныйПользователь.Видимость = ТекущийОбъект.Служебный;

	ТолькоПросмотр = ТолькоПросмотр
		ИЛИ ДействияВФорме.Роли                   <> "Редактирование"
		  И ДействияВФорме.СвойстваЭлемента       <> "Редактирование"
		  И ДействияВФорме.КонтактнаяИнформация   <> "Редактирование"
		  И ДействияВФорме.СвойстваПользователяИБ <> "Редактирование";

	ПользователиКлиентСервер.УстановитьДоступностьКнопкиЗаписатьИЗакрыть(ЭтотОбъект);

	Элементы.Наименование.ТолькоПросмотр = Не (ДействияВФорме.СвойстваЭлемента = "Редактирование" И УровеньДоступа.УправлениеСписком);

	Элементы.Недействителен.ТолькоПросмотр = Элементы.Наименование.ТолькоПросмотр;
	Элементы.ФизическоеЛицо.ТолькоПросмотр = Элементы.Наименование.ТолькоПросмотр;
	Элементы.Подразделение.ТолькоПросмотр  = Элементы.Наименование.ТолькоПросмотр;

	Элементы.ОсновныеСвойства.ТолькоПросмотр						= Не (ДействияВФорме.СвойстваПользователяИБ = "Редактирование" И (УровеньДоступа.УправлениеСписком Или УровеньДоступа.ИзменениеТекущего));
	Элементы.ПользовательИБИмя1.ТолькоПросмотр                      = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБИмя2.ТолькоПросмотр                      = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБАутентификацияСтандартная.ТолькоПросмотр = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБАутентификацияOpenID.ТолькоПросмотр      = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБАутентификацияОС.ТолькоПросмотр          = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБПользовательОС.ТолькоПросмотр            = Не УровеньДоступа.НастройкиДляВхода;

	Элементы.ПользовательИБПоказыватьВСпискеВыбора.ТолькоПросмотр	= Не УровеньДоступа.УправлениеСписком;
	Элементы.ПотребоватьСменуПароляПриВходе.ТолькоПросмотр			= Не УровеньДоступа.УправлениеСписком;
	Элементы.ПользовательИБЗапрещеноИзменятьПароль.ТолькоПросмотр	= Не УровеньДоступа.УправлениеСписком;
	Элементы.ПользовательИБРежимЗапуска.ТолькоПросмотр				= Не УровеньДоступа.УправлениеСписком;

	Элементы.Комментарий.ТолькоПросмотр								= Не (ДействияВФорме.СвойстваЭлемента = "Редактирование" И УровеньДоступа.УправлениеСписком);

	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИмяДляВхода(Форма, ПриИзмененииНаименования = Ложь)
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;

	Если Форма.ПользовательИБСуществует Тогда
		Возврат;
	КонецЕсли;

	КраткоеИмя = ПользователиКлиентСервер.ПолучитьКраткоеИмяПользователяИБ(Форма.Объект.Наименование);

	Если Элементы.ИмяПереключениеОтметкиНезаполненного.ТекущаяСтраница = Элементы.ИмяБезОтметкиНезаполненного Тогда
		Если Не ЗначениеЗаполнено(Форма.ПользовательИБИмяЗначениеПрямогоИзменения) И Форма.ПользовательИБИмя = КраткоеИмя Тогда
			Форма.ПользовательИБИмя = "";
		КонецЕсли;
	Иначе
		Если ПриИзмененииНаименования Или Не ЗначениеЗаполнено(Форма.ПользовательИБИмя) Тогда
			Форма.ПользовательИБИмя = КраткоеИмя;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АутентификацияПриИзменении()
	УстановитьДоступностьСвойств(ЭтотОбъект);

	Если НЕ ПользовательИБАутентификацияOpenID И НЕ ПользовательИБАутентификацияСтандартная И НЕ ПользовательИБАутентификацияОС Тогда
		ВходВПрограммуРазрешен = Ложь;
	ИначеЕсли Не ВходВПрограммуРазрешен Тогда
		ВходВПрограммуРазрешен = ВходВПрограммуРазрешенЗначениеПрямогоИзменения;
	КонецЕсли;
КонецПроцедуры

// Продолжение процедуры СменитьПароль.
&НаКлиенте
Процедура СменитьПарольПослеПолученияПароля(Результат, Контекст) Экспорт
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;

	ПользовательИБПароль       = Результат.НовыйПароль;
	ПользовательИБСтарыйПароль = Результат.СтарыйПароль;

	Если Результат.СтарыйПароль <> Неопределено Тогда
		ПарольПользователяСервиса = Результат.СтарыйПароль;
	КонецЕсли;

	ПользователиКлиентСервер.УстановитьНаличиеПароля(ЭтотОбъект, ЗначениеЗаполнено(ПользовательИБПароль));
	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОпределитьДействияВФорме()
	ДействияВФорме = Новый Структура;

	// "", "Просмотр", "Редактирование".
	ДействияВФорме.Вставить("Роли", "");

	// "", "Просмотр", "Редактирование".
	ДействияВФорме.Вставить("КонтактнаяИнформация", "Просмотр");

	// "", "ПросмотрВсех", "Редактирование".
	ДействияВФорме.Вставить("СвойстваПользователяИБ", "");

	// "", "Просмотр", "Редактирование".
	ДействияВФорме.Вставить("СвойстваЭлемента", "Просмотр");

	Если Не УровеньДоступа.АдминистраторСистемы И УровеньДоступа.ПолныеПрава И ПользователиСервер.ЭтоПолноправныйПользователь(Объект.Ссылка, Истина) Тогда
		// Администратор системы доступен только на просмотр.
		ДействияВФорме.Роли                   = "Просмотр";
		ДействияВФорме.СвойстваПользователяИБ = "Просмотр";
	ИначеЕсли УровеньДоступа.АдминистраторСистемы ИЛИ УровеньДоступа.ПолныеПрава Тогда
		ДействияВФорме.Роли                   = "Редактирование";
		ДействияВФорме.КонтактнаяИнформация   = "Редактирование";
		ДействияВФорме.СвойстваПользователяИБ = "Редактирование";
		ДействияВФорме.СвойстваЭлемента       = "Редактирование";
	Иначе
		Если УровеньДоступа.ИзменениеТекущего Тогда
			ДействияВФорме.СвойстваПользователяИБ = "Редактирование";
			ДействияВФорме.КонтактнаяИнформация   = "Редактирование";
		КонецЕсли;

		Если УровеньДоступа.УправлениеСписком Тогда
			// Ответственный за список пользователей и групп пользователей.
			// (Исполнитель распоряжений о приеме на работу и переводу,
			//  переназначению, созданию отделов, подразделений и рабочих групп).
			ДействияВФорме.СвойстваПользователяИБ = "Редактирование";
			ДействияВФорме.КонтактнаяИнформация   = "Редактирование";
			ДействияВФорме.СвойстваЭлемента       = "Редактирование";

			Если УровеньДоступа.НастройкиДляВхода Тогда
				ДействияВФорме.Роли = "Редактирование";
			КонецЕсли;
			Если ПользователиСервер.ЭтоПолноправныйПользователь(Объект.Ссылка) Тогда
				ДействияВФорме.Роли = "Просмотр";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ИнтеграцияПодсистемСервер.ПриОпределенииДействийВФорме(Объект.Ссылка, ДействияВФорме);

	// Проверка имен действий в форме.
	Если СтрНайти(", Просмотр, Редактирование,", ", " + ДействияВФорме.Роли + ",") = 0 Тогда
		ДействияВФорме.Роли = "";
	ИначеЕсли ДействияВФорме.Роли = "Редактирование" И ПользователиСерверПовтИсп.Настройки().РедактированиеРолей <> Истина Тогда
		ДействияВФорме.Роли = "Просмотр";
	КонецЕсли;

	Если СтрНайти(", Просмотр, Редактирование,", ", " + ДействияВФорме.КонтактнаяИнформация + ",") = 0 Тогда
		ДействияВФорме.КонтактнаяИнформация = "";
	КонецЕсли;

	Если СтрНайти(", Просмотр, ПросмотрВсех, Редактирование, РедактированиеСвоих, РедактированиеВсех,", ", " + ДействияВФорме.СвойстваПользователяИБ + ",") = 0 Тогда
		ДействияВФорме.СвойстваПользователяИБ = "";
	Иначе // Поддержка обратной совместимости.
		Если СтрНайти(ДействияВФорме.СвойстваПользователяИБ, "Просмотр") Тогда
			ДействияВФорме.СвойстваПользователяИБ = "Просмотр";
		ИначеЕсли СтрНайти(ДействияВФорме.СвойстваПользователяИБ, "Редактирование") Тогда
			ДействияВФорме.СвойстваПользователяИБ = "Редактирование";
		КонецЕсли;
	КонецЕсли;

	Если СтрНайти(", Просмотр, Редактирование,", ", " + ДействияВФорме.СвойстваЭлемента + ",") = 0 Тогда
		ДействияВФорме.СвойстваЭлемента = "";
	КонецЕсли;

	Если Объект.Служебный Тогда
		Если ДействияВФорме.Роли = "Редактирование" Тогда
			ДействияВФорме.Роли = "Просмотр";
		КонецЕсли;

		Если ДействияВФорме.КонтактнаяИнформация = "Редактирование" Тогда
			ДействияВФорме.КонтактнаяИнформация = "Просмотр";
		КонецЕсли;

		Если ДействияВФорме.СвойстваПользователяИБ = "Редактирование" Тогда
			ДействияВФорме.СвойстваПользователяИБ = "Просмотр";
		КонецЕсли;

		Если ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
			ДействияВФорме.СвойстваЭлемента	= "Просмотр";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОписаниеПользователяИБ(ДляПроверкиПервогоАдминистратора = Ложь)
	Если УровеньДоступа.УправлениеСписком И ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
		ПользовательИБПолноеИмя = Объект.Наименование;
	КонецЕсли;

	Если УровеньДоступа.АдминистраторСистемы Или УровеньДоступа.ПолныеПрава Тогда
		Результат = ПользователиСервер.НовоеОписаниеПользователяИБ();
		ПользователиСервер.СкопироватьСвойстваПользователяИБ(Результат, ЭтотОбъект, ,
			"УникальныйИдентификатор,
			|Роли",
			"ПользовательИБ");

		Результат.Вставить("ВходВПрограммуРазрешен", ВходВПрограммуРазрешен);
	Иначе
		Результат = Новый Структура;

		Если УровеньДоступа.ИзменениеТекущего Тогда
			Результат.Вставить("Пароль", ПользовательИБПароль);
			Результат.Вставить("Язык",   ПользовательИБЯзык);
		КонецЕсли;

		Если УровеньДоступа.УправлениеСписком Тогда
			Результат.Вставить("ВходВПрограммуРазрешен",  ВходВПрограммуРазрешен);
			Результат.Вставить("ПоказыватьВСпискеВыбора", ПользовательИБПоказыватьВСпискеВыбора И Не ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей"));
			Результат.Вставить("ЗапрещеноИзменятьПароль", ПользовательИБЗапрещеноИзменятьПароль);
			Результат.Вставить("Язык",                    ПользовательИБЯзык);
			Результат.Вставить("РежимЗапуска",            ПользовательИБРежимЗапуска);

			Если ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
				Результат.Вставить("ПолноеИмя", ПользовательИБПолноеИмя);
			КонецЕсли;
		КонецЕсли;

		Если УровеньДоступа.НастройкиДляВхода Тогда
			Результат.Вставить("АутентификацияСтандартная", ПользовательИБАутентификацияСтандартная);
			Результат.Вставить("Имя",                       ПользовательИБИмя);
			Результат.Вставить("Пароль",                    ПользовательИБПароль);
			Результат.Вставить("АутентификацияOpenID",      ПользовательИБАутентификацияOpenID);
			Результат.Вставить("АутентификацияОС",          ПользовательИБАутентификацияОС);
			Результат.Вставить("ПользовательОС",            ПользовательИБПользовательОС);
		КонецЕсли;
	КонецЕсли;

	Если Не УровеньДоступа.НастройкиДляВхода Тогда
		Возврат Результат;
	КонецЕсли;

	Если ПользователиСерверПовтИсп.Настройки().РедактированиеРолей Тогда
		ТекущиеРоли = ПользовательИБРоли.Выгрузить(, "Роль").ВыгрузитьКолонку("Роль");
		Результат.Вставить("Роли", ТекущиеРоли);
	КонецЕсли;

	Если ДляПроверкиПервогоАдминистратора Тогда
		Возврат Результат;
	КонецЕсли;

	// Добавление ролей требуемых при создании первого администратора.
	Если ПользователиСервер.ТребуетсяСоздатьПервогоАдминистратора(Результат) Тогда
		Если Результат.Свойство("Роли") И Результат.Роли <> Неопределено Тогда
			РолиАдминистратора = Результат.Роли;
		Иначе
			РолиАдминистратора = Новый Массив;
		КонецЕсли;

		Если РолиАдминистратора.Найти("ПолныеПрава") = Неопределено Тогда
			РолиАдминистратора.Добавить("ПолныеПрава");
		КонецЕсли;

		Если РолиАдминистратора.Найти("АдминистраторСистемы") = Неопределено Тогда
			РолиАдминистратора.Добавить("АдминистраторСистемы");
		КонецЕсли;
		Результат.Вставить("Роли", РолиАдминистратора);
	КонецЕсли;

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПослеОтветаНаВопросОЗаписиСПустымСпискомРолей(Ответ, ПараметрыЗаписи) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи.Вставить("СПустымСпискомРолей");
		Записать(ПараметрыЗаписи);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПервогоАдминистратора()
	ПараметрыЗаписи									= ПараметрыЗаписиПриПроверкеПервогоАдминистратора;
	ПараметрыЗаписиПриПроверкеПервогоАдминистратора = Неопределено;

	ТекстВопроса = "";
	Если Не ТребуетсяСоздатьПервогоАдминистратора(ТекстВопроса) Тогда
		ПараметрыЗаписи.Вставить("ССозданиемПервогоАдминистратора");
		Попытка
			Записать(ПараметрыЗаписи);
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		Возврат;
	КонецЕсли;

	ЗаголовокВопроса = "Запись пользователя информационной базы";
	ПоказатьВопрос(Новый ОписаниеОповещения("ПослеПодтвержденияСозданияПервогоАдминистратора", ЭтотОбъект, ПараметрыЗаписи), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопроса);
КонецПроцедуры

&НаСервере
Функция ТребуетсяСоздатьПервогоАдминистратора(ТекстВопроса = Неопределено)
	Возврат ПользователиСервер.ТребуетсяСоздатьПервогоАдминистратора(ОписаниеПользователяИБ(Истина), ТекстВопроса);
КонецФункции

&НаКлиенте
Процедура ПослеПодтвержденияСозданияПервогоАдминистратора(Ответ, ПараметрыЗаписи) Экспорт
	Если Ответ <> КодВозвратаДиалога.Нет Тогда
		ПараметрыЗаписи.Вставить("ССозданиемПервогоАдминистратора");
		Записать(ПараметрыЗаписи);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	Закрыть();
КонецПроцедуры

&НаСервере
Функция ПодсказкаПотребоватьСменуПароляПриВходе()
	ЭтоПолноправныйПользователь = ПользователиСервер.ЭтоПолноправныйПользователь(, Ложь);

	Подсказка = Новый Массив;
	Подсказка.Добавить("Требования к длине и сложности пароля задаются отдельно.");
	Подсказка.Добавить(Символы.ПС);
	Подсказка.Добавить("См.");
	Подсказка.Добавить(" ");

	Ссылка = "Настройки входа пользователей";
	Если ЭтоПолноправныйПользователь Тогда
		Ссылка = Новый ФорматированнаяСтрока(Ссылка,,,, "НастройкиВходаПользователей");
	КонецЕсли;
	Подсказка.Добавить(Ссылка);

	Если ЭтоПолноправныйПользователь И Метаданные.Подсистемы.Найти("Администрирование") <> Неопределено Тогда
		Подсказка.Добавить(" ");
		Подсказка.Добавить("в разделе Администрирование,
			|пункт Настройки прав и пользователей.");
	Иначе
		Подсказка.Добавить(".");
	КонецЕсли;

	Возврат Новый ФорматированнаяСтрока(Подсказка);
КонецФункции

&НаСервере
Функция НачальноеОписаниеПользователяИБ()
	УстановитьПривилегированныйРежим(Истина);

	Если НачальноеОписаниеПользователяИБ <> Неопределено Тогда
		НачальноеОписаниеПользователяИБ.Роли = Новый Массив;

		Возврат НачальноеОписаниеПользователяИБ;
	КонецЕсли;

	ОписаниеПользователяИБ								= ПользователиСервер.НовоеОписаниеПользователяИБ();
	ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора		= НЕ Константы.ИспользоватьВнешнихПользователей.Получить();
	ОписаниеПользователяИБ.АутентификацияСтандартная	= Истина;
	ОписаниеПользователяИБ.Роли							= Новый Массив;

	Возврат ОписаниеПользователяИБ;
КонецФункции

&НаСервере
Процедура ПрочитатьПользователяИБ(ПриКопированииЭлемента = Ложь)
	УстановитьПривилегированныйРежим(Истина);

	ПрочитанныеСвойства      = Неопределено;
	ОписаниеПользователяИБ   = НачальноеОписаниеПользователяИБ();
	ПользовательИБСуществует = Ложь;
	ПользовательИБОсновной   = Ложь;
	ВходВПрограммуРазрешен   = Ложь;
	ВходВПрограммуРазрешенЗначениеПрямогоИзменения = Ложь;

	Если ПриКопированииЭлемента Тогда
		ПрочитанныеСвойства = ПользователиСервер.СвойстваПользователяИБ(Параметры.ЗначениеКопирования.ИдентификаторПользователяИБ);
		Если ПрочитанныеСвойства <> Неопределено Тогда
			// Сопоставление пользователя ИБ с пользователем в справочнике.
			Если ПользователиСервер.ВходВПрограммуРазрешен(ПрочитанныеСвойства) Тогда
				ВходВПрограммуРазрешен							= Истина;
				ВходВПрограммуРазрешенЗначениеПрямогоИзменения	= Истина;
			КонецЕсли;

			// Копирование свойств и ролей пользователяИБ.
			ЗаполнитьЗначенияСвойств(ОписаниеПользователяИБ, ПрочитанныеСвойства,
				"ЗапрещеноИзменятьПароль,
				|ПоказыватьВСпискеВыбора,
				|ОсновнойИнтерфейс,
				|РежимЗапуска" + ?(Не Элементы.ПользовательИБЯзык.Видимость, "", ",
				|Язык") + ?(ПользователиСерверПовтИсп.Настройки().РедактированиеРолей <> Истина, "", ",
				|Роли"));
		КонецЕсли;
		Объект.ИдентификаторПользователяИБ = Неопределено;
		ПользователиКлиентСервер.УстановитьНаличиеПароля(ЭтотОбъект, Ложь);
	Иначе
		ПрочитанныеСвойства = ПользователиСервер.СвойстваПользователяИБ(Объект.ИдентификаторПользователяИБ);
		Если ПрочитанныеСвойства <> Неопределено Тогда
			ПользовательИБСуществует	= Истина;
			ПользовательИБОсновной		= Истина;
		ИначеЕсли Параметры.Свойство("ИдентификаторПользователяИБ") И ЗначениеЗаполнено(Параметры.ИдентификаторПользователяИБ) Тогда
			Объект.ИдентификаторПользователяИБ	= Параметры.ИдентификаторПользователяИБ;
			ПрочитанныеСвойства					= ПользователиСервер.СвойстваПользователяИБ(Объект.ИдентификаторПользователяИБ);
			Если ПрочитанныеСвойства <> Неопределено Тогда
				ПользовательИБСуществует = Истина;
				Если Объект.Наименование <> ПрочитанныеСвойства.ПолноеИмя Тогда
					Объект.Наименование	= ПрочитанныеСвойства.ПолноеИмя;
					Модифицированность	= Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ПользовательИБСуществует Тогда
			Если ПользователиСервер.ВходВПрограммуРазрешен(ПрочитанныеСвойства) Тогда
				ВходВПрограммуРазрешен							= Истина;
				ВходВПрограммуРазрешенЗначениеПрямогоИзменения	= Истина;
			КонецЕсли;

			ЗаполнитьЗначенияСвойств(ОписаниеПользователяИБ, ПрочитанныеСвойства,
				"Имя,
				|ПолноеИмя,
				|АутентификацияOpenID,
				|АутентификацияСтандартная,
				|ПоказыватьВСпискеВыбора,
				|ЗапрещеноИзменятьПароль,
				|АутентификацияОС,
				|ПользовательОС,
				|ОсновнойИнтерфейс,
				|РежимЗапуска" + ?(Не Элементы.ПользовательИБЯзык.Видимость, "", ",
				|Язык") + ?(ПользователиСерверПовтИсп.Настройки().РедактированиеРолей <> Истина, "", ",
				|Роли"));
		КонецЕсли;

		Если ПрочитанныеСвойства = Неопределено Тогда
			ПользователиКлиентСервер.УстановитьНаличиеПароля(ЭтотОбъект, Ложь);
		Иначе
			ПользователиКлиентСервер.УстановитьНаличиеПароля(ЭтотОбъект, ПрочитанныеСвойства.ПарольУстановлен);
		КонецЕсли;
	КонецЕсли;

	ПользователиСервер.СкопироватьСвойстваПользователяИБ(ЭтотОбъект, ОписаниеПользователяИБ, ,
		"УникальныйИдентификатор,
		|Роли" + ?(ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей"), ",
		|ПоказыватьВСпискеВыбора", ""),
		"ПользовательИБ");

	Если ПользовательИБОсновной И Не ВходВПрограммуРазрешен Тогда
		ХранимыеСвойства						= ПользователиСервер.ХранимыеСвойстваПользователяИБ(Объект.Ссылка);
		ПользовательИБАутентификацияOpenID      = ХранимыеСвойства.АутентификацияOpenID;
		ПользовательИБАутентификацияСтандартная = ХранимыеСвойства.АутентификацияСтандартная;
		ПользовательИБАутентификацияОС          = ХранимыеСвойства.АутентификацияОС;
	КонецЕсли;

	ОбработатьИнтерфейсРолей("ЗаполнитьРоли", ОписаниеПользователяИБ.Роли);

	ПриЧтенииВходВПрограммуРазрешен = ВходВПрограммуРазрешен;
КонецПроцедуры

&НаСервере
Процедура ОпределитьНесоответствияПользователяСПользователемИБ(ПараметрыЗаписи = Неопределено)
	// Проверка соответствия свойства ПолноеИмя пользователяИБ и
	// реквизита Наименование пользователя.

	ПоказатьНесоответствие				= Истина;
	ПоказатьКомандыУстраненияРазличий	= Ложь;

	Если НЕ ПользовательИБСуществует Тогда
		ПоказатьНесоответствие = Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Наименование		= ПользовательИБПолноеИмя;
		ПоказатьНесоответствие	= Ложь;
	ИначеЕсли УровеньДоступа.УправлениеСписком Тогда
		УточнениеСвойств = Новый Массив;

		Если ПользовательИБПолноеИмя <> Объект.Наименование Тогда
			ПоказатьКомандыУстраненияРазличий = ПоказатьКомандыУстраненияРазличий Или ДействияВФорме.СвойстваЭлемента = "Редактирование";

			УточнениеСвойств.Вставить(0, СтрШаблон("Полное имя ""%1""", ПользовательИБПолноеИмя));
		КонецЕсли;

		Если УточнениеСвойств.Количество() > 0 Тогда
			СтрокаУточненияСвойств	= "";
			ТекущаяСтрока			= "";
			Для каждого УточнениеСвойства Из УточнениеСвойств Цикл
				Если СтрДлина(ТекущаяСтрока + УточнениеСвойства) > 90 Тогда
					СтрокаУточненияСвойств	= СтрокаУточненияСвойств + СокрП(ТекущаяСтрока) + ", " + Символы.ПС;
					ТекущаяСтрока			= "";
				КонецЕсли;
				ТекущаяСтрока = ТекущаяСтрока + ?(ЗначениеЗаполнено(ТекущаяСтрока), ", ", "") + УточнениеСвойства;
			КонецЦикла;
			Если ЗначениеЗаполнено(ТекущаяСтрока) Тогда
				СтрокаУточненияСвойств = СтрокаУточненияСвойств + ТекущаяСтрока;
			КонецЕсли;
			Если ПоказатьКомандыУстраненияРазличий Тогда
				Рекомендация = Символы.ПС + "Нажмите ""Записать"", чтобы устранить различия и не выводить это предупреждение.";
			ИначеЕсли Не ПользователиСервер.ЭтоПолноправныйПользователь() Тогда
				Рекомендация = Символы.ПС + "Обратитесь к администратору, чтобы устранить различия.";
			Иначе
				Рекомендация = "";
			КонецЕсли;
			Элементы.СвойстваПояснениеНесоответствия.Заголовок = СтрШаблон("Следующие свойства пользователя информационной базы отличаются от указанных в этой форме:
				           |%1.",
				СтрокаУточненияСвойств) + Рекомендация;
		Иначе
			ПоказатьНесоответствие = Ложь;
		КонецЕсли;
	Иначе
		ПоказатьНесоответствие = Ложь;
	КонецЕсли;

	Элементы.СвойстваОбработкаНесоответствия.Видимость				= ПоказатьНесоответствие;
	Элементы.СвойстваКомандыУстраненияРазличий.Видимость			= ПоказатьКомандыУстраненияРазличий;
	Элементы.СвойстваПояснениеНесоответствия.ВертикальноеПоложение	= ?(ЗначениеЗаполнено(Рекомендация), ВертикальноеПоложениеЭлемента.Верх, ВертикальноеПоложениеЭлемента.Центр);

	// Определение сопоставление несуществующего пользователя ИБ с пользователем в справочнике.
	ЕстьНовоеСопоставлениеСНесуществующимПользователемИБ = НЕ ПользовательИБСуществует И ЗначениеЗаполнено(Объект.ИдентификаторПользователяИБ);

	Если ПараметрыЗаписи <> Неопределено И ЕстьСопоставлениеСНесуществующимПользователемИБ И НЕ ЕстьНовоеСопоставлениеСНесуществующимПользователемИБ Тогда
		ПараметрыЗаписи.Вставить("ОчищеноСопоставлениеСНесуществующимПользователемИБ", Объект.Ссылка);
	КонецЕсли;
	ЕстьСопоставлениеСНесуществующимПользователемИБ = ЕстьНовоеСопоставлениеСНесуществующимПользователемИБ;

	Если УровеньДоступа.УправлениеСписком Тогда
		Элементы.СопоставлениеОбработкаНесоответствия.Видимость = ЕстьСопоставлениеСНесуществующимПользователемИБ;
	Иначе
		// Сопоставление не может быть изменено.
		Элементы.СопоставлениеОбработкаНесоответствия.Видимость = Ложь;
	КонецЕсли;

	Если ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
		Рекомендация = Символы.ПС + "Нажмите ""Записать"", чтобы устранить проблему и не выводить это предупреждение.";
	ИначеЕсли Не ПользователиСервер.ЭтоПолноправныйПользователь() Тогда
		Рекомендация = Символы.ПС + "Обратитесь к администратору, чтобы устранить различия.";
	Иначе
		Рекомендация = "";
	КонецЕсли;

	Элементы.СопоставлениеПояснениеНесоответствия.Заголовок = "Пользователь информационной базы не найден." + Рекомендация;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляПоПользователюИБНаСервере()
	Если УровеньДоступа.УправлениеСписком И ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
		Объект.Наименование = ПользовательИБПолноеИмя;
	КонецЕсли;

	ОпределитьНесоответствияПользователяСПользователемИБ();

	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьСвойств(Форма)
	Элементы       = Форма.Элементы;
	Объект         = Форма.Объект;
	ДействияВФорме = Форма.ДействияВФорме;
	УровеньДоступа = Форма.УровеньДоступа;

	// Настройка возможности изменения.
	Элементы.ВходВПрограммуРазрешен.ТолькоПросмотр	= Не (Элементы.ОсновныеСвойства.ТолькоПросмотр = Ложь И (УровеньДоступа.ИзменениеРазрешенияНаВход Или УровеньДоступа.ОтключениеРазрешенияНаВход И Форма.ПриЧтенииВходВПрограммуРазрешен));
	Элементы.СменитьПароль.Доступность				= (УровеньДоступа.НастройкиДляВхода Или УровеньДоступа.ИзменениеТекущего И Не Форма.ПользовательИБЗапрещеноИзменятьПароль) И Не Объект.Служебный;

	// Настройка необходимости заполнения.
	Если ТребуетсяЗаписьПользователяИБ(Форма, Ложь) Тогда
		НоваяСтраница = Элементы.ИмяСОтметкойНезаполненного;
	Иначе
		НоваяСтраница = Элементы.ИмяБезОтметкиНезаполненного;
	КонецЕсли;

	Если Элементы.ИмяПереключениеОтметкиНезаполненного.ТекущаяСтраница <> НоваяСтраница Тогда
		Элементы.ИмяПереключениеОтметкиНезаполненного.ТекущаяСтраница = НоваяСтраница;
	КонецЕсли;
	ОбновитьИмяДляВхода(Форма);

	// Настройка доступности связанных элементов.
	Элементы.ВходВПрограммуРазрешен.Доступность					= Не Объект.Недействителен;
	Элементы.ОсновныеСвойства.Доступность						= Не Объект.Недействителен;
	Элементы.ГруппаИзменитьОграничение.Доступность				= Не Объект.Недействителен И Не Элементы.Наименование.ТолькоПросмотр;
	Элементы.ПараметрыАутентификации1СПредприятия.Доступность	= Форма.ПользовательИБАутентификацияСтандартная;
	Элементы.ПользовательИБПользовательОС.Доступность			= Форма.ПользовательИБАутентификацияОС;

	ПользователиКлиентСервер.ОбновитьОграничениеСрокаДействия(Форма);
КонецПроцедуры

// Продолжение процедуры ИзменитьОграничениеНаВходВПрограмму.
&НаКлиенте
Процедура ИзменитьОграничениеНаВходВПрограммуЗавершение(Результат, Контекст) Экспорт
	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяЗаписьПользователяИБ(Форма, УчитыватьСтандартноеИмя = Истина)
	Если Форма.ДействияВФорме.СвойстваПользователяИБ <> "Редактирование" Тогда
		Возврат Ложь;
	КонецЕсли;

	Шаблон = Форма.НачальноеОписаниеПользователяИБ;

	ТекущееИмя = "";
	Если Не УчитыватьСтандартноеИмя Тогда
		КраткоеИмя = ПользователиКлиентСервер.ПолучитьКраткоеИмяПользователяИБ(Форма.Объект.Наименование);

		Если Форма.ПользовательИБИмя = КраткоеИмя Тогда
			ТекущееИмя = КраткоеИмя;
		КонецЕсли;
	КонецЕсли;

	Если Форма.ПользовательИБСуществует
	 ИЛИ Форма.ВходВПрограммуРазрешен
	 ИЛИ Форма.ПользовательИБИмя                       <> ТекущееИмя
	 ИЛИ Форма.ПользовательИБАутентификацияСтандартная <> Шаблон.АутентификацияСтандартная
	 ИЛИ Форма.ПользовательИБПоказыватьВСпискеВыбора   <> Шаблон.ПоказыватьВСпискеВыбора
	 ИЛИ Форма.ПользовательИБЗапрещеноИзменятьПароль   <> Шаблон.ЗапрещеноИзменятьПароль
	 ИЛИ Форма.ПользовательИБПароль                    <> Неопределено
	 ИЛИ Форма.ПользовательИБАутентификацияОС          <> Шаблон.АутентификацияОС
	 ИЛИ Форма.ПользовательИБПользовательОС            <> ""
	 ИЛИ Форма.ПользовательИБАутентификацияOpenID      <> Шаблон.АутентификацияOpenID
	 ИЛИ Форма.ПользовательИБРежимЗапуска              <> Шаблон.РежимЗапуска
	 ИЛИ Форма.ПользовательИБЯзык                      <> Шаблон.Язык
	 ИЛИ Форма.ПользовательИБРоли.Количество()         <> 0 Тогда

		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

&НаСервере
Процедура ОбработатьИнтерфейсРолей(Действие, ОсновнойПараметр = Неопределено)
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ОсновнойПараметр", ОсновнойПараметр);
	ПараметрыДействия.Вставить("Форма",            ЭтотОбъект);
	ПараметрыДействия.Вставить("КоллекцияРолей",   ПользовательИБРоли);
	ПараметрыДействия.Вставить("ЗапретИзмененияАдминистративногоДоступа", ЗапретИзмененияАдминистративногоДоступа);
	ПараметрыДействия.Вставить("НазначениеРолей", "ДляАдминистраторов");

	ПользователиСервер.ОбработатьИнтерфейсРолей(Действие, ПараметрыДействия);
КонецПроцедуры
