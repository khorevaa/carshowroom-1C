////////////////////////////////////////////////////////////////////////////////
// Подсистема "Пользователи"
//
////////////////////////////////////////////////////////////////////////////////

// Возвращает недоступные роли для разделенных пользователей или внешних пользователей
// с учетом прав текущего пользователя и режима работы (локальный или модель сервиса).
//
// Параметры:
//  ДляВнешнихПользователей - Булево - если истина, значит для внешних пользователей.
//
// Возвращаемое значение:
//  Соответствие - со свойствами:
//   * Ключ     - Строка - имя роли.
//   * Значение - Булево - Истина.
//
Функция НедоступныеРолиПоТипуПользователя(ДляВнешнихПользователей) Экспорт	
	Если ДляВнешнихПользователей Тогда
		НазначениеРолейПользователя = "ДляВнешнихПользователей";	
	ИначеЕсли ПользователиСервер.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда	
		// Пользователь с ролью АдминистраторСистемы в локальном режиме работы
		// может выдавать административные права.
		НазначениеРолейПользователя = "ДляАдминистраторов";
	Иначе
		НазначениеРолейПользователя = "ДляПользователей";
	КонецЕсли;

	Возврат ПользователиСерверПовтИсп.НедоступныеРоли(НазначениеРолейПользователя);
КонецФункции

// Возвращает роли, недоступные для указанного назначения.
//
// Параметры:
//  Назначение - Строка - "ДляАдминистраторов", "ДляПользователей", "ДляВнешнихПользователей",
//                        "СовместноДляПользователейИВнешнихПользователей".
//     
//  Сервис     - Неопределено - определить текущий режим автоматически.
//             - Булево       - Ложь   - для локального режима (недоступные роли только для назначения),
//                              Истина - для модели сервиса (включая роли неразделенных пользователей).
//
// Возвращаемое значение:
//  Соответствие - со свойствами:
//   * Ключ     - Строка - имя роли.
//   * Значение - Булево - Истина.
//
Функция НедоступныеРоли(Назначение = "ДляПользователей") Экспорт
	ПроверитьНазначение(Назначение, "Ошибка в функции НедоступныеРоли общего модуля ПользователиСерверПовтИсп.");

	НазначениеРолей = ПользователиСерверПовтИсп.НазначениеРолей();
	НедоступныеРоли = Новый Соответствие;

	Для Каждого Роль Из Метаданные.Роли Цикл
		Если (Назначение <> "ДляАдминистраторов")
		   И НазначениеРолей.ТолькоДляАдминистраторовСистемы.Получить(Роль.Имя) <> Неопределено
		 // Для внешних пользователей.
		 Или Назначение = "ДляВнешнихПользователей"
		   И НазначениеРолей.ТолькоДляВнешнихПользователей.Получить(Роль.Имя) = Неопределено
		   И НазначениеРолей.СовместноДляПользователейИВнешнихПользователей.Получить(Роль.Имя) = Неопределено
		 // Для пользователей.
		 Или (Назначение = "ДляПользователей" Или Назначение = "ДляАдминистраторов")
		   И НазначениеРолей.ТолькоДляВнешнихПользователей.Получить(Роль.Имя) <> Неопределено
		 // Совместно для пользователей и внешних пользователей.
		 Или Назначение = "СовместноДляПользователейИВнешнихПользователей"
		   И Не НазначениеРолей.СовместноДляПользователейИВнешнихПользователей.Получить(Роль.Имя) <> Неопределено Тогда

			НедоступныеРоли.Вставить(Роль.Имя, Истина);
		КонецЕсли;
	КонецЦикла;

	Возврат НедоступныеРоли;
КонецФункции

Процедура ПроверитьНазначение(Назначение, ЗаголовокОшибки)
	Если Назначение <> "ДляАдминистраторов"
	   И Назначение <> "ДляПользователей"
	   И Назначение <> "ДляВнешнихПользователей"
	   И Назначение <> "СовместноДляПользователейИВнешнихПользователей" Тогда

		ВызватьИсключение ЗаголовокОшибки + Символы.ПС + Символы.ПС + СтрШаблон(
			"Параметр Назначение ""%1"" указан некорректно.
           |
           |Допустимы только следующие значения:
           |- ""ДляАдминистраторов"",
           |- ""ДляПользователей"",
           |- ""ДляВнешнихПользователей"",
           |- ""СовместноДляПользователейИВнешнихПользователей"".",
			Назначение);
	КонецЕсли;
КонецПроцедуры

// Возвращает назначение ролей, определенное разработчиком.
//
// Возвращаемое значение:
//  ФиксированнаяСтруктура - со свойствами:
//   * ТолькоДляАдминистраторовСистемы - ФиксированноеСоответствие - со свойствами:
//      * Ключ     - Строка - имя роли.
//      * Значение - Булево - Истина.
//   * ТолькоДляПользователейСистемы - ФиксированноеСоответствие - со свойствами:
//      * Ключ     - Строка - имя роли.
//      * Значение - Булево - Истина.
//   * ТолькоДляВнешнихПользователей - ФиксированноеСоответствие - со свойствами:
//      * Ключ     - Строка - имя роли.
//      * Значение - Булево - Истина.
//   * СовместноДляПользователейИВнешнихПользователей - ФиксированноеСоответствие - со свойствами:
//      * Ключ     - Строка - имя роли.
//      * Значение - Булево - Истина.
//
Функция НазначениеРолей() Экспорт
	НазначениеРолей = ПользователиСервер.НазначениеРолей();

	Назначение = Новый Структура;
	Для Каждого ОписаниеНазначенияРолей Из НазначениеРолей Цикл
		Имена = Новый Соответствие;
		Для Каждого Имя Из ОписаниеНазначенияРолей.Значение Цикл
			Имена.Вставить(Имя, Истина);
		КонецЦикла;
		Назначение.Вставить(ОписаниеНазначенияРолей.Ключ, Новый ФиксированноеСоответствие(Имена));
	КонецЦикла;

	Возврат Новый ФиксированнаяСтруктура(Назначение);
КонецФункции

Функция ЭтоСеансВнешнегоПользователя() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательИБ				= ПользователиИнформационнойБазы.ТекущийПользователь();
	ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
	
	ПользователиСервер.НайтиНеоднозначныхПользователейИБ(Неопределено, ИдентификаторПользователяИБ);
	
	Запрос			= Новый Запрос;	
	Запрос.Текст	= "ВЫБРАТЬ ПЕРВЫЕ 1
	            	  |	ИСТИНА КАК ЗначениеИстина
	            	  |ИЗ
	            	  |	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	            	  |ГДЕ
	            	  |	ВнешниеПользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
	Запрос.УстановитьПараметр("ИдентификаторПользователяИБ", ИдентификаторПользователяИБ);
	
	// Пользователь, который не найден в справочнике ВнешниеПользователи не может быть внешним.
	Возврат Не Запрос.Выполнить().Пустой();	
КонецФункции

Функция СвойстваТекущегоПользователяИБ() Экспорт
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();

	Свойства = Новый Структура;
	Свойства.Вставить("УказанТекущийПользовательИБ", Истина);
	Свойства.Вставить("УникальныйИдентификатор", ПользовательИБ.УникальныйИдентификатор);
	Свойства.Вставить("Имя",                     ПользовательИБ.Имя);

	Свойства.Вставить("ПравоАдминистрирование", ?(ПривилегированныйРежим(),
		ПравоДоступа("Администрирование", Метаданные, ПользовательИБ),
		ПравоДоступа("Администрирование", Метаданные)));

	Свойства.Вставить("РольДоступнаАдминистраторСистемы",
		РольДоступна(Метаданные.Роли.АдминистраторСистемы));

	Свойства.Вставить("РольДоступнаПолныеПрава",
		РольДоступна(Метаданные.Роли.ПолныеПрава));

	Возврат Новый ФиксированнаяСтруктура(Свойства);
КонецФункции

// Настройки работы подсистемы Пользователи.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//   * ОбщиеНастройкиВхода - Булево - если Ложь,
//          тогда в панели администрирования "Настройки прав и пользователей" возможность
//          открытия формы настроек входа будет скрыта, как и поле СрокДействия в карточках
//          пользователя и внешнего пользователя.
//
//   * РедактированиеРолей - Булево - если Ложь, тогда
//          интерфейс изменения ролей в карточках пользователя, внешнего пользователя и
//          группы внешних пользователей будет скрыт (в том числе для администратора).
//
//   * ВнешниеПользователи - Структура - со свойствами, как у свойства Пользователи (см. далее).
//   * Пользователи - Структура - со свойствами:
//
//     * ПарольДолженОтвечатьТребованиямСложности   - Булево - проверять сложность нового пароля.
//     * МинимальнаяДлинаПароля                     - Число - проверять длину нового пароля.
//
//     * МаксимальныйСрокДействияПароля             - Число - дней после первого входа с новым паролем, после
//                                                            которого пользователю потребуется сменить пароль.
//     * МинимальныйСрокДействияПароля              - Число - дней после первого входа с новым паролем, в течение
//                                                            которого пользователь не сможет сменить пароль.
//     * ЗапретитьПовторениеПароляСредиПоследних    - Число - паролей, хеши которых будут храниться для проверки.
//
//     * ПросрочкаРаботыВПрограммеДоЗапрещенияВхода - Число - дней относительно последней активности пользователя,
//                                                            после которых вход в программу будет запрещен.
//     * ПросрочкаРаботыВПрограммеДатаВключения     - Дата  - момент записи ненулевого количества дней
//                                                            просрочки вместо нулевого.
//
Функция Настройки() Экспорт
	Настройки = Новый Структура;
	Настройки.Вставить("ОбщиеНастройкиВхода", Истина);
	Настройки.Вставить("РедактированиеРолей", Истина);

	ИнтеграцияПодсистемСервер.ПриОпределенииНастроек(Настройки);

	Если БазоваяПодсистемаСервер.ЭтоАвтономноеРабочееМесто() Тогда
		Настройки.Вставить("ОбщиеНастройкиВхода", Ложь);
	КонецЕсли;

	ВсеНастройки = ПользователиСервер.НастройкиВхода();
	ВсеНастройки.Вставить("ОбщиеНастройкиВхода", Настройки.ОбщиеНастройкиВхода);
	ВсеНастройки.Вставить("РедактированиеРолей", Настройки.РедактированиеРолей);

	Возврат ВсеНастройки;
КонецФункции

// Возвращает имена и синонимы ролей.
//
Функция ВсеРоли() Экспорт
	Массив			= Новый Массив;
	Соответствие	= Новый Соответствие;

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(256)));

	Для каждого Роль Из Метаданные.Роли Цикл
		ИмяРоли = Роль.Имя;

		Массив.Добавить(ИмяРоли);
		Соответствие.Вставить(ИмяРоли, Роль.Синоним);
		Таблица.Добавить().Имя = ИмяРоли;
	КонецЦикла;

	ВсеРоли = Новый Структура;
	ВсеРоли.Вставить("Массив",       Новый ФиксированныйМассив(Массив));
	ВсеРоли.Вставить("Соответствие", Новый ФиксированноеСоответствие(Соответствие));
	ВсеРоли.Вставить("Таблица",      Таблица);

	Возврат БазоваяПодсистемаСервер.ФиксированныеДанные(ВсеРоли, Ложь);
КонецФункции