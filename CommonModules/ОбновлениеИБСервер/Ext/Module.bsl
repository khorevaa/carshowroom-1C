////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обновление информационной базы"
//
////////////////////////////////////////////////////////////////////////////////

Процедура УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	Если ИмяПараметра = "ВыполняетсяОбновлениеИБ" Тогда
		ПараметрыСеанса.ВыполняетсяОбновлениеИБ = ОбновлениеИБСерверПовтИсп.НеобходимоОбновлениеИнформационнойБазы();
		УстановленныеПараметры.Добавить("ВыполняетсяОбновлениеИБ");
	ИначеЕсли ИмяПараметра = "ПараметрыОбработчикаОбновления" Тогда
		ПараметрыСеанса.ПараметрыОбработчикаОбновления = Новый ФиксированнаяСтруктура(НовыеПараметрыОбработчикаОбновления());
		УстановленныеПараметры.Добавить("ПараметрыОбработчикаОбновления");
	КонецЕсли;
КонецПроцедуры

// Управляет процессом выполнения отложенных обработчиков обновления.
//
Процедура ВыполнитьОтложенноеОбновление() Экспорт
	БазоваяПодсистемаСервер.ПриНачалеВыполненияРегламентногоЗадания();

	Если ОбновлениеИБСерверПовтИсп.НеобходимоОбновлениеИнформационнойБазы() Тогда
		Возврат;
	КонецЕсли;

	СведенияОбОбновлении = СведенияОбОбновленииИнформационнойБазы();

	Если СведенияОбОбновлении.ВремяОкончаниеОтложенногоОбновления <> Неопределено Тогда
		ПриВключенииОтложенногоОбновления(Ложь);

		Возврат;
	КонецЕсли;

	Если СведенияОбОбновлении.ВремяНачалаОтложенногоОбновления = Неопределено Тогда
		СведенияОбОбновлении.ВремяНачалаОтложенногоОбновления = ТекущаяДатаСеанса();
	КонецЕсли;
	Если ТипЗнч(СведенияОбОбновлении.НомерСеанса) <> Тип("СписокЗначений") Тогда
		СведенияОбОбновлении.НомерСеанса = Новый СписокЗначений;
	КонецЕсли;
	СведенияОбОбновлении.НомерСеанса.Добавить(НомерСеансаИнформационнойБазы());
	ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);

	// зарезервировано для новых подсистем
	ОбработчикиВыполнялись = Истина;
	Пока ОбработчикиВыполнялись Цикл
		ОбработчикиВыполнялись = ВыполнитьОтложенныйОбработчикОбновления(СведенияОбОбновлении);

		Если СведенияОбОбновлении.УправлениеОтложеннымОбновлением.Свойство("ФорсироватьОбновление") Тогда
			СведенияОбОбновлении = СведенияОбОбновленииИнформационнойБазы();
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если Не ОбработчикиВыполнялись Или ВыполненыВсеОтложенныеОбработчики(СведенияОбОбновлении) Тогда
		ПриВключенииОтложенногоОбновления(Ложь);
	КонецЕсли;
КонецПроцедуры

// Устанавливает состояние запуска обновления информационной.
// Требуется привилегированный режим.
//
// Параметры:
//  Запуск - Булево - Если установить Истина, состояние будет установлено,
//           если установить Ложь, состояние будет снято.
//
Процедура УстановитьЗапускОбновленияИнформационнойБазы(Запуск) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ТекущиеПараметры = Новый Соответствие(ПараметрыСеанса.ПараметрыКлиентаНаСервере);

	Если Запуск = Истина Тогда
		ТекущиеПараметры.Вставить("ЗапуститьОбновлениеИнформационнойБазы", Истина);
	ИначеЕсли ТекущиеПараметры.Получить("ЗапуститьОбновлениеИнформационнойБазы") <> Неопределено Тогда
		ТекущиеПараметры.Удалить("ЗапуститьОбновлениеИнформационнойБазы");
	КонецЕсли;

	ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(ТекущиеПараметры);
КонецПроцедуры

// Записывает изменения в переданном объекте.
// Для использования в обработчиках обновления.
//
// Параметры:
//   Данные                            - Произвольный - объект, набор записей или менеджер константы, который
//                                                      необходимо записать.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьДанные(Знач Данные, Знач РегистрироватьНаУзлахПлановОбмена = Неопределено, Знач ВключитьБизнесЛогику = Ложь) Экспорт
	Данные.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	Данные.ДополнительныеСвойства.Вставить("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ", РегистрироватьНаУзлахПлановОбмена);

	Если (РегистрироватьНаУзлахПлановОбмена = Неопределено) Или Не РегистрироватьНаУзлахПлановОбмена Тогда
		Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;

	Данные.Записать();

	ОтметитьВыполнениеОбработки(Данные);
КонецПроцедуры

// Отмечает, что переданные данные обновлены.
//
// Параметры:
//  Данные					 - Ссылка, Массив, НаборДанных - данные, по которым нужно зарегистрировать изменения.
//							 - ТаблицаЗначений - значения измерений независимого регистра сведений. Требования:
//													- все измерения регистра должны входить в основной отбор
//													- в таблице должны быть только колонки, соответствующие по именам измерениям регистра,
//														по которым ранее регистрировалась необходимость обработки
//													- запись наборов в процессе обновления должна проходить с тем же отбором,
//														что и регистрация необходимости обработки
//													- в ДополнительныеПараметры нужно передать соответствующий признак и полное имя регистра.
//  ДополнительныеПараметры	 - Структура - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки.
//  Очередь					 - Число, Неопределено - очередь обработки, в которой выполняется текущий обработчик. По умолчанию очередь передавать
//													не нужно, т.к. она будет взята из параметров сеанса, в котором запущен обработчик обновления.
//
Процедура ОтметитьВыполнениеОбработки(Данные, ДополнительныеПараметры = Неопределено, Очередь = Неопределено) Экспорт
	Если Очередь = Неопределено Тогда
		Если ПараметрыСеанса.ПараметрыОбработчикаОбновления.РежимВыполнения <> "Отложенно" Или ПараметрыСеанса.ПараметрыОбработчикаОбновления.РежимВыполненияОтложенныхОбработчиков <> "Параллельно" Тогда
			Возврат;
		КонецЕсли;

		Очередь = ПараметрыСеанса.ПараметрыОбработчикаОбновления.ОчередьОтложеннойОбработки;

		Если Не ПараметрыСеанса.ПараметрыОбработчикаОбновления.ЕстьОбработанныеОбъекты Тогда
			НовыеПараметрыСеанса							= НовыеПараметрыОбработчикаОбновления();
			ЗаполнитьЗначенияСвойств(НовыеПараметрыСеанса, ПараметрыСеанса.ПараметрыОбработчикаОбновления);
			НовыеПараметрыСеанса.ЕстьОбработанныеОбъекты	= Истина;
			
			ПараметрыСеанса.ПараметрыОбработчикаОбновления	= Новый ФиксированнаяСтруктура(НовыеПараметрыСеанса);
		КонецЕсли;
	КонецЕсли;

	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыОтметкиОбработки();
	КонецЕсли;

	Если (ТипЗнч(Данные) = Тип("Массив") Или ТипЗнч(Данные) = Тип("ТаблицаЗначений")) И Данные.Количество() = 0 Тогда
		ТекстИсключения = "В процедуру ОбновлениеИБ.ОтметитьВыполнениеОбработки передан пустой массив. Не возможно отметить выполнение обработки.";

		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Узел = ПланыОбмена.ОбновлениеИнформационнойБазы.УзелПоОчереди(Очередь);

	Если ДополнительныеПараметры.ЭтоДвижения Тогда
		Набор = БазоваяПодсистемаСервер.МенеджерОбъектаПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра).СоздатьНаборЗаписей();

		Если ТипЗнч(Данные) = Тип("Массив") Тогда
			Для Каждого СтрокаМассива Из Данные Цикл
				Набор.Отбор.Регистратор.Установить(СтрокаМассива);
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Набор);
			КонецЦикла;
		Иначе
			Набор.Отбор.Регистратор.Установить(Данные);
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Набор);
		КонецЕсли;
	ИначеЕсли ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений Тогда
		Набор				= БазоваяПодсистемаСервер.МенеджерОбъектаПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра).СоздатьНаборЗаписей();
		МетаданныеОбъекта	= Метаданные.НайтиПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра);

		УстановитьНедостающиеОтборыВНаборе(Набор, МетаданныеОбъекта, Данные);	

		Для каждого СтрокаТаблицы Из Данные Цикл
			Для Каждого Колонка Из Данные.Колонки Цикл
				Набор.Отбор[Колонка.Имя].Значение = СтрокаТаблицы[Колонка.Имя];
				Набор.Отбор[Колонка.Имя].Использование = Истина;
			КонецЦикла;

			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Набор);
		КонецЦикла;
	Иначе
		Если ТипЗнч(Данные) = Тип("ОбъектМетаданных") Тогда
			ТекстИсключения = "Не поддерживается отметка выполнения обработки обновления целиком объекта метаданных. Нужно отмечать обработку конкретных данных.";

			ВызватьИсключение ТекстИсключения;
		КонецЕсли;

		Если ТипЗнч(Данные) <> Тип("Массив") Тогда
			ТипЗначенияОбъекта = ТипЗнч(Данные);
			МетаданныеОбъекта  = Метаданные.НайтиПоТипу(ТипЗначенияОбъекта);

			Если Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта) И МетаданныеОбъекта.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
				УстановитьНедостающиеОтборыВНаборе(Данные, МетаданныеОбъекта, Данные.Отбор);
			ИначеЕсли БазоваяПодсистемаСервер.ЭтоОбъектСсылочногоТипа(МетаданныеОбъекта) И Не БазоваяПодсистемаСервер.ЭтоСсылка(ТипЗначенияОбъекта) И Данные.ЭтоНовый() Тогда
				Возврат;
			КонецЕсли;

			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Данные);
		Иначе
			Для Каждого ЭлементМассива Из Данные Цикл
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ЭлементМассива);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если Не БазоваяПодсистемаСервер.ЭтоПодчиненныйУзелРИБ() Тогда
		РегистрыСведений.ДанныеОбработанныеВЦентральномУзлеРИБ.ОтметитьВыполнениеОбработки(Очередь, Данные, ДополнительныеПараметры); 
	КонецЕсли;
КонецПроцедуры

Функция НовыеПараметрыОбработчикаОбновления() Экспорт
	ПараметрыОбработчикаОбновления = Новый Структура;
	ПараметрыОбработчикаОбновления.Вставить("ЗапускатьТолькоВГлавномУзле", Ложь);
	ПараметрыОбработчикаОбновления.Вставить("ЗапускатьИВПодчиненномУзлеРИБСФильтрами", Ложь);
	ПараметрыОбработчикаОбновления.Вставить("ОчередьОтложеннойОбработки", 0);
	ПараметрыОбработчикаОбновления.Вставить("РежимВыполнения", "");
	ПараметрыОбработчикаОбновления.Вставить("РежимВыполненияОтложенныхОбработчиков", "");
	ПараметрыОбработчикаОбновления.Вставить("ЕстьОбработанныеОбъекты", Ложь);

	Возврат ПараметрыОбработчикаОбновления;
КонецФункции

Функция ДополнительныеПараметрыОтметкиОбработки() Экспорт
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭтоДвижения", Ложь);
	ДополнительныеПараметры.Вставить("ОтметитьВсеРегистраторы", Ложь);
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Ложь);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "");

	Возврат ДополнительныеПараметры;
КонецФункции

Процедура УстановитьНедостающиеОтборыВНаборе(Набор, МетаданныеНабора, УстанавливаемыеОтборы)
	Для Каждого Измерение Из МетаданныеНабора.Измерения Цикл

		ЕстьОтборПоИзмерению = Ложь;

		Если ТипЗнч(УстанавливаемыеОтборы) = Тип("ТаблицаЗначений") Тогда
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы.Колонки.Найти(Измерение.Имя) <> Неопределено;
		Иначе //Отбор
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы[Измерение.Имя].Использование;	
		КонецЕсли;

		Если Не ЕстьОтборПоИзмерению Тогда
			ПустоеЗначение = Измерение.Тип.ПривестиЗначение();
			Набор.Отбор[Измерение.Имя].Установить(ПустоеЗначение);
		КонецЕсли;
	КонецЦикла;

	Если МетаданныеНабора.ОсновнойОтборПоПериоду Тогда
		Если ТипЗнч(УстанавливаемыеОтборы) = Тип("ТаблицаЗначений") Тогда
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы.Колонки.Найти("Период") <> Неопределено;
		Иначе //Отбор
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы.Период.Использование;
		КонецЕсли;

		Если Не ЕстьОтборПоИзмерению Тогда
			ПустоеЗначение = '00010101';
			Набор.Отбор.Период.Установить(ПустоеЗначение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Устанавливает флаг отображения описаний изменений версий по
// текущую версию включительно, если для пользователя флаг не
// был установлен ранее.
//
// Параметры:
//  ИмяПользователя - Строка - имя пользователя, для которого
//   необходимо установить флаг.
//
Процедура УстановитьФлагОтображенияОписанийДляНовогоПользователя(Знач ИмяПользователя) Экспорт
	Если ПоследняяВерсияОтображенияИзмененийСистемы(ИмяПользователя) = Неопределено Тогда
		УстановитьФлагОтображенияОписанийПоТекущуюВерсию(ИмяПользователя);
	КонецЕсли;
КонецПроцедуры

Функция ПоследняяВерсияОтображенияИзмененийСистемы(Знач ИмяПользователя = Неопределено) Экспорт
	Если ИмяПользователя = Неопределено Тогда
		ИмяПользователя = ИмяПользователя();
	КонецЕсли;

	ПоследняяВерсия = БазоваяПодсистемаСервер.ХранилищеОбщихНастроекЗагрузить("ОбновлениеИБ", "ПоследняяВерсияОтображенияИзмененийСистемы", , , ИмяПользователя);

	Возврат ПоследняяВерсия;
КонецФункции

// Устанавливает флаг отображения описаний изменений версий по
// текущую версию включительно.
//
// Параметры:
//  ИмяПользователя - Строка - имя пользователя, для которого
//   необходимо установить флаг.
//
Процедура УстановитьФлагОтображенияОписанийПоТекущуюВерсию(Знач ИмяПользователя = Неопределено) Экспорт
	БазоваяПодсистемаСервер.ХранилищеОбщихНастроекСохранить("ОбновлениеИБ", "ПоследняяВерсияОтображенияИзмененийСистемы", Метаданные.Версия, , ИмяПользователя);

	Если ИмяПользователя = Неопределено И ПользователиСервер.ЭтоПолноправныйПользователь() Тогда
		БазоваяПодсистемаСервер.ХранилищеОбщихНастроекУдалить("ОбновлениеИБ", "ВывестиОписаниеИзмененийДляАдминистратора", ИмяПользователя());
	КонецЕсли;
КонецПроцедуры

Функция НеобходимоВыполнитьОбновление(Знач ВерсияМетаданных, Знач ВерсияДанных) Экспорт
	Возврат НЕ ПустаяСтрока(ВерсияМетаданных) И ВерсияДанных <> ВерсияМетаданных;
КонецФункции

// Получить версию конфигурации или родительской конфигурации (библиотеки),
// которая хранится в информационной базе.
//
// Параметры:
//  ИдентификаторБиблиотеки   - Строка - имя конфигурации или идентификатор библиотеки.
//
// Возвращаемое значение:
//   Строка   - версия.
//
// Пример использования:
//   ВерсияКонфигурацииИБ = ВерсияИБ(Метаданные.Имя);
//
Функция ВерсияИБ(Знач ИдентификаторБиблиотеки) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	ВерсииПодсистем.Версия КАК Версия
	            	  |ИЗ
	            	  |	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
	            	  |ГДЕ
	            	  |	ВерсииПодсистем.ИмяПодсистемы = &ИмяПодсистемы";
	Запрос.УстановитьПараметр("ИмяПодсистемы", ИдентификаторБиблиотеки);

	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();

	Результат = "";
	Если ТаблицаЗначений.Количество() > 0 Тогда
		Результат = СокрЛП(ТаблицаЗначений[0].Версия);
	КонецЕсли;

	Возврат ?(ПустаяСтрока(Результат), "0.0.0.0", Результат);
КонецФункции

Функция ВыполненаРегистрацияОтложенныхОбработчиковОбновления() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	ВерсииПодсистем.ИмяПодсистемы КАК ИмяПодсистемы
	            	  |ИЗ
	            	  |	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
	            	  |ГДЕ
	            	  |	ВерсииПодсистем.ВыполненаРегистрацияОтложенныхОбработчиков = ЛОЖЬ";

	Результат = Запрос.Выполнить().Выгрузить();

	Возврат Результат.Количество() = 0;
КонецФункции

Функция ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	Параметры.Вставить("ВерсияДанныхОсновнойКонфигурации", ВерсияИБ(Метаданные.Имя));

	// Проверка продолжения работы.
	ЭтоВызовПередНачаломРаботыСистемы	= Параметры.ПолученныеПараметрыКлиента <> Неопределено;
	ОписаниеОшибки						= ИнформационнаяБазаЗаблокированаДляОбновления(, ЭтоВызовПередНачаломРаботыСистемы);
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Параметры.Вставить("ИнформационнаяБазаЗаблокированаДляОбновления", ОписаниеОшибки);
		// Работа будет завершена.
		Возврат Ложь;
	КонецЕсли;

	Если ТребуетсяПроверитьЛегальностьПолученияОбновления() Тогда
		Параметры.Вставить("ПроверитьЛегальностьПолученияОбновления");
	КонецЕсли;

	Возврат Истина;
КонецФункции

// Возвращает текст причины блокировки, если требуется обновление ИБ и у текущего пользователя
// для этого недостаточно прав, иначе возвращает пустую строку.
//
// Параметры:
//  УчитыватьПривилегированныйРежим - Булево - если указать Ложь, то при проверке прав текущего пользователя
//                                    наличие привилегированного режима не будет учитываться.
//
// Возвращаемое значение:
//  Строка - если база не заблокирована, тогда пустая строка, иначе сообщение о причине блокировки.
//
Функция ИнформационнаяБазаЗаблокированаДляОбновления(УчитыватьПривилегированныйРежим = Истина, ПриЗапуске = Неопределено) Экспорт
	Сообщение = "";

	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();

	// Для входа в заблокированную базу достаточно только одного права администрирования.
	Если УчитыватьПривилегированныйРежим Тогда
		ЕстьПравоАдминистрирование = ПравоДоступа("Администрирование", Метаданные);
	Иначе
		ЕстьПравоАдминистрирование = ПравоДоступа("Администрирование", Метаданные, ТекущийПользовательИБ);
	КонецЕсли;

	СообщениеАдминистраторуСистемы = "Вход в программу временно невозможен в связи с обновлением на новую версию.
		           |Для завершения обновления версии программы требуются административные права
		           |(роли ""Администратор системы"" и ""Полные права"").";

	Если ПользователиСервер.ЭтоПолноправныйПользователь(, Истина, УчитыватьПривилегированныйРежим) Тогда
		Если ОбновлениеИБСерверПовтИсп.НеобходимоОбновлениеИнформационнойБазы() И ПриЗапуске = Истина Тогда
			Результат = ОтметкаНачалаОбновления();

			Если Не Результат.МожноВыполнятьОбновление Тогда
				Сообщение = "Вход в программу временно невозможен в связи с обновлением на новую версию.
					|Обновление уже выполняется:
					|  компьютер - %1
					|  пользователь - %2
					|  сеанс - %3
					|  начат - %4
					|  приложение - %5";

				Сообщение = СтрШаблон(Сообщение,
					Результат.СеансОбновления.ИмяКомпьютера,
					Результат.СеансОбновления.Пользователь,
					Результат.СеансОбновления.НомерСеанса,
					Результат.СеансОбновления.НачалоСеанса,
					Результат.СеансОбновления.ИмяПриложения);
				Возврат Сообщение;
			КонецЕсли;
		КонецЕсли;

		Возврат "";
	КонецЕсли;

	ТребуетсяПовторитьЗагрузкуСообщенияОбменаДаннымиПередЗапуском = Ложь;
	// зарезервировано для новых подсистем

	// В этих случаях запуск не блокируется.
	Если Не ОбновлениеИБСерверПовтИсп.НеобходимоОбновлениеИнформационнойБазы()
	   И Не ТребуетсяПроверитьЛегальностьПолученияОбновления()
	   И Не ТребуетсяПовторитьЗагрузкуСообщенияОбменаДаннымиПередЗапуском Тогда
		Возврат "";
	КонецЕсли;

	// Во всех остальных случаях запуск блокируется.
	Если ЕстьПравоАдминистрирование Тогда
		Возврат СообщениеАдминистраторуСистемы;
	КонецЕсли;

	// Сообщение пользователю локального режима.
	Сообщение = "Вход в программу временно невозможен в связи с обновлением на новую версию. Обратитесь к администратору за подробностями.";

	Возврат Сообщение;
КонецФункции

Функция ТребуетсяПроверитьЛегальностьПолученияОбновления() Экспорт
	Возврат Ложь;

	// зарезервировано для новых подсистем
КонецФункции

Функция ОтметкаНачалаОбновления()
	ОписаниеСеанса = Новый Структура;
	ОписаниеСеанса.Вставить("ИмяКомпьютера");
	ОписаниеСеанса.Вставить("ИмяПриложения");
	ОписаниеСеанса.Вставить("НачалоСеанса");
	ОписаниеСеанса.Вставить("НомерСеанса");
	ОписаниеСеанса.Вставить("НомерСоединения");
	ОписаниеСеанса.Вставить("Пользователь");

	ЗаполнитьЗначенияСвойств(ОписаниеСеанса, ПолучитьТекущийСеансИнформационнойБазы());
	ОписаниеСеанса.Пользователь = ОписаниеСеанса.Пользователь.Имя;

	ИмяПараметра = "СтандартныеПодсистемы.ОбновлениеИБ.СеансОбновленияИнформационнойБазы";

	МожноВыполнятьОбновление = Истина;

	Блокировка			= Новый БлокировкаДанных;
	ЭлементБлокировки	= Блокировка.Добавить("РегистрСведений.ПараметрыРаботыПрограммы");
	ЭлементБлокировки.УстановитьЗначение("ИмяПараметра", ИмяПараметра);

	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		СохраненныеПараметры = БазоваяПодсистемаСервер.ПараметрРаботыПрограммы(ИмяПараметра);

		Если СохраненныеПараметры = Неопределено Тогда
			СеансыСовпадают = Ложь;
		Иначе
			СеансыСовпадают = ДанныеСовпадают(ОписаниеСеанса, СохраненныеПараметры);
		КонецЕсли;

		Если Не СеансыСовпадают Тогда
			СеансОбновленияАктивен = СеансАктивен(СохраненныеПараметры);
			Если СеансОбновленияАктивен Тогда
				СеансОбновления				= СохраненныеПараметры;
				МожноВыполнятьОбновление	= Ложь;
			Иначе
				БазоваяПодсистемаСервер.УстановитьПараметрРаботыПрограммы(ИмяПараметра, ОписаниеСеанса);
				СеансОбновления				= ОписаниеСеанса;
			КонецЕсли;
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;

	Результат	= Новый Структура;
	Результат.Вставить("МожноВыполнятьОбновление", МожноВыполнятьОбновление);
	Результат.Вставить("СеансОбновления", СеансОбновления);

	Возврат Результат;
КонецФункции

Функция СеансАктивен(ОписаниеСеанса)
	Если ОписаниеСеанса = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	СеансыИнформационнойБазы = ПолучитьСеансыИнформационнойБазы();

	Для Каждого Сеанс Из СеансыИнформационнойБазы Цикл
		Совпадают = ДанныеСовпадают(ОписаниеСеанса, Сеанс);
		Если Совпадают Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Совпадают;
КонецФункции

Функция ДанныеСовпадают(Данные1, Данные2)
	Совпадают = Истина;
	Для Каждого КлючИЗначение Из Данные1 Цикл
		Если КлючИЗначение.Ключ = "Пользователь" Тогда
			Продолжить;
		КонецЕсли;

		Если Данные2[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
			Совпадают = Ложь;

			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Совпадают;
КонецФункции

// Проверяет статус отложенных обработчиков обновления.
//
Функция СтатусНевыполненныхОбработчиков(ПриОбновлении = Ложь) Экспорт
	СведенияОбОбновлении = СведенияОбОбновленииИнформационнойБазы();

	Если ПриОбновлении Тогда
		ВерсияДанных					= ВерсияИБ(Метаданные.Имя);
		ВерсияДанныхБезНомераСборки		= БазоваяПодсистемаКлиентСервер.ВерсияКонфигурацииБезНомераСборки(ВерсияДанных);
		ВерсияМетаданныхБезНомераСборки = БазоваяПодсистемаКлиентСервер.ВерсияКонфигурацииБезНомераСборки(Метаданные.Версия);
		ПодредакцииРавны				= (ВерсияДанныхБезНомераСборки = ВерсияМетаданныхБезНомераСборки);

		Если ВерсияДанных = "0.0.0.0" Или ПодредакцииРавны Тогда
			// В пределах четвертой цифры можно обновляться при наличии невыполненных
			// отложенных обработчиков обновления.
			Возврат "";
		КонецЕсли;

		ВерсияДереваОбработчиков		= СведенияОбОбновлении.ВерсияДереваОбработчиков;
		Если ВерсияДереваОбработчиков <> "" И БазоваяПодсистемаКлиентСервер.СравнитьВерсии(ВерсияДереваОбработчиков, ВерсияДанных) > 0 Тогда
			// Если в основном цикле обновления произошла ошибка, то при перезапуске не надо
			// проверять дерево отложенных обработчиков, т.к. там будут еще невыполненные
			// отложенные обработчики на текущую версию.
			Возврат "";
		КонецЕсли;
	КонецЕсли;

	ЕстьОбработчикиСОшибкой			= Ложь;
	ЕстьНевыполненныеОбработчики	= Ложь;
	ЕстьПриостановленныеОбработчики	= Ложь;
	Для Каждого СтрокаДереваБиблиотека Из СведенияОбОбновлении.ДеревоОбработчиков.Строки Цикл
		Для Каждого СтрокаДереваВерсия Из СтрокаДереваБиблиотека.Строки Цикл
			Для Каждого Обработчик Из СтрокаДереваВерсия.Строки Цикл
				Если Обработчик.Статус = "Ошибка" Тогда
					// Если найдены обработчики с ошибкой, цикл не прерывается,
					// надо убедиться, что нет еще невыполненных обработчиков.
					ЕстьОбработчикиСОшибкой			= Истина;
				ИначеЕсли Обработчик.Статус <> "Выполнено" Тогда
					ЕстьНевыполненныеОбработчики	= Истина;
					Прервать;
				ИначеЕсли Обработчик.Статус = "Приостановлен" Тогда
					ЕстьПриостановленныеОбработчики	= Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Если ЕстьНевыполненныеОбработчики Тогда
		Возврат "СтатусНеВыполнено";
	ИначеЕсли ЕстьОбработчикиСОшибкой Тогда
		Возврат "СтатусОшибка";
	ИначеЕсли ЕстьПриостановленныеОбработчики Тогда
		Возврат "СтатусПриостановлен";
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

// Получает сведения об обновлении информационной базы
// из константы "СведенияОбОбновленииИБ".
Функция СведенияОбОбновленииИнформационнойБазы() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	СведенияОбОбновленииИБ = Константы.СведенияОбОбновленииИБ.Получить().Получить();
	Если ТипЗнч(СведенияОбОбновленииИБ) <> Тип("Структура") Тогда
		Возврат НовыеСведенияОбОбновлении();
	КонецЕсли;
	Если СведенияОбОбновленииИБ.Количество() = 1 Тогда
		Возврат НовыеСведенияОбОбновлении();
	КонецЕсли;

	СведенияОбОбновленииИБ = НовыеСведенияОбОбновлении(СведенияОбОбновленииИБ);

	Возврат СведенияОбОбновленииИБ;
КонецФункции

Функция НовыеСведенияОбОбновлении(СтарыеСведения = Неопределено)
	СведенияОбОбновлении = Новый Структура;
	СведенияОбОбновлении.Вставить("ВремяНачалаОбновления");
	СведенияОбОбновлении.Вставить("ВремяОкончанияОбновления");
	СведенияОбОбновлении.Вставить("ПродолжительностьОбновления");
	СведенияОбОбновлении.Вставить("ВремяНачалаОтложенногоОбновления");
	СведенияОбОбновлении.Вставить("ВремяОкончаниеОтложенногоОбновления");
	СведенияОбОбновлении.Вставить("НомерСеанса",						Новый СписокЗначений);
	СведенияОбОбновлении.Вставить("ПараметрыОбработчикаОбновления");
	СведенияОбОбновлении.Вставить("ОтложенноеОбновлениеЗавершеноУспешно");
	СведенияОбОбновлении.Вставить("ДеревоОбработчиков",					Новый ДеревоЗначений);
	СведенияОбОбновлении.Вставить("ВерсияДереваОбработчиков",			"");
	СведенияОбОбновлении.Вставить("ВыводитьОписаниеОбновлений",			Ложь);
	СведенияОбОбновлении.Вставить("ЛегальнаяВерсия",					"");
	СведенияОбОбновлении.Вставить("НовыеПодсистемы",					Новый Массив);
	СведенияОбОбновлении.Вставить("УправлениеОтложеннымОбновлением",	Новый Структура);
	СведенияОбОбновлении.Вставить("ОбрабатываемыеДанные",				Новый Соответствие);
	СведенияОбОбновлении.Вставить("ТекущаяИтерацияОбновления",			1);
	СведенияОбОбновлении.Вставить("ПланОтложенногоОбновления");
	СведенияОбОбновлении.Вставить("ОписаниеПроцедурЗаполнения");
	СведенияОбОбновлении.Вставить("СеансОбновления");

	Если ТипЗнч(СтарыеСведения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СведенияОбОбновлении, СтарыеСведения);
	КонецЕсли;

	Возврат СведенияОбОбновлении;
КонецФункции

Функция НастройкиПодсистемы() Экспорт
	ПараметрыСообщенияОНевыполненныхОтложенныхОбработчиках = Новый Структура;
	ПараметрыСообщенияОНевыполненныхОтложенныхОбработчиках.Вставить("ТекстСообщения", "");
	ПараметрыСообщенияОНевыполненныхОтложенныхОбработчиках.Вставить("КартинкаСообщения", Неопределено);
	ПараметрыСообщенияОНевыполненныхОтложенныхОбработчиках.Вставить("ЗапрещатьПродолжение", Ложь);

	Настройки = Новый Структура;
	Настройки.Вставить("ПоясненияДляРезультатовОбновления", "");
	Настройки.Вставить("РасположениеОписанияИзмененийПрограммы", "");
	Настройки.Вставить("ПараметрыСообщенияОНевыполненныхОтложенныхОбработчиках", ПараметрыСообщенияОНевыполненныхОтложенныхОбработчиках);

	Возврат Настройки;
КонецФункции

// Записывает данные по обновлению в константу "СведенияОбОбновленииИБ".
//
Процедура ЗаписатьСведенияОбОбновленииИнформационнойБазы(Знач СведенияОбОбновлении) Экспорт
	Если СведенияОбОбновлении = Неопределено Тогда
		НовоеЗначение = НовыеСведенияОбОбновлении();
	Иначе
		НовоеЗначение = СведенияОбОбновлении;
	КонецЕсли;

	МенеджерКонстанты			= Константы.СведенияОбОбновленииИБ.СоздатьМенеджерЗначения();
	МенеджерКонстанты.Значение	= Новый ХранилищеЗначения(НовоеЗначение);
	ЗаписатьДанные(МенеджерКонстанты);
КонецПроцедуры

// Вызывается при включении и отключении отложенного обновления.
//
// Параметры:
// Использование - Булево - Истина, если задание нужно включить, иначе Ложь.
//
Процедура ПриВключенииОтложенногоОбновления(Использование) Экспорт
	ОтборЗаданий = Новый Структура;
	ОтборЗаданий.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОтложенноеОбновлениеИБ);
	Задания = БазоваяПодсистемаСервер.НайтиЗадания(ОтборЗаданий);

	Для Каждого Задание Из Задания Цикл
		ПараметрыЗадания = Новый Структура("Использование", Использование);
		БазоваяПодсистемаСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
	КонецЦикла;

	Возврат;
КонецПроцедуры

// Выполняет все процедуры отложенного обновления в цикле за один вызов.
//
Процедура ВыполнитьОтложенноеОбновлениеСейчас(ПараметрыОбновления = Неопределено) Экспорт
	СведенияОбОбновлении = СведенияОбОбновленииИнформационнойБазы();

	Если СведенияОбОбновлении.ВремяОкончаниеОтложенногоОбновления <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если СведенияОбОбновлении.ВремяНачалаОтложенногоОбновления = Неопределено Тогда
		СведенияОбОбновлении.ВремяНачалаОтложенногоОбновления = ТекущаяДатаСеанса();
	КонецЕсли;

	Если ТипЗнч(СведенияОбОбновлении.НомерСеанса) <> Тип("СписокЗначений") Тогда
		СведенияОбОбновлении.НомерСеанса = Новый СписокЗначений;
	КонецЕсли;
	СведенияОбОбновлении.НомерСеанса.Добавить(НомерСеансаИнформационнойБазы());
	ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);

	ОбработчикиВыполнялись = Истина;
	Пока ОбработчикиВыполнялись Цикл
		ОбработчикиВыполнялись = ВыполнитьОтложенныйОбработчикОбновления(СведенияОбОбновлении, ПараметрыОбновления);
	КонецЦикла;
КонецПроцедуры

Функция ВыполнитьОтложенныйОбработчикОбновления(СведенияОбОбновлении, ПараметрыОбновления = Неопределено)
	ВключитьОтключитьОтложенныеОбработчикиОбновления(СведенияОбОбновлении);

	ПланОбновления = СведенияОбОбновлении.ПланОтложенногоОбновления;

	ТекущаяИтерацияОбновления = СведенияОбОбновлении.ТекущаяИтерацияОбновления;
	ТекущийЦиклОбновления     = Неопределено;
	ЗавершеноУспешно = Истина;
	Пока Истина Цикл
		ЕстьНевыполненные			= Ложь;
		ПредыдущийЦиклОбновления 	= Неопределено;
		Для Каждого ОписаниеЦиклаОбновления Из ПланОбновления Цикл
			Если ОписаниеЦиклаОбновления.Свойство("ЗавершеноСОшибками") Или ОписаниеЦиклаОбновления.Свойство("ЕстьОстановленные") Тогда
				ЗавершеноУспешно = Ложь;
			Иначе
				Если (ПредыдущийЦиклОбновления <> Неопределено И ПредыдущийЦиклОбновления.Обработчики.Количество() <> 0 И ОписаниеЦиклаОбновления.ЗависитОтПредыдущего) Или ОписаниеЦиклаОбновления.Обработчики.Количество() = 0 Тогда
					ПредыдущийЦиклОбновления = ОписаниеЦиклаОбновления;

					Продолжить;
				КонецЕсли;

				ЕстьОшибки			= Ложь;
				ЕстьОстановленные	= Ложь;
				Индекс				= -1;
				Для Каждого ОписаниеОбработчика Из ОписаниеЦиклаОбновления.Обработчики Цикл
					Индекс = Индекс + 1;
					Если ОписаниеОбработчика.Итерация = ТекущаяИтерацияОбновления Тогда
						ЕстьНевыполненные = Истина;

						Продолжить;
					КонецЕсли;

					ДеревоОбработчиков = СведенияОбОбновлении.ДеревоОбработчиков.Строки;
					Если ЗначениеЗаполнено(ОписаниеОбработчика.Идентификатор) Тогда
						ОбработчикОбновления = ДеревоОбработчиков.Найти(ОписаниеОбработчика.Идентификатор, "Идентификатор", Истина);
						Если ОбработчикОбновления = Неопределено Тогда
							ОбработчикОбновления = ДеревоОбработчиков.Найти(ОписаниеОбработчика.ИмяОбработчика, "ИмяОбработчика", Истина);
						КонецЕсли;
					Иначе
						ОбработчикОбновления = ДеревоОбработчиков.Найти(ОписаниеОбработчика.ИмяОбработчика, "ИмяОбработчика", Истина);
					КонецЕсли;

					Если ОбработчикОбновления.Статус = "Приостановлен" Тогда
						ЕстьОстановленные = Истина;

						Продолжить;
					КонецЕсли;

					Если ОбработчикОбновления.ЧислоПопыток >= 3 Тогда
						ЕстьОшибки = Истина;

						Продолжить;
					КонецЕсли;

					ТекущийЦиклОбновления = ОписаниеЦиклаОбновления;

					Прервать;
				КонецЦикла;

				Если ТекущийЦиклОбновления = Неопределено Тогда
					Если ЕстьОшибки Тогда
						ОписаниеЦиклаОбновления.Вставить("ЗавершеноСОшибками");
						ЗавершеноУспешно = Ложь;
					ИначеЕсли ЕстьОстановленные Тогда
						ОписаниеЦиклаОбновления.Вставить("ЕстьОстановленные");
					КонецЕсли;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЕсли;

			ПредыдущийЦиклОбновления = ОписаниеЦиклаОбновления;
		КонецЦикла;

		Если ТекущийЦиклОбновления <> Неопределено Тогда
			КоллекцияОбработчиков							= ТекущийЦиклОбновления.Обработчики;

			Прервать;
		ИначеЕсли ЕстьНевыполненные Тогда
			ТекущаяИтерацияОбновления						= ТекущаяИтерацияОбновления + 1;
			СведенияОбОбновлении.ТекущаяИтерацияОбновления	= ТекущаяИтерацияОбновления;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ТекущийЦиклОбновления = Неопределено Тогда
		СведенияОбОбновлении.ПланОтложенногоОбновления				= ПланОбновления;
		СведенияОбОбновлении.ВремяОкончаниеОтложенногоОбновления	= ТекущаяДатаСеанса();
		СведенияОбОбновлении.ОтложенноеОбновлениеЗавершеноУспешно	= ЗавершеноУспешно;
		ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);
		Константы.ОтложенноеОбновлениеЗавершеноУспешно.Установить(ЗавершеноУспешно);
		Если Не БазоваяПодсистемаСервер.ЭтоПодчиненныйУзелРИБ() Тогда
			Константы.ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно.Установить(ЗавершеноУспешно);
		КонецЕсли;

		Возврат Ложь;
	КонецЕсли;

	ПараллельныйРежим	= (ТекущийЦиклОбновления.Режим = "Параллельно");
	ПараметрыОбновления	= ?(ПараметрыОбновления = Неопределено, Новый Структура, ПараметрыОбновления);
	ПараметрыОбновления.Вставить("ПараллельныйРежим", ПараллельныйРежим);
	Если ПараллельныйРежим Тогда
		ПараметрыОбновления.Вставить("ОчередьОбработчиков", ТекущийЦиклОбновления.ОчередьОбработчиков);
		ПараметрыОбновления.Вставить("ПланОбновления", ПланОбновления);
		ПараметрыОбновления.Вставить("ОбрабатываемыеДанные", СведенияОбОбновлении.ОбрабатываемыеДанные);
	КонецЕсли;

	УстановитьПараметрыОтложенногоОбработчикаОбновления(ОбработчикОбновления, Истина, ПараллельныйРежим);
	ЗапуститьПроцедуруОбработкиДанных(ОбработчикОбновления, ПараметрыОбновления);
	УстановитьПараметрыОтложенногоОбработчикаОбновления(Неопределено);

	Если ОбработчикОбновления.Статус = "Выполнено" Тогда
		КоллекцияОбработчиков.Удалить(Индекс);
		СведенияОБлокируемыхОбъектах	= СведенияОБлокируемыхОбъектах();
		СведенияОбОбработчике			= СведенияОБлокируемыхОбъектах.Обработчики[ОбработчикОбновления.ИмяОбработчика];
		Если СведенияОбОбработчике <> Неопределено Тогда
			СведенияОбОбработчике.Выполнен = Истина;
			ЗаписатьСведенияОБлокируемыхОбъектах(СведенияОБлокируемыхОбъектах);
		КонецЕсли;

		// В параллельном режиме обработчик удаляется из очереди, чтобы можно было определить
		// обработчики каких очередей еще не завершились.
		Если ПараллельныйРежим Тогда
			Строка = ТекущийЦиклОбновления.ОчередьОбработчиков.Найти(ОбработчикОбновления.ИмяОбработчика, "Обработчик");
			ТекущийЦиклОбновления.ОчередьОбработчиков.Удалить(Строка);
		КонецЕсли;
	ИначеЕсли ОбработчикОбновления.Статус = "Выполняется" Тогда
		// Если у обработчика стоит высокий приоритет,
		// то он вызывается пять раз, после чего вызывается следующий обработчик.
		ЗапускиСПриоритетом = Неопределено;
		Если ОбработчикОбновления.Приоритет = "ЖелательноБыстрее" Тогда
			ЗапускиСПриоритетом = ОбработчикОбновления.СтатистикаВыполнения["ЗапускиСПриоритетом"];
			ЗапускиСПриоритетом = ?(ЗапускиСПриоритетом = Неопределено, 1, ?(ЗапускиСПриоритетом = 4, 0, ЗапускиСПриоритетом + 1));
			ОбработчикОбновления.СтатистикаВыполнения.Вставить("ЗапускиСПриоритетом", ЗапускиСПриоритетом);
		КонецЕсли;

		Если ЗапускиСПриоритетом = Неопределено Или ЗапускиСПриоритетом = 0 Тогда
			ОписаниеОбработчика.Итерация = ТекущаяИтерацияОбновления;
		КонецЕсли;
	Иначе
		ОписаниеОбработчика.Итерация = ТекущаяИтерацияОбновления;
	КонецЕсли;

	СведенияОбОбновлении.ПланОтложенногоОбновления = ПланОбновления;

	// В параллельном режиме обновление нужно останавливать, если обработчик не удалось выполнить,
	// т.к. от данных, которые он обрабатывает, могут зависеть другие обработчики.
	Если ПараллельныйРежим И ОбработчикОбновления.Статус = "Ошибка" И ОбработчикОбновления.ЧислоПопыток >= 3 Тогда
		СведенияОбОбновлении.ВремяОкончаниеОтложенногоОбновления	= ТекущаяДатаСеанса();
		СведенияОбОбновлении.ОтложенноеОбновлениеЗавершеноУспешно	= Ложь;
		ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);
		Константы.ОтложенноеОбновлениеЗавершеноУспешно.Установить(Ложь);
		Если Не ОбновлениеИБСервер.ЭтоПодчиненныйУзелРИБ() Тогда
			Константы.ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно.Установить(Ложь);
		КонецЕсли;

		Возврат Ложь;
	КонецЕсли;

	Если ОбновлениеИБСервер.ИнформационнаяБазаФайловая() Тогда
		ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);
	Иначе
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Константа.СведенияОбОбновленииИБ");
			Блокировка.Заблокировать();

			НовыеСведенияОбОбновлении								= СведенияОбОбновленииИнформационнойБазы();
			СведенияОбОбновлении.УправлениеОтложеннымОбновлением	= НовыеСведенияОбОбновлении.УправлениеОтложеннымОбновлением;

			ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();

			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Процедура ВключитьОтключитьОтложенныеОбработчикиОбновления(СведенияОбОбновлении)
	ПланОбновления				= СведенияОбОбновлении.ПланОтложенногоОбновления;
	УправлениеОбработчиками		= СведенияОбОбновлении.УправлениеОтложеннымОбновлением;
	ЗапуститьОбработчики		= Неопределено;
	ОстановитьОбработчики		= Неопределено;
	ПриоритетЖелательноБыстрее	= Неопределено;
	ПриоритетВПлановомПорядке	= Неопределено;

	СведенияОбОбновлении.УправлениеОтложеннымОбновлением.Свойство("ЗапуститьОбработчики", ЗапуститьОбработчики);
	СведенияОбОбновлении.УправлениеОтложеннымОбновлением.Свойство("ОстановитьОбработчики", ОстановитьОбработчики);
	СведенияОбОбновлении.УправлениеОтложеннымОбновлением.Свойство("ПриоритетЖелательноБыстрее", ПриоритетЖелательноБыстрее);
	СведенияОбОбновлении.УправлениеОтложеннымОбновлением.Свойство("ПриоритетВПлановомПорядке", ПриоритетВПлановомПорядке);

	// Запуск остановленных отложенных обработчиков обновления.
	Если ЗапуститьОбработчики <> Неопределено Тогда
		Для Каждого ЗапущенныйОбработчик Из ЗапуститьОбработчики Цикл
			НайденныйОбработчик = СведенияОбОбновлении.ДеревоОбработчиков.Строки.Найти(ЗапущенныйОбработчик, "ИмяОбработчика", Истина);
			Если НайденныйОбработчик <> Неопределено Тогда
				НайденныйОбработчик.Статус = "НеВыполнено";

				Для Каждого ЦиклОбновления Из ПланОбновления Цикл
					Для Каждого ОписаниеОбработчика Из ЦиклОбновления.Обработчики Цикл
						Если ОписаниеОбработчика.ИмяОбработчика = НайденныйОбработчик.ИмяОбработчика Тогда
							Если ЦиклОбновления.Свойство("ЕстьОстановленные") Тогда
								ЦиклОбновления.Удалить("ЕстьОстановленные");
							КонецЕсли;

							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;

		СведенияОбОбновлении.УправлениеОтложеннымОбновлением.Удалить("ЗапуститьОбработчики");
	КонецЕсли;

	// Остановка выполняющихся отложенных обработчиков обновления.
	Если ОстановитьОбработчики <> Неопределено Тогда
		Для Каждого ОстановленныйОбработчик Из ОстановитьОбработчики Цикл
			НайденныйОбработчик = СведенияОбОбновлении.ДеревоОбработчиков.Строки.Найти(ОстановленныйОбработчик, "ИмяОбработчика", Истина);
			Если НайденныйОбработчик <> Неопределено И НайденныйОбработчик.Статус <> "Выполнено" Тогда
				НайденныйОбработчик.Статус = "Приостановлен";
			КонецЕсли;
		КонецЦикла;

		СведенияОбОбновлении.УправлениеОтложеннымОбновлением.Удалить("ОстановитьОбработчики");
	КонецЕсли;

	// Повышение приоритета процедуры обработки данных.
	Если ПриоритетЖелательноБыстрее <> Неопределено Тогда
		Для Каждого Обработчик Из ПриоритетЖелательноБыстрее Цикл
			НайденныйОбработчик = СведенияОбОбновлении.ДеревоОбработчиков.Строки.Найти(Обработчик, "ИмяОбработчика", Истина);
			Если НайденныйОбработчик <> Неопределено И НайденныйОбработчик.Статус <> "Выполнено" Тогда
				НайденныйОбработчик.Приоритет = "ЖелательноБыстрее";
			КонецЕсли;
		КонецЦикла;

		СведенияОбОбновлении.УправлениеОтложеннымОбновлением.Удалить("ПриоритетЖелательноБыстрее");
	КонецЕсли;

	// Понижение приоритета процедуры обработки данных.
	Если ПриоритетВПлановомПорядке <> Неопределено Тогда
		Для Каждого Обработчик Из ПриоритетВПлановомПорядке Цикл
			НайденныйОбработчик = СведенияОбОбновлении.ДеревоОбработчиков.Строки.Найти(Обработчик, "ИмяОбработчика", Истина);
			Если НайденныйОбработчик <> Неопределено И НайденныйОбработчик.Статус <> "Выполнено" Тогда
				НайденныйОбработчик.Приоритет = "ВПлановомПорядке";
			КонецЕсли;
		КонецЦикла;

		СведенияОбОбновлении.УправлениеОтложеннымОбновлением.Удалить("ПриоритетВПлановомПорядке");
	КонецЕсли;

	Если ЗапуститьОбработчики <> Неопределено Или ОстановитьОбработчики <> Неопределено Или ПриоритетЖелательноБыстрее <> Неопределено Или ПриоритетВПлановомПорядке <> Неопределено Тогда
		ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьПараметрыОтложенногоОбработчикаОбновления(ОбработчикОбновления, Отложенно = Ложь, Параллельно = Ложь)
	Если ОбработчикОбновления = Неопределено Тогда
		ПараметрыСеанса.ПараметрыОбработчикаОбновления = Новый ФиксированнаяСтруктура(НовыеПараметрыОбработчикаОбновления());

		Возврат;
	КонецЕсли;

	Если Отложенно Тогда
		РежимВыполнения = "Отложенно";
	Иначе
		РежимВыполнения = "Монопольно";
	КонецЕсли;

	Если Параллельно Тогда
		РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	Иначе
		РежимВыполненияОтложенныхОбработчиков = "Последовательно";
	КонецЕсли;

	ПараметрыОбработчикаОбновления											= НовыеПараметрыОбработчикаОбновления();
	ПараметрыОбработчикаОбновления.ЗапускатьТолькоВГлавномУзле				= ОбработчикОбновления.ЗапускатьТолькоВГлавномУзле;
	ПараметрыОбработчикаОбновления.ЗапускатьИВПодчиненномУзлеРИБСФильтрами	= ОбработчикОбновления.ЗапускатьИВПодчиненномУзлеРИБСФильтрами;
	ПараметрыОбработчикаОбновления.ОчередьОтложеннойОбработки				= ОбработчикОбновления.ОчередьОтложеннойОбработки;
	ПараметрыОбработчикаОбновления.РежимВыполнения							= РежимВыполнения;
	ПараметрыОбработчикаОбновления.РежимВыполненияОтложенныхОбработчиков	= РежимВыполненияОтложенныхОбработчиков;
	ПараметрыОбработчикаОбновления.ЕстьОбработанныеОбъекты					= Ложь;

	ПараметрыСеанса.ПараметрыОбработчикаОбновления = Новый ФиксированнаяСтруктура(ПараметрыОбработчикаОбновления);
КонецПроцедуры

Процедура ЗапуститьПроцедуруОбработкиДанных(ОбработчикОбновления, ПараметрыОбновления)
	ЗаписыватьВЖурнал					= Константы.ДетализироватьОбновлениеИБВЖурналеРегистрации.Получить();
	ТранзакцияАктивнаНаНачалоВыполнения = ТранзакцияАктивна();
	ИмяОбработчика = ОбработчикОбновления.ИмяОбработчика;
	Попытка
		СообщениеОЗапущенномОбработчике = СтрШаблон("Выполняется процедура обновления ""%1"".", ИмяОбработчика);
		ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Информация,,, СообщениеОЗапущенномОбработчике);

		// Прогресс выполнения процедуры обработки данных.
		ПрогрессВыполнения = Новый Структура;
		ПрогрессВыполнения.Вставить("ВсегоОбъектов", 0);
		ПрогрессВыполнения.Вставить("ОбработаноОбъектов", 0);
		Если ОбработчикОбновления.СтатистикаВыполнения["ПрогрессВыполнения"] <> Неопределено И ТипЗнч(ОбработчикОбновления.СтатистикаВыполнения["ПрогрессВыполнения"]) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ПрогрессВыполнения, ОбработчикОбновления.СтатистикаВыполнения["ПрогрессВыполнения"]);
		КонецЕсли;

		// Инициализация параметров обработчика.
		Параметры = ОбработчикОбновления.СтатистикаВыполнения["ПараметрыОбработчика"];
		Если Параметры = Неопределено Тогда
			Параметры = Новый Структура;
		КонецЕсли;
		Если ПараметрыОбновления.ПараллельныйРежим Тогда
			Параметры.Вставить("ОбработкаЗавершена", Неопределено);
		Иначе
			Параметры.Вставить("ОбработкаЗавершена", Истина);
		КонецЕсли;

		Параметры.Вставить("ПрогрессВыполнения", ПрогрессВыполнения);

		Параметры.Вставить("Очередь", ОбработчикОбновления.ОчередьОтложеннойОбработки);

		ПараметрыОбработчика = Новый Массив;
		ПараметрыОбработчика.Добавить(Параметры);

		Если ЗаписыватьВЖурнал Тогда
			ОписаниеОбработчика = ПодготовитьДетальнуюИнформациюОХодеОбновления(ОбработчикОбновления, Параметры, ОбработчикОбновления.ИмяБиблиотеки, Истина);
		КонецЕсли;

		КоличествоЗапусковПроцедурыОбновления = ОбработчикОбновления.СтатистикаВыполнения["КоличествоЗапусков"];
		Если КоличествоЗапусковПроцедурыОбновления = Неопределено Тогда
			КоличествоЗапусковПроцедурыОбновления = 0;
		ИначеЕсли КоличествоЗапусковПроцедурыОбновления > 10000 Тогда // Защита от зацикливания.
			ОбработчикОбновления.ЧислоПопыток	= 3;
			ТекстОшибки							= "Превышено допустимое количество запусков процедуры обновления. Выполнение прервано для предотвращения зацикливания механизма обработки данных.";

			ВызватьИсключение ТекстОшибки;
		КонецЕсли;

		// Запуск отложенного обработчика обновления.
		ОбработчикОбновления.Статус = "Выполняется";
		Если ОбработчикОбновления.СтатистикаВыполнения["НачалоОбработкиДанных"] = Неопределено Тогда
			ОбработчикОбновления.СтатистикаВыполнения.Вставить("НачалоОбработкиДанных", ТекущаяДатаСеанса());
		КонецЕсли;

		НачалоОбработкиДанных = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ПропуститьПроверкуОбработанныхДанных = Ложь;
		Если ПараметрыОбновления.ПараллельныйРежим
			И БазоваяПодсистемаСервер.ЭтоПодчиненныйУзелРИБ()
			И ОбработчикОбновления.ЗапускатьТолькоВГлавномУзле Тогда
			// В подчиненном узле РИБ только проверяем, что обрабатываемые обработчиком данные
			// пришли из главного узла и обновляем статус обработчика.
			ПропуститьПроверкуОбработанныхДанных	= Истина;
			ОбрабатываемыеДанные					= ПараметрыОбновления.ОбрабатываемыеДанные[ОбработчикОбновления.ИмяОбработчика];
			Если ОбрабатываемыеДанные.Количество() = 0 Тогда
				Параметры.ОбработкаЗавершена = Истина;
			Иначе
				Для Каждого ОбрабатываемыйОбъект Из ОбрабатываемыеДанные Цикл
					Параметры.ОбработкаЗавершена = Не ЕстьДанныеДляОбработки(ОбработчикОбновления.ОчередьОтложеннойОбработки, ОбрабатываемыйОбъект.Ключ, Неопределено);
					Если Не Параметры.ОбработкаЗавершена Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			БазоваяПодсистемаСервер.ВыполнитьМетодКонфигурации(ИмяОбработчика, ПараметрыОбработчика);
		КонецЕсли;
		ЗавершениеОбработкиДанных = ТекущаяУниверсальнаяДатаВМиллисекундах();

		Если Параметры.ОбработкаЗавершена = Неопределено Тогда
			ТекстОшибки = "Обработчик обновления не инициализировал параметр ОбработкаЗавершена. Выполнение прервано из-за явной ошибки в коде обработчика.";

			ВызватьИсключение ТекстОшибки;
		КонецЕсли;

		Если Параметры.ОбработкаЗавершена Тогда
			ОбработчикОбновления.Статус		= "Выполнено";
			ОбработчикОбновления.Приоритет	= "ВПлановомПорядке";
			ОбработчикОбновления.СтатистикаВыполнения.Вставить("ЗавершениеОбработкиДанных", ТекущаяДатаСеанса());

			// Запись прогресса обновления.
			Если ПараметрыОбновления.Свойство("ВФоне") И ПараметрыОбновления.ВФоне Тогда
				ХодВыполненияОбработчиков						= ПараметрыОбновления.ХодВыполненияОбработчиков;
				ХодВыполненияОбработчиков.ВыполненоОбработчиков	= ХодВыполненияОбработчиков.ВыполненоОбработчиков + 1;
				Прогресс										= 10 + ХодВыполненияОбработчиков.ВыполненоОбработчиков / ХодВыполненияОбработчиков.ВсегоОбработчиков * 90;
				БазоваяПодсистемаСервер.СообщитьПрогресс(Прогресс);
			КонецЕсли;
		ИначеЕсли ПараметрыОбновления.ПараллельныйРежим И Не ПропуститьПроверкуОбработанныхДанных Тогда
			ЕстьОбработанныеОбъекты	= ПараметрыСеанса.ПараметрыОбработчикаОбновления.ЕстьОбработанныеОбъекты;
			ОчередьОбработчика		= ОбработчикОбновления.ОчередьОтложеннойОбработки;

			МинимальнаяОчередь = 0;
			Если Не ЕстьОбработанныеОбъекты Тогда
				Для Каждого ЦиклОбновления Из ПараметрыОбновления.ПланОбновления Цикл
					Если ЦиклОбновления.Режим = "Последовательно" Или ЦиклОбновления.ОчередьОбработчиков.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;

					Если МинимальнаяОчередь = 0 Тогда
						МинимальнаяОчередь		= ЦиклОбновления.ОчередьОбработчиков[0].Очередь;
					Иначе
						МинимальнаяОчередьЦикла	= ЦиклОбновления.ОчередьОбработчиков[0].Очередь;
						МинимальнаяОчередь		= Мин(МинимальнаяОчередь, МинимальнаяОчередьЦикла);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			Если Не ЕстьОбработанныеОбъекты И ОчередьОбработчика = МинимальнаяОчередь Тогда
				ЧислоПопыток = ОбработчикОбновления.ЧислоПопыток;
				Если ЧислоПопыток >= 2 Тогда
					ТекстИсключения = "Произошло зацикливание процедуры обработки данных. Выполнение прервано.";

					ВызватьИсключение ТекстИсключения;
				Иначе
					ОбработчикОбновления.ЧислоПопыток = ЧислоПопыток + 1;
				КонецЕсли;
			Иначе
				ОбработчикОбновления.ЧислоПопыток = 0;
			КонецЕсли;
		КонецЕсли;

		// Сохранение данных по процедуре обработки данных.
		ОбработчикОбновления.СтатистикаВыполнения.Вставить("ПрогрессВыполнения", Параметры.ПрогрессВыполнения);

		КоличествоЗапусковПроцедурыОбновления	= КоличествоЗапусковПроцедурыОбновления + 1;
		ДлительностьВыполнения					= ЗавершениеОбработкиДанных - НачалоОбработкиДанных;
		Если ОбработчикОбновления.СтатистикаВыполнения["ДлительностьВыполнения"] <> Неопределено Тогда
			ДлительностьВыполнения = ДлительностьВыполнения + ОбработчикОбновления.СтатистикаВыполнения["ДлительностьВыполнения"];
		КонецЕсли;
		ОбработчикОбновления.СтатистикаВыполнения.Вставить("ДлительностьВыполнения", ДлительностьВыполнения);
		ОбработчикОбновления.СтатистикаВыполнения.Вставить("КоличествоЗапусков", КоличествоЗапусковПроцедурыОбновления);
	Исключение
		Если ЗаписыватьВЖурнал Тогда
			ЗаписатьДетальнуюИнформациюОХодеОбновления(ОписаниеОбработчика);
		КонецЕсли;

		Пока ТранзакцияАктивна() Цикл
			ОтменитьТранзакцию();
		КонецЦикла;

		ОбработчикОбновления.Статус				= "Ошибка";
		ОбработчикОбновления.ЧислоПопыток		= ОбработчикОбновления.ЧислоПопыток + 1;
		ИнформацияОбОшибке						= ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки			= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ОбработчикОбновления.ИнформацияОбОшибке = ПодробноеПредставлениеОшибки;
		ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
	КонецПопытки;

	// Если обработчик обновления передал параметры, их нужно сохранить.
	ПереданныеПараметры = ПереданныеПараметрыОбработчикаОбновления(Параметры);
	ОбработчикОбновления.СтатистикаВыполнения.Вставить("ПараметрыОбработчика", ПереданныеПараметры);

	Попытка
		ПроверитьВложеннуюТранзакцию(ТранзакцияАктивнаНаНачалоВыполнения, ИмяОбработчика);
	Исключение
		// В случае нахождения вложенной транзакции обработчик обновления повторно не вызывается.
		ИнформацияОбОшибке				= ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки	= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);

		Если ОбработчикОбновления.Статус <> "Ошибка" Тогда
			ОбработчикОбновления.ИнформацияОбОшибке = ПодробноеПредставлениеОшибки;
		Иначе
			ОбработчикОбновления.ИнформацияОбОшибке = ОбработчикОбновления.ИнформацияОбОшибке + Символы.ПС + ПодробноеПредставлениеОшибки;
		КонецЕсли;

		ОбработчикОбновления.ЧислоПопыток = 3;
	КонецПопытки;

	Если ЗаписыватьВЖурнал Тогда
		ЗаписатьДетальнуюИнформациюОХодеОбновления(ОписаниеОбработчика);
	КонецЕсли;
КонецПроцедуры

// Получает сведения об обновлении информационной базы
// из константы "СведенияОбОбновленииИБ".
Функция СведенияОБлокируемыхОбъектах() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	СведенияОБлокируемыхОбъектах = Константы.СведенияОБлокируемыхОбъектах.Получить().Получить();
	Если ТипЗнч(СведенияОБлокируемыхОбъектах) <> Тип("Структура") Тогда
		Возврат НовыеСведенияОБлокируемыхОбъектах();
	КонецЕсли;

	СведенияОБлокируемыхОбъектах = НовыеСведенияОБлокируемыхОбъектах(СведенияОБлокируемыхОбъектах);

	Возврат СведенияОБлокируемыхОбъектах;
КонецФункции

Функция НовыеСведенияОБлокируемыхОбъектах(СтарыеСведения = Неопределено)
	СведенияОБлокируемыхОбъектах = Новый Структура;
	СведенияОБлокируемыхОбъектах.Вставить("БлокируемыеОбъекты", Новый Соответствие);
	СведенияОБлокируемыхОбъектах.Вставить("Обработчики", Новый Соответствие);

	Если ТипЗнч(СтарыеСведения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СведенияОБлокируемыхОбъектах, СтарыеСведения);
	КонецЕсли;

	Возврат СведенияОБлокируемыхОбъектах;
КонецФункции

Процедура ЗаписатьСведенияОБлокируемыхОбъектах(Сведения)
	Если Сведения = Неопределено Тогда
		НовоеЗначение = НовыеСведенияОБлокируемыхОбъектах();
	Иначе
		НовоеЗначение = Сведения;
	КонецЕсли;

	МенеджерКонстанты			= Константы.СведенияОБлокируемыхОбъектах.СоздатьМенеджерЗначения();
	МенеджерКонстанты.Значение	= Новый ХранилищеЗначения(НовоеЗначение);
	ЗаписатьДанные(МенеджерКонстанты);
КонецПроцедуры

Функция ПодготовитьДетальнуюИнформациюОХодеОбновления(Обработчик, Параметры, ИдентификаторБиблиотеки, ОбработчикОтложенный = Ложь)
	ОписаниеОбработчика = Новый Структура;
	ОписаниеОбработчика.Вставить("Библиотека", ИдентификаторБиблиотеки);
	Если ОбработчикОтложенный Тогда
		ОписаниеОбработчика.Вставить("Версия", Обработчик.НомерВерсии);
		ОписаниеОбработчика.Вставить("Процедура", Обработчик.ИмяОбработчика);
	Иначе
		ОписаниеОбработчика.Вставить("Версия", Обработчик.Версия);
		ОписаниеОбработчика.Вставить("Процедура", Обработчик.Процедура);
	КонецЕсли;
	ОписаниеОбработчика.Вставить("ВерсияРегистрации", Обработчик.ВерсияРегистрации);
	ОписаниеОбработчика.Вставить("Параметры", Параметры);

	Если ОбработчикОтложенный Тогда
		ОписаниеОбработчика.Вставить("РежимВыполнения", "Отложенно");
	ИначеЕсли ЗначениеЗаполнено(Обработчик.РежимВыполнения) Тогда
		ОписаниеОбработчика.Вставить("РежимВыполнения", Обработчик.РежимВыполнения);
	Иначе
		ОписаниеОбработчика.Вставить("РежимВыполнения", "Монопольно");
	КонецЕсли;

	ОписаниеОбработчика.Вставить("ЗначениеНаНачало", ТекущаяУниверсальнаяДатаВМиллисекундах());

	Возврат ОписаниеОбработчика;
КонецФункции

// Проверяет, есть ли еще необработанные данные.
//
// Параметры:
//  Очередь    - Число        - очередь, к которой отнесен обработчик и в которой зарегистрированы данные,
//                              которые он будет обрабатывать.
//             - Неопределено - проверяется, завершена ли обработка в целом;
//             - Массив       - проверяется есть данные для обработки в списке очередей.
//  ПолноеИмяМетаданныеОбъекта- Строка, ОбъектМетаданных - полное имя обрабатываемого объекта или
//                              его метаданные. Например, "Документ.ПриходныйОрдерНаТовары"
//                            - Массив - массив полных имен объектов или объектов метаданных,
//                              в массиве не должно быть независимых регистров сведений.
//  Отбор - ЛюбаяСсылка, Структура, Неопределено, Массив - отбор данных для проверки.
//                              Если передано Неопределено - проверяется по всему типу объекта,
//                              Если объект - регистр, подчиненный регистратору, то в отборе - ссылка
//                                 на регистратор или массив ссылок.
//                              Если объект ссылочного типа, то в отборе - или ссылка, или массив ссылок.
//                              Если объект - независимый регистр сведений, то в отборе - структура со значениями измерений.
//                              Ключ структуры - имя измерения, значение - значение отбора (можно передать массив значений).
//
// Возвращаемое значение:
//  Булево - Истина, если еще не все данные обработаны.
//
Функция ЕстьДанныеДляОбработки(Очередь, ПолноеИмяМетаданныеОбъекта, Отбор = Неопределено) Экспорт
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		ЭтоПодчиненныйУзелРИБ = БазоваяПодсистемаСервер.ЭтоПодчиненныйУзелРИБ();
		Если Не ЭтоПодчиненныйУзелРИБ Тогда
			Возврат Ложь;
		ИначеЕсли ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно") Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Если ТипЗнч(ПолноеИмяМетаданныеОбъекта) = Тип("Строка") Тогда
		ПолныеИменаОбрабатываемыхОбъектов = СтрРазделить(ПолноеИмяМетаданныеОбъекта, ",");
	ИначеЕсли ТипЗнч(ПолноеИмяМетаданныеОбъекта) = Тип("Массив") Тогда
		ПолныеИменаОбрабатываемыхОбъектов = ПолноеИмяМетаданныеОбъекта;
	ИначеЕсли ТипЗнч(ПолноеИмяМетаданныеОбъекта) = Тип("ОбъектМетаданных") Тогда
		ПолныеИменаОбрабатываемыхОбъектов = Новый Массив;
		ПолныеИменаОбрабатываемыхОбъектов.Добавить(ПолноеИмяМетаданныеОбъекта.ПолноеИмя());
	Иначе
		ТекстИсключения = "Передан неправильный тип параметра ""ПолноеИмяМетаданныеОбъекта"" в функцию ОбновлениеИБСервер.ЕстьДанныеДляОбработки";
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	Запрос			= Новый Запрос;

	ТекстыЗапроса	= Новый Массив;
	ОтборУстановлен	= Ложь;

	Для каждого ОбрабатываемыйТип Из ПолныеИменаОбрабатываемыхОбъектов Цикл
		Если ТипЗнч(ОбрабатываемыйТип) = Тип("ОбъектМетаданных") Тогда
			МетаданныеОбъекта = ОбрабатываемыйТип;
			ПолноеИмяОбъекта  = ОбрабатываемыйТип.ПолноеИмя();
		Иначе
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ОбрабатываемыйТип);
			ПолноеИмяОбъекта  = ОбрабатываемыйТип;
		КонецЕсли;

		УсловиеОтбораДанных = "ИСТИНА";

		Если БазоваяПодсистемаСервер.ЭтоОбъектСсылочногоТипа(МетаданныеОбъекта) Тогда
			ТекстЗапроса	= "ВЫБРАТЬ ПЕРВЫЕ 1
			            	  |	ТаблицаИзменений.Ссылка КАК Ссылка
			            	  |ИЗ
			            	  |	#ТаблицаИзменений КАК ТаблицаИзменений
			            	  |ГДЕ
			            	  |	&УсловиеОтбораУзла
			            	  |	И &УсловиеОтбораДанных";
			Запрос.УстановитьПараметр("Ссылка", Отбор);

			Если Отбор <> Неопределено Тогда
				УсловиеОтбораДанных = "ТаблицаИзменений.Ссылка В (&Отбор)";
			КонецЕсли;

		ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта)
			И МетаданныеОбъекта.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда

			Если ПолныеИменаОбрабатываемыхОбъектов.Количество() > 1 Тогда
				ТекстИсключения = "В массиве имен в параметре ""ПолноеИмяМетаданныеОбъекта"" в функцию ОбновлениеИБСервер.ЕстьДанныеДляОбработки передан независимый регистр сведений.";

				ВызватьИсключение ТекстИсключения;
			КонецЕсли;

			ОтборУстановлен = Истина;

			ТекстЗапроса	= "ВЫБРАТЬ ПЕРВЫЕ 1
			            	  |	&ТекстВыборкиИзмерений КАК ТекстВыборкиИзмерений
			            	  |ИЗ
			            	  |	#ТаблицаИзменений КАК ТаблицаИзменений
			            	  |ГДЕ
			            	  |	&УсловиеОтбораУзла
			            	  |	И &УсловиеОтбораДанных";
			ТекстВыборкиИзмерений = "";
			Для Каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
				Если Не Измерение.ОсновнойОтбор Тогда
					Продолжить;
				КонецЕсли;

				ТекстВыборкиИзмерений = ТекстВыборкиИзмерений + "
				|	ТаблицаИзменений." + Измерение.Имя + " КАК " + Измерение.Имя + ",";

				Если Отбор <> Неопределено Тогда
					УсловиеОтбораДанных = УсловиеОтбораДанных + "
					|	И (ТаблицаИзменений." + Измерение.Имя + " В (&ЗначениеОтбора" + Измерение.Имя + ")
					|		ИЛИ ТаблицаИзменений." + Измерение.Имя + " = &ПустоеЗначение" + Измерение.Имя + ")";

					Если Отбор.Свойство(Измерение.Имя) Тогда
						Запрос.УстановитьПараметр("ЗначениеОтбора" + Измерение.Имя, Отбор[Измерение.Имя]);
					Иначе
						Запрос.УстановитьПараметр("ЗначениеОтбора" + Измерение.Имя, Измерение.Тип.ПривестиЗначение());
					КонецЕсли;

					Запрос.УстановитьПараметр("ПустоеЗначение" + Измерение.Имя, Измерение.Тип.ПривестиЗначение());
				КонецЕсли;
			КонецЦикла;

			Если ПустаяСтрока(ТекстВыборкиИзмерений) Тогда
				ТекстВыборкиИзмерений = "*";
			Иначе
				ТекстВыборкиИзмерений = Лев(ТекстВыборкиИзмерений, СтрДлина(ТекстВыборкиИзмерений) - 1);
			КонецЕсли;

			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборкиИзмерений", ТекстВыборкиИзмерений);

		ИначеЕсли БазоваяПодсистемаСервер.ЭтоРегистр(МетаданныеОбъекта) Тогда
			ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
			               |	ТаблицаИзменений.Регистратор КАК Ссылка
			               |ИЗ
			               |	#ТаблицаИзменений КАК ТаблицаИзменений
			               |ГДЕ
			               |	&УсловиеОтбораУзла
			               |	И &УсловиеОтбораДанных";
			Если Отбор <> Неопределено Тогда
				УсловиеОтбораДанных = "ТаблицаИзменений.Регистратор В (&Отбор)";
			КонецЕсли;
		Иначе
			ТекстИсключения = "Для типа метаданных ""%МетаданныеОбъекта%"" не поддерживается проверка в функции ОбновлениеИБСервер.ЕстьДанныеДляОбработки";
			ТекстИсключения = СтрЗаменить(ТекстИсключения, "%МетаданныеОбъекта%", Строка(МетаданныеОбъекта));

			ВызватьИсключение ТекстИсключения;
		КонецЕсли;

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаИзменений", ПолноеИмяОбъекта + ".Изменения");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораДанных", УсловиеОтбораДанных);

		ТекстыЗапроса.Добавить(ТекстЗапроса);
	КонецЦикла;

	Соединитель = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|";

	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, Соединитель);

	Если Очередь = Неопределено Тогда
		УсловиеОтбораУзла = "	ТаблицаИзменений.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы ";
	Иначе
		УсловиеОтбораУзла = "	ТаблицаИзменений.Узел В (&Узлы) ";
		Если ТипЗнч(Очередь) = Тип("Массив") Тогда
			Запрос.УстановитьПараметр("Узлы", Очередь);
		Иначе
			Запрос.УстановитьПараметр("Узлы", ПланыОбмена.ОбновлениеИнформационнойБазы.УзелПоОчереди(Очередь));
		КонецЕсли;
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораУзла", УсловиеОтбораУзла);

	Если Не ОтборУстановлен Тогда
		Запрос.УстановитьПараметр("Отбор", Отбор);
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;

	Возврат Не Запрос.Выполнить().Пустой();
КонецФункции

Процедура ЗаписатьДетальнуюИнформациюОХодеОбновления(ОписаниеОбработчика)
	Длительность = ТекущаяУниверсальнаяДатаВМиллисекундах() - ОписаниеОбработчика.ЗначениеНаНачало;

	ОписаниеОбработчика.Вставить("Выполнен", Ложь);
	ОписаниеОбработчика.Вставить("Длительность", Длительность / 1000); // В секундах

	ЗаписьЖурналаРегистрации(
		"Обновление информационной базы.Протокол выполнения",
		УровеньЖурналаРегистрации.Информация,
		,
		,
		БазоваяПодсистемаСервер.ЗначениеВСтрокуXML(ОписаниеОбработчика));
КонецПроцедуры

Функция ПереданныеПараметрыОбработчикаОбновления(Параметры)
	ПереданныеПараметры = Новый Структура;
	Для Каждого Параметр Из Параметры Цикл
		Если Параметр.Ключ <> "ОбработкаЗавершена" И Параметр.Ключ <> "ПрогрессВыполнения" И Параметр.Ключ <> "Очередь" Тогда
			ПереданныеПараметры.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
	КонецЦикла;

	Возврат ПереданныеПараметры;
КонецФункции

Процедура ПроверитьВложеннуюТранзакцию(ТранзакцияАктивнаНаНачалоВыполнения, НазваниеОбработчика)
	ИмяСобытия = "Обновление информационной базы.Выполнение обработчиков";
	Если ТранзакцияАктивнаНаНачалоВыполнения Тогда
		Если ТранзакцияАктивна() Тогда
			// Проверка поглощенных исключений в обработчиках.
			Попытка
				Константы.РаботаВЛокальномРежиме.Получить();
			Исключение
				ШаблонКомментария = "Ошибка выполнения обработчика обновления %1:
				|Обработчиком обновления было поглощено исключение при активной внешней транзакции.
				|При активных транзакциях, открытых выше по стеку, исключение также необходимо пробрасывать выше по стеку.";
				Комментарий = СтрШаблон(ШаблонКомментария, НазваниеОбработчика);

				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);

				ВызватьИсключение(Комментарий);
			КонецПопытки;
		Иначе
			ШаблонКомментария	= "Ошибка выполнения обработчика обновления %1:
			|Обработчиком обновления была закрыта лишняя транзакция, открытая ранее (выше по стеку).";
			Комментарий			= СтрШаблон(ШаблонКомментария, НазваниеОбработчика);

			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);

			ВызватьИсключение(Комментарий);
		КонецЕсли;
	Иначе
		Если ТранзакцияАктивна() Тогда
			ШаблонКомментария	= "Ошибка выполнения обработчика обновления %1:
			|Открытая внутри обработчика обновления транзакция осталась активной (не была закрыта или отменена).";
			Комментарий			= СтрШаблон(ШаблонКомментария, НазваниеОбработчика);

			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);

			ВызватьИсключение(Комментарий);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ВыполненыВсеОтложенныеОбработчики(СведенияОбОбновлении)
	ВыполненоОбработчиков = 0;
	ВсегоОбработчиков     = 0;
	Для Каждого СтрокаДереваБиблиотека Из СведенияОбОбновлении.ДеревоОбработчиков.Строки Цикл
		Для Каждого СтрокаДереваВерсия Из СтрокаДереваБиблиотека.Строки Цикл
			ВсегоОбработчиков = ВсегоОбработчиков + СтрокаДереваВерсия.Строки.Количество();
			Для Каждого Обработчик Из СтрокаДереваВерсия.Строки Цикл
				Если Обработчик.Статус = "Выполнено" Тогда
					ВыполненоОбработчиков = ВыполненоОбработчиков + 1;
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Если ВсегоОбработчиков = ВыполненоОбработчиков Тогда
		СведенияОбОбновлении.ВремяОкончаниеОтложенногоОбновления	= ТекущаяДатаСеанса();
		СведенияОбОбновлении.ОтложенноеОбновлениеЗавершеноУспешно	= Истина;
		ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);
		Константы.ОтложенноеОбновлениеЗавершеноУспешно.Установить(Истина);
		Если Не БазоваяПодсистемаСервер.ЭтоПодчиненныйУзелРИБ() Тогда
			Константы.ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно.Установить(Истина);
		КонецЕсли;

		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции
