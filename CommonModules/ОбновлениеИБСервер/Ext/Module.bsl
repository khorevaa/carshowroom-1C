////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обновление информационной базы"
//
////////////////////////////////////////////////////////////////////////////////

Процедура УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	Если ИмяПараметра = "ВыполняетсяОбновлениеИБ" Тогда
		ПараметрыСеанса.ВыполняетсяОбновлениеИБ = ОбновлениеИБСерверПовтИсп.НеобходимоОбновлениеИнформационнойБазы();
		УстановленныеПараметры.Добавить("ВыполняетсяОбновлениеИБ");
	ИначеЕсли ИмяПараметра = "ПараметрыОбработчикаОбновления" Тогда
		ПараметрыСеанса.ПараметрыОбработчикаОбновления = Новый ФиксированнаяСтруктура(НовыеПараметрыОбработчикаОбновления());
		УстановленныеПараметры.Добавить("ПараметрыОбработчикаОбновления");
	КонецЕсли;
КонецПроцедуры

// Устанавливает состояние запуска обновления информационной.
// Требуется привилегированный режим.
//
// Параметры:
//  Запуск - Булево - Если установить Истина, состояние будет установлено,
//           если установить Ложь, состояние будет снято.
//
Процедура УстановитьЗапускОбновленияИнформационнойБазы(Запуск) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ТекущиеПараметры = Новый Соответствие(ПараметрыСеанса.ПараметрыКлиентаНаСервере);

	Если Запуск = Истина Тогда
		ТекущиеПараметры.Вставить("ЗапуститьОбновлениеИнформационнойБазы", Истина);
	ИначеЕсли ТекущиеПараметры.Получить("ЗапуститьОбновлениеИнформационнойБазы") <> Неопределено Тогда
		ТекущиеПараметры.Удалить("ЗапуститьОбновлениеИнформационнойБазы");
	КонецЕсли;

	ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(ТекущиеПараметры);
КонецПроцедуры

// Записывает изменения в переданном объекте.
// Для использования в обработчиках обновления.
//
// Параметры:
//   Данные                            - Произвольный - объект, набор записей или менеджер константы, который
//                                                      необходимо записать.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьДанные(Знач Данные, Знач РегистрироватьНаУзлахПлановОбмена = Неопределено, Знач ВключитьБизнесЛогику = Ложь) Экспорт
	Данные.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	Данные.ДополнительныеСвойства.Вставить("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ", РегистрироватьНаУзлахПлановОбмена);

	Если (РегистрироватьНаУзлахПлановОбмена = Неопределено) Или Не РегистрироватьНаУзлахПлановОбмена Тогда
		Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;

	Данные.Записать();

	ОтметитьВыполнениеОбработки(Данные);
КонецПроцедуры

// Отмечает, что переданные данные обновлены.
//
// Параметры:
//  Данные					 - Ссылка, Массив, НаборДанных - данные, по которым нужно зарегистрировать изменения.
//							 - ТаблицаЗначений - значения измерений независимого регистра сведений. Требования:
//													- все измерения регистра должны входить в основной отбор
//													- в таблице должны быть только колонки, соответствующие по именам измерениям регистра,
//														по которым ранее регистрировалась необходимость обработки
//													- запись наборов в процессе обновления должна проходить с тем же отбором,
//														что и регистрация необходимости обработки
//													- в ДополнительныеПараметры нужно передать соответствующий признак и полное имя регистра.
//  ДополнительныеПараметры	 - Структура - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки.
//  Очередь					 - Число, Неопределено - очередь обработки, в которой выполняется текущий обработчик. По умолчанию очередь передавать
//													не нужно, т.к. она будет взята из параметров сеанса, в котором запущен обработчик обновления.
//
Процедура ОтметитьВыполнениеОбработки(Данные, ДополнительныеПараметры = Неопределено, Очередь = Неопределено) Экспорт
	Если Очередь = Неопределено Тогда
		Если ПараметрыСеанса.ПараметрыОбработчикаОбновления.РежимВыполнения <> "Отложенно" Или ПараметрыСеанса.ПараметрыОбработчикаОбновления.РежимВыполненияОтложенныхОбработчиков <> "Параллельно" Тогда
			Возврат;
		КонецЕсли;

		Очередь = ПараметрыСеанса.ПараметрыОбработчикаОбновления.ОчередьОтложеннойОбработки;

		Если Не ПараметрыСеанса.ПараметрыОбработчикаОбновления.ЕстьОбработанныеОбъекты Тогда
			НовыеПараметрыСеанса							= НовыеПараметрыОбработчикаОбновления();
			ЗаполнитьЗначенияСвойств(НовыеПараметрыСеанса, ПараметрыСеанса.ПараметрыОбработчикаОбновления);
			НовыеПараметрыСеанса.ЕстьОбработанныеОбъекты	= Истина;
			
			ПараметрыСеанса.ПараметрыОбработчикаОбновления	= Новый ФиксированнаяСтруктура(НовыеПараметрыСеанса);
		КонецЕсли;
	КонецЕсли;

	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыОтметкиОбработки();
	КонецЕсли;

	Если (ТипЗнч(Данные) = Тип("Массив") Или ТипЗнч(Данные) = Тип("ТаблицаЗначений")) И Данные.Количество() = 0 Тогда
		ТекстИсключения = "В процедуру ОбновлениеИБ.ОтметитьВыполнениеОбработки передан пустой массив. Не возможно отметить выполнение обработки.";

		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Узел = ПланыОбмена.ОбновлениеИнформационнойБазы.УзелПоОчереди(Очередь);

	Если ДополнительныеПараметры.ЭтоДвижения Тогда
		Набор = БазоваяПодсистемаСервер.МенеджерОбъектаПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра).СоздатьНаборЗаписей();

		Если ТипЗнч(Данные) = Тип("Массив") Тогда
			Для Каждого СтрокаМассива Из Данные Цикл
				Набор.Отбор.Регистратор.Установить(СтрокаМассива);
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Набор);
			КонецЦикла;
		Иначе
			Набор.Отбор.Регистратор.Установить(Данные);
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Набор);
		КонецЕсли;
	ИначеЕсли ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений Тогда
		Набор				= БазоваяПодсистемаСервер.МенеджерОбъектаПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра).СоздатьНаборЗаписей();
		МетаданныеОбъекта	= Метаданные.НайтиПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра);

		УстановитьНедостающиеОтборыВНаборе(Набор, МетаданныеОбъекта, Данные);	

		Для каждого СтрокаТаблицы Из Данные Цикл
			Для Каждого Колонка Из Данные.Колонки Цикл
				Набор.Отбор[Колонка.Имя].Значение = СтрокаТаблицы[Колонка.Имя];
				Набор.Отбор[Колонка.Имя].Использование = Истина;
			КонецЦикла;

			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Набор);
		КонецЦикла;
	Иначе
		Если ТипЗнч(Данные) = Тип("ОбъектМетаданных") Тогда
			ТекстИсключения = "Не поддерживается отметка выполнения обработки обновления целиком объекта метаданных. Нужно отмечать обработку конкретных данных.";

			ВызватьИсключение ТекстИсключения;
		КонецЕсли;

		Если ТипЗнч(Данные) <> Тип("Массив") Тогда
			ТипЗначенияОбъекта = ТипЗнч(Данные);
			МетаданныеОбъекта  = Метаданные.НайтиПоТипу(ТипЗначенияОбъекта);

			Если Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта) И МетаданныеОбъекта.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
				УстановитьНедостающиеОтборыВНаборе(Данные, МетаданныеОбъекта, Данные.Отбор);
			ИначеЕсли БазоваяПодсистемаСервер.ЭтоОбъектСсылочногоТипа(МетаданныеОбъекта) И Не БазоваяПодсистемаСервер.ЭтоСсылка(ТипЗначенияОбъекта) И Данные.ЭтоНовый() Тогда
				Возврат;
			КонецЕсли;

			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Данные);
		Иначе
			Для Каждого ЭлементМассива Из Данные Цикл
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ЭлементМассива);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если Не БазоваяПодсистемаСервер.ЭтоПодчиненныйУзелРИБ() Тогда
		РегистрыСведений.ДанныеОбработанныеВЦентральномУзлеРИБ.ОтметитьВыполнениеОбработки(Очередь, Данные, ДополнительныеПараметры); 
	КонецЕсли;
КонецПроцедуры

Функция НовыеПараметрыОбработчикаОбновления() Экспорт
	ПараметрыОбработчикаОбновления = Новый Структура;
	ПараметрыОбработчикаОбновления.Вставить("ЗапускатьТолькоВГлавномУзле", Ложь);
	ПараметрыОбработчикаОбновления.Вставить("ЗапускатьИВПодчиненномУзлеРИБСФильтрами", Ложь);
	ПараметрыОбработчикаОбновления.Вставить("ОчередьОтложеннойОбработки", 0);
	ПараметрыОбработчикаОбновления.Вставить("РежимВыполнения", "");
	ПараметрыОбработчикаОбновления.Вставить("РежимВыполненияОтложенныхОбработчиков", "");
	ПараметрыОбработчикаОбновления.Вставить("ЕстьОбработанныеОбъекты", Ложь);

	Возврат ПараметрыОбработчикаОбновления;
КонецФункции

Функция ДополнительныеПараметрыОтметкиОбработки() Экспорт
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭтоДвижения", Ложь);
	ДополнительныеПараметры.Вставить("ОтметитьВсеРегистраторы", Ложь);
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Ложь);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "");

	Возврат ДополнительныеПараметры;
КонецФункции

Процедура УстановитьНедостающиеОтборыВНаборе(Набор, МетаданныеНабора, УстанавливаемыеОтборы)
	Для Каждого Измерение Из МетаданныеНабора.Измерения Цикл

		ЕстьОтборПоИзмерению = Ложь;

		Если ТипЗнч(УстанавливаемыеОтборы) = Тип("ТаблицаЗначений") Тогда
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы.Колонки.Найти(Измерение.Имя) <> Неопределено;
		Иначе //Отбор
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы[Измерение.Имя].Использование;	
		КонецЕсли;

		Если Не ЕстьОтборПоИзмерению Тогда
			ПустоеЗначение = Измерение.Тип.ПривестиЗначение();
			Набор.Отбор[Измерение.Имя].Установить(ПустоеЗначение);
		КонецЕсли;
	КонецЦикла;

	Если МетаданныеНабора.ОсновнойОтборПоПериоду Тогда
		Если ТипЗнч(УстанавливаемыеОтборы) = Тип("ТаблицаЗначений") Тогда
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы.Колонки.Найти("Период") <> Неопределено;
		Иначе //Отбор
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы.Период.Использование;
		КонецЕсли;

		Если Не ЕстьОтборПоИзмерению Тогда
			ПустоеЗначение = '00010101';
			Набор.Отбор.Период.Установить(ПустоеЗначение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Устанавливает флаг отображения описаний изменений версий по
// текущую версию включительно, если для пользователя флаг не
// был установлен ранее.
//
// Параметры:
//  ИмяПользователя - Строка - имя пользователя, для которого
//   необходимо установить флаг.
//
Процедура УстановитьФлагОтображенияОписанийДляНовогоПользователя(Знач ИмяПользователя) Экспорт
	Если ПоследняяВерсияОтображенияИзмененийСистемы(ИмяПользователя) = Неопределено Тогда
		УстановитьФлагОтображенияОписанийПоТекущуюВерсию(ИмяПользователя);
	КонецЕсли;
КонецПроцедуры

Функция ПоследняяВерсияОтображенияИзмененийСистемы(Знач ИмяПользователя = Неопределено) Экспорт
	Если ИмяПользователя = Неопределено Тогда
		ИмяПользователя = ИмяПользователя();
	КонецЕсли;

	ПоследняяВерсия = БазоваяПодсистемаСервер.ХранилищеОбщихНастроекЗагрузить("ОбновлениеИБ", "ПоследняяВерсияОтображенияИзмененийСистемы", , , ИмяПользователя);

	Возврат ПоследняяВерсия;
КонецФункции

// Устанавливает флаг отображения описаний изменений версий по
// текущую версию включительно.
//
// Параметры:
//  ИмяПользователя - Строка - имя пользователя, для которого
//   необходимо установить флаг.
//
Процедура УстановитьФлагОтображенияОписанийПоТекущуюВерсию(Знач ИмяПользователя = Неопределено) Экспорт
	БазоваяПодсистемаСервер.ХранилищеОбщихНастроекСохранить("ОбновлениеИБ", "ПоследняяВерсияОтображенияИзмененийСистемы", Метаданные.Версия, , ИмяПользователя);

	Если ИмяПользователя = Неопределено И ПользователиСервер.ЭтоПолноправныйПользователь() Тогда
		БазоваяПодсистемаСервер.ХранилищеОбщихНастроекУдалить("ОбновлениеИБ", "ВывестиОписаниеИзмененийДляАдминистратора", ИмяПользователя());
	КонецЕсли;
КонецПроцедуры

Функция НеобходимоВыполнитьОбновление(Знач ВерсияМетаданных, Знач ВерсияДанных) Экспорт
	Возврат НЕ ПустаяСтрока(ВерсияМетаданных) И ВерсияДанных <> ВерсияМетаданных;
КонецФункции

// Получить версию конфигурации или родительской конфигурации (библиотеки),
// которая хранится в информационной базе.
//
// Параметры:
//  ИдентификаторБиблиотеки   - Строка - имя конфигурации или идентификатор библиотеки.
//
// Возвращаемое значение:
//   Строка   - версия.
//
// Пример использования:
//   ВерсияКонфигурацииИБ = ВерсияИБ(Метаданные.Имя);
//
Функция ВерсияИБ(Знач ИдентификаторБиблиотеки) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	ВерсииПодсистем.Версия КАК Версия
	            	  |ИЗ
	            	  |	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
	            	  |ГДЕ
	            	  |	ВерсииПодсистем.ИмяПодсистемы = &ИмяПодсистемы";
	Запрос.УстановитьПараметр("ИмяПодсистемы", ИдентификаторБиблиотеки);

	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();

	Результат = "";
	Если ТаблицаЗначений.Количество() > 0 Тогда
		Результат = СокрЛП(ТаблицаЗначений[0].Версия);
	КонецЕсли;

	Возврат ?(ПустаяСтрока(Результат), "0.0.0.0", Результат);
КонецФункции

Функция ВыполненаРегистрацияОтложенныхОбработчиковОбновления() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	ВерсииПодсистем.ИмяПодсистемы КАК ИмяПодсистемы
	            	  |ИЗ
	            	  |	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
	            	  |ГДЕ
	            	  |	ВерсииПодсистем.ВыполненаРегистрацияОтложенныхОбработчиков = ЛОЖЬ";

	Результат = Запрос.Выполнить().Выгрузить();

	Возврат Результат.Количество() = 0;
КонецФункции

Функция ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	Параметры.Вставить("ВерсияДанныхОсновнойКонфигурации", ВерсияИБ(Метаданные.Имя));

	// Проверка продолжения работы.
	ЭтоВызовПередНачаломРаботыСистемы	= Параметры.ПолученныеПараметрыКлиента <> Неопределено;
	ОписаниеОшибки						= ИнформационнаяБазаЗаблокированаДляОбновления(, ЭтоВызовПередНачаломРаботыСистемы);
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Параметры.Вставить("ИнформационнаяБазаЗаблокированаДляОбновления", ОписаниеОшибки);
		// Работа будет завершена.
		Возврат Ложь;
	КонецЕсли;

	Если ТребуетсяПроверитьЛегальностьПолученияОбновления() Тогда
		Параметры.Вставить("ПроверитьЛегальностьПолученияОбновления");
	КонецЕсли;

	Возврат Истина;
КонецФункции

// Возвращает текст причины блокировки, если требуется обновление ИБ и у текущего пользователя
// для этого недостаточно прав, иначе возвращает пустую строку.
//
// Параметры:
//  УчитыватьПривилегированныйРежим - Булево - если указать Ложь, то при проверке прав текущего пользователя
//                                    наличие привилегированного режима не будет учитываться.
//
// Возвращаемое значение:
//  Строка - если база не заблокирована, тогда пустая строка, иначе сообщение о причине блокировки.
//
Функция ИнформационнаяБазаЗаблокированаДляОбновления(УчитыватьПривилегированныйРежим = Истина, ПриЗапуске = Неопределено) Экспорт
	Сообщение = "";

	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();

	// Для входа в заблокированную базу достаточно только одного права администрирования.
	Если УчитыватьПривилегированныйРежим Тогда
		ЕстьПравоАдминистрирование = ПравоДоступа("Администрирование", Метаданные);
	Иначе
		ЕстьПравоАдминистрирование = ПравоДоступа("Администрирование", Метаданные, ТекущийПользовательИБ);
	КонецЕсли;

	СообщениеАдминистраторуСистемы = "Вход в программу временно невозможен в связи с обновлением на новую версию.
		           |Для завершения обновления версии программы требуются административные права
		           |(роли ""Администратор системы"" и ""Полные права"").";

	Если ПользователиСервер.ЭтоПолноправныйПользователь(, Истина, УчитыватьПривилегированныйРежим) Тогда
		Если ОбновлениеИБСерверПовтИсп.НеобходимоОбновлениеИнформационнойБазы() И ПриЗапуске = Истина Тогда
			Результат = ОтметкаНачалаОбновления();

			Если Не Результат.МожноВыполнятьОбновление Тогда
				Сообщение = "Вход в программу временно невозможен в связи с обновлением на новую версию.
					|Обновление уже выполняется:
					|  компьютер - %1
					|  пользователь - %2
					|  сеанс - %3
					|  начат - %4
					|  приложение - %5";

				Сообщение = СтрШаблон(Сообщение,
					Результат.СеансОбновления.ИмяКомпьютера,
					Результат.СеансОбновления.Пользователь,
					Результат.СеансОбновления.НомерСеанса,
					Результат.СеансОбновления.НачалоСеанса,
					Результат.СеансОбновления.ИмяПриложения);
				Возврат Сообщение;
			КонецЕсли;
		КонецЕсли;

		Возврат "";
	КонецЕсли;

	ТребуетсяПовторитьЗагрузкуСообщенияОбменаДаннымиПередЗапуском = Ложь;
	// зарезервировано для новых подсистем

	// В этих случаях запуск не блокируется.
	Если Не ОбновлениеИБСерверПовтИсп.НеобходимоОбновлениеИнформационнойБазы()
	   И Не ТребуетсяПроверитьЛегальностьПолученияОбновления()
	   И Не ТребуетсяПовторитьЗагрузкуСообщенияОбменаДаннымиПередЗапуском Тогда
		Возврат "";
	КонецЕсли;

	// Во всех остальных случаях запуск блокируется.
	Если ЕстьПравоАдминистрирование Тогда
		Возврат СообщениеАдминистраторуСистемы;
	КонецЕсли;

	// Сообщение пользователю локального режима.
	Сообщение = "Вход в программу временно невозможен в связи с обновлением на новую версию. Обратитесь к администратору за подробностями.";

	Возврат Сообщение;
КонецФункции

Функция ТребуетсяПроверитьЛегальностьПолученияОбновления() Экспорт
	Возврат Ложь;

	// зарезервировано для новых подсистем
КонецФункции

Функция ОтметкаНачалаОбновления()
	ОписаниеСеанса = Новый Структура;
	ОписаниеСеанса.Вставить("ИмяКомпьютера");
	ОписаниеСеанса.Вставить("ИмяПриложения");
	ОписаниеСеанса.Вставить("НачалоСеанса");
	ОписаниеСеанса.Вставить("НомерСеанса");
	ОписаниеСеанса.Вставить("НомерСоединения");
	ОписаниеСеанса.Вставить("Пользователь");

	ЗаполнитьЗначенияСвойств(ОписаниеСеанса, ПолучитьТекущийСеансИнформационнойБазы());
	ОписаниеСеанса.Пользователь = ОписаниеСеанса.Пользователь.Имя;

	ИмяПараметра = "СтандартныеПодсистемы.ОбновлениеИБ.СеансОбновленияИнформационнойБазы";

	МожноВыполнятьОбновление = Истина;

	Блокировка			= Новый БлокировкаДанных;
	ЭлементБлокировки	= Блокировка.Добавить("РегистрСведений.ПараметрыРаботыПрограммы");
	ЭлементБлокировки.УстановитьЗначение("ИмяПараметра", ИмяПараметра);

	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		СохраненныеПараметры = БазоваяПодсистемаСервер.ПараметрРаботыПрограммы(ИмяПараметра);

		Если СохраненныеПараметры = Неопределено Тогда
			СеансыСовпадают = Ложь;
		Иначе
			СеансыСовпадают = ДанныеСовпадают(ОписаниеСеанса, СохраненныеПараметры);
		КонецЕсли;

		Если Не СеансыСовпадают Тогда
			СеансОбновленияАктивен = СеансАктивен(СохраненныеПараметры);
			Если СеансОбновленияАктивен Тогда
				СеансОбновления				= СохраненныеПараметры;
				МожноВыполнятьОбновление	= Ложь;
			Иначе
				БазоваяПодсистемаСервер.УстановитьПараметрРаботыПрограммы(ИмяПараметра, ОписаниеСеанса);
				СеансОбновления				= ОписаниеСеанса;
			КонецЕсли;
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;

	Результат	= Новый Структура;
	Результат.Вставить("МожноВыполнятьОбновление", МожноВыполнятьОбновление);
	Результат.Вставить("СеансОбновления", СеансОбновления);

	Возврат Результат;
КонецФункции

Функция СеансАктивен(ОписаниеСеанса)
	Если ОписаниеСеанса = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	СеансыИнформационнойБазы = ПолучитьСеансыИнформационнойБазы();

	Для Каждого Сеанс Из СеансыИнформационнойБазы Цикл
		Совпадают = ДанныеСовпадают(ОписаниеСеанса, Сеанс);
		Если Совпадают Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Совпадают;
КонецФункции

Функция ДанныеСовпадают(Данные1, Данные2)
	Совпадают = Истина;
	Для Каждого КлючИЗначение Из Данные1 Цикл
		Если КлючИЗначение.Ключ = "Пользователь" Тогда
			Продолжить;
		КонецЕсли;

		Если Данные2[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
			Совпадают = Ложь;

			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Совпадают;
КонецФункции

// Проверяет статус отложенных обработчиков обновления.
//
Функция СтатусНевыполненныхОбработчиков(ПриОбновлении = Ложь) Экспорт
	СведенияОбОбновлении = СведенияОбОбновленииИнформационнойБазы();

	Если ПриОбновлении Тогда
		ВерсияДанных					= ВерсияИБ(Метаданные.Имя);
		ВерсияДанныхБезНомераСборки		= БазоваяПодсистемаКлиентСервер.ВерсияКонфигурацииБезНомераСборки(ВерсияДанных);
		ВерсияМетаданныхБезНомераСборки = БазоваяПодсистемаКлиентСервер.ВерсияКонфигурацииБезНомераСборки(Метаданные.Версия);
		ПодредакцииРавны				= (ВерсияДанныхБезНомераСборки = ВерсияМетаданныхБезНомераСборки);

		Если ВерсияДанных = "0.0.0.0" Или ПодредакцииРавны Тогда
			// В пределах четвертой цифры можно обновляться при наличии невыполненных
			// отложенных обработчиков обновления.
			Возврат "";
		КонецЕсли;

		ВерсияДереваОбработчиков		= СведенияОбОбновлении.ВерсияДереваОбработчиков;
		Если ВерсияДереваОбработчиков <> "" И БазоваяПодсистемаКлиентСервер.СравнитьВерсии(ВерсияДереваОбработчиков, ВерсияДанных) > 0 Тогда
			// Если в основном цикле обновления произошла ошибка, то при перезапуске не надо
			// проверять дерево отложенных обработчиков, т.к. там будут еще невыполненные
			// отложенные обработчики на текущую версию.
			Возврат "";
		КонецЕсли;
	КонецЕсли;

	ЕстьОбработчикиСОшибкой			= Ложь;
	ЕстьНевыполненныеОбработчики	= Ложь;
	ЕстьПриостановленныеОбработчики	= Ложь;
	Для Каждого СтрокаДереваБиблиотека Из СведенияОбОбновлении.ДеревоОбработчиков.Строки Цикл
		Для Каждого СтрокаДереваВерсия Из СтрокаДереваБиблиотека.Строки Цикл
			Для Каждого Обработчик Из СтрокаДереваВерсия.Строки Цикл
				Если Обработчик.Статус = "Ошибка" Тогда
					// Если найдены обработчики с ошибкой, цикл не прерывается,
					// надо убедиться, что нет еще невыполненных обработчиков.
					ЕстьОбработчикиСОшибкой			= Истина;
				ИначеЕсли Обработчик.Статус <> "Выполнено" Тогда
					ЕстьНевыполненныеОбработчики	= Истина;
					Прервать;
				ИначеЕсли Обработчик.Статус = "Приостановлен" Тогда
					ЕстьПриостановленныеОбработчики	= Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Если ЕстьНевыполненныеОбработчики Тогда
		Возврат "СтатусНеВыполнено";
	ИначеЕсли ЕстьОбработчикиСОшибкой Тогда
		Возврат "СтатусОшибка";
	ИначеЕсли ЕстьПриостановленныеОбработчики Тогда
		Возврат "СтатусПриостановлен";
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

// Получает сведения об обновлении информационной базы
// из константы "СведенияОбОбновленииИБ".
Функция СведенияОбОбновленииИнформационнойБазы() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	СведенияОбОбновленииИБ = Константы.СведенияОбОбновленииИБ.Получить().Получить();
	Если ТипЗнч(СведенияОбОбновленииИБ) <> Тип("Структура") Тогда
		Возврат НовыеСведенияОбОбновлении();
	КонецЕсли;
	Если СведенияОбОбновленииИБ.Количество() = 1 Тогда
		Возврат НовыеСведенияОбОбновлении();
	КонецЕсли;

	СведенияОбОбновленииИБ = НовыеСведенияОбОбновлении(СведенияОбОбновленииИБ);

	Возврат СведенияОбОбновленииИБ;
КонецФункции

Функция НовыеСведенияОбОбновлении(СтарыеСведения = Неопределено)
	СведенияОбОбновлении = Новый Структура;
	СведенияОбОбновлении.Вставить("ВремяНачалаОбновления");
	СведенияОбОбновлении.Вставить("ВремяОкончанияОбновления");
	СведенияОбОбновлении.Вставить("ПродолжительностьОбновления");
	СведенияОбОбновлении.Вставить("ВремяНачалаОтложенногоОбновления");
	СведенияОбОбновлении.Вставить("ВремяОкончаниеОтложенногоОбновления");
	СведенияОбОбновлении.Вставить("НомерСеанса",						Новый СписокЗначений);
	СведенияОбОбновлении.Вставить("ПараметрыОбработчикаОбновления");
	СведенияОбОбновлении.Вставить("ОтложенноеОбновлениеЗавершеноУспешно");
	СведенияОбОбновлении.Вставить("ДеревоОбработчиков",					Новый ДеревоЗначений);
	СведенияОбОбновлении.Вставить("ВерсияДереваОбработчиков",			"");
	СведенияОбОбновлении.Вставить("ВыводитьОписаниеОбновлений",			Ложь);
	СведенияОбОбновлении.Вставить("ЛегальнаяВерсия",					"");
	СведенияОбОбновлении.Вставить("НовыеПодсистемы",					Новый Массив);
	СведенияОбОбновлении.Вставить("УправлениеОтложеннымОбновлением",	Новый Структура);
	СведенияОбОбновлении.Вставить("ОбрабатываемыеДанные",				Новый Соответствие);
	СведенияОбОбновлении.Вставить("ТекущаяИтерацияОбновления",			1);
	СведенияОбОбновлении.Вставить("ПланОтложенногоОбновления");
	СведенияОбОбновлении.Вставить("ОписаниеПроцедурЗаполнения");
	СведенияОбОбновлении.Вставить("СеансОбновления");

	Если ТипЗнч(СтарыеСведения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СведенияОбОбновлении, СтарыеСведения);
	КонецЕсли;

	Возврат СведенияОбОбновлении;
КонецФункции
