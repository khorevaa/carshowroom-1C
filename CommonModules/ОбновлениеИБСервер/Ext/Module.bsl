////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обновление информационной базы"
//
////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиОбновленияИнформационнойБазы

// Устанавливает последнюю отображенную версию описания изменений всем пользователям
// области данных в текущую версию (по данным регистра ВерсииПодсистем).
//
Процедура УстановитьВерсиюОписанийИзменений() Экспорт
	ТекущаяВерсия = ВерсияИБ(Метаданные.Имя);

	УстановитьПривилегированныйРежим(Истина);

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	Пользователи.ИдентификаторПользователяИБ КАК Идентификатор
	            	  |ИЗ
	            	  |	Справочник.Пользователи КАК Пользователи
	            	  |ГДЕ
	            	  |	Пользователи.Служебный = ЛОЖЬ
	            	  |	И Пользователи.ИдентификаторПользователяИБ <> &ПустойИдентификатор";
	Запрос.УстановитьПараметр("ПустойИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Выборка	= Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.Идентификатор);
		Если ПользовательИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ПоследняяВерсия = ПоследняяВерсияОтображенияИзмененийСистемы(ПользовательИБ.Имя);
		Если ПоследняяВерсия <> Неопределено Тогда
			Возврат;
		КонецЕсли;

		ПоследняяВерсия = ТекущаяВерсия;

		ВыполненныеОбработчики = БазоваяПодсистемаСервер.ХранилищеОбщихНастроекЗагрузить("ОбновлениеИБ", "ВыполненныеОбработчики", , , ПользовательИБ.Имя);

		Если ВыполненныеОбработчики <> Неопределено Тогда
			Если ВыполненныеОбработчики.Строки.Количество() > 0 Тогда
				Версия = ВыполненныеОбработчики.Строки[ВыполненныеОбработчики.Строки.Количество() - 1].Версия;
				Если Версия <> "*" Тогда
					ПоследняяВерсия = Версия;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		БазоваяПодсистемаСервер.ХранилищеОбщихНастроекСохранить("ОбновлениеИБ","ПоследняяВерсияОтображенияИзмененийСистемы", ПоследняяВерсия, , ПользовательИБ.Имя);
	КонецЦикла;
КонецПроцедуры

// Заполняет значение реквизита ЭтоОсновнаяКонфигурация в записях регистра сведений ВерсииПодсистем.
//
Процедура ЗаполнитьРеквизитЭтоОсновнаяКонфигурация() Экспорт
	УстановитьВерсиюИБ(Метаданные.Имя, ВерсияИБ(Метаданные.Имя), Истина);
КонецПроцедуры

#КонецОбласти

Процедура УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	Если ИмяПараметра = "ВыполняетсяОбновлениеИБ" Тогда
		ПараметрыСеанса.ВыполняетсяОбновлениеИБ = ОбновлениеИБСерверПовтИсп.НеобходимоОбновлениеИнформационнойБазы();
		УстановленныеПараметры.Добавить("ВыполняетсяОбновлениеИБ");
	ИначеЕсли ИмяПараметра = "ПараметрыОбработчикаОбновления" Тогда
		ПараметрыСеанса.ПараметрыОбработчикаОбновления = Новый ФиксированнаяСтруктура(НовыеПараметрыОбработчикаОбновления());
		УстановленныеПараметры.Добавить("ПараметрыОбработчикаОбновления");
	КонецЕсли;
КонецПроцедуры

// Управляет процессом выполнения отложенных обработчиков обновления.
//
Процедура ВыполнитьОтложенноеОбновление() Экспорт
	БазоваяПодсистемаСервер.ПриНачалеВыполненияРегламентногоЗадания();

	Если ОбновлениеИБСерверПовтИсп.НеобходимоОбновлениеИнформационнойБазы() Тогда
		Возврат;
	КонецЕсли;

	СведенияОбОбновлении = СведенияОбОбновленииИнформационнойБазы();

	Если СведенияОбОбновлении.ВремяОкончаниеОтложенногоОбновления <> Неопределено Тогда
		ПриВключенииОтложенногоОбновления(Ложь);

		Возврат;
	КонецЕсли;

	Если СведенияОбОбновлении.ВремяНачалаОтложенногоОбновления = Неопределено Тогда
		СведенияОбОбновлении.ВремяНачалаОтложенногоОбновления = ТекущаяДатаСеанса();
	КонецЕсли;
	Если ТипЗнч(СведенияОбОбновлении.НомерСеанса) <> Тип("СписокЗначений") Тогда
		СведенияОбОбновлении.НомерСеанса = Новый СписокЗначений;
	КонецЕсли;
	СведенияОбОбновлении.НомерСеанса.Добавить(НомерСеансаИнформационнойБазы());
	ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);

	// зарезервировано для новых подсистем
	ОбработчикиВыполнялись = Истина;
	Пока ОбработчикиВыполнялись Цикл
		ОбработчикиВыполнялись = ВыполнитьОтложенныйОбработчикОбновления(СведенияОбОбновлении);

		Если СведенияОбОбновлении.УправлениеОтложеннымОбновлением.Свойство("ФорсироватьОбновление") Тогда
			СведенияОбОбновлении = СведенияОбОбновленииИнформационнойБазы();
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если Не ОбработчикиВыполнялись Или ВыполненыВсеОтложенныеОбработчики(СведенияОбОбновлении) Тогда
		ПриВключенииОтложенногоОбновления(Ложь);
	КонецЕсли;
КонецПроцедуры

// Устанавливает состояние запуска обновления информационной.
// Требуется привилегированный режим.
//
// Параметры:
//  Запуск - Булево - Если установить Истина, состояние будет установлено,
//           если установить Ложь, состояние будет снято.
//
Процедура УстановитьЗапускОбновленияИнформационнойБазы(Запуск) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ТекущиеПараметры = Новый Соответствие(ПараметрыСеанса.ПараметрыКлиентаНаСервере);

	Если Запуск = Истина Тогда
		ТекущиеПараметры.Вставить("ЗапуститьОбновлениеИнформационнойБазы", Истина);
	ИначеЕсли ТекущиеПараметры.Получить("ЗапуститьОбновлениеИнформационнойБазы") <> Неопределено Тогда
		ТекущиеПараметры.Удалить("ЗапуститьОбновлениеИнформационнойБазы");
	КонецЕсли;

	ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(ТекущиеПараметры);
КонецПроцедуры

// Записывает изменения в переданном объекте.
// Для использования в обработчиках обновления.
//
// Параметры:
//   Данные                            - Произвольный - объект, набор записей или менеджер константы, который
//                                                      необходимо записать.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьДанные(Знач Данные, Знач РегистрироватьНаУзлахПлановОбмена = Неопределено, Знач ВключитьБизнесЛогику = Ложь) Экспорт
	Данные.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	Данные.ДополнительныеСвойства.Вставить("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ", РегистрироватьНаУзлахПлановОбмена);

	Если (РегистрироватьНаУзлахПлановОбмена = Неопределено) Или Не РегистрироватьНаУзлахПлановОбмена Тогда
		Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;

	Данные.Записать();

	ОтметитьВыполнениеОбработки(Данные);
КонецПроцедуры

// Удаляет переданный объект.
// Для использования в обработчиках обновления.
//
// Параметры:
//  Данные                            - Произвольный - объект, который необходимо удалить.
//  РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//  ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура УдалитьДанные(Знач Данные, Знач РегистрироватьНаУзлахПлановОбмена = Неопределено, Знач ВключитьБизнесЛогику = Ложь) Экспорт
	Данные.ДополнительныеСвойства.Вставить("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ", РегистрироватьНаУзлахПлановОбмена);

	Данные.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	Если РегистрироватьНаУзлахПлановОбмена = Неопределено Или Не РегистрироватьНаУзлахПлановОбмена Тогда
		Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;

	Данные.Удалить();
КонецПроцедуры

// Записывает изменения в переданном наборе записей.
// Для использования в обработчиках обновления.
//
// Параметры:
//   НаборЗаписей                      - РегистрСведенийНаборЗаписей,
//                                       РегистрНакопленияНаборЗаписей,
//                                       РегистрБухгалтерииНаборЗаписей,
//                                       РегистрРасчетаНаборЗаписей - набор записей, который необходимо записать.
//   Замещать                          - Булево       - Определяет режим замещения существующей записи в соответствии с
//       текущими установками отбора. Истина - перед записью существующие записи будут удалены. Ложь - записи будут
//       дописаны к уже существующим в информационной базе записям.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьНаборЗаписей(Знач НаборЗаписей, Замещать = Истина, Знач РегистрироватьНаУзлахПлановОбмена = Неопределено, Знач ВключитьБизнесЛогику = Ложь) Экспорт
	НаборЗаписей.ДополнительныеСвойства.Вставить("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ", РегистрироватьНаУзлахПлановОбмена);
	НаборЗаписей.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;

	Если РегистрироватьНаУзлахПлановОбмена = Неопределено  Или Не РегистрироватьНаУзлахПлановОбмена Тогда
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;

	НаборЗаписей.Записать(Замещать);

	ОтметитьВыполнениеОбработки(НаборЗаписей);
КонецПроцедуры

// Отмечает, что переданные данные обновлены.
//
// Параметры:
//  Данные					 - Ссылка, Массив, НаборДанных - данные, по которым нужно зарегистрировать изменения.
//							 - ТаблицаЗначений - значения измерений независимого регистра сведений. Требования:
//													- все измерения регистра должны входить в основной отбор
//													- в таблице должны быть только колонки, соответствующие по именам измерениям регистра,
//														по которым ранее регистрировалась необходимость обработки
//													- запись наборов в процессе обновления должна проходить с тем же отбором,
//														что и регистрация необходимости обработки
//													- в ДополнительныеПараметры нужно передать соответствующий признак и полное имя регистра.
//  ДополнительныеПараметры	 - Структура - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки.
//  Очередь					 - Число, Неопределено - очередь обработки, в которой выполняется текущий обработчик. По умолчанию очередь передавать
//													не нужно, т.к. она будет взята из параметров сеанса, в котором запущен обработчик обновления.
//
Процедура ОтметитьВыполнениеОбработки(Данные, ДополнительныеПараметры = Неопределено, Очередь = Неопределено) Экспорт
	Если Очередь = Неопределено Тогда
		Если ПараметрыСеанса.ПараметрыОбработчикаОбновления.РежимВыполнения <> "Отложенно" Или ПараметрыСеанса.ПараметрыОбработчикаОбновления.РежимВыполненияОтложенныхОбработчиков <> "Параллельно" Тогда
			Возврат;
		КонецЕсли;

		Очередь = ПараметрыСеанса.ПараметрыОбработчикаОбновления.ОчередьОтложеннойОбработки;
	КонецЕсли;

	Если Не ПараметрыСеанса.ПараметрыОбработчикаОбновления.ЕстьОбработанныеОбъекты Тогда
		НовыеПараметрыСеанса							= НовыеПараметрыОбработчикаОбновления();

		ЗаполнитьЗначенияСвойств(НовыеПараметрыСеанса, ПараметрыСеанса.ПараметрыОбработчикаОбновления);
		НовыеПараметрыСеанса.ЕстьОбработанныеОбъекты	= Истина;
			
		ПараметрыСеанса.ПараметрыОбработчикаОбновления	= Новый ФиксированнаяСтруктура(НовыеПараметрыСеанса);
	КонецЕсли;

	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыОтметкиОбработки();
	КонецЕсли;

	Если (ТипЗнч(Данные) = Тип("Массив") Или ТипЗнч(Данные) = Тип("ТаблицаЗначений")) И Данные.Количество() = 0 Тогда
		ТекстИсключения = "В процедуру ОбновлениеИБ.ОтметитьВыполнениеОбработки передан пустой массив. Не возможно отметить выполнение обработки.";

		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Узел = ПланыОбмена.ОбновлениеИнформационнойБазы.УзелПоОчереди(Очередь);

	Если ДополнительныеПараметры.ЭтоДвижения Тогда
		Набор = БазоваяПодсистемаСервер.МенеджерОбъектаПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра).СоздатьНаборЗаписей();

		Если ТипЗнч(Данные) = Тип("Массив") Тогда
			Для Каждого СтрокаМассива Из Данные Цикл
				Набор.Отбор.Регистратор.Установить(СтрокаМассива);
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Набор);
			КонецЦикла;
		Иначе
			Набор.Отбор.Регистратор.Установить(Данные);
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Набор);
		КонецЕсли;
	ИначеЕсли ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений Тогда
		Набор				= БазоваяПодсистемаСервер.МенеджерОбъектаПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра).СоздатьНаборЗаписей();
		МетаданныеОбъекта	= Метаданные.НайтиПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра);

		УстановитьНедостающиеОтборыВНаборе(Набор, МетаданныеОбъекта, Данные);	

		Для каждого СтрокаТаблицы Из Данные Цикл
			Для Каждого Колонка Из Данные.Колонки Цикл
				Набор.Отбор[Колонка.Имя].Значение = СтрокаТаблицы[Колонка.Имя];
				Набор.Отбор[Колонка.Имя].Использование = Истина;
			КонецЦикла;

			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Набор);
		КонецЦикла;
	Иначе
		Если ТипЗнч(Данные) = Тип("ОбъектМетаданных") Тогда
			ТекстИсключения = "Не поддерживается отметка выполнения обработки обновления целиком объекта метаданных. Нужно отмечать обработку конкретных данных.";

			ВызватьИсключение ТекстИсключения;
		КонецЕсли;

		Если ТипЗнч(Данные) <> Тип("Массив") Тогда
			ТипЗначенияОбъекта = ТипЗнч(Данные);
			МетаданныеОбъекта  = Метаданные.НайтиПоТипу(ТипЗначенияОбъекта);

			Если Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта) И МетаданныеОбъекта.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
				УстановитьНедостающиеОтборыВНаборе(Данные, МетаданныеОбъекта, Данные.Отбор);
			ИначеЕсли БазоваяПодсистемаСервер.ЭтоОбъектСсылочногоТипа(МетаданныеОбъекта) И Не БазоваяПодсистемаСервер.ЭтоСсылка(ТипЗначенияОбъекта) И Данные.ЭтоНовый() Тогда
				Возврат;
			КонецЕсли;

			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Данные);
		Иначе
			Для Каждого ЭлементМассива Из Данные Цикл
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ЭлементМассива);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если Не БазоваяПодсистемаСервер.ЭтоПодчиненныйУзелРИБ() Тогда
		РегистрыСведений.ДанныеОбработанныеВЦентральномУзлеРИБ.ОтметитьВыполнениеОбработки(Очередь, Данные, ДополнительныеПараметры); 
	КонецЕсли;
КонецПроцедуры

Функция НовыеПараметрыОбработчикаОбновления() Экспорт
	ПараметрыОбработчикаОбновления = Новый Структура;
	ПараметрыОбработчикаОбновления.Вставить("ЗапускатьТолькоВГлавномУзле", Ложь);
	ПараметрыОбработчикаОбновления.Вставить("ЗапускатьИВПодчиненномУзлеРИБСФильтрами", Ложь);
	ПараметрыОбработчикаОбновления.Вставить("ОчередьОтложеннойОбработки", 0);
	ПараметрыОбработчикаОбновления.Вставить("РежимВыполнения", "");
	ПараметрыОбработчикаОбновления.Вставить("РежимВыполненияОтложенныхОбработчиков", "");
	ПараметрыОбработчикаОбновления.Вставить("ЕстьОбработанныеОбъекты", Ложь);

	Возврат ПараметрыОбработчикаОбновления;
КонецФункции

Функция ДополнительныеПараметрыОтметкиОбработки() Экспорт
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭтоДвижения", Ложь);
	ДополнительныеПараметры.Вставить("ОтметитьВсеРегистраторы", Ложь);
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Ложь);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "");

	Возврат ДополнительныеПараметры;
КонецФункции

Процедура УстановитьНедостающиеОтборыВНаборе(Набор, МетаданныеНабора, УстанавливаемыеОтборы)
	Для Каждого Измерение Из МетаданныеНабора.Измерения Цикл

		ЕстьОтборПоИзмерению = Ложь;

		Если ТипЗнч(УстанавливаемыеОтборы) = Тип("ТаблицаЗначений") Тогда
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы.Колонки.Найти(Измерение.Имя) <> Неопределено;
		Иначе //Отбор
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы[Измерение.Имя].Использование;	
		КонецЕсли;

		Если Не ЕстьОтборПоИзмерению Тогда
			ПустоеЗначение = Измерение.Тип.ПривестиЗначение();
			Набор.Отбор[Измерение.Имя].Установить(ПустоеЗначение);
		КонецЕсли;
	КонецЦикла;

	Если МетаданныеНабора.ОсновнойОтборПоПериоду Тогда
		Если ТипЗнч(УстанавливаемыеОтборы) = Тип("ТаблицаЗначений") Тогда
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы.Колонки.Найти("Период") <> Неопределено;
		Иначе //Отбор
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы.Период.Использование;
		КонецЕсли;

		Если Не ЕстьОтборПоИзмерению Тогда
			ПустоеЗначение = '00010101';
			Набор.Отбор.Период.Установить(ПустоеЗначение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Устанавливает флаг отображения описаний изменений версий по
// текущую версию включительно, если для пользователя флаг не
// был установлен ранее.
//
// Параметры:
//  ИмяПользователя - Строка - имя пользователя, для которого
//   необходимо установить флаг.
//
Процедура УстановитьФлагОтображенияОписанийДляНовогоПользователя(Знач ИмяПользователя) Экспорт
	Если ПоследняяВерсияОтображенияИзмененийСистемы(ИмяПользователя) = Неопределено Тогда
		УстановитьФлагОтображенияОписанийПоТекущуюВерсию(ИмяПользователя);
	КонецЕсли;
КонецПроцедуры

Функция ПоследняяВерсияОтображенияИзмененийСистемы(Знач ИмяПользователя = Неопределено) Экспорт
	Если ИмяПользователя = Неопределено Тогда
		ИмяПользователя = ИмяПользователя();
	КонецЕсли;

	ПоследняяВерсия = БазоваяПодсистемаСервер.ХранилищеОбщихНастроекЗагрузить("ОбновлениеИБ", "ПоследняяВерсияОтображенияИзмененийСистемы", , , ИмяПользователя);

	Возврат ПоследняяВерсия;
КонецФункции

// Устанавливает флаг отображения описаний изменений версий по
// текущую версию включительно.
//
// Параметры:
//  ИмяПользователя - Строка - имя пользователя, для которого
//   необходимо установить флаг.
//
Процедура УстановитьФлагОтображенияОписанийПоТекущуюВерсию(Знач ИмяПользователя = Неопределено) Экспорт
	БазоваяПодсистемаСервер.ХранилищеОбщихНастроекСохранить("ОбновлениеИБ", "ПоследняяВерсияОтображенияИзмененийСистемы", Метаданные.Версия, , ИмяПользователя);

	Если ИмяПользователя = Неопределено И ПользователиСервер.ЭтоПолноправныйПользователь() Тогда
		БазоваяПодсистемаСервер.ХранилищеОбщихНастроекУдалить("ОбновлениеИБ", "ВывестиОписаниеИзмененийДляАдминистратора", ИмяПользователя());
	КонецЕсли;
КонецПроцедуры

Функция НеобходимоВыполнитьОбновление(Знач ВерсияМетаданных, Знач ВерсияДанных) Экспорт
	Возврат НЕ ПустаяСтрока(ВерсияМетаданных) И ВерсияДанных <> ВерсияМетаданных;
КонецФункции

// Получить версию конфигурации или родительской конфигурации (библиотеки),
// которая хранится в информационной базе.
//
// Параметры:
//  ИдентификаторБиблиотеки   - Строка - имя конфигурации или идентификатор библиотеки.
//
// Возвращаемое значение:
//   Строка   - версия.
//
// Пример использования:
//   ВерсияКонфигурацииИБ = ВерсияИБ(Метаданные.Имя);
//
Функция ВерсияИБ(Знач ИдентификаторБиблиотеки) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	ВерсииПодсистем.Версия КАК Версия
	            	  |ИЗ
	            	  |	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
	            	  |ГДЕ
	            	  |	ВерсииПодсистем.ИмяПодсистемы = &ИмяПодсистемы";
	Запрос.УстановитьПараметр("ИмяПодсистемы", ИдентификаторБиблиотеки);

	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();

	Результат = "";
	Если ТаблицаЗначений.Количество() > 0 Тогда
		Результат = СокрЛП(ТаблицаЗначений[0].Версия);
	КонецЕсли;

	Возврат ?(ПустаяСтрока(Результат), "0.0.0.0", Результат);
КонецФункции

Функция ВыполненаРегистрацияОтложенныхОбработчиковОбновления() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	ВерсииПодсистем.ИмяПодсистемы КАК ИмяПодсистемы
	            	  |ИЗ
	            	  |	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
	            	  |ГДЕ
	            	  |	ВерсииПодсистем.ВыполненаРегистрацияОтложенныхОбработчиков = ЛОЖЬ";

	Результат = Запрос.Выполнить().Выгрузить();

	Возврат Результат.Количество() = 0;
КонецФункции

Функция ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	Параметры.Вставить("ВерсияДанныхОсновнойКонфигурации", ВерсияИБ(Метаданные.Имя));

	// Проверка продолжения работы.
	ЭтоВызовПередНачаломРаботыСистемы	= Параметры.ПолученныеПараметрыКлиента <> Неопределено;
	ОписаниеОшибки						= ИнформационнаяБазаЗаблокированаДляОбновления(, ЭтоВызовПередНачаломРаботыСистемы);
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Параметры.Вставить("ИнформационнаяБазаЗаблокированаДляОбновления", ОписаниеОшибки);
		// Работа будет завершена.
		Возврат Ложь;
	КонецЕсли;

	Если ТребуетсяПроверитьЛегальностьПолученияОбновления() Тогда
		Параметры.Вставить("ПроверитьЛегальностьПолученияОбновления");
	КонецЕсли;

	Возврат Истина;
КонецФункции

// Возвращает текст причины блокировки, если требуется обновление ИБ и у текущего пользователя
// для этого недостаточно прав, иначе возвращает пустую строку.
//
// Параметры:
//  УчитыватьПривилегированныйРежим - Булево - если указать Ложь, то при проверке прав текущего пользователя
//                                    наличие привилегированного режима не будет учитываться.
//
// Возвращаемое значение:
//  Строка - если база не заблокирована, тогда пустая строка, иначе сообщение о причине блокировки.
//
Функция ИнформационнаяБазаЗаблокированаДляОбновления(УчитыватьПривилегированныйРежим = Истина, ПриЗапуске = Неопределено) Экспорт
	Сообщение = "";

	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();

	// Для входа в заблокированную базу достаточно только одного права администрирования.
	Если УчитыватьПривилегированныйРежим Тогда
		ЕстьПравоАдминистрирование = ПравоДоступа("Администрирование", Метаданные);
	Иначе
		ЕстьПравоАдминистрирование = ПравоДоступа("Администрирование", Метаданные, ТекущийПользовательИБ);
	КонецЕсли;

	СообщениеАдминистраторуСистемы = "Вход в программу временно невозможен в связи с обновлением на новую версию.
		           |Для завершения обновления версии программы требуются административные права
		           |(роли ""Администратор системы"" и ""Полные права"").";

	Если ПользователиСервер.ЭтоПолноправныйПользователь(, Истина, УчитыватьПривилегированныйРежим) Тогда
		Если ОбновлениеИБСерверПовтИсп.НеобходимоОбновлениеИнформационнойБазы() И ПриЗапуске = Истина Тогда
			Результат = ОтметкаНачалаОбновления();

			Если Не Результат.МожноВыполнятьОбновление Тогда
				Сообщение = "Вход в программу временно невозможен в связи с обновлением на новую версию.
					|Обновление уже выполняется:
					|  компьютер - %1
					|  пользователь - %2
					|  сеанс - %3
					|  начат - %4
					|  приложение - %5";

				Сообщение = СтрШаблон(Сообщение,
					Результат.СеансОбновления.ИмяКомпьютера,
					Результат.СеансОбновления.Пользователь,
					Результат.СеансОбновления.НомерСеанса,
					Результат.СеансОбновления.НачалоСеанса,
					Результат.СеансОбновления.ИмяПриложения);
				Возврат Сообщение;
			КонецЕсли;
		КонецЕсли;

		Возврат "";
	КонецЕсли;

	ТребуетсяПовторитьЗагрузкуСообщенияОбменаДаннымиПередЗапуском = Ложь;
	// зарезервировано для новых подсистем

	// В этих случаях запуск не блокируется.
	Если Не ОбновлениеИБСерверПовтИсп.НеобходимоОбновлениеИнформационнойБазы()
	   И Не ТребуетсяПроверитьЛегальностьПолученияОбновления()
	   И Не ТребуетсяПовторитьЗагрузкуСообщенияОбменаДаннымиПередЗапуском Тогда
		Возврат "";
	КонецЕсли;

	// Во всех остальных случаях запуск блокируется.
	Если ЕстьПравоАдминистрирование Тогда
		Возврат СообщениеАдминистраторуСистемы;
	КонецЕсли;

	// Сообщение пользователю локального режима.
	Сообщение = "Вход в программу временно невозможен в связи с обновлением на новую версию. Обратитесь к администратору за подробностями.";

	Возврат Сообщение;
КонецФункции

Функция ТребуетсяПроверитьЛегальностьПолученияОбновления() Экспорт
	Возврат Ложь;

	// зарезервировано для новых подсистем
КонецФункции

Функция ОтметкаНачалаОбновления()
	ОписаниеСеанса = Новый Структура;
	ОписаниеСеанса.Вставить("ИмяКомпьютера");
	ОписаниеСеанса.Вставить("ИмяПриложения");
	ОписаниеСеанса.Вставить("НачалоСеанса");
	ОписаниеСеанса.Вставить("НомерСеанса");
	ОписаниеСеанса.Вставить("НомерСоединения");
	ОписаниеСеанса.Вставить("Пользователь");

	ЗаполнитьЗначенияСвойств(ОписаниеСеанса, ПолучитьТекущийСеансИнформационнойБазы());
	ОписаниеСеанса.Пользователь = ОписаниеСеанса.Пользователь.Имя;

	ИмяПараметра = "СтандартныеПодсистемы.ОбновлениеИБ.СеансОбновленияИнформационнойБазы";

	МожноВыполнятьОбновление = Истина;

	Блокировка			= Новый БлокировкаДанных;
	ЭлементБлокировки	= Блокировка.Добавить("РегистрСведений.ПараметрыРаботыПрограммы");
	ЭлементБлокировки.УстановитьЗначение("ИмяПараметра", ИмяПараметра);

	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		СохраненныеПараметры = РегистрыСведений.ПараметрыРаботыПрограммы.ПараметрРаботыПрограммы(ИмяПараметра);

		Если СохраненныеПараметры = Неопределено Тогда
			СеансыСовпадают = Ложь;
		Иначе
			СеансыСовпадают = ДанныеСовпадают(ОписаниеСеанса, СохраненныеПараметры);
		КонецЕсли;

		Если Не СеансыСовпадают Тогда
			СеансОбновленияАктивен = СеансАктивен(СохраненныеПараметры);
			Если СеансОбновленияАктивен Тогда
				СеансОбновления				= СохраненныеПараметры;
				МожноВыполнятьОбновление	= Ложь;
			Иначе
				РегистрыСведений.ПараметрыРаботыПрограммы.УстановитьПараметрРаботыПрограммы(ИмяПараметра, ОписаниеСеанса);
				СеансОбновления				= ОписаниеСеанса;
			КонецЕсли;
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;

	Результат	= Новый Структура;
	Результат.Вставить("МожноВыполнятьОбновление", МожноВыполнятьОбновление);
	Результат.Вставить("СеансОбновления", СеансОбновления);

	Возврат Результат;
КонецФункции

Функция СеансАктивен(ОписаниеСеанса)
	Если ОписаниеСеанса = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	СеансыИнформационнойБазы = ПолучитьСеансыИнформационнойБазы();

	Для Каждого Сеанс Из СеансыИнформационнойБазы Цикл
		Совпадают = ДанныеСовпадают(ОписаниеСеанса, Сеанс);
		Если Совпадают Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Совпадают;
КонецФункции

Функция ДанныеСовпадают(Данные1, Данные2)
	Совпадают = Истина;
	Для Каждого КлючИЗначение Из Данные1 Цикл
		Если КлючИЗначение.Ключ = "Пользователь" Тогда
			Продолжить;
		КонецЕсли;

		Если Данные2[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
			Совпадают = Ложь;

			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Совпадают;
КонецФункции

// Проверяет статус отложенных обработчиков обновления.
//
Функция СтатусНевыполненныхОбработчиков(ПриОбновлении = Ложь) Экспорт
	СведенияОбОбновлении = СведенияОбОбновленииИнформационнойБазы();

	Если ПриОбновлении Тогда
		ВерсияДанных					= ВерсияИБ(Метаданные.Имя);
		ВерсияДанныхБезНомераСборки		= БазоваяПодсистемаКлиентСервер.ВерсияКонфигурацииБезНомераСборки(ВерсияДанных);
		ВерсияМетаданныхБезНомераСборки = БазоваяПодсистемаКлиентСервер.ВерсияКонфигурацииБезНомераСборки(Метаданные.Версия);
		ПодредакцииРавны				= (ВерсияДанныхБезНомераСборки = ВерсияМетаданныхБезНомераСборки);

		Если ВерсияДанных = "0.0.0.0" Или ПодредакцииРавны Тогда
			// В пределах четвертой цифры можно обновляться при наличии невыполненных
			// отложенных обработчиков обновления.
			Возврат "";
		КонецЕсли;

		ВерсияДереваОбработчиков		= СведенияОбОбновлении.ВерсияДереваОбработчиков;
		Если ВерсияДереваОбработчиков <> "" И БазоваяПодсистемаКлиентСервер.СравнитьВерсии(ВерсияДереваОбработчиков, ВерсияДанных) > 0 Тогда
			// Если в основном цикле обновления произошла ошибка, то при перезапуске не надо
			// проверять дерево отложенных обработчиков, т.к. там будут еще невыполненные
			// отложенные обработчики на текущую версию.
			Возврат "";
		КонецЕсли;
	КонецЕсли;

	ЕстьОбработчикиСОшибкой			= Ложь;
	ЕстьНевыполненныеОбработчики	= Ложь;
	ЕстьПриостановленныеОбработчики	= Ложь;
	Для Каждого СтрокаДереваБиблиотека Из СведенияОбОбновлении.ДеревоОбработчиков.Строки Цикл
		Для Каждого СтрокаДереваВерсия Из СтрокаДереваБиблиотека.Строки Цикл
			Для Каждого Обработчик Из СтрокаДереваВерсия.Строки Цикл
				Если Обработчик.Статус = "Ошибка" Тогда
					// Если найдены обработчики с ошибкой, цикл не прерывается,
					// надо убедиться, что нет еще невыполненных обработчиков.
					ЕстьОбработчикиСОшибкой			= Истина;
				ИначеЕсли Обработчик.Статус <> "Выполнено" Тогда
					ЕстьНевыполненныеОбработчики	= Истина;
					Прервать;
				ИначеЕсли Обработчик.Статус = "Приостановлен" Тогда
					ЕстьПриостановленныеОбработчики	= Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Если ЕстьНевыполненныеОбработчики Тогда
		Возврат "СтатусНеВыполнено";
	ИначеЕсли ЕстьОбработчикиСОшибкой Тогда
		Возврат "СтатусОшибка";
	ИначеЕсли ЕстьПриостановленныеОбработчики Тогда
		Возврат "СтатусПриостановлен";
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

// Получает сведения об обновлении информационной базы
// из константы "СведенияОбОбновленииИБ".
Функция СведенияОбОбновленииИнформационнойБазы() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	СведенияОбОбновленииИБ = Константы.СведенияОбОбновленииИБ.Получить().Получить();
	Если ТипЗнч(СведенияОбОбновленииИБ) <> Тип("Структура") Тогда
		Возврат НовыеСведенияОбОбновлении();
	КонецЕсли;
	Если СведенияОбОбновленииИБ.Количество() = 1 Тогда
		Возврат НовыеСведенияОбОбновлении();
	КонецЕсли;

	СведенияОбОбновленииИБ = НовыеСведенияОбОбновлении(СведенияОбОбновленииИБ);

	Возврат СведенияОбОбновленииИБ;
КонецФункции

Функция НовыеСведенияОбОбновлении(СтарыеСведения = Неопределено)
	СведенияОбОбновлении = Новый Структура;
	СведенияОбОбновлении.Вставить("ВремяНачалаОбновления");
	СведенияОбОбновлении.Вставить("ВремяОкончанияОбновления");
	СведенияОбОбновлении.Вставить("ПродолжительностьОбновления");
	СведенияОбОбновлении.Вставить("ВремяНачалаОтложенногоОбновления");
	СведенияОбОбновлении.Вставить("ВремяОкончаниеОтложенногоОбновления");
	СведенияОбОбновлении.Вставить("НомерСеанса",						Новый СписокЗначений);
	СведенияОбОбновлении.Вставить("ПараметрыОбработчикаОбновления");
	СведенияОбОбновлении.Вставить("ОтложенноеОбновлениеЗавершеноУспешно");
	СведенияОбОбновлении.Вставить("ДеревоОбработчиков",					Новый ДеревоЗначений);
	СведенияОбОбновлении.Вставить("ВерсияДереваОбработчиков",			"");
	СведенияОбОбновлении.Вставить("ВыводитьОписаниеОбновлений",			Ложь);
	СведенияОбОбновлении.Вставить("ЛегальнаяВерсия",					"");
	СведенияОбОбновлении.Вставить("НовыеПодсистемы",					Новый Массив);
	СведенияОбОбновлении.Вставить("УправлениеОтложеннымОбновлением",	Новый Структура);
	СведенияОбОбновлении.Вставить("ОбрабатываемыеДанные",				Новый Соответствие);
	СведенияОбОбновлении.Вставить("ТекущаяИтерацияОбновления",			1);
	СведенияОбОбновлении.Вставить("ПланОтложенногоОбновления");
	СведенияОбОбновлении.Вставить("ОписаниеПроцедурЗаполнения");
	СведенияОбОбновлении.Вставить("СеансОбновления");

	Если ТипЗнч(СтарыеСведения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СведенияОбОбновлении, СтарыеСведения);
	КонецЕсли;

	Возврат СведенияОбОбновлении;
КонецФункции

Функция НастройкиПодсистемы() Экспорт
	ПараметрыСообщенияОНевыполненныхОтложенныхОбработчиках = Новый Структура;
	ПараметрыСообщенияОНевыполненныхОтложенныхОбработчиках.Вставить("ТекстСообщения", "");
	ПараметрыСообщенияОНевыполненныхОтложенныхОбработчиках.Вставить("КартинкаСообщения", Неопределено);
	ПараметрыСообщенияОНевыполненныхОтложенныхОбработчиках.Вставить("ЗапрещатьПродолжение", Ложь);

	Настройки = Новый Структура;
	Настройки.Вставить("ПоясненияДляРезультатовОбновления", "");
	Настройки.Вставить("РасположениеОписанияИзмененийПрограммы", "");
	Настройки.Вставить("ПараметрыСообщенияОНевыполненныхОтложенныхОбработчиках", ПараметрыСообщенияОНевыполненныхОтложенныхОбработчиках);

	Возврат Настройки;
КонецФункции

// Записывает данные по обновлению в константу "СведенияОбОбновленииИБ".
//
Процедура ЗаписатьСведенияОбОбновленииИнформационнойБазы(Знач СведенияОбОбновлении) Экспорт
	Если СведенияОбОбновлении = Неопределено Тогда
		НовоеЗначение = НовыеСведенияОбОбновлении();
	Иначе
		НовоеЗначение = СведенияОбОбновлении;
	КонецЕсли;

	МенеджерКонстанты			= Константы.СведенияОбОбновленииИБ.СоздатьМенеджерЗначения();
	МенеджерКонстанты.Значение	= Новый ХранилищеЗначения(НовоеЗначение);
	ЗаписатьДанные(МенеджерКонстанты);
КонецПроцедуры

// Вызывается при включении и отключении отложенного обновления.
//
// Параметры:
// Использование - Булево - Истина, если задание нужно включить, иначе Ложь.
//
Процедура ПриВключенииОтложенногоОбновления(Использование) Экспорт
	ОтборЗаданий = Новый Структура;
	ОтборЗаданий.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОтложенноеОбновлениеИБ);
	Задания = БазоваяПодсистемаСервер.НайтиЗадания(ОтборЗаданий);

	Для Каждого Задание Из Задания Цикл
		ПараметрыЗадания = Новый Структура("Использование", Использование);
		БазоваяПодсистемаСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
	КонецЦикла;

	Возврат;
КонецПроцедуры

// Выполняет все процедуры отложенного обновления в цикле за один вызов.
//
Процедура ВыполнитьОтложенноеОбновлениеСейчас(ПараметрыОбновления = Неопределено) Экспорт
	СведенияОбОбновлении = СведенияОбОбновленииИнформационнойБазы();

	Если СведенияОбОбновлении.ВремяОкончаниеОтложенногоОбновления <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если СведенияОбОбновлении.ВремяНачалаОтложенногоОбновления = Неопределено Тогда
		СведенияОбОбновлении.ВремяНачалаОтложенногоОбновления = ТекущаяДатаСеанса();
	КонецЕсли;

	Если ТипЗнч(СведенияОбОбновлении.НомерСеанса) <> Тип("СписокЗначений") Тогда
		СведенияОбОбновлении.НомерСеанса = Новый СписокЗначений;
	КонецЕсли;
	СведенияОбОбновлении.НомерСеанса.Добавить(НомерСеансаИнформационнойБазы());
	ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);

	ОбработчикиВыполнялись = Истина;
	Пока ОбработчикиВыполнялись Цикл
		ОбработчикиВыполнялись = ВыполнитьОтложенныйОбработчикОбновления(СведенияОбОбновлении, ПараметрыОбновления);
	КонецЦикла;
КонецПроцедуры

Функция ВыполнитьОтложенныйОбработчикОбновления(СведенияОбОбновлении, ПараметрыОбновления = Неопределено)
	ВключитьОтключитьОтложенныеОбработчикиОбновления(СведенияОбОбновлении);

	ПланОбновления = СведенияОбОбновлении.ПланОтложенногоОбновления;

	ТекущаяИтерацияОбновления = СведенияОбОбновлении.ТекущаяИтерацияОбновления;
	ТекущийЦиклОбновления     = Неопределено;
	ЗавершеноУспешно = Истина;
	Пока Истина Цикл
		ЕстьНевыполненные			= Ложь;
		ПредыдущийЦиклОбновления 	= Неопределено;
		Для Каждого ОписаниеЦиклаОбновления Из ПланОбновления Цикл
			Если ОписаниеЦиклаОбновления.Свойство("ЗавершеноСОшибками") Или ОписаниеЦиклаОбновления.Свойство("ЕстьОстановленные") Тогда
				ЗавершеноУспешно = Ложь;
			Иначе
				Если (ПредыдущийЦиклОбновления <> Неопределено И ПредыдущийЦиклОбновления.Обработчики.Количество() <> 0 И ОписаниеЦиклаОбновления.ЗависитОтПредыдущего) Или ОписаниеЦиклаОбновления.Обработчики.Количество() = 0 Тогда
					ПредыдущийЦиклОбновления = ОписаниеЦиклаОбновления;

					Продолжить;
				КонецЕсли;

				ЕстьОшибки			= Ложь;
				ЕстьОстановленные	= Ложь;
				Индекс				= -1;
				Для Каждого ОписаниеОбработчика Из ОписаниеЦиклаОбновления.Обработчики Цикл
					Индекс = Индекс + 1;
					Если ОписаниеОбработчика.Итерация = ТекущаяИтерацияОбновления Тогда
						ЕстьНевыполненные = Истина;

						Продолжить;
					КонецЕсли;

					ДеревоОбработчиков = СведенияОбОбновлении.ДеревоОбработчиков.Строки;
					Если ЗначениеЗаполнено(ОписаниеОбработчика.Идентификатор) Тогда
						ОбработчикОбновления = ДеревоОбработчиков.Найти(ОписаниеОбработчика.Идентификатор, "Идентификатор", Истина);
						Если ОбработчикОбновления = Неопределено Тогда
							ОбработчикОбновления = ДеревоОбработчиков.Найти(ОписаниеОбработчика.ИмяОбработчика, "ИмяОбработчика", Истина);
						КонецЕсли;
					Иначе
						ОбработчикОбновления = ДеревоОбработчиков.Найти(ОписаниеОбработчика.ИмяОбработчика, "ИмяОбработчика", Истина);
					КонецЕсли;

					Если ОбработчикОбновления.Статус = "Приостановлен" Тогда
						ЕстьОстановленные = Истина;

						Продолжить;
					КонецЕсли;

					Если ОбработчикОбновления.ЧислоПопыток >= 3 Тогда
						ЕстьОшибки = Истина;

						Продолжить;
					КонецЕсли;

					ТекущийЦиклОбновления = ОписаниеЦиклаОбновления;

					Прервать;
				КонецЦикла;

				Если ТекущийЦиклОбновления = Неопределено Тогда
					Если ЕстьОшибки Тогда
						ОписаниеЦиклаОбновления.Вставить("ЗавершеноСОшибками");
						ЗавершеноУспешно = Ложь;
					ИначеЕсли ЕстьОстановленные Тогда
						ОписаниеЦиклаОбновления.Вставить("ЕстьОстановленные");
					КонецЕсли;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЕсли;

			ПредыдущийЦиклОбновления = ОписаниеЦиклаОбновления;
		КонецЦикла;

		Если ТекущийЦиклОбновления <> Неопределено Тогда
			КоллекцияОбработчиков							= ТекущийЦиклОбновления.Обработчики;

			Прервать;
		ИначеЕсли ЕстьНевыполненные Тогда
			ТекущаяИтерацияОбновления						= ТекущаяИтерацияОбновления + 1;
			СведенияОбОбновлении.ТекущаяИтерацияОбновления	= ТекущаяИтерацияОбновления;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ТекущийЦиклОбновления = Неопределено Тогда
		СведенияОбОбновлении.ПланОтложенногоОбновления				= ПланОбновления;
		СведенияОбОбновлении.ВремяОкончаниеОтложенногоОбновления	= ТекущаяДатаСеанса();
		СведенияОбОбновлении.ОтложенноеОбновлениеЗавершеноУспешно	= ЗавершеноУспешно;
		ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);
		Константы.ОтложенноеОбновлениеЗавершеноУспешно.Установить(ЗавершеноУспешно);
		Если Не БазоваяПодсистемаСервер.ЭтоПодчиненныйУзелРИБ() Тогда
			Константы.ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно.Установить(ЗавершеноУспешно);
		КонецЕсли;

		Возврат Ложь;
	КонецЕсли;

	ПараллельныйРежим	= (ТекущийЦиклОбновления.Режим = "Параллельно");
	ПараметрыОбновления	= ?(ПараметрыОбновления = Неопределено, Новый Структура, ПараметрыОбновления);
	ПараметрыОбновления.Вставить("ПараллельныйРежим", ПараллельныйРежим);
	Если ПараллельныйРежим Тогда
		ПараметрыОбновления.Вставить("ОчередьОбработчиков", ТекущийЦиклОбновления.ОчередьОбработчиков);
		ПараметрыОбновления.Вставить("ПланОбновления", ПланОбновления);
		ПараметрыОбновления.Вставить("ОбрабатываемыеДанные", СведенияОбОбновлении.ОбрабатываемыеДанные);
	КонецЕсли;

	УстановитьПараметрыОтложенногоОбработчикаОбновления(ОбработчикОбновления, Истина, ПараллельныйРежим);
	ЗапуститьПроцедуруОбработкиДанных(ОбработчикОбновления, ПараметрыОбновления);
	УстановитьПараметрыОтложенногоОбработчикаОбновления(Неопределено);

	Если ОбработчикОбновления.Статус = "Выполнено" Тогда
		КоллекцияОбработчиков.Удалить(Индекс);
		СведенияОБлокируемыхОбъектах	= СведенияОБлокируемыхОбъектах();
		СведенияОбОбработчике			= СведенияОБлокируемыхОбъектах.Обработчики[ОбработчикОбновления.ИмяОбработчика];
		Если СведенияОбОбработчике <> Неопределено Тогда
			СведенияОбОбработчике.Выполнен = Истина;
			ЗаписатьСведенияОБлокируемыхОбъектах(СведенияОБлокируемыхОбъектах);
		КонецЕсли;

		// В параллельном режиме обработчик удаляется из очереди, чтобы можно было определить
		// обработчики каких очередей еще не завершились.
		Если ПараллельныйРежим Тогда
			Строка = ТекущийЦиклОбновления.ОчередьОбработчиков.Найти(ОбработчикОбновления.ИмяОбработчика, "Обработчик");
			ТекущийЦиклОбновления.ОчередьОбработчиков.Удалить(Строка);
		КонецЕсли;
	ИначеЕсли ОбработчикОбновления.Статус = "Выполняется" Тогда
		// Если у обработчика стоит высокий приоритет,
		// то он вызывается пять раз, после чего вызывается следующий обработчик.
		ЗапускиСПриоритетом = Неопределено;
		Если ОбработчикОбновления.Приоритет = "ЖелательноБыстрее" Тогда
			ЗапускиСПриоритетом = ОбработчикОбновления.СтатистикаВыполнения["ЗапускиСПриоритетом"];
			ЗапускиСПриоритетом = ?(ЗапускиСПриоритетом = Неопределено, 1, ?(ЗапускиСПриоритетом = 4, 0, ЗапускиСПриоритетом + 1));
			ОбработчикОбновления.СтатистикаВыполнения.Вставить("ЗапускиСПриоритетом", ЗапускиСПриоритетом);
		КонецЕсли;

		Если ЗапускиСПриоритетом = Неопределено Или ЗапускиСПриоритетом = 0 Тогда
			ОписаниеОбработчика.Итерация = ТекущаяИтерацияОбновления;
		КонецЕсли;
	Иначе
		ОписаниеОбработчика.Итерация = ТекущаяИтерацияОбновления;
	КонецЕсли;

	СведенияОбОбновлении.ПланОтложенногоОбновления = ПланОбновления;

	// В параллельном режиме обновление нужно останавливать, если обработчик не удалось выполнить,
	// т.к. от данных, которые он обрабатывает, могут зависеть другие обработчики.
	Если ПараллельныйРежим И ОбработчикОбновления.Статус = "Ошибка" И ОбработчикОбновления.ЧислоПопыток >= 3 Тогда
		СведенияОбОбновлении.ВремяОкончаниеОтложенногоОбновления	= ТекущаяДатаСеанса();
		СведенияОбОбновлении.ОтложенноеОбновлениеЗавершеноУспешно	= Ложь;
		ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);
		Константы.ОтложенноеОбновлениеЗавершеноУспешно.Установить(Ложь);
		Если Не ОбновлениеИБСервер.ЭтоПодчиненныйУзелРИБ() Тогда
			Константы.ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно.Установить(Ложь);
		КонецЕсли;

		Возврат Ложь;
	КонецЕсли;

	Если ОбновлениеИБСервер.ИнформационнаяБазаФайловая() Тогда
		ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);
	Иначе
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Константа.СведенияОбОбновленииИБ");
			Блокировка.Заблокировать();

			НовыеСведенияОбОбновлении								= СведенияОбОбновленииИнформационнойБазы();
			СведенияОбОбновлении.УправлениеОтложеннымОбновлением	= НовыеСведенияОбОбновлении.УправлениеОтложеннымОбновлением;

			ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();

			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Процедура ВключитьОтключитьОтложенныеОбработчикиОбновления(СведенияОбОбновлении)
	ПланОбновления				= СведенияОбОбновлении.ПланОтложенногоОбновления;
	УправлениеОбработчиками		= СведенияОбОбновлении.УправлениеОтложеннымОбновлением;
	ЗапуститьОбработчики		= Неопределено;
	ОстановитьОбработчики		= Неопределено;
	ПриоритетЖелательноБыстрее	= Неопределено;
	ПриоритетВПлановомПорядке	= Неопределено;

	СведенияОбОбновлении.УправлениеОтложеннымОбновлением.Свойство("ЗапуститьОбработчики", ЗапуститьОбработчики);
	СведенияОбОбновлении.УправлениеОтложеннымОбновлением.Свойство("ОстановитьОбработчики", ОстановитьОбработчики);
	СведенияОбОбновлении.УправлениеОтложеннымОбновлением.Свойство("ПриоритетЖелательноБыстрее", ПриоритетЖелательноБыстрее);
	СведенияОбОбновлении.УправлениеОтложеннымОбновлением.Свойство("ПриоритетВПлановомПорядке", ПриоритетВПлановомПорядке);

	// Запуск остановленных отложенных обработчиков обновления.
	Если ЗапуститьОбработчики <> Неопределено Тогда
		Для Каждого ЗапущенныйОбработчик Из ЗапуститьОбработчики Цикл
			НайденныйОбработчик = СведенияОбОбновлении.ДеревоОбработчиков.Строки.Найти(ЗапущенныйОбработчик, "ИмяОбработчика", Истина);
			Если НайденныйОбработчик <> Неопределено Тогда
				НайденныйОбработчик.Статус = "НеВыполнено";

				Для Каждого ЦиклОбновления Из ПланОбновления Цикл
					Для Каждого ОписаниеОбработчика Из ЦиклОбновления.Обработчики Цикл
						Если ОписаниеОбработчика.ИмяОбработчика = НайденныйОбработчик.ИмяОбработчика Тогда
							Если ЦиклОбновления.Свойство("ЕстьОстановленные") Тогда
								ЦиклОбновления.Удалить("ЕстьОстановленные");
							КонецЕсли;

							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;

		СведенияОбОбновлении.УправлениеОтложеннымОбновлением.Удалить("ЗапуститьОбработчики");
	КонецЕсли;

	// Остановка выполняющихся отложенных обработчиков обновления.
	Если ОстановитьОбработчики <> Неопределено Тогда
		Для Каждого ОстановленныйОбработчик Из ОстановитьОбработчики Цикл
			НайденныйОбработчик = СведенияОбОбновлении.ДеревоОбработчиков.Строки.Найти(ОстановленныйОбработчик, "ИмяОбработчика", Истина);
			Если НайденныйОбработчик <> Неопределено И НайденныйОбработчик.Статус <> "Выполнено" Тогда
				НайденныйОбработчик.Статус = "Приостановлен";
			КонецЕсли;
		КонецЦикла;

		СведенияОбОбновлении.УправлениеОтложеннымОбновлением.Удалить("ОстановитьОбработчики");
	КонецЕсли;

	// Повышение приоритета процедуры обработки данных.
	Если ПриоритетЖелательноБыстрее <> Неопределено Тогда
		Для Каждого Обработчик Из ПриоритетЖелательноБыстрее Цикл
			НайденныйОбработчик = СведенияОбОбновлении.ДеревоОбработчиков.Строки.Найти(Обработчик, "ИмяОбработчика", Истина);
			Если НайденныйОбработчик <> Неопределено И НайденныйОбработчик.Статус <> "Выполнено" Тогда
				НайденныйОбработчик.Приоритет = "ЖелательноБыстрее";
			КонецЕсли;
		КонецЦикла;

		СведенияОбОбновлении.УправлениеОтложеннымОбновлением.Удалить("ПриоритетЖелательноБыстрее");
	КонецЕсли;

	// Понижение приоритета процедуры обработки данных.
	Если ПриоритетВПлановомПорядке <> Неопределено Тогда
		Для Каждого Обработчик Из ПриоритетВПлановомПорядке Цикл
			НайденныйОбработчик = СведенияОбОбновлении.ДеревоОбработчиков.Строки.Найти(Обработчик, "ИмяОбработчика", Истина);
			Если НайденныйОбработчик <> Неопределено И НайденныйОбработчик.Статус <> "Выполнено" Тогда
				НайденныйОбработчик.Приоритет = "ВПлановомПорядке";
			КонецЕсли;
		КонецЦикла;

		СведенияОбОбновлении.УправлениеОтложеннымОбновлением.Удалить("ПриоритетВПлановомПорядке");
	КонецЕсли;

	Если ЗапуститьОбработчики <> Неопределено Или ОстановитьОбработчики <> Неопределено Или ПриоритетЖелательноБыстрее <> Неопределено Или ПриоритетВПлановомПорядке <> Неопределено Тогда
		ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьПараметрыОтложенногоОбработчикаОбновления(ОбработчикОбновления, Отложенно = Ложь, Параллельно = Ложь)
	Если ОбработчикОбновления = Неопределено Тогда
		ПараметрыСеанса.ПараметрыОбработчикаОбновления = Новый ФиксированнаяСтруктура(НовыеПараметрыОбработчикаОбновления());

		Возврат;
	КонецЕсли;

	Если Отложенно Тогда
		РежимВыполнения = "Отложенно";
	Иначе
		РежимВыполнения = "Монопольно";
	КонецЕсли;

	Если Параллельно Тогда
		РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	Иначе
		РежимВыполненияОтложенныхОбработчиков = "Последовательно";
	КонецЕсли;

	ПараметрыОбработчикаОбновления											= НовыеПараметрыОбработчикаОбновления();
	ПараметрыОбработчикаОбновления.ЗапускатьТолькоВГлавномУзле				= ОбработчикОбновления.ЗапускатьТолькоВГлавномУзле;
	ПараметрыОбработчикаОбновления.ЗапускатьИВПодчиненномУзлеРИБСФильтрами	= ОбработчикОбновления.ЗапускатьИВПодчиненномУзлеРИБСФильтрами;
	ПараметрыОбработчикаОбновления.ОчередьОтложеннойОбработки				= ОбработчикОбновления.ОчередьОтложеннойОбработки;
	ПараметрыОбработчикаОбновления.РежимВыполнения							= РежимВыполнения;
	ПараметрыОбработчикаОбновления.РежимВыполненияОтложенныхОбработчиков	= РежимВыполненияОтложенныхОбработчиков;
	ПараметрыОбработчикаОбновления.ЕстьОбработанныеОбъекты					= Ложь;

	ПараметрыСеанса.ПараметрыОбработчикаОбновления = Новый ФиксированнаяСтруктура(ПараметрыОбработчикаОбновления);
КонецПроцедуры

Процедура ЗапуститьПроцедуруОбработкиДанных(ОбработчикОбновления, ПараметрыОбновления)
	ЗаписыватьВЖурнал					= Константы.ДетализироватьОбновлениеИБВЖурналеРегистрации.Получить();
	ТранзакцияАктивнаНаНачалоВыполнения = ТранзакцияАктивна();
	ИмяОбработчика = ОбработчикОбновления.ИмяОбработчика;
	Попытка
		СообщениеОЗапущенномОбработчике = СтрШаблон("Выполняется процедура обновления ""%1"".", ИмяОбработчика);
		ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Информация,,, СообщениеОЗапущенномОбработчике);

		// Прогресс выполнения процедуры обработки данных.
		ПрогрессВыполнения = Новый Структура;
		ПрогрессВыполнения.Вставить("ВсегоОбъектов", 0);
		ПрогрессВыполнения.Вставить("ОбработаноОбъектов", 0);
		Если ОбработчикОбновления.СтатистикаВыполнения["ПрогрессВыполнения"] <> Неопределено И ТипЗнч(ОбработчикОбновления.СтатистикаВыполнения["ПрогрессВыполнения"]) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ПрогрессВыполнения, ОбработчикОбновления.СтатистикаВыполнения["ПрогрессВыполнения"]);
		КонецЕсли;

		// Инициализация параметров обработчика.
		Параметры = ОбработчикОбновления.СтатистикаВыполнения["ПараметрыОбработчика"];
		Если Параметры = Неопределено Тогда
			Параметры = Новый Структура;
		КонецЕсли;
		Если ПараметрыОбновления.ПараллельныйРежим Тогда
			Параметры.Вставить("ОбработкаЗавершена", Неопределено);
		Иначе
			Параметры.Вставить("ОбработкаЗавершена", Истина);
		КонецЕсли;

		Параметры.Вставить("ПрогрессВыполнения", ПрогрессВыполнения);

		Параметры.Вставить("Очередь", ОбработчикОбновления.ОчередьОтложеннойОбработки);

		ПараметрыОбработчика = Новый Массив;
		ПараметрыОбработчика.Добавить(Параметры);

		Если ЗаписыватьВЖурнал Тогда
			ОписаниеОбработчика = ПодготовитьДетальнуюИнформациюОХодеОбновления(ОбработчикОбновления, Параметры, ОбработчикОбновления.ИмяБиблиотеки, Истина);
		КонецЕсли;

		КоличествоЗапусковПроцедурыОбновления = ОбработчикОбновления.СтатистикаВыполнения["КоличествоЗапусков"];
		Если КоличествоЗапусковПроцедурыОбновления = Неопределено Тогда
			КоличествоЗапусковПроцедурыОбновления = 0;
		ИначеЕсли КоличествоЗапусковПроцедурыОбновления > 10000 Тогда // Защита от зацикливания.
			ОбработчикОбновления.ЧислоПопыток	= 3;
			ТекстОшибки							= "Превышено допустимое количество запусков процедуры обновления. Выполнение прервано для предотвращения зацикливания механизма обработки данных.";

			ВызватьИсключение ТекстОшибки;
		КонецЕсли;

		// Запуск отложенного обработчика обновления.
		ОбработчикОбновления.Статус = "Выполняется";
		Если ОбработчикОбновления.СтатистикаВыполнения["НачалоОбработкиДанных"] = Неопределено Тогда
			ОбработчикОбновления.СтатистикаВыполнения.Вставить("НачалоОбработкиДанных", ТекущаяДатаСеанса());
		КонецЕсли;

		НачалоОбработкиДанных = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ПропуститьПроверкуОбработанныхДанных = Ложь;
		Если ПараметрыОбновления.ПараллельныйРежим
			И БазоваяПодсистемаСервер.ЭтоПодчиненныйУзелРИБ()
			И ОбработчикОбновления.ЗапускатьТолькоВГлавномУзле Тогда
			// В подчиненном узле РИБ только проверяем, что обрабатываемые обработчиком данные
			// пришли из главного узла и обновляем статус обработчика.
			ПропуститьПроверкуОбработанныхДанных	= Истина;
			ОбрабатываемыеДанные					= ПараметрыОбновления.ОбрабатываемыеДанные[ОбработчикОбновления.ИмяОбработчика];
			Если ОбрабатываемыеДанные.Количество() = 0 Тогда
				Параметры.ОбработкаЗавершена = Истина;
			Иначе
				Для Каждого ОбрабатываемыйОбъект Из ОбрабатываемыеДанные Цикл
					Параметры.ОбработкаЗавершена = Не ЕстьДанныеДляОбработки(ОбработчикОбновления.ОчередьОтложеннойОбработки, ОбрабатываемыйОбъект.Ключ, Неопределено);
					Если Не Параметры.ОбработкаЗавершена Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			БазоваяПодсистемаСервер.ВыполнитьМетодКонфигурации(ИмяОбработчика, ПараметрыОбработчика);
		КонецЕсли;
		ЗавершениеОбработкиДанных = ТекущаяУниверсальнаяДатаВМиллисекундах();

		Если Параметры.ОбработкаЗавершена = Неопределено Тогда
			ТекстОшибки = "Обработчик обновления не инициализировал параметр ОбработкаЗавершена. Выполнение прервано из-за явной ошибки в коде обработчика.";

			ВызватьИсключение ТекстОшибки;
		КонецЕсли;

		Если Параметры.ОбработкаЗавершена Тогда
			ОбработчикОбновления.Статус		= "Выполнено";
			ОбработчикОбновления.Приоритет	= "ВПлановомПорядке";
			ОбработчикОбновления.СтатистикаВыполнения.Вставить("ЗавершениеОбработкиДанных", ТекущаяДатаСеанса());

			// Запись прогресса обновления.
			Если ПараметрыОбновления.Свойство("ВФоне") И ПараметрыОбновления.ВФоне Тогда
				ХодВыполненияОбработчиков						= ПараметрыОбновления.ХодВыполненияОбработчиков;
				ХодВыполненияОбработчиков.ВыполненоОбработчиков	= ХодВыполненияОбработчиков.ВыполненоОбработчиков + 1;
				Прогресс										= 10 + ХодВыполненияОбработчиков.ВыполненоОбработчиков / ХодВыполненияОбработчиков.ВсегоОбработчиков * 90;
				БазоваяПодсистемаСервер.СообщитьПрогресс(Прогресс);
			КонецЕсли;
		ИначеЕсли ПараметрыОбновления.ПараллельныйРежим И Не ПропуститьПроверкуОбработанныхДанных Тогда
			ЕстьОбработанныеОбъекты	= ПараметрыСеанса.ПараметрыОбработчикаОбновления.ЕстьОбработанныеОбъекты;
			ОчередьОбработчика		= ОбработчикОбновления.ОчередьОтложеннойОбработки;

			МинимальнаяОчередь = 0;
			Если Не ЕстьОбработанныеОбъекты Тогда
				Для Каждого ЦиклОбновления Из ПараметрыОбновления.ПланОбновления Цикл
					Если ЦиклОбновления.Режим = "Последовательно" Или ЦиклОбновления.ОчередьОбработчиков.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;

					Если МинимальнаяОчередь = 0 Тогда
						МинимальнаяОчередь		= ЦиклОбновления.ОчередьОбработчиков[0].Очередь;
					Иначе
						МинимальнаяОчередьЦикла	= ЦиклОбновления.ОчередьОбработчиков[0].Очередь;
						МинимальнаяОчередь		= Мин(МинимальнаяОчередь, МинимальнаяОчередьЦикла);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			Если Не ЕстьОбработанныеОбъекты И ОчередьОбработчика = МинимальнаяОчередь Тогда
				ЧислоПопыток = ОбработчикОбновления.ЧислоПопыток;
				Если ЧислоПопыток >= 2 Тогда
					ТекстИсключения = "Произошло зацикливание процедуры обработки данных. Выполнение прервано.";

					ВызватьИсключение ТекстИсключения;
				Иначе
					ОбработчикОбновления.ЧислоПопыток = ЧислоПопыток + 1;
				КонецЕсли;
			Иначе
				ОбработчикОбновления.ЧислоПопыток = 0;
			КонецЕсли;
		КонецЕсли;

		// Сохранение данных по процедуре обработки данных.
		ОбработчикОбновления.СтатистикаВыполнения.Вставить("ПрогрессВыполнения", Параметры.ПрогрессВыполнения);

		КоличествоЗапусковПроцедурыОбновления	= КоличествоЗапусковПроцедурыОбновления + 1;
		ДлительностьВыполнения					= ЗавершениеОбработкиДанных - НачалоОбработкиДанных;
		Если ОбработчикОбновления.СтатистикаВыполнения["ДлительностьВыполнения"] <> Неопределено Тогда
			ДлительностьВыполнения = ДлительностьВыполнения + ОбработчикОбновления.СтатистикаВыполнения["ДлительностьВыполнения"];
		КонецЕсли;
		ОбработчикОбновления.СтатистикаВыполнения.Вставить("ДлительностьВыполнения", ДлительностьВыполнения);
		ОбработчикОбновления.СтатистикаВыполнения.Вставить("КоличествоЗапусков", КоличествоЗапусковПроцедурыОбновления);
	Исключение
		Если ЗаписыватьВЖурнал Тогда
			ЗаписатьДетальнуюИнформациюОХодеОбновления(ОписаниеОбработчика);
		КонецЕсли;

		Пока ТранзакцияАктивна() Цикл
			ОтменитьТранзакцию();
		КонецЦикла;

		ОбработчикОбновления.Статус				= "Ошибка";
		ОбработчикОбновления.ЧислоПопыток		= ОбработчикОбновления.ЧислоПопыток + 1;
		ИнформацияОбОшибке						= ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки			= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ОбработчикОбновления.ИнформацияОбОшибке = ПодробноеПредставлениеОшибки;
		ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
	КонецПопытки;

	// Если обработчик обновления передал параметры, их нужно сохранить.
	ПереданныеПараметры = ПереданныеПараметрыОбработчикаОбновления(Параметры);
	ОбработчикОбновления.СтатистикаВыполнения.Вставить("ПараметрыОбработчика", ПереданныеПараметры);

	Попытка
		ПроверитьВложеннуюТранзакцию(ТранзакцияАктивнаНаНачалоВыполнения, ИмяОбработчика);
	Исключение
		// В случае нахождения вложенной транзакции обработчик обновления повторно не вызывается.
		ИнформацияОбОшибке				= ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки	= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);

		ОбработчикОбновления.Статус				= "Ошибка";
		ОбработчикОбновления.ИнформацияОбОшибке = ОбработчикОбновления.ИнформацияОбОшибке + Символы.ПС + ПодробноеПредставлениеОшибки;
		ОбработчикОбновления.ЧислоПопыток		= 3;
	КонецПопытки;

	Если ЗаписыватьВЖурнал Тогда
		ЗаписатьДетальнуюИнформациюОХодеОбновления(ОписаниеОбработчика);
	КонецЕсли;
КонецПроцедуры

// Получает сведения об обновлении информационной базы
// из константы "СведенияОбОбновленииИБ".
Функция СведенияОБлокируемыхОбъектах() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	СведенияОБлокируемыхОбъектах = Константы.СведенияОБлокируемыхОбъектах.Получить().Получить();
	Если ТипЗнч(СведенияОБлокируемыхОбъектах) <> Тип("Структура") Тогда
		Возврат НовыеСведенияОБлокируемыхОбъектах();
	КонецЕсли;

	СведенияОБлокируемыхОбъектах = НовыеСведенияОБлокируемыхОбъектах(СведенияОБлокируемыхОбъектах);

	Возврат СведенияОБлокируемыхОбъектах;
КонецФункции

Функция НовыеСведенияОБлокируемыхОбъектах(СтарыеСведения = Неопределено)
	СведенияОБлокируемыхОбъектах = Новый Структура;
	СведенияОБлокируемыхОбъектах.Вставить("БлокируемыеОбъекты", Новый Соответствие);
	СведенияОБлокируемыхОбъектах.Вставить("Обработчики", Новый Соответствие);

	Если ТипЗнч(СтарыеСведения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СведенияОБлокируемыхОбъектах, СтарыеСведения);
	КонецЕсли;

	Возврат СведенияОБлокируемыхОбъектах;
КонецФункции

Процедура ЗаписатьСведенияОБлокируемыхОбъектах(Сведения)
	Если Сведения = Неопределено Тогда
		НовоеЗначение = НовыеСведенияОБлокируемыхОбъектах();
	Иначе
		НовоеЗначение = Сведения;
	КонецЕсли;

	МенеджерКонстанты			= Константы.СведенияОБлокируемыхОбъектах.СоздатьМенеджерЗначения();
	МенеджерКонстанты.Значение	= Новый ХранилищеЗначения(НовоеЗначение);
	ЗаписатьДанные(МенеджерКонстанты);
КонецПроцедуры

Функция ПодготовитьДетальнуюИнформациюОХодеОбновления(Обработчик, Параметры, ИдентификаторБиблиотеки, ОбработчикОтложенный = Ложь)
	ОписаниеОбработчика = Новый Структура;
	ОписаниеОбработчика.Вставить("Библиотека", ИдентификаторБиблиотеки);
	Если ОбработчикОтложенный Тогда
		ОписаниеОбработчика.Вставить("Версия", Обработчик.НомерВерсии);
		ОписаниеОбработчика.Вставить("Процедура", Обработчик.ИмяОбработчика);
	Иначе
		ОписаниеОбработчика.Вставить("Версия", Обработчик.Версия);
		ОписаниеОбработчика.Вставить("Процедура", Обработчик.Процедура);
	КонецЕсли;
	ОписаниеОбработчика.Вставить("ВерсияРегистрации", Обработчик.ВерсияРегистрации);
	ОписаниеОбработчика.Вставить("Параметры", Параметры);

	Если ОбработчикОтложенный Тогда
		ОписаниеОбработчика.Вставить("РежимВыполнения", "Отложенно");
	ИначеЕсли ЗначениеЗаполнено(Обработчик.РежимВыполнения) Тогда
		ОписаниеОбработчика.Вставить("РежимВыполнения", Обработчик.РежимВыполнения);
	Иначе
		ОписаниеОбработчика.Вставить("РежимВыполнения", "Монопольно");
	КонецЕсли;

	ОписаниеОбработчика.Вставить("ЗначениеНаНачало", ТекущаяУниверсальнаяДатаВМиллисекундах());

	Возврат ОписаниеОбработчика;
КонецФункции

// Проверяет, есть ли еще необработанные данные.
//
// Параметры:
//  Очередь    - Число        - очередь, к которой отнесен обработчик и в которой зарегистрированы данные,
//                              которые он будет обрабатывать.
//             - Неопределено - проверяется, завершена ли обработка в целом;
//             - Массив       - проверяется есть данные для обработки в списке очередей.
//  ПолноеИмяМетаданныеОбъекта- Строка, ОбъектМетаданных - полное имя обрабатываемого объекта или
//                              его метаданные. Например, "Документ.ПриходныйОрдерНаТовары"
//                            - Массив - массив полных имен объектов или объектов метаданных,
//                              в массиве не должно быть независимых регистров сведений.
//  Отбор - ЛюбаяСсылка, Структура, Неопределено, Массив - отбор данных для проверки.
//                              Если передано Неопределено - проверяется по всему типу объекта,
//                              Если объект - регистр, подчиненный регистратору, то в отборе - ссылка
//                                 на регистратор или массив ссылок.
//                              Если объект ссылочного типа, то в отборе - или ссылка, или массив ссылок.
//                              Если объект - независимый регистр сведений, то в отборе - структура со значениями измерений.
//                              Ключ структуры - имя измерения, значение - значение отбора (можно передать массив значений).
//
// Возвращаемое значение:
//  Булево - Истина, если еще не все данные обработаны.
//
Функция ЕстьДанныеДляОбработки(Очередь, ПолноеИмяМетаданныеОбъекта, Отбор = Неопределено) Экспорт
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		ЭтоПодчиненныйУзелРИБ = БазоваяПодсистемаСервер.ЭтоПодчиненныйУзелРИБ();
		Если Не ЭтоПодчиненныйУзелРИБ Тогда
			Возврат Ложь;
		ИначеЕсли ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно") Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Если ТипЗнч(ПолноеИмяМетаданныеОбъекта) = Тип("Строка") Тогда
		ПолныеИменаОбрабатываемыхОбъектов = СтрРазделить(ПолноеИмяМетаданныеОбъекта, ",");
	ИначеЕсли ТипЗнч(ПолноеИмяМетаданныеОбъекта) = Тип("Массив") Тогда
		ПолныеИменаОбрабатываемыхОбъектов = ПолноеИмяМетаданныеОбъекта;
	ИначеЕсли ТипЗнч(ПолноеИмяМетаданныеОбъекта) = Тип("ОбъектМетаданных") Тогда
		ПолныеИменаОбрабатываемыхОбъектов = Новый Массив;
		ПолныеИменаОбрабатываемыхОбъектов.Добавить(ПолноеИмяМетаданныеОбъекта.ПолноеИмя());
	Иначе
		ТекстИсключения = "Передан неправильный тип параметра ""ПолноеИмяМетаданныеОбъекта"" в функцию ОбновлениеИБСервер.ЕстьДанныеДляОбработки";
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	Запрос			= Новый Запрос;

	ТекстыЗапроса	= Новый Массив;
	ОтборУстановлен	= Ложь;

	Для каждого ОбрабатываемыйТип Из ПолныеИменаОбрабатываемыхОбъектов Цикл
		Если ТипЗнч(ОбрабатываемыйТип) = Тип("ОбъектМетаданных") Тогда
			МетаданныеОбъекта = ОбрабатываемыйТип;
			ПолноеИмяОбъекта  = ОбрабатываемыйТип.ПолноеИмя();
		Иначе
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ОбрабатываемыйТип);
			ПолноеИмяОбъекта  = ОбрабатываемыйТип;
		КонецЕсли;

		УсловиеОтбораДанных = "ИСТИНА";

		Если БазоваяПодсистемаСервер.ЭтоОбъектСсылочногоТипа(МетаданныеОбъекта) Тогда
			ТекстЗапроса	= "ВЫБРАТЬ ПЕРВЫЕ 1
			            	  |	ТаблицаИзменений.Ссылка КАК Ссылка
			            	  |ИЗ
			            	  |	#ТаблицаИзменений КАК ТаблицаИзменений
			            	  |ГДЕ
			            	  |	&УсловиеОтбораУзла
			            	  |	И &УсловиеОтбораДанных";
			Запрос.УстановитьПараметр("Ссылка", Отбор);

			Если Отбор <> Неопределено Тогда
				УсловиеОтбораДанных = "ТаблицаИзменений.Ссылка В (&Отбор)";
			КонецЕсли;

		ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта)
			И МетаданныеОбъекта.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда

			Если ПолныеИменаОбрабатываемыхОбъектов.Количество() > 1 Тогда
				ТекстИсключения = "В массиве имен в параметре ""ПолноеИмяМетаданныеОбъекта"" в функцию ОбновлениеИБСервер.ЕстьДанныеДляОбработки передан независимый регистр сведений.";

				ВызватьИсключение ТекстИсключения;
			КонецЕсли;

			ОтборУстановлен = Истина;

			ТекстЗапроса	= "ВЫБРАТЬ ПЕРВЫЕ 1
			            	  |	&ТекстВыборкиИзмерений КАК ТекстВыборкиИзмерений
			            	  |ИЗ
			            	  |	#ТаблицаИзменений КАК ТаблицаИзменений
			            	  |ГДЕ
			            	  |	&УсловиеОтбораУзла
			            	  |	И &УсловиеОтбораДанных";
			ТекстВыборкиИзмерений = "";
			Для Каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
				Если Не Измерение.ОсновнойОтбор Тогда
					Продолжить;
				КонецЕсли;

				ТекстВыборкиИзмерений = ТекстВыборкиИзмерений + "
				|	ТаблицаИзменений." + Измерение.Имя + " КАК " + Измерение.Имя + ",";

				Если Отбор <> Неопределено Тогда
					УсловиеОтбораДанных = УсловиеОтбораДанных + "
					|	И (ТаблицаИзменений." + Измерение.Имя + " В (&ЗначениеОтбора" + Измерение.Имя + ")
					|		ИЛИ ТаблицаИзменений." + Измерение.Имя + " = &ПустоеЗначение" + Измерение.Имя + ")";

					Если Отбор.Свойство(Измерение.Имя) Тогда
						Запрос.УстановитьПараметр("ЗначениеОтбора" + Измерение.Имя, Отбор[Измерение.Имя]);
					Иначе
						Запрос.УстановитьПараметр("ЗначениеОтбора" + Измерение.Имя, Измерение.Тип.ПривестиЗначение());
					КонецЕсли;

					Запрос.УстановитьПараметр("ПустоеЗначение" + Измерение.Имя, Измерение.Тип.ПривестиЗначение());
				КонецЕсли;
			КонецЦикла;

			Если ПустаяСтрока(ТекстВыборкиИзмерений) Тогда
				ТекстВыборкиИзмерений = "*";
			Иначе
				ТекстВыборкиИзмерений = Лев(ТекстВыборкиИзмерений, СтрДлина(ТекстВыборкиИзмерений) - 1);
			КонецЕсли;

			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборкиИзмерений", ТекстВыборкиИзмерений);

		ИначеЕсли БазоваяПодсистемаСервер.ЭтоРегистр(МетаданныеОбъекта) Тогда
			ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
			               |	ТаблицаИзменений.Регистратор КАК Ссылка
			               |ИЗ
			               |	#ТаблицаИзменений КАК ТаблицаИзменений
			               |ГДЕ
			               |	&УсловиеОтбораУзла
			               |	И &УсловиеОтбораДанных";
			Если Отбор <> Неопределено Тогда
				УсловиеОтбораДанных = "ТаблицаИзменений.Регистратор В (&Отбор)";
			КонецЕсли;
		Иначе
			ТекстИсключения = "Для типа метаданных ""%МетаданныеОбъекта%"" не поддерживается проверка в функции ОбновлениеИБСервер.ЕстьДанныеДляОбработки";
			ТекстИсключения = СтрЗаменить(ТекстИсключения, "%МетаданныеОбъекта%", Строка(МетаданныеОбъекта));

			ВызватьИсключение ТекстИсключения;
		КонецЕсли;

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаИзменений", ПолноеИмяОбъекта + ".Изменения");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораДанных", УсловиеОтбораДанных);

		ТекстыЗапроса.Добавить(ТекстЗапроса);
	КонецЦикла;

	Соединитель = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|";

	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, Соединитель);

	Если Очередь = Неопределено Тогда
		УсловиеОтбораУзла = "	ТаблицаИзменений.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы ";
	Иначе
		УсловиеОтбораУзла = "	ТаблицаИзменений.Узел В (&Узлы) ";
		Если ТипЗнч(Очередь) = Тип("Массив") Тогда
			Запрос.УстановитьПараметр("Узлы", Очередь);
		Иначе
			Запрос.УстановитьПараметр("Узлы", ПланыОбмена.ОбновлениеИнформационнойБазы.УзелПоОчереди(Очередь));
		КонецЕсли;
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораУзла", УсловиеОтбораУзла);

	Если Не ОтборУстановлен Тогда
		Запрос.УстановитьПараметр("Отбор", Отбор);
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;

	Возврат Не Запрос.Выполнить().Пустой();
КонецФункции

Процедура ЗаписатьДетальнуюИнформациюОХодеОбновления(ОписаниеОбработчика)
	Длительность = ТекущаяУниверсальнаяДатаВМиллисекундах() - ОписаниеОбработчика.ЗначениеНаНачало;

	ОписаниеОбработчика.Вставить("Выполнен", Ложь);
	ОписаниеОбработчика.Вставить("Длительность", Длительность / 1000); // В секундах

	ЗаписьЖурналаРегистрации(
		"Обновление информационной базы.Протокол выполнения",
		УровеньЖурналаРегистрации.Информация,
		,
		,
		БазоваяПодсистемаСервер.ЗначениеВСтрокуXML(ОписаниеОбработчика));
КонецПроцедуры

Функция ПереданныеПараметрыОбработчикаОбновления(Параметры)
	ПереданныеПараметры = Новый Структура;
	Для Каждого Параметр Из Параметры Цикл
		Если Параметр.Ключ <> "ОбработкаЗавершена" И Параметр.Ключ <> "ПрогрессВыполнения" И Параметр.Ключ <> "Очередь" Тогда
			ПереданныеПараметры.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
	КонецЦикла;

	Возврат ПереданныеПараметры;
КонецФункции

Процедура ПроверитьВложеннуюТранзакцию(ТранзакцияАктивнаНаНачалоВыполнения, НазваниеОбработчика)
	ИмяСобытия = "Обновление информационной базы.Выполнение обработчиков";
	Если ТранзакцияАктивнаНаНачалоВыполнения Тогда
		Если ТранзакцияАктивна() Тогда
			// Проверка поглощенных исключений в обработчиках.
			Попытка
				Константы.РаботаВЛокальномРежиме.Получить();
			Исключение
				ШаблонКомментария = "Ошибка выполнения обработчика обновления %1:
				|Обработчиком обновления было поглощено исключение при активной внешней транзакции.
				|При активных транзакциях, открытых выше по стеку, исключение также необходимо пробрасывать выше по стеку.";
				Комментарий = СтрШаблон(ШаблонКомментария, НазваниеОбработчика);

				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);

				ВызватьИсключение(Комментарий);
			КонецПопытки;
		Иначе
			ШаблонКомментария	= "Ошибка выполнения обработчика обновления %1:
			|Обработчиком обновления была закрыта лишняя транзакция, открытая ранее (выше по стеку).";
			Комментарий			= СтрШаблон(ШаблонКомментария, НазваниеОбработчика);

			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);

			ВызватьИсключение(Комментарий);
		КонецЕсли;
	Иначе
		Если ТранзакцияАктивна() Тогда
			ШаблонКомментария	= "Ошибка выполнения обработчика обновления %1:
			|Открытая внутри обработчика обновления транзакция осталась активной (не была закрыта или отменена).";
			Комментарий			= СтрШаблон(ШаблонКомментария, НазваниеОбработчика);

			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);

			ВызватьИсключение(Комментарий);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ВыполненыВсеОтложенныеОбработчики(СведенияОбОбновлении)
	ВыполненоОбработчиков = 0;
	ВсегоОбработчиков     = 0;
	Для Каждого СтрокаДереваБиблиотека Из СведенияОбОбновлении.ДеревоОбработчиков.Строки Цикл
		Для Каждого СтрокаДереваВерсия Из СтрокаДереваБиблиотека.Строки Цикл
			ВсегоОбработчиков = ВсегоОбработчиков + СтрокаДереваВерсия.Строки.Количество();
			Для Каждого Обработчик Из СтрокаДереваВерсия.Строки Цикл
				Если Обработчик.Статус = "Выполнено" Тогда
					ВыполненоОбработчиков = ВыполненоОбработчиков + 1;
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Если ВсегоОбработчиков = ВыполненоОбработчиков Тогда
		СведенияОбОбновлении.ВремяОкончаниеОтложенногоОбновления	= ТекущаяДатаСеанса();
		СведенияОбОбновлении.ОтложенноеОбновлениеЗавершеноУспешно	= Истина;
		ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);
		Константы.ОтложенноеОбновлениеЗавершеноУспешно.Установить(Истина);
		Если Не БазоваяПодсистемаСервер.ЭтоПодчиненныйУзелРИБ() Тогда
			Константы.ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно.Установить(Истина);
		КонецЕсли;

		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

// Возвращает режим обновления данных информационной базы.
// Допускается вызывать только до начала обновления информационной базы (иначе возвращает "ОбновлениеВерсии").
//
// Возвращаемое значение:
//   Строка   - "НачальноеЗаполнение", если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии", если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы", если выполняется первый запуск после обновление конфигурации базы данных,
//              в которой изменилось имя основной конфигурации.
//
Функция РежимОбновленияДанных() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	РежимОбновленияДанных = "";

	ИмяОсновнойКонфигурации	= Метаданные.Имя;
	ОписанияПодсистем		= БазоваяПодсистемаСерверПовтИсп.ОписанияПодсистем();
	Для каждого ИмяПодсистемы Из ОписанияПодсистем.Порядок Цикл
		ОписаниеПодсистемы = ОписанияПодсистем.ПоИменам.Получить(ИмяПодсистемы);
		Если НЕ ЗначениеЗаполнено(ОписаниеПодсистемы.ОсновнойСерверныйМодуль) Тогда
			Продолжить;
		КонецЕсли;

		Если ОписаниеПодсистемы.Имя <> ИмяОсновнойКонфигурации Тогда
			Продолжить;
		КонецЕсли;

		Модуль = БазоваяПодсистемаСервер.ОбщийМодуль(ОписаниеПодсистемы.ОсновнойСерверныйМодуль);
		Модуль.ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных);
	КонецЦикла;

	УстановитьПривилегированныйРежим(Истина);
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	1 КАК ЕстьВерсииПодсистем
	            	  |ИЗ
	            	  |	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем";

	РезультатВыполненияПакета = Запрос.ВыполнитьПакет();
	Если РезультатВыполненияПакета[0].Пустой() Тогда
		Возврат "НачальноеЗаполнение";
	КонецЕсли;

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	1 КАК ЕстьВерсииПодсистем
	            	  |ИЗ
	            	  |	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
	            	  |ГДЕ
	            	  |	ВерсииПодсистем.ЭтоОсновнаяКонфигурация = ИСТИНА
	            	  |;
	            	  |
	            	  |////////////////////////////////////////////////////////////////////////////////
	            	  |ВЫБРАТЬ
	            	  |	1 КАК ЕстьВерсииПодсистем
	            	  |ИЗ
	            	  |	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
	            	  |ГДЕ
	            	  |	ВерсииПодсистем.ИмяПодсистемы = &ИмяОсновнойКонфигурации
	            	  |;
	            	  |
	            	  |////////////////////////////////////////////////////////////////////////////////
	            	  |ВЫБРАТЬ
	            	  |	1 КАК ЕстьВерсииПодсистем
	            	  |ИЗ
	            	  |	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
	            	  |ГДЕ
	            	  |	ВерсииПодсистем.ЭтоОсновнаяКонфигурация = ИСТИНА
	            	  |	И ВерсииПодсистем.ИмяПодсистемы = &ИмяОсновнойКонфигурации";
	Запрос.УстановитьПараметр("ИмяОсновнойКонфигурации", Метаданные.Имя);
	РезультатВыполненияПакета = Запрос.ВыполнитьПакет();
	Если РезультатВыполненияПакета[0].Пустой() И Не РезультатВыполненияПакета[1].Пустой() Тогда
		Возврат "ОбновлениеВерсии"; // Признак ЭтоОсновнаяКонфигурация еще не был заполнен.
	КонецЕсли;

	// Определяем по ранее заполненному признаку ЭтоОсновнаяКонфигурация.
	Возврат ?(РезультатВыполненияПакета[2].Пустой(), "ПереходСДругойПрограммы", "ОбновлениеВерсии");
КонецФункции

// Выполнить неинтерактивное обновление данных ИБ.
//
// Параметры:
//
//  ПараметрыОбновления - Структура - свойства:
//    * ИсключениеПриНевозможностиБлокировкиИБ - Булево - если Ложь, тогда при неудачной
//                 попытке установки монопольного режима исключение не вызывается,
//                 а возвращается строка "ОшибкаУстановкиМонопольногоРежима".
//
//    * ПриЗапускеКлиентскогоПриложения - Булево - Начальное значение Ложь. Если указать Истина,
//                 тогда параметры работы программы не будут обновляться, т.к. при клиентском
//                 запуске они обновляются в самом начале (до авторизации пользователи и обновления ИБ).
//                 Параметр требуется для оптимизации клиентского режима запуска, чтобы не выполнять
//                 обновление параметров работы программы дважды.
//                 При внешнем вызове, например, в сеансе внешнего соединения, параметры работы
//                 программы должны быть обновлены до продолжения обновления ИБ.
//    * Перезапустить             - Булево    - (возвращаемое значение) требование перезапуска,
//                                  в некоторых случаях ПриЗапускеКлиентскогоПриложения, например,
//                                  при возврате к конфигурации базы данных подчиненного узла РИБ,
//                                  см. общий модуль ОбменДаннымиСервер процедуру.
//                                  ВыполнитьСинхронизациюПриОтсутствииОбновленияИнформационнойБазы.
//    * УстановленнаяБлокировкаИБ - Структура - структура со свойствами см. БлокировкаИБ().
//    * ВФоне                     - Булево    - если обновление информационной базы выполняется
//                 в фоне, то следует передавать Истина, иначе Ложь.
//    * ВыполнятьОтложенныеОбработчики - Булево - если Истина, отложенное обновление будет выполнено
//                 в основном цикле обновления. Только для клиент-серверного режима работы.
//
// Возвращаемое значение:
//  Строка -  признак выполнения обработчиков обновления:
//           "Успешно", "НеТребуется", "ОшибкаУстановкиМонопольногоРежима".
//
Функция ВыполнитьОбновлениеИнформационнойБазы(ПараметрыОбновления) Экспорт
	Если Не ПараметрыОбновления.ПриЗапускеКлиентскогоПриложения Тогда
		Попытка
			РегистрыСведений.ПараметрыРаботыПрограммы.ЗагрузитьОбновитьПараметрыРаботыПрограммы();
		Исключение
			ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;

	РежимВыполненияОтложенногоОбновления = РежимВыполненияОтложенногоОбновления(ПараметрыОбновления);

	// Определяем факт смены имени конфигурации.

	РежимОбновленияДанных	= РежимОбновленияДанных();
	ВерсияМетаданных		= Метаданные.Версия;
	Если ПустаяСтрока(ВерсияМетаданных) Тогда
		ВерсияМетаданных = "0.0.0.0";
	КонецЕсли;
	ВерсияДанных = ВерсияИБ(Метаданные.Имя);

	// Зарезервировано для новых подсистем

	Если НЕ ОбновлениеИБСерверПовтИсп.НеобходимоОбновлениеИнформационнойБазы() Тогда
		Возврат "НеТребуется";
	КонецЕсли;

	Если ПараметрыОбновления.ВФоне Тогда
		БазоваяПодсистемаСервер.СообщитьПрогресс(1);
	КонецЕсли;

	ОписанияПодсистем  = БазоваяПодсистемаСерверПовтИсп.ОписанияПодсистем();
	Для каждого ИмяПодсистемы Из ОписанияПодсистем.Порядок Цикл
		ОписаниеПодсистемы = ОписанияПодсистем.ПоИменам.Получить(ИмяПодсистемы);
		Если НЕ ЗначениеЗаполнено(ОписаниеПодсистемы.ОсновнойСерверныйМодуль) Тогда
			Продолжить;
		КонецЕсли;
		Модуль = БазоваяПодсистемаСервер.ОбщийМодуль(ОписаниеПодсистемы.ОсновнойСерверныйМодуль);
		Модуль.ПередОбновлениемИнформационнойБазы();
	КонецЦикла;

	// Проверка наличия прав для обновления информационной базы.
	Если НЕ ПользователиСервер.ЭтоПолноправныйПользователь(, Истина, Истина) Тогда
		Сообщение = "Недостаточно прав для обновления версии программы.";
		ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, Сообщение);

		ВызватьИсключение Сообщение;
	КонецЕсли;

	Если РежимОбновленияДанных = "ПереходСДругойПрограммы" Тогда
		Сообщение = СтрШаблон("Изменилось имя конфигурации на ""%1"".
			           |Будет выполнен переход с другой программы.",
			Метаданные.Имя);
	ИначеЕсли РежимОбновленияДанных = "ОбновлениеВерсии" Тогда
		Сообщение = СтрШаблон("Изменился номер версии конфигурации: с ""%1"" на ""%2"".
			           |Будет выполнено обновление информационной базы.",
			ВерсияДанных, ВерсияМетаданных);
	Иначе
		Сообщение = СтрШаблон("Выполняется начальное заполнение данных до версии ""%1"".",
			ВерсияМетаданных);
	КонецЕсли;
	ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Информация,,, Сообщение);

	// Установка блокировки информационной базы.
	БлокировкаУстановленаРанее = ПараметрыОбновления.УстановленнаяБлокировкаИБ <> Неопределено И ПараметрыОбновления.УстановленнаяБлокировкаИБ.Установлена;
	Если БлокировкаУстановленаРанее Тогда
		ИтерацииОбновления	= ИтерацииОбновления();
		БлокировкаИБ		= ПараметрыОбновления.УстановленнаяБлокировкаИБ;
	Иначе
		БлокировкаИБ		= Неопределено;
		ИтерацииОбновления	= ЗаблокироватьИБ(БлокировкаИБ, ПараметрыОбновления.ИсключениеПриНевозможностиБлокировкиИБ);
		Если БлокировкаИБ.Ошибка <> Неопределено Тогда
			Возврат БлокировкаИБ.Ошибка;
		КонецЕсли;
	КонецЕсли;

	ОперативноеОбновление	= БлокировкаИБ.ОперативноеОбновление;
	КлючЗаписи				= БлокировкаИБ.КлючЗаписи;

	Попытка
		Если РежимОбновленияДанных = "ПереходСДругойПрограммы" Тогда
			ПерейтиСДругойПрограммы();

			РежимОбновленияДанных	= РежимОбновленияДанных();
			ОперативноеОбновление	= Ложь;
			ИтерацииОбновления 		= ИтерацииОбновления();
		КонецЕсли;
	Исключение
		Если Не БлокировкаУстановленаРанее Тогда
			РазблокироватьИБ(БлокировкаИБ);
		КонецЕсли;

		// Зарезервировано для новых подсистем

		ВызватьИсключение;
	КонецПопытки;

	Если ПараметрыОбновления.ВФоне Тогда
		БазоваяПодсистемаСервер.СообщитьПрогресс(10);
	КонецЕсли;

	Попытка
		СформироватьСписокОтложенныхОбработчиковОбновления(ИтерацииОбновления);
	Исключение
		// Зарезервировано для новых подсистем

		ВызватьИсключение;
	КонецПопытки;

	Параметры = Новый Структура;
	Параметры.Вставить("ХодВыполненияОбработчиков",				КоличествоОбработчиковНаТекущуюВерсию(ИтерацииОбновления, РежимВыполненияОтложенногоОбновления));
	Параметры.Вставить("ОперативноеОбновление",					ОперативноеОбновление);
	Параметры.Вставить("ВФоне",									ПараметрыОбновления.ВФоне);
	Параметры.Вставить("ПриЗапускеКлиентскогоПриложения",		ПараметрыОбновления.ПриЗапускеКлиентскогоПриложения);
	Параметры.Вставить("РежимВыполненияОтложенногоОбновления",	РежимВыполненияОтложенногоОбновления);

	Сообщение = "Для обновления программы на новую версию будут выполнены обработчики: %1";
	Сообщение = СтрШаблон(Сообщение, Параметры.ХодВыполненияОбработчиков.ВсегоОбработчиков);
	ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Информация,,, Сообщение);

	Попытка
		// Выполняем все обработчики обновления для подсистем конфигурации.
		Для Каждого ИтерацияОбновления Из ИтерацииОбновления Цикл
			ИтерацияОбновления.ВыполненныеОбработчики = ВыполнитьИтерациюОбновления(ИтерацияОбновления, Параметры);
		КонецЦикла;

		// Очистка списка новых подсистем.
		СведенияОбОбновлении					= СведенияОбОбновленииИнформационнойБазы();
		СведенияОбОбновлении.НовыеПодсистемы	= Новый Массив;
		ЗаполнитьДанныеДляПараллельногоОтложенногоОбновления(СведенияОбОбновлении, Параметры);
		ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);

		// Для файловой базы отложенные обработчики выполняются в основном цикле обновления.
		Если РежимВыполненияОтложенногоОбновления = "Монопольно" Тогда
			ПараметрЗапускаКлиента = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
			Если СтрНайти(НРег(ПараметрЗапускаКлиента), НРег("ОтладкаОтложенногоОбновления")) = 0 Тогда
				ВыполнитьОтложенноеОбновлениеСейчас(Параметры);
			КонецЕсли;
		КонецЕсли;
	Исключение
		Если Не БлокировкаУстановленаРанее Тогда
			РазблокироватьИБ(БлокировкаИБ);
		КонецЕсли;

		// Зарезервировано для новых подсистем

		ВызватьИсключение;
	КонецПопытки;

	// Отключение монопольного режима.
	Если Не БлокировкаУстановленаРанее Тогда
		РазблокироватьИБ(БлокировкаИБ);
	КонецЕсли;

	Сообщение = СтрШаблон("Обновление информационной базы на версию ""%1"" выполнено успешно.", ВерсияМетаданных);
	ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Информация,,, Сообщение);

	ВыводитьОписаниеОбновлений = (РежимОбновленияДанных <> "НачальноеЗаполнение");

	ОбновитьПовторноИспользуемыеЗначения();

	// После обновления информационной базы.
	//
	ВыполнитьОбработчикиПослеОбновленияИнформационнойБазы(
		ИтерацииОбновления,
		Константы.ДетализироватьОбновлениеИБВЖурналеРегистрации.Получить(),
		ВыводитьОписаниеОбновлений,
		ОперативноеОбновление);

	// Зарезервировано для новых подсистем

	// Для клиент-серверной базы запланировать выполнение отложенных обработчиков обновления.
	Если РежимВыполненияОтложенногоОбновления <> Неопределено И РежимВыполненияОтложенногоОбновления = "Отложенно" Тогда
		Если Не БазоваяПодсистемаСервер.ИнформационнаяБазаФайловая() Тогда
			ПриВключенииОтложенногоОбновления(Истина);
		КонецЕсли;
	КонецЕсли;

	Если ВыводитьОписаниеОбновлений Тогда
		БазоваяПодсистемаСервер.ХранилищеОбщихНастроекСохранить("ОбновлениеИБ", "ВывестиОписаниеИзмененийДляАдминистратора", Истина, , ИмяПользователя());
	КонецЕсли;

	СведенияОбОбновленииИБ								= СведенияОбОбновленииИнформационнойБазы();
	СведенияОбОбновленииИБ.ВыводитьОписаниеОбновлений	= ВыводитьОписаниеОбновлений;

	ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновленииИБ);

	// Зарезервировано для новых подсистем

	ОбновитьПовторноИспользуемыеЗначения();

	УстановитьПривилегированныйРежим(Истина);
	ПараметрЗапускаКлиента = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
	Если СтрНайти(НРег(ПараметрЗапускаКлиента), НРег("ЗапуститьОбновлениеИнформационнойБазы")) > 0 Тогда
		БазоваяПодсистемаСервер.ЗарегистрироватьИзменениеПриоритетныхДанныхДляПодчиненныхУзловРИБ();
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);

	УстановитьЗапускОбновленияИнформационнойБазы(Ложь);

	Возврат "Успешно";
КонецФункции

// Формирует дерево отложенных обработчиков и записывает его в константу СведенияОбОбновленииИБ.
//
Процедура СформироватьСписокОтложенныхОбработчиковОбновления(ИтерацииОбновления, ПервыйОбменВРИБ = Ложь)
	ПроверитьУникальностьИдентификаторовОтложенныхОбработчиков(ИтерацииОбновления);

	ДеревоОбработчиков		= ВыполненныеОбработчикиПрошлыхВерсий(ИтерацииОбновления);
	СведенияОбОбновлении	= СведенияОбОбновленииИнформационнойБазы();

	Константы.ОтложенноеОбновлениеЗавершеноУспешно.Установить(Ложь);
	// Устанавливаем начальные значения полей.
	СведенияОбОбновлении.Вставить("ВремяНачалаОбновления");
	СведенияОбОбновлении.Вставить("ВремяОкончанияОбновления");
	СведенияОбОбновлении.Вставить("ПродолжительностьОбновления");
	СведенияОбОбновлении.Вставить("ВремяНачалаОтложенногоОбновления");
	СведенияОбОбновлении.Вставить("ВремяОкончаниеОтложенногоОбновления");
	СведенияОбОбновлении.Вставить("НомерСеанса", Новый СписокЗначений());
	СведенияОбОбновлении.Вставить("ПараметрыОбработчикаОбновления");
	СведенияОбОбновлении.Вставить("ОтложенноеОбновлениеЗавершеноУспешно");
	СведенияОбОбновлении.Вставить("ДеревоОбработчиков", Новый ДеревоЗначений());
	СведенияОбОбновлении.Вставить("ВыводитьОписаниеОбновлений", Ложь);
	СведенияОбОбновлении.Вставить("ПриостановленныеПроцедурыОбновления", Новый Массив);
	СведенияОбОбновлении.Вставить("ЗапущенныеПроцедурыОбновления", Новый Массив);
	СведенияОбОбновлении.Вставить("УправлениеОтложеннымОбновлением", Новый Структура);
	СведенияОбОбновлении.Вставить("ОбрабатываемыеДанные", Новый Соответствие);
	СведенияОбОбновлении.Вставить("ТекущаяИтерацияОбновления", 1);
	СведенияОбОбновлении.Вставить("ПланОтложенногоОбновления");
	СведенияОбОбновлении.Вставить("ОписаниеПроцедурЗаполнения");

	ИмяБиблиотеки = "";
	НомерВерсии   = "";
	ТекстОшибок   = "";

	ОписанияБиблиотек = БазоваяПодсистемаСерверПовтИсп.ОписанияПодсистем().ПоИменам;

	Для каждого ИтерацияОбновления Из ИтерацииОбновления Цикл
		ПредыдущаяВерсия						= ?(ПервыйОбменВРИБ, "1.0.0.0", ИтерацияОбновления.ПредыдущаяВерсия);
		ИмяБиблиотеки							= ИтерацияОбновления.Подсистема;
		РежимВыполненияОтложенныхОбработчиков	= ОписанияБиблиотек[ИмяБиблиотеки].РежимВыполненияОтложенныхОбработчиков;
		ПараллельноСВерсии						= ОписанияБиблиотек[ИмяБиблиотеки].ПараллельноеОтложенноеОбновлениеСВерсии;

		Если ПервыйОбменВРИБ И РежимВыполненияОтложенныхОбработчиков = "Последовательно" Тогда
			Продолжить;
		КонецЕсли;

		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ПолучатьРазделенные",			Истина);
		ПараметрыОтбора.Вставить("РежимОбновления",				"Отложенно");
		ПараметрыОтбора.Вставить("УчитыватьПервыйОбменВРИБ",	(РежимВыполненияОтложенныхОбработчиков = "Параллельно"));
		ПараметрыОтбора.Вставить("ПервыйОбменВРИБ",				ПервыйОбменВРИБ);

		ОбработчикиПоВерсиям = ОбработчикиОбновленияВИнтервале(ИтерацияОбновления.Обработчики, ПредыдущаяВерсия, ИтерацияОбновления.Версия, ПараметрыОтбора);
		Если ОбработчикиПоВерсиям.Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		// Добавление строки библиотеки.
		НайденнаяСтрока = ДеревоОбработчиков.Строки.Найти(ИмяБиблиотеки, "ИмяБиблиотеки");
		Если НайденнаяСтрока <> Неопределено Тогда
			СтрокаДереваБиблиотека					= НайденнаяСтрока;
		Иначе
			СтрокаДереваБиблиотека					= ДеревоОбработчиков.Строки.Добавить();
			СтрокаДереваБиблиотека.ИмяБиблиотеки	= ИмяБиблиотеки;
		КонецЕсли;
		СтрокаДереваБиблиотека.Статус = "";

		Для Каждого СтрокаВерсия Из ОбработчикиПоВерсиям.Строки Цикл
			Если ПервыйОбменВРИБ
				И РежимВыполненияОтложенныхОбработчиков = "Параллельно"
				И (СтрокаВерсия.Версия = "*" Или ЗначениеЗаполнено(ПараллельноСВерсии) И БазоваяПодсистемаКлиентСервер.СравнитьВерсии(СтрокаВерсия.Версия, ПараллельноСВерсии) < 0) Тогда
				Продолжить;
			КонецЕсли;

			НайденнаяСтрока = СтрокаДереваБиблиотека.Строки.Найти(СтрокаВерсия.Версия, "НомерВерсии");
			ЕстьНевыполненныеОбработчики = Ложь;
			Если НайденнаяСтрока <> Неопределено Тогда
				НайденнаяСтрока.Статус = "";

				Для Каждого НевыполненныйОбработчик Из НайденнаяСтрока.Строки Цикл
					ЕстьНевыполненныеОбработчики					= Истина;
					НевыполненныйОбработчик.ЧислоПопыток			= 0;
					НевыполненныйОбработчик.СтатистикаВыполнения	= Новый Соответствие;
				КонецЦикла;
				СтрокаДереваВерсии = НайденнаяСтрока;
			Иначе
				СтрокаДереваВерсии				= СтрокаДереваБиблиотека.Строки.Добавить();
				СтрокаДереваВерсии.НомерВерсии	= СтрокаВерсия.Версия;
				СтрокаДереваВерсии.Статус		= "";
			КонецЕсли;

			РежимПараллельноСВерсии = РежимВыполненияОтложенныхОбработчиков = "Параллельно" И ЗначениеЗаполнено(ПараллельноСВерсии);

			Для Каждого Обработчик Из СтрокаВерсия.Строки Цикл
				Если РежимПараллельноСВерсии Тогда
					Если СтрокаВерсия.Версия = "*" Тогда
						РежимОтложенногоОбработчика = "Последовательно";
					Иначе
						Результат					= БазоваяПодсистемаКлиентСервер.СравнитьВерсии(СтрокаВерсия.Версия, ПараллельноСВерсии);
						РежимОтложенногоОбработчика	= ?(Результат > 0, "Параллельно", "Последовательно");
					КонецЕсли;
				Иначе
					РежимОтложенногоОбработчика = РежимВыполненияОтложенныхОбработчиков;
				КонецЕсли;
				ПроверитьСвойстваОтложенногоОбработчика(Обработчик, РежимОтложенногоОбработчика, ТекстОшибок);

				Если ЕстьНевыполненныеОбработчики Тогда
					НайденнаяСтрока = СтрокаДереваВерсии.Строки.Найти(Обработчик.Процедура, "ИмяОбработчика");
					Если НайденнаяСтрока <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Обработчик);
						Продолжить; // Данный обработчик на эту версию уже существует.
					КонецЕсли;
				КонецЕсли;

				СтрокаДереваОбработчики = СтрокаДереваВерсии.Строки.Добавить();

				ЗаполнитьЗначенияСвойств(СтрокаДереваОбработчики, Обработчик);
				СтрокаДереваОбработчики.ИмяБиблиотеки	= ИмяБиблиотеки;
				СтрокаДереваОбработчики.НомерВерсии		= Обработчик.Версия;
				СтрокаДереваОбработчики.ИмяОбработчика	= Обработчик.Процедура;
				СтрокаДереваОбработчики.Статус			= "НеВыполнено";
				СтрокаДереваОбработчики.ЧислоПопыток	= 0;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Если Не ПустаяСтрока(ТекстОшибок) Тогда
		ВызватьИсключение ТекстОшибок;
	КонецЕсли;

	// Сортировка дерева обработчиков.
	ПорядокБиблиотек = БазоваяПодсистемаСерверПовтИсп.ОписанияПодсистем().Порядок;
	Индекс = 0;
	Для Каждого Библиотека Из ПорядокБиблиотек Цикл
		НайденнаяСтрока = ДеревоОбработчиков.Строки.Найти(Библиотека, "ИмяБиблиотеки");
		Если НайденнаяСтрока <> Неопределено Тогда
			ИндексСтроки	= ДеревоОбработчиков.Строки.Индекс(НайденнаяСтрока);
			Сдвиг			= Индекс - ИндексСтроки;
			Если Сдвиг <> 0 Тогда
				ДеревоОбработчиков.Строки.Сдвинуть(НайденнаяСтрока, Сдвиг);
			КонецЕсли;
			Индекс = Индекс + 1
		КонецЕсли;
	КонецЦикла;

	ОчередьОбработчиков = Новый Соответствие;
	Для Каждого ОбработчикИОчередь Из ОчередьОбработчиков Цикл
		НайденныйОбработчик = ДеревоОбработчиков.Строки.Найти(ОбработчикИОчередь.Ключ, "ИмяОбработчика", Истина);
		Если НайденныйОбработчик <> Неопределено Тогда
			НайденныйОбработчик.ОчередьОтложеннойОбработки = ОбработчикИОчередь.Значение;
		КонецЕсли;
	КонецЦикла;

	СведенияОбОбновлении.ВерсияДереваОбработчиков = Метаданные.Версия;

	ВыполнитьПроверкуДереваОтложенныхОбработчиков(ДеревоОбработчиков);
	СведенияОбОбновлении.ДеревоОбработчиков = ДеревоОбработчиков;

	СоставитьПланОтложенногоОбновления(СведенияОбОбновлении);
	ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);
КонецПроцедуры

Функция ОбработчикиОбновленияВИнтервале(Знач ИсходнаяТаблицаОбработчиков, Знач ВерсияОт, Знач ВерсияДо, Знач ПараметрыОтбораОбработчиков = Неопределено) Экспорт
	ПараметрыОтбора = ПараметрыОтбораОбработчиков;
	Если ПараметрыОтбора = Неопределено Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ПолучатьРазделенные", Ложь);
		ПараметрыОтбора.Вставить("РежимОбновления", "Монопольно");
		ПараметрыОтбора.Вставить("УчитыватьПервыйОбменВРИБ", Ложь);
		ПараметрыОтбора.Вставить("ПервыйОбменВРИБ", Ложь);
	КонецЕсли;
	// Добавление номера в таблицу, для упорядочивания в порядке добавления.
	ВсеОбработчики = ИсходнаяТаблицаОбработчиков.Скопировать();

	ВсеОбработчики.Колонки.Добавить("НомерПоПорядку", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	Для Индекс = 0 По ВсеОбработчики.Количество() - 1 Цикл
		СтрокаОбработчика					= ВсеОбработчики[Индекс];
		СтрокаОбработчика.НомерПоПорядку	= Индекс + 1;
	КонецЦикла;

	// Список объектов новых подсистем.
	ОбъектыНовыхПодсистем = Новый Массив;
	Для Каждого ИмяПодсистемы Из СведенияОбОбновленииИнформационнойБазы().НовыеПодсистемы Цикл
		Подсистема = Метаданные.НайтиПоПолномуИмени(ИмяПодсистемы);
		Если Подсистема = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ОбъектМетаданных Из Подсистема.Состав Цикл
			ОбъектыНовыхПодсистем.Добавить(ОбъектМетаданных.ПолноеИмя());
		КонецЦикла;
	КонецЦикла;

	// Определение обработчиков новых подсистем.
	ВсеОбработчики.Колонки.Добавить("ЭтоНоваяПодсистема", Новый ОписаниеТипов("Булево"));
	Для Каждого ОписаниеОбработчика Из ВсеОбработчики Цикл
		Позиция			= СтрНайти(ОписаниеОбработчика.Процедура, ".", НаправлениеПоиска.СКонца);
		ИмяМенеджера	= Лев(ОписаниеОбработчика.Процедура, Позиция - 1);
		Если ОбъектыНовыхПодсистем.Найти(ИмяОбъектаМетаданныхПоИмениМенеджера(ИмяМенеджера)) <> Неопределено Тогда
			ОписаниеОбработчика.ЭтоНоваяПодсистема = Истина;
		КонецЕсли;
	КонецЦикла;

	// Формирование дерева обработчиков.
	Схема																= ПолучитьОбщийМакет("ПолучениеДереваОбработчиковОбновления");
	Схема.Параметры.Найти("ВыбиратьРазделенныеОбработчики").Значение	= Истина;
	Схема.Параметры.Найти("ВыбиратьНеразделенныеОбработчики").Значение 	= Истина;
	Схема.Параметры.Найти("ВерсияОт").Значение							= ВерсияОт;
	Схема.Параметры.Найти("ВерсияДо").Значение							= ВерсияДо;
	Схема.Параметры.Найти("ВесВерсииОт").Значение						= ВесВерсии(Схема.Параметры.Найти("ВерсияОт").Значение);
	Схема.Параметры.Найти("ВесВерсииДо").Значение						= ВесВерсии(Схема.Параметры.Найти("ВерсияДо").Значение);
	Схема.Параметры.Найти("ОперативноеОбновление").Значение				= (ПараметрыОтбора.РежимОбновления = "Оперативно");
	Схема.Параметры.Найти("ОтложенноеОбновление").Значение				= (ПараметрыОтбора.РежимОбновления = "Отложенно");
	Если ПараметрыОтбора.УчитыватьПервыйОбменВРИБ Тогда
		Схема.Параметры.Найти("ПервыйОбменВРИБ").Значение = ПараметрыОтбора.ПервыйОбменВРИБ;
		Схема.Параметры.Найти("ЭтоРИБСФильтром").Значение = БазоваяПодсистемаСерверПовтИсп.ИспользуетсяРИБ("СФильтром");
	КонецЕсли;

	Компоновщик	= Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет		= Компоновщик.Выполнить(Схема, Схема.НастройкиПоУмолчанию, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет, Новый Структура("Обработчики", ВсеОбработчики), , Истина);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Новый ДеревоЗначений);

	ВыполняемыеОбработчики = ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	ВыполняемыеОбработчики.Колонки.Версия.Имя		= "ВерсияРегистрации";
	ВыполняемыеОбработчики.Колонки.ГруппаВерсии.Имя = "Версия";

	// Сортировка обработчиков по признаку "ОбщиеДанные".
	Для Каждого Версия Из ВыполняемыеОбработчики.Строки Цикл
		Версия.Строки.Сортировать("ОбщиеДанные Убыв", Истина);
	КонецЦикла;

	Возврат ВыполняемыеОбработчики;
КонецФункции

Процедура ПроверитьУникальностьИдентификаторовОтложенныхОбработчиков(ИтерацииОбновления)
	ТаблицаПроверкиУникальности = Новый ТаблицаЗначений;
	ТаблицаПроверкиУникальности.Колонки.Добавить("Идентификатор");
	ТаблицаПроверкиУникальности.Колонки.Добавить("Индекс");

	Для Каждого ИтерацияОбновления Из ИтерацииОбновления Цикл
		ПараметрыОтбора		= Новый Структура;
		ПараметрыОтбора.Вставить("РежимВыполнения", "Отложенно");
		ТаблицаОбработчиков	= ИтерацияОбновления.Обработчики;

		Обработчики = ТаблицаОбработчиков.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Обработчик Из Обработчики Цикл
			Если Не ЗначениеЗаполнено(Обработчик.Идентификатор) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы				= ТаблицаПроверкиУникальности.Добавить();
			СтрокаТаблицы.Идентификатор = Строка(Обработчик.Идентификатор);
			СтрокаТаблицы.Индекс        = 1;
		КонецЦикла;
	КонецЦикла;

	ИсходноеКоличествоСтрок = ТаблицаПроверкиУникальности.Количество();
	ТаблицаПроверкиУникальности.Свернуть("Идентификатор", "Индекс");
	ИтоговоеКоличествоСтрок = ТаблицаПроверкиУникальности.Количество();

	// Быстрая проверка.
	Если ИсходноеКоличествоСтрок = ИтоговоеКоличествоСтрок Тогда
		Возврат; // Все идентификаторы уникальны.
	КонецЕсли;

	ТаблицаПроверкиУникальности.Сортировать("Индекс Убыв");
	ТекстСообщения = "Обнаружены отложенные обработчики обновления,
		|у которых совпадают уникальные идентификаторы. Следующие идентификаторы не уникальны:";
	Для Каждого СтрокаИдентификатор Из ТаблицаПроверкиУникальности Цикл
		Если СтрокаИдентификатор.Индекс = 1 Тогда
			Прервать;
		Иначе
			ТекстСообщения = ТекстСообщения + Символы.ПС + СтрокаИдентификатор.Идентификатор;
		КонецЕсли;
	КонецЦикла;

	ВызватьИсключение ТекстСообщения;
КонецПроцедуры

Функция ВыполненныеОбработчикиПрошлыхВерсий(ИтерацииОбновления)
	СведенияОбОбновлении = СведенияОбОбновленииИнформационнойБазы();
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Статус");
	ПараметрыПоиска.Вставить("ИмяБиблиотеки");

	Если СведенияОбОбновлении.ОтложенноеОбновлениеЗавершеноУспешно <> Истина
		И СведенияОбОбновлении.ДеревоОбработчиков <> Неопределено
		И СведенияОбОбновлении.ДеревоОбработчиков.Строки.Количество() > 0 Тогда

		ВыполнитьПроверкуДереваОтложенныхОбработчиков(СведенияОбОбновлении.ДеревоОбработчиков, Истина);

		НеобходимоСохранитьНевыполненныеОбработчики = Ложь;
		Для Каждого Библиотека Из ИтерацииОбновления Цикл
			ПараметрыПоиска.ИмяБиблиотеки = Библиотека.Подсистема;

			// Сброс количество попыток у обработчиков со статусом "Ошибка".
			ПараметрыПоиска.Статус	= "Ошибка";
			ОбработчикиСОшибкой		= СведенияОбОбновлении.ДеревоОбработчиков.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
			ПроверитьОтложенныеОбработчики(ОбработчикиСОшибкой, Библиотека, НеобходимоСохранитьНевыполненныеОбработчики);

			// Поиск невыполненных обработчиков, которые необходимо сохранить для повторного запуска.
			ПараметрыПоиска.Статус		= "НеВыполнено";
			НевыполненныеОбработчики	= СведенияОбОбновлении.ДеревоОбработчиков.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
			ПроверитьОтложенныеОбработчики(НевыполненныеОбработчики, Библиотека, НеобходимоСохранитьНевыполненныеОбработчики);

			// Поиск обработчиков со статусом "Выполняется".
			ПараметрыПоиска.Статус		= "Выполняется";
			ВыполняющиесяОбработчики	= СведенияОбОбновлении.ДеревоОбработчиков.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
			ПроверитьОтложенныеОбработчики(ВыполняющиесяОбработчики, Библиотека, НеобходимоСохранитьНевыполненныеОбработчики);

			Если НеобходимоСохранитьНевыполненныеОбработчики Тогда
				НеобходимоСохранитьНевыполненныеОбработчики = Ложь;
			Иначе
				СтрокаБиблиотека = СведенияОбОбновлении.ДеревоОбработчиков.Строки.Найти(Библиотека.Подсистема, "ИмяБиблиотеки");
				Если СтрокаБиблиотека <> Неопределено Тогда
					СведенияОбОбновлении.ДеревоОбработчиков.Строки.Удалить(СтрокаБиблиотека);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		// Удаление успешно выполненных обработчиков.
		ВыполненныеОбработчики = СведенияОбОбновлении.ДеревоОбработчиков.Строки.НайтиСтроки(Новый Структура("Статус", "Выполнено"), Истина);
		Для Каждого СтарыйОбработчик Из ВыполненныеОбработчики Цикл
			СтрокаВерсия = СтарыйОбработчик.Родитель.Строки;
			СтрокаВерсия.Удалить(СтарыйОбработчик);
		КонецЦикла;

		Возврат СведенияОбОбновлении.ДеревоОбработчиков;
	КонецЕсли;

	ДеревоОбработчиков = Новый ДеревоЗначений;
	ДеревоОбработчиков.Колонки.Добавить("ИмяБиблиотеки");
	ДеревоОбработчиков.Колонки.Добавить("НомерВерсии");
	ДеревоОбработчиков.Колонки.Добавить("ВерсияРегистрации");
	ДеревоОбработчиков.Колонки.Добавить("Идентификатор");
	ДеревоОбработчиков.Колонки.Добавить("ИмяОбработчика");
	ДеревоОбработчиков.Колонки.Добавить("Статус");
	ДеревоОбработчиков.Колонки.Добавить("ЧислоПопыток");
	ДеревоОбработчиков.Колонки.Добавить("СтатистикаВыполнения", Новый ОписаниеТипов("Соответствие"));
	ДеревоОбработчиков.Колонки.Добавить("ИнформацияОбОшибке");
	ДеревоОбработчиков.Колонки.Добавить("Комментарий");
	ДеревоОбработчиков.Колонки.Добавить("Приоритет");
	ДеревоОбработчиков.Колонки.Добавить("ПроцедураПроверки");
	ДеревоОбработчиков.Колонки.Добавить("БлокируемыеОбъекты");
	ДеревоОбработчиков.Колонки.Добавить("ПроцедураЗаполненияДанныхОбновления");
	ДеревоОбработчиков.Колонки.Добавить("ОчередьОтложеннойОбработки");
	ДеревоОбработчиков.Колонки.Добавить("ЗапускатьТолькоВГлавномУзле", Новый ОписаниеТипов("Булево"));
	ДеревоОбработчиков.Колонки.Добавить("ЗапускатьИВПодчиненномУзлеРИБСФильтрами", Новый ОписаниеТипов("Булево"));

	Возврат ДеревоОбработчиков;
КонецФункции

Процедура ПроверитьСвойстваОтложенногоОбработчика(Знач Обработчик, Знач РежимВыполненияОтложенныхОбработчиков, ТекстОшибок)
	Если РежимВыполненияОтложенныхОбработчиков = "Параллельно"
		И Не ЗначениеЗаполнено(Обработчик.ПроцедураЗаполненияДанныхОбновления) Тогда
		ТекстОшибки = СтрШаблон("Не указана процедура заполнения данных
					   |отложенного обработчика обновления
					   |""%1"".",
			Обработчик.Процедура);

		ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);

		ТекстОшибок = ТекстОшибок + ТекстОшибки + Символы.ПС;
	КонецЕсли;

	Если Обработчик.МонопольныйРежим = Истина Тогда
		ТекстОшибки = СтрШаблон("У отложенного обработчика ""%1""
			|не должен быть установлен признак ""МонопольныйРежим"".",
			Обработчик.Процедура);
		ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ТекстОшибок = ТекстОшибок + ТекстОшибки + Символы.ПС;
	КонецЕсли;

	Если РежимВыполненияОтложенныхОбработчиков = "Параллельно" И Обработчик.ЗапускатьТолькоВГлавномУзле И Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами Тогда
		ТекстОшибки = СтрШаблон("У отложенного обработчика ""%1""
			|некорректно заполнены значения свойств:
			| - ""ЗапускатьТолькоВГлавномУзле""
			| - ""ЗапускатьИВПодчиненномУзлеРИБСФильтрами"".
			|
			|Данные свойства не могут одновременно принимать значение ""Истина"".",
			Обработчик.Процедура);
		ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ТекстОшибок = ТекстОшибок + ТекстОшибки + Символы.ПС;
	КонецЕсли;

	Если Обработчик.ОбщиеДанные = Истина Тогда
		ТекстОшибки = СтрШаблон("У отложенного обработчика ""%1""
			|указано недопустимое значение свойства ""ОбщиеДанные"".
			|
			|Данное свойство не может принимать значение ""Истина"" у отложенного обработчика.",
			Обработчик.Процедура);
		ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ТекстОшибок = ТекстОшибок + ТекстОшибки + Символы.ПС;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьОтложенныеОбработчики(ПроверяемыеОбработчики, Библиотека, НеобходимоСохранитьНевыполненныеОбработчики)
	Для Каждого ПроверяемыйОбработчик Из ПроверяемыеОбработчики Цикл
		ОбработчикПереименован = Ложь;
		Если Не ЗначениеЗаполнено(ПроверяемыйОбработчик.Идентификатор) Тогда
			НайденныйОбработчик = Библиотека.Обработчики.Найти(ПроверяемыйОбработчик.ИмяОбработчика, "Процедура");
			Если НайденныйОбработчик <> Неопределено Тогда
				ПроверяемыйОбработчик.Идентификатор = НайденныйОбработчик.Идентификатор;
			КонецЕсли;
		Иначе
			ПроверитьПереименованиеОбработчика(ПроверяемыйОбработчик, Библиотека);
		КонецЕсли;

		СохранитьНевыполненныеОбработчики = НеобходимоСохранитьНевыполненныйОтложенныйОбработчик(Библиотека, ПроверяемыйОбработчик);
		Если СохранитьНевыполненныеОбработчики Тогда
			НеобходимоСохранитьНевыполненныеОбработчики = Истина;
		Иначе
			СтрокаВерсия = ПроверяемыйОбработчик.Родитель.Строки;
			СтрокаВерсия.Удалить(ПроверяемыйОбработчик);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьПереименованиеОбработчика(СтарыйОбработчик, Библиотека)
	НовыйОбработчик = Библиотека.Обработчики.Найти(СтарыйОбработчик.Идентификатор, "Идентификатор");
	Если НовыйОбработчик <> Неопределено И НовыйОбработчик.Процедура <> СтарыйОбработчик.ИмяОбработчика Тогда
		СтарыйОбработчик.ИмяОбработчика = НовыйОбработчик.Процедура;
	КонецЕсли;
КонецПроцедуры

Функция НеобходимоСохранитьНевыполненныйОтложенныйОбработчик(Библиотека, Обработчик)
	Если Обработчик.НомерВерсии = "*" Тогда
		// Обработчик добавляется заново при каждом обновлении, сохранять не требуется.
		Возврат Ложь;
	КонецЕсли;

	НайденныйОбработчик = Библиотека.Обработчики.Найти(Обработчик.ИмяОбработчика, "Процедура");
	Если НайденныйОбработчик <> Неопределено
		И БазоваяПодсистемаКлиентСервер.СравнитьВерсии(НайденныйОбработчик.Версия, Обработчик.НомерВерсии) > 0
		И БазоваяПодсистемаКлиентСервер.СравнитьВерсии(НайденныйОбработчик.Версия, Библиотека.ПредыдущаяВерсия) > 0 Тогда
		// Версия проверяемого обработчика изменилась и она выше текущей версии библиотеки.
		// Обработчик будет добавлен заново, сохранять не требуется.
		Возврат Ложь;
	КонецЕсли;

	Если БазоваяПодсистемаКлиентСервер.СравнитьВерсии(Обработчик.НомерВерсии, Библиотека.ПредыдущаяВерсия) <= 0 Тогда
		// Версия проверяемого обработчика ниже или равна текущей версии библиотеки и он не будет добавлен заново
		// к выполнению. Необходимо его сохранить.
		Если НайденныйОбработчик = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Обработчик, НайденныйОбработчик);

		ПараметрыОбработчика = Обработчик.СтатистикаВыполнения["ПараметрыОбработчика"];

		Обработчик.Статус = "НеВыполнено";
		Обработчик.СтатистикаВыполнения.Очистить();
		Если ПараметрыОбработчика <> Неопределено Тогда
			Обработчик.СтатистикаВыполнения.Вставить("ПараметрыОбработчика", ПараметрыОбработчика);
		КонецЕсли;
		Обработчик.ИнформацияОбОшибке	= "";
		Обработчик.ЧислоПопыток			= 0;

		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Процедура ВыполнитьПроверкуДереваОтложенныхОбработчиков(ДеревоОбработчиков, НачальнаяПроверка = Ложь)
	Если НачальнаяПроверка Тогда
		НовоеДеревоОбработчиков = Новый ДеревоЗначений;
		НовоеДеревоОбработчиков.Колонки.Добавить("ИмяБиблиотеки");
		НовоеДеревоОбработчиков.Колонки.Добавить("НомерВерсии");
		НовоеДеревоОбработчиков.Колонки.Добавить("ВерсияРегистрации");
		НовоеДеревоОбработчиков.Колонки.Добавить("Идентификатор");
		НовоеДеревоОбработчиков.Колонки.Добавить("ИмяОбработчика");
		НовоеДеревоОбработчиков.Колонки.Добавить("Статус");
		НовоеДеревоОбработчиков.Колонки.Добавить("ЧислоПопыток");
		НовоеДеревоОбработчиков.Колонки.Добавить("СтатистикаВыполнения", Новый ОписаниеТипов("Соответствие"));
		НовоеДеревоОбработчиков.Колонки.Добавить("ИнформацияОбОшибке");
		НовоеДеревоОбработчиков.Колонки.Добавить("Комментарий");
		НовоеДеревоОбработчиков.Колонки.Добавить("Приоритет");
		НовоеДеревоОбработчиков.Колонки.Добавить("ПроцедураПроверки");
		НовоеДеревоОбработчиков.Колонки.Добавить("БлокируемыеОбъекты");
		НовоеДеревоОбработчиков.Колонки.Добавить("ПроцедураЗаполненияДанныхОбновления");
		НовоеДеревоОбработчиков.Колонки.Добавить("ОчередьОтложеннойОбработки");
		НовоеДеревоОбработчиков.Колонки.Добавить("ЗапускатьТолькоВГлавномУзле", Новый ОписаниеТипов("Булево"));
		НовоеДеревоОбработчиков.Колонки.Добавить("ЗапускатьИВПодчиненномУзлеРИБСФильтрами", Новый ОписаниеТипов("Булево"));
		Для Каждого Колонка Из НовоеДеревоОбработчиков.Колонки Цикл
			Если ДеревоОбработчиков.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
				ДеревоОбработчиков.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
			КонецЕсли;
		КонецЦикла;

		УдаляемыеБиблиотеки	= Новый Массив;
		ОписанияПодсистем	= БазоваяПодсистемаСерверПовтИсп.ОписанияПодсистем().ПоИменам;
		Для Каждого Библиотека Из ДеревоОбработчиков.Строки Цикл
			БиблиотекаСуществует = (ОписанияПодсистем.Получить(Библиотека.ИмяБиблиотеки) <> Неопределено);
			Если БиблиотекаСуществует Тогда
				Продолжить;
			КонецЕсли;
			УдаляемыеБиблиотеки.Добавить(Библиотека);
		КонецЦикла;

		Для Каждого УдаляемаяБиблиотека Из УдаляемыеБиблиотеки Цикл
			ДеревоОбработчиков.Строки.Удалить(УдаляемаяБиблиотека);
		КонецЦикла;

		Возврат;
	КонецЕсли;

	ВсеОбработчики			= Новый Соответствие;
	УдаляемыеОбработчики	= Новый Массив;
	Для Каждого СтрокаДереваБиблиотека Из ДеревоОбработчиков.Строки Цикл
		Индекс				= 1;
		ПеремещаемаяСтрока	= Неопределено;
		Смещение			= 0;
		Для Каждого СтрокаДереваВерсия Из СтрокаДереваБиблиотека.Строки Цикл
			Если СтрокаДереваВерсия.НомерВерсии = "*" И Индекс <> 1 Тогда
				ПеремещаемаяСтрока	= СтрокаДереваВерсия;
				Смещение			= Индекс - 1;
			КонецЕсли;

			Если СтрокаДереваВерсия.Строки.Количество() = 0 Тогда
				СтрокаДереваВерсия.Статус = "Завершено";
			Иначе
				СтрокаДереваВерсия.Статус = "";
			КонецЕсли;

			// Проверка на многократное добавление одного обработчика обновления.
			Для Каждого СтрокаДереваОбработчик Из СтрокаДереваВерсия.Строки Цикл
				Если ВсеОбработчики[СтрокаДереваОбработчик.ИмяОбработчика] = Неопределено Тогда
					ВсеОбработчики.Вставить(СтрокаДереваОбработчик.ИмяОбработчика, СтрокаДереваОбработчик.ИмяОбработчика);
				Иначе
					УдаляемыеОбработчики.Добавить(СтрокаДереваОбработчик);
				КонецЕсли;
			КонецЦикла;

			Для Каждого Удаляемый Из УдаляемыеОбработчики Цикл
				СтрокаДереваВерсия.Строки.Удалить(Удаляемый);
			КонецЦикла;
			УдаляемыеОбработчики.Очистить();

			Индекс = Индекс + 1;
		КонецЦикла;

		Если ПеремещаемаяСтрока <> Неопределено Тогда
			СтрокаДереваБиблиотека.Строки.Сдвинуть(ПеремещаемаяСтрока, Смещение * (-1));
			ПеремещаемаяСтрока = Неопределено;
		КонецЕсли;

	КонецЦикла;
КонецПроцедуры

Процедура СоставитьПланОтложенногоОбновления(СведенияОбОбновленииИБ)
	ЭтоПодчиненныйУзелРИБ			= БазоваяПодсистемаСервер.ЭтоПодчиненныйУзелРИБ();
	ЭтоПодчиненныйУзелРИБСФильтром	= БазоваяПодсистемаСервер.ЭтоПодчиненныйУзелРИБСФильтром();

	ДеревоОбработчиков	= СведенияОбОбновленииИБ.ДеревоОбработчиков;
	ОписанияПодсистем	= БазоваяПодсистемаСерверПовтИсп.ОписанияПодсистем();

	// Инициализация параметров.
	ПланОбновления						= Новый Массив;
	ЕстьОбработчикиТолькоГлавногоУзла	= Ложь;

	Для Каждого Подсистема Из ОписанияПодсистем.Порядок Цикл
		ИмяКоллекции		= "";
		ОписаниеПодсистемы	= ОписанияПодсистем.ПоИменам[Подсистема];
		РежимВыполнения		= ОписаниеПодсистемы.РежимВыполненияОтложенныхОбработчиков;
		ПараллельноСВерсии	= ОписаниеПодсистемы.ПараллельноеОтложенноеОбновлениеСВерсии;

		ДеревоОбработчиковБиблиотека = ДеревоОбработчиков.Строки.Найти(Подсистема, "ИмяБиблиотеки");
		Если ДеревоОбработчиковБиблиотека = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ТаблицаОбработчиков = Новый ТаблицаЗначений;
		ТаблицаОбработчиков.Колонки.Добавить("Обработчик", Новый ОписаниеТипов("Строка"));
		ТаблицаОбработчиков.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ТаблицаОбработчиков.Колонки.Добавить("Очередь", Новый ОписаниеТипов("Число"));

		Итерация = 1;
		СоздаватьНовуюИтерацию = Истина;
		ПропуститьПроверку     = Ложь;
		СведенияОБлокируемыхОбъектах = НовыеСведенияОБлокируемыхОбъектах();
		Для Каждого ДеревоОбработчиковВерсия Из ДеревоОбработчиковБиблиотека.Строки Цикл
			ЗаполнитьБлокируемыеОбъекты(ДеревоОбработчиковВерсия, СведенияОбОбновленииИБ, СведенияОБлокируемыхОбъектах);

			Если СоздаватьНовуюИтерацию Тогда
				ИтерацияОбновления = Новый Структура;
				ИтерацияОбновления.Вставить("Режим", "");
				ИтерацияОбновления.Вставить("ЗависитОтПредыдущего", Ложь);
				ИтерацияОбновления.Вставить("Обработчики");
			КонецЕсли;

			Если РежимВыполнения = "Последовательно" Тогда
				ИтерацияОбновления.Режим				= РежимВыполнения;
				ИтерацияОбновления.ЗависитОтПредыдущего = ?(Итерация = 1, Ложь, Истина);
				ИтерацияОбновления.Обработчики			= Новый Массив;
			ИначеЕсли РежимВыполнения = "Параллельно" И Не ЗначениеЗаполнено(ПараллельноСВерсии) И Итерация = 1 Тогда
				ИтерацияОбновления.Режим				= РежимВыполнения;
				ИтерацияОбновления.Обработчики			= ТаблицаОбработчиков.Скопировать();
				СоздаватьНовуюИтерацию					= Ложь;
			ИначеЕсли РежимВыполнения = "Параллельно" И ЗначениеЗаполнено(ПараллельноСВерсии) И Не ПропуститьПроверку Тогда
				НомерВерсии = ДеревоОбработчиковВерсия.НомерВерсии;
				Если НомерВерсии = "*" Тогда
					Результат = -1;
				Иначе
					Результат = БазоваяПодсистемаКлиентСервер.СравнитьВерсии(НомерВерсии, ПараллельноСВерсии);
				КонецЕсли;

				Если Результат < 0 Тогда
					ИтерацияОбновления.Режим				= "Последовательно";
					ИтерацияОбновления.ЗависитОтПредыдущего	= (Итерация <> 1);
					ИтерацияОбновления.Обработчики			= Новый Массив;
				Иначе
					ИтерацияОбновления.Режим				= РежимВыполнения;
					ИтерацияОбновления.ЗависитОтПредыдущего	= (Итерация <> 1);
					ИтерацияОбновления.Обработчики			= ТаблицаОбработчиков.Скопировать();
					ПропуститьПроверку						= Истина;
					СоздаватьНовуюИтерацию					= Ложь;
				КонецЕсли;
			КонецЕсли;

			Для Каждого Обработчик Из ДеревоОбработчиковВерсия.Строки Цикл
				Если ИтерацияОбновления.Режим = "Параллельно" И Не ЭтоПодчиненныйУзелРИБ
					И Обработчик.ЗапускатьТолькоВГлавномУзле = Истина Тогда
					ЕстьОбработчикиТолькоГлавногоУзла = Истина;
				КонецЕсли;

				Если ИтерацияОбновления.Режим = "Параллельно" И ЭтоПодчиненныйУзелРИБСФильтром
					И Не Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами Тогда
					ЕстьОбработчикиТолькоГлавногоУзла = Истина;

					Продолжить;
				КонецЕсли;

				Если ИтерацияОбновления.Режим = "Параллельно" Тогда
					СтрокаОбработчик				= ИтерацияОбновления.Обработчики.Добавить();
					СтрокаОбработчик.Обработчик		= Обработчик.ИмяОбработчика;
					СтрокаОбработчик.Идентификатор	= Обработчик.Идентификатор;
					СтрокаОбработчик.Очередь		= Обработчик.ОчередьОтложеннойОбработки;
				Иначе
					ОписаниеОбработчика				= Новый Структура;
					ОписаниеОбработчика.Вставить("ИмяОбработчика", Обработчик.ИмяОбработчика);
					ОписаниеОбработчика.Вставить("Идентификатор", Обработчик.Идентификатор);
					ОписаниеОбработчика.Вставить("Итерация", 0);

					ИтерацияОбновления.Обработчики.Добавить(ОписаниеОбработчика);
				КонецЕсли;
			КонецЦикла;

			// В параллельном режиме в РИБ с фильтрами в подчиненном узле выполняются только обработчики
			// с признаком ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина.
			Если ЭтоПодчиненныйУзелРИБСФильтром И ИтерацияОбновления.Режим = "Параллельно" Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ЗапускатьИВПодчиненномУзлеРИБСФильтрами", Ложь);
				ОбработчикиТолькоГлавногоУзла = ДеревоОбработчиковВерсия.Строки.НайтиСтроки(ПараметрыОтбора);
				Для Каждого ОбработчикГлавногоУзла Из ОбработчикиТолькоГлавногоУзла Цикл
					ДеревоОбработчиковВерсия.Строки.Удалить(ОбработчикГлавногоУзла);
				КонецЦикла;
			КонецЕсли;

			Если СоздаватьНовуюИтерацию Тогда
				ПланОбновления.Добавить(ИтерацияОбновления);
			КонецЕсли;

			Итерация = Итерация + 1 ;
		КонецЦикла;

		Если Не СоздаватьНовуюИтерацию Тогда
			ПланОбновления.Добавить(ИтерацияОбновления);
		КонецЕсли;
	КонецЦикла;

	ЗаписатьСведенияОБлокируемыхОбъектах(СведенияОБлокируемыхОбъектах);

	Константы.ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно.Установить(Не ЕстьОбработчикиТолькоГлавногоУзла);

	ОписаниеОбработчика = Новый Структура;
	ОписаниеОбработчика.Вставить("ИмяОбработчика", "");
	ОписаниеОбработчика.Вставить("Итерация", 0);

	// Конвертация формата хранения обработчиков.
	Для Каждого ЦиклОбновления Из ПланОбновления Цикл
		Если ТипЗнч(ЦиклОбновления.Обработчики) = Тип("Массив") Тогда
			Продолжить;
		КонецЕсли;
		ТаблицаОбработчиков = ЦиклОбновления.Обработчики.Скопировать();
		ТаблицаОбработчиков.Сортировать("Очередь Возр");

		ЦиклОбновления.Обработчики = Новый Массив;
		Для Каждого Элемент Из ТаблицаОбработчиков Цикл
			ОписаниеОбработчика = Новый Структура;
			ОписаниеОбработчика.Вставить("ИмяОбработчика", Элемент.Обработчик);
			ОписаниеОбработчика.Вставить("Идентификатор", Элемент.Идентификатор);
			ОписаниеОбработчика.Вставить("Итерация", 0);

			ЦиклОбновления.Обработчики.Добавить(ОписаниеОбработчика);
		КонецЦикла;

		ЦиклОбновления.Вставить("ОчередьОбработчиков", ТаблицаОбработчиков);
	КонецЦикла;

	СведенияОбОбновленииИБ.ПланОтложенногоОбновления = ПланОбновления;
КонецПроцедуры

Функция КоличествоОбработчиковНаТекущуюВерсию(ИтерацииОбновления, РежимВыполненияОтложенногоОбновления)
	КоличествоОбработчиков = 0;

	// Монопольные обработчики обновления.
	Для Каждого ИтерацияОбновления Из ИтерацииОбновления Цикл
		ОбработчикиПоВерсиям = ОбработчикиОбновленияВИнтервале(ИтерацияОбновления.Обработчики, ИтерацияОбновления.ПредыдущаяВерсия, ИтерацияОбновления.Версия);
		Для Каждого СтрокаОбработчикиВерсия Из ОбработчикиПоВерсиям.Строки Цикл
			КоличествоОбработчиков = КоличествоОбработчиков + СтрокаОбработчикиВерсия.Строки.Количество();
		КонецЦикла;
	КонецЦикла;

	СведенияОбОбновлении = СведенияОбОбновленииИнформационнойБазы();
	// Отложенные обработчики обновления.
	Если РежимВыполненияОтложенногоОбновления = "Монопольно" Тогда
		ПланОтложенногоОбновления = СведенияОбОбновлении.ПланОтложенногоОбновления;
		Для Каждого ЦиклОбновления Из ПланОтложенногоОбновления Цикл
			КоличествоОбработчиков = КоличествоОбработчиков + ЦиклОбновления.Обработчики.Количество();
		КонецЦикла;
	КонецЕсли;

	// Процедуры регистрации параллельных отложенных обработчиков обновления.
	ОписанияБиблиотек = БазоваяПодсистемаСерверПовтИсп.ОписанияПодсистем().ПоИменам;
	Для Каждого СтрокаБиблиотека Из СведенияОбОбновлении.ДеревоОбработчиков.Строки Цикл
		Если ОписанияБиблиотек[СтрокаБиблиотека.ИмяБиблиотеки].РежимВыполненияОтложенныхОбработчиков <> "Параллельно" Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаВерсия Из СтрокаБиблиотека.Строки Цикл
			ПараллельноСВерсии = ОписанияБиблиотек[СтрокаБиблиотека.ИмяБиблиотеки].ПараллельноеОтложенноеОбновлениеСВерсии;
			Если СтрокаВерсия.НомерВерсии = "*"
				Или (ЗначениеЗаполнено(ПараллельноСВерсии) И БазоваяПодсистемаКлиентСервер.СравнитьВерсии(СтрокаВерсия.НомерВерсии, ПараллельноСВерсии) < 0) Тогда
				Продолжить;
			КонецЕсли;

			КоличествоОбработчиков = КоличествоОбработчиков + СтрокаВерсия.Строки.Количество();
		КонецЦикла;
	КонецЦикла;

	Возврат Новый Структура("ВсегоОбработчиков, ВыполненоОбработчиков", КоличествоОбработчиков, 0);
КонецФункции

Процедура ЗаполнитьДанныеДляПараллельногоОтложенногоОбновления(СведенияОбОбновлении, Параметры)
	Если Параметры.ПриЗапускеКлиентскогоПриложения И Параметры.РежимВыполненияОтложенногоОбновления = "Отложенно" Тогда
		КлиентСервер  = Не БазоваяПодсистемаСервер.ИнформационнаяБазаФайловая();

		Если КлиентСервер Тогда
			// Регистрация данных выполняется позже.
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Не (БазоваяПодсистемаСерверПовтИсп.ИспользуетсяРИБ("СФильтром") И БазоваяПодсистемаСервер.ЭтоПодчиненныйУзелРИБ()) Тогда
		Запрос			= Новый Запрос;
		Запрос.Текст	= "ВЫБРАТЬ
		            	  |	ОбновлениеИнформационнойБазы.Ссылка КАК Узел
		            	  |ИЗ
		            	  |	ПланОбмена.ОбновлениеИнформационнойБазы КАК ОбновлениеИнформационнойБазы
		            	  |ГДЕ
		            	  |	НЕ ОбновлениеИнформационнойБазы.ЭтотУзел";

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.Узел);
		КонецЦикла;
	КонецЕсли;

	// Зарезервировано для новых подсистем

	ОбрабатываемыеДанные		= Новый Соответствие;
	ОписанияБиблиотек			= БазоваяПодсистемаСерверПовтИсп.ОписанияПодсистем().ПоИменам;
	ПараметрыИнициализированы	= Ложь;

	Для Каждого СтрокаБиблиотека Из СведенияОбОбновлении.ДеревоОбработчиков.Строки Цикл
		Если ОписанияБиблиотек[СтрокаБиблиотека.ИмяБиблиотеки].РежимВыполненияОтложенныхОбработчиков <> "Параллельно" Тогда
			Продолжить;
		КонецЕсли;

		ПараллельноСВерсии = ОписанияБиблиотек[СтрокаБиблиотека.ИмяБиблиотеки].ПараллельноеОтложенноеОбновлениеСВерсии;

		Если Не ПараметрыИнициализированы Тогда
			ПараметрыОбработчикаСтруктура	= ОсновныеПараметрыОтметкиКОбработке();
			ПараметрыИнициализированы		= Истина;

			// Зарезервировано для новых подсистем;
		КонецЕсли;

		Для Каждого СтрокаВерсия Из СтрокаБиблиотека.Строки Цикл
			Если СтрокаВерсия.НомерВерсии = "*" Тогда
				Продолжить;
			КонецЕсли;

			Если ЗначениеЗаполнено(ПараллельноСВерсии)
				И БазоваяПодсистемаКлиентСервер.СравнитьВерсии(СтрокаВерсия.НомерВерсии, ПараллельноСВерсии) < 0 Тогда
				Продолжить;
			КонецЕсли;

			Для Каждого Обработчик Из СтрокаВерсия.Строки Цикл
				ПараметрыОбработчикаСтруктура.Очередь = Обработчик.ОчередьОтложеннойОбработки;
				ПараметрыОбработчикаСтруктура.Вставить("ДанныеОбработчика", Новый Соответствие);
				ПараметрыОбработчика = Новый Массив;
				ПараметрыОбработчика.Добавить(ПараметрыОбработчикаСтруктура);
				Попытка
					Сообщение = "Выполняется процедура заполнения данных
						                   |""%1""
						                   |отложенного обработчика обновления
						                   |""%2"".";
					Сообщение = СтрШаблон(Сообщение,
						Обработчик.ПроцедураЗаполненияДанныхОбновления,
						Обработчик.ИмяОбработчика);
					ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Информация,,, Сообщение);

					БазоваяПодсистемаСервер.ВыполнитьМетодКонфигурации(Обработчик.ПроцедураЗаполненияДанныхОбновления, ПараметрыОбработчика);

					// Запись прогресса обновления.
					Если Параметры.ВФоне Тогда
						ХодВыполненияОбработчиков						= Параметры.ХодВыполненияОбработчиков;
						ХодВыполненияОбработчиков.ВыполненоОбработчиков	= ХодВыполненияОбработчиков.ВыполненоОбработчиков + 1;
						Прогресс										= 10 + ХодВыполненияОбработчиков.ВыполненоОбработчиков / ХодВыполненияОбработчиков.ВсегоОбработчиков * 90;
						БазоваяПодсистемаСервер.СообщитьПрогресс(Прогресс);
					КонецЕсли;
				Исключение
					ОтметитьРегистрациюОтложенныхОбработчиковОбновления(СтрокаБиблиотека.ИмяБиблиотеки, Ложь);
					ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, СтрШаблон("При вызове процедуры заполнения данных
								   |""%1""
								   |отложенного обработчика обновления
								   |""%2""
								   |произошла ошибка:
								   |""%3"".",
						Обработчик.ПроцедураЗаполненияДанныхОбновления,
						Обработчик.ИмяОбработчика,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
					ВызватьИсключение;
				КонецПопытки;

				ОбрабатываемыеДанные.Вставить(Обработчик.ИмяОбработчика, ПараметрыОбработчикаСтруктура.ДанныеОбработчика);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	СведенияОбОбновлении.ОбрабатываемыеДанные = ОбрабатываемыеДанные;
	ОтметитьРегистрациюОтложенныхОбработчиковОбновления();

	// Зарезервировано для новых подсистем;
КонецПроцедуры

Процедура ЗаполнитьБлокируемыеОбъекты(СтрокаВерсия, СведенияОбОбновлении, СведенияОБлокируемыхОбъектах)
	Для Каждого Обработчик Из СтрокаВерсия.Строки Цикл
		ПроцедураПроверки  = Обработчик.ПроцедураПроверки;
		БлокируемыеОбъекты = Обработчик.БлокируемыеОбъекты;
		Если ЗначениеЗаполнено(ПроцедураПроверки) И ЗначениеЗаполнено(БлокируемыеОбъекты) Тогда
			СвойстваОбработчика = Новый Структура;
			СвойстваОбработчика.Вставить("Выполнен", Ложь);
			СвойстваОбработчика.Вставить("ПроцедураПроверки", ПроцедураПроверки);

			СведенияОБлокируемыхОбъектах.Обработчики.Вставить(Обработчик.ИмяОбработчика, СвойстваОбработчика);
			МассивБлокируемыхОбъектов = СтрРазделить(БлокируемыеОбъекты, ",");
			Для Каждого БлокируемыйОбъект Из МассивБлокируемыхОбъектов Цикл
				БлокируемыйОбъект	= СтрЗаменить(СокрЛП(БлокируемыйОбъект), ".", "");
				ИнформацияОбОбъекте = СведенияОБлокируемыхОбъектах.БлокируемыеОбъекты[БлокируемыйОбъект];
				Если ИнформацияОбОбъекте = Неопределено Тогда
					МассивОбработчиков = Новый Массив;
					МассивОбработчиков.Добавить(Обработчик.ИмяОбработчика);
					СведенияОБлокируемыхОбъектах.БлокируемыеОбъекты.Вставить(БлокируемыйОбъект, МассивОбработчиков);
				Иначе
					СведенияОБлокируемыхОбъектах.БлокируемыеОбъекты[БлокируемыйОбъект].Добавить(Обработчик.ИмяОбработчика);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ЗначениеЗаполнено(БлокируемыеОбъекты) И Не ЗначениеЗаполнено(ПроцедураПроверки) Тогда
			ТекстИсключения = "У отложенного обработчика обновления ""%1""
				|заполнен список блокируемых объектов, но не задано свойство ""ПроцедураПроверки"".";

			ВызватьИсключение СтрШаблон(ТекстИсключения, Обработчик.ИмяОбработчика);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Записывает информацию о результате регистрации отложенных обработчиков на плане обмена.
//
Процедура ОтметитьРегистрациюОтложенныхОбработчиковОбновления(ИмяПодсистемы = Неопределено, Значение = Истина) Экспорт
	НаборЗаписей = РегистрыСведений.ВерсииПодсистем.СоздатьНаборЗаписей();
	Если ИмяПодсистемы <> Неопределено Тогда
		НаборЗаписей.Отбор.ИмяПодсистемы.Установить(ИмяПодсистемы);
	КонецЕсли;
	НаборЗаписей.Прочитать();

	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
		ЗаписьРегистра.ВыполненаРегистрацияОтложенныхОбработчиков = Значение;
	КонецЦикла;
	НаборЗаписей.Записать();
КонецПроцедуры

Функция РежимВыполненияОтложенногоОбновления(ПараметрыОбновления)
	ИнформационнаяБазаФайловая             = БазоваяПодсистемаСервер.ИнформационнаяБазаФайловая();
	ВыполнятьОтложенныеОбработчики         = ПараметрыОбновления.ВыполнятьОтложенныеОбработчики;
	ПараметрЗапускаКлиента                 = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");

	Если ИнформационнаяБазаФайловая Или СтрНайти(НРег(ПараметрЗапускаКлиента), НРег("ВыполнитьОтложенноеОбновлениеСейчас")) > 0 Или ВыполнятьОтложенныеОбработчики Тогда
		Возврат "Монопольно";
	Иначе
		Возврат "Отложенно";
	КонецЕсли;
КонецФункции

Функция ИтерацииОбновления()
	ИмяОсновнойКонфигурации					= Метаданные.Имя;
	ИтерацияОбновлениеОсновнойПодсистемы	= Неопределено;

	ИтерацииОбновления = Новый Массив;
	ОписанияПодсистем  = БазоваяПодсистемаСерверПовтИсп.ОписанияПодсистем();
	Для каждого ИмяПодсистемы Из ОписанияПодсистем.Порядок Цикл
		ОписаниеПодсистемы = ОписанияПодсистем.ПоИменам.Получить(ИмяПодсистемы);
		Если НЕ ЗначениеЗаполнено(ОписаниеПодсистемы.ОсновнойСерверныйМодуль) Тогда
			Продолжить;
		КонецЕсли;
		Модуль = БазоваяПодсистемаСервер.ОбщийМодуль(ОписаниеПодсистемы.ОсновнойСерверныйМодуль);

		ИтерацияОбновления = ИтерацияОбновления(ОписаниеПодсистемы.Имя, ОписаниеПодсистемы.Версия, НоваяТаблицаОбработчиковОбновления(), ОписаниеПодсистемы.Имя = ИмяОсновнойКонфигурации);
		ИтерацияОбновления.ИмяОсновногоСерверногоМодуля	= ОписаниеПодсистемы.ОсновнойСерверныйМодуль;
		ИтерацияОбновления.ОсновнойСерверныйМодуль		= Модуль;
		ИтерацияОбновления.ПредыдущаяВерсия				= ВерсияИБ(ОписаниеПодсистемы.Имя);
		ИтерацииОбновления.Добавить(ИтерацияОбновления);

		Модуль.ПриДобавленииОбработчиковОбновления(ИтерацияОбновления.Обработчики);

		Если ОписаниеПодсистемы.Имя = ИмяОсновнойКонфигурации Тогда
			ИтерацияОбновлениеОсновнойПодсистемы = ИтерацияОбновления;
		КонецЕсли;

		ПроверитьСвойстваОбработчиков(ИтерацияОбновления);
	КонецЦикла;

	Возврат ИтерацииОбновления;
КонецФункции

Функция ИтерацияОбновления(ИмяКонфигурацииИлиБиблиотеки, Версия, Обработчики, ЭтоОсновнаяКонфигурация = Неопределено) Экспорт
	ИтерацияОбновления = Новый Структура;
	ИтерацияОбновления.Вставить("Подсистема",					ИмяКонфигурацииИлиБиблиотеки);
	ИтерацияОбновления.Вставить("Версия",      					Версия);
	ИтерацияОбновления.Вставить("ЭтоОсновнаяКонфигурация",		?(ЭтоОсновнаяКонфигурация <> Неопределено, ЭтоОсновнаяКонфигурация, ИмяКонфигурацииИлиБиблиотеки = Метаданные.Имя));
	ИтерацияОбновления.Вставить("Обработчики",					Обработчики);
	ИтерацияОбновления.Вставить("ВыполненныеОбработчики",		Неопределено);
	ИтерацияОбновления.Вставить("ИмяОсновногоСерверногоМодуля",	"");
	ИтерацияОбновления.Вставить("ОсновнойСерверныйМодуль",		"");
	ИтерацияОбновления.Вставить("ПредыдущаяВерсия",				"");

	Возврат ИтерацияОбновления;
КонецФункции

Процедура ПроверитьСвойстваОбработчиков(ИтерацияОбновления)
	Для каждого Обработчик Из ИтерацияОбновления.Обработчики Цикл
		ОписаниеОшибки = "";

		Если ПустаяСтрока(Обработчик.Версия) Тогда
			Если Обработчик.НачальноеЗаполнение <> Истина Тогда
				ОписаниеОшибки = "У обработчика не заполнено свойство Версия или свойство НачальноеЗаполнение.";
			КонецЕсли;
		ИначеЕсли Обработчик.Версия <> "*" Тогда
			Попытка
				НулеваяВерсия = БазоваяПодсистемаКлиентСервер.СравнитьВерсии(Обработчик.Версия, "0.0.0.0") = 0;
			Исключение
				НулеваяВерсия = Ложь;
				ОписаниеОшибки = СтрШаблон("У обработчика неправильно заполнено свойство Версия: ""%1"".
					           |Правильный формат, например: ""2.1.3.70"".",
					Обработчик.Версия);
			КонецПопытки;

			Если НулеваяВерсия Тогда
				ОписаниеОшибки = СтрШаблон("У обработчика неправильно заполнено свойство Версия: ""%1"".
					           |Версия не может быть нулевой.",
					Обработчик.Версия);
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ОписаниеОшибки)
			   И Обработчик.ВыполнятьВГруппеОбязательных <> Истина
			   И Обработчик.Приоритет <> 0 Тогда

				ОписаниеОшибки = "У обработчика неправильно заполнено свойство Приоритет или
				                            |свойство ВыполнятьВГруппеОбязательных.";
			КонецЕсли;
		КонецЕсли;

		Если Обработчик.РежимВыполнения <> ""
			И Обработчик.РежимВыполнения <> "Монопольно"
			И Обработчик.РежимВыполнения <> "Оперативно"
			И Обработчик.РежимВыполнения <> "Отложенно" Тогда
			ОписаниеОшибки = СтрШаблон("У обработчика ""%1"" неправильно заполнено свойство РежимВыполнения.
				           |Допустимое значение: ""Монопольно"", ""Отложенно"", ""Оперативно"".",
				Обработчик.Процедура);
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОписаниеОшибки)
		   И Обработчик.Опциональный = Истина
		   И Обработчик.НачальноеЗаполнение = Истина Тогда

			ОписаниеОшибки = "У обработчика не правильно заполнено свойство Опциональный или
			                            |свойство НачальноеЗаполнение.";
		КонецЕсли;

		Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			Продолжить;
		КонецЕсли;

		Если ИтерацияОбновления.ЭтоОсновнаяКонфигурация Тогда
			ЗаголовокОшибки = "Ошибка в свойстве обработчика обновления конфигурации";
		Иначе
			ЗаголовокОшибки = СтрШаблон("Ошибка в свойстве обработчика обновления библиотеки %1 версии %2",
				ИтерацияОбновления.Подсистема,
				ИтерацияОбновления.Версия);
		КонецЕсли;

		ОписаниеОшибки = СтрШаблон(
			ЗаголовокОшибки + Символы.ПС
			+ НСтр("ru = '(%1).'") + Символы.ПС
			+ Символы.ПС
			+ ОписаниеОшибки,
			Обработчик.Процедура);

		ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);

		ВызватьИсключение ОписаниеОшибки;
	КонецЦикла;
КонецПроцедуры

Функция ВыполнитьИтерациюОбновления(Знач ИтерацияОбновления, Знач Параметры) Экспорт
	ИдентификаторБиблиотеки = ИтерацияОбновления.Подсистема;
	ВерсияМетаданныхИБ      = ИтерацияОбновления.Версия;
	ОбработчикиОбновления   = ИтерацияОбновления.Обработчики;

	ТекущаяВерсияИБ			= ИтерацияОбновления.ПредыдущаяВерсия;

	НоваяВерсияИБ			= ТекущаяВерсияИБ;
	ВерсияМетаданных		= ВерсияМетаданныхИБ;
	Если ПустаяСтрока(ВерсияМетаданных) Тогда
		ВерсияМетаданных = "0.0.0.0";
	КонецЕсли;

	ВыполняемыеОбработчики = ОбработчикиОбновленияВИнтервале(ОбработчикиОбновления, ТекущаяВерсияИБ, ВерсияМетаданных);

	ОтключитьОбработчикиОбновления(ИдентификаторБиблиотеки, ВыполняемыеОбработчики, ВерсияМетаданных, Параметры.ХодВыполненияОбработчиков);

	ОбязательныеРазделенныеОбработчики	= НоваяТаблицаОбработчиковОбновления();
	ИсходнаяВерсияИБ					= ТекущаяВерсияИБ;
	ЗаписыватьВЖурнал					= Константы.ДетализироватьОбновлениеИБВЖурналеРегистрации.Получить();

	Для Каждого Версия Из ВыполняемыеОбработчики.Строки Цикл
		Если Версия.Версия = "*" Тогда
			Сообщение = "Выполняются обязательные процедуры обновления информационной базы.";
		Иначе
			НоваяВерсияИБ = Версия.Версия;
			Если ТекущаяВерсияИБ = "0.0.0.0" Тогда
				Сообщение = "Выполняется начальное заполнение данных.";
			ИначеЕсли ИтерацияОбновления.ЭтоОсновнаяКонфигурация Тогда
				Сообщение = СтрШаблон("Выполняется обновление информационной базы с версии %1 на версию %2.", ТекущаяВерсияИБ, НоваяВерсияИБ);
			Иначе
				Сообщение = СтрШаблон("Выполняется обновление данных библиотеки %3 с версии %1 на версию %2.", ТекущаяВерсияИБ, НоваяВерсияИБ, ИдентификаторБиблиотеки);
			КонецЕсли;
		КонецЕсли;
		ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Информация,,, Сообщение);

		Для Каждого Обработчик Из Версия.Строки Цикл
			ПараметрыОбработчика = Неопределено;
			Если Обработчик.ВерсияРегистрации = "*" Тогда
				Если Обработчик.УправлениеОбработчиками Тогда
					ПараметрыОбработчика = Новый Структура;
					ПараметрыОбработчика.Вставить("РазделенныеОбработчики", ОбязательныеРазделенныеОбработчики);
				КонецЕсли;

				Если Обработчик.МонопольныйРежим = Истина Или Обработчик.РежимВыполнения = "Монопольно" Тогда
					Если Параметры.ОперативноеОбновление Тогда
						// Проверки выполняются в ВозможноОперативноеОбновление, а само обновление для таких
						// обработчиков выполняется только при неоперативном обновлении.
						Продолжить;
					КонецЕсли;

					Если ПараметрыОбработчика = Неопределено Тогда
						ПараметрыОбработчика = Новый Структура;
					КонецЕсли;
					ПараметрыОбработчика.Вставить("МонопольныйРежим", Истина);
				КонецЕсли;
			КонецЕсли;

			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ЗаписыватьВЖурнал", ЗаписыватьВЖурнал);
			ДополнительныеПараметры.Вставить("ИдентификаторБиблиотеки", ИдентификаторБиблиотеки);
			ДополнительныеПараметры.Вставить("ХодВыполненияОбработчиков", Параметры.ХодВыполненияОбработчиков);
			ДополнительныеПараметры.Вставить("ВФоне", Параметры.ВФоне);

			ВыполнитьОбработчикОбновления(Обработчик, ПараметрыОбработчика, ДополнительныеПараметры);
		КонецЦикла;

		Если Версия.Версия = "*" Тогда
			Сообщение = "Выполнены обязательные процедуры обновления информационной базы.";
		Иначе
			Если ИтерацияОбновления.ЭтоОсновнаяКонфигурация Тогда
				Сообщение = СтрШаблон("Выполнено обновление информационной базы с версии %1 на версию %2.", ТекущаяВерсияИБ, НоваяВерсияИБ);
			Иначе
				Сообщение = СтрШаблон("Выполнено обновление данных библиотеки %3 с версии %1 на версию %2.", ТекущаяВерсияИБ, НоваяВерсияИБ, ИдентификаторБиблиотеки);
			КонецЕсли;
		КонецЕсли;
		ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Информация,,, Сообщение);

		Если Версия.Версия <> "*" Тогда
			// Установка номера версии информационной базы.
			УстановитьВерсиюИБ(ИдентификаторБиблиотеки, НоваяВерсияИБ, ИтерацияОбновления.ЭтоОсновнаяКонфигурация);
			ТекущаяВерсияИБ = НоваяВерсияИБ;
		КонецЕсли;
	КонецЦикла;

	// Установка номера версии информационной базы.
	Если ВерсияИБ(ИдентификаторБиблиотеки) <> ВерсияМетаданныхИБ Тогда
		УстановитьВерсиюИБ(ИдентификаторБиблиотеки, ВерсияМетаданныхИБ, ИтерацияОбновления.ЭтоОсновнаяКонфигурация);
	КонецЕсли;

	Возврат ВыполняемыеОбработчики;
КонецФункции

Процедура ВыполнитьОбработчикОбновления(Обработчик, Параметры, ДополнительныеПараметры)
	ЗаписатьИнформациюОХодеОбновления(Обработчик, ДополнительныеПараметры.ХодВыполненияОбработчиков, ДополнительныеПараметры.ВФоне);
	ОписаниеОбработчика = ПодготовитьДетальнуюИнформациюОХодеОбновления(Обработчик, Параметры, ДополнительныеПараметры.ИдентификаторБиблиотеки);

	// Зарезервировано для новых подсистем

	Если Параметры <> Неопределено Тогда
		ПараметрыОбработчика = Новый Массив;
		ПараметрыОбработчика.Добавить(Параметры);
	Иначе
		ПараметрыОбработчика = Неопределено;
	КонецЕсли;

	ТранзакцияАктивнаНаНачалоВыполнения = ТранзакцияАктивна();

	Попытка
		БазоваяПодсистемаСервер.ВыполнитьМетодКонфигурации(Обработчик.Процедура, ПараметрыОбработчика);
	Исключение
		Если ДополнительныеПараметры.ЗаписыватьВЖурнал Тогда
			ЗаписатьДетальнуюИнформациюОХодеОбновления(ОписаниеОбработчика);
		КонецЕсли;

		ИмяОбработчика = Обработчик.Процедура + "(" + ?(ПараметрыОбработчика = Неопределено, "", "Параметры") + ")";

		ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, СтрШаблон("При вызове обработчика обновления:
					   |""%1""
					   |произошла ошибка:
					   |""%2"".",
			ИмяОбработчика,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));

		ВызватьИсключение;
	КонецПопытки;

	ПроверитьВложеннуюТранзакцию(ТранзакцияАктивнаНаНачалоВыполнения, Обработчик.Процедура);

	Если ДополнительныеПараметры.ЗаписыватьВЖурнал Тогда
		ЗаписатьДетальнуюИнформациюОХодеОбновления(ОписаниеОбработчика);
	КонецЕсли;

	// Зарезервировано для новых подсистем
КонецПроцедуры

// Отключает обработчики обновления, заполненные в процедуре.
// ОбновлениеИнформационнойБазыПереопределяемый.ПриОтключенииОбработчиковОбновления.
//
// Параметры:
//  ИдентификаторБиблиотеки - Строка - имя конфигурации или идентификатор библиотеки.
//  ВыполняемыеОбработчики  - ДеревоЗначений - обработчики обновления ИБ.
//  ВерсияМетаданныхИБ      - Строка - версия метаданных. Отключаются только те обработчики
//                                     у которых версия совпадает с версией метаданных.
//
Процедура ОтключитьОбработчикиОбновления(ИдентификаторБиблиотеки, ВыполняемыеОбработчики, ВерсияМетаданных, ХодВыполненияОбработчиков)
	ОтключаемыеОбработчики = Новый ТаблицаЗначений;
	ОтключаемыеОбработчики.Колонки.Добавить("ИдентификаторБиблиотеки");
	ОтключаемыеОбработчики.Колонки.Добавить("Процедура");
	ОтключаемыеОбработчики.Колонки.Добавить("Версия");

	// Поиск строки дерева, содержащей обработчики обновления с версией "*".
	ОбработчикиБиблиотеки = ВыполняемыеОбработчики.Строки.Найти("*", "Версия", Ложь);

	Для Каждого ОтключаемыйОбработчик Из ОтключаемыеОбработчики Цикл
		// Проверка того, что отключаемый обработчик принадлежит переданной библиотеке.
		Если ИдентификаторБиблиотеки <> ОтключаемыйОбработчик.ИдентификаторБиблиотеки Тогда
			Продолжить;
		КонецЕсли;

		// Проверка, находится ли обработчик в списке исключения.
		ВыполняемыйОбработчик = ВыполняемыеОбработчики.Строки.Найти(ОтключаемыйОбработчик.Процедура, "Процедура", Истина);
		Если ВыполняемыйОбработчик <> Неопределено И ВыполняемыйОбработчик.Версия = "*"
			И ОтключаемыйОбработчик.Версия						= ВерсияМетаданных Тогда
			ОбработчикиБиблиотеки.Строки.Удалить(ВыполняемыйОбработчик);
			ХодВыполненияОбработчиков.ВсегоОбработчиковНаВерсию = ХодВыполненияОбработчиков.ВсегоОбработчиковНаВерсию - 1;
		ИначеЕсли ВыполняемыйОбработчик <> Неопределено И ВыполняемыйОбработчик.Версия <> "*"
			И ОтключаемыйОбработчик.Версия = ВерсияМетаданных Тогда
			ТекстИсключения = "Обработчик обновления %1 не может быть отключен,
										|так как он выполняется только при переходе на версию %2";
			ТекстИсключения = СтрШаблон(ТекстИсключения, ВыполняемыйОбработчик.Процедура, ВыполняемыйОбработчик.Версия);

			ВызватьИсключение ТекстИсключения;
		ИначеЕсли ВыполняемыйОбработчик = Неопределено Тогда
			ТекстИсключения = "Отключаемый обработчик обновления %1 не существует";
			ТекстИсключения = СтрШаблон(ТекстИсключения, ОтключаемыйОбработчик.Процедура);

			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ВыполнитьОбработчикиПослеОбновленияИнформационнойБазы(Знач ИтерацииОбновления, Знач ЗаписыватьВЖурнал, ВыводитьОписаниеОбновлений, Знач ОперативноеОбновление)
	Для Каждого ИтерацияОбновления Из ИтерацииОбновления Цикл
		Если ЗаписыватьВЖурнал Тогда
			Обработчик = Новый Структура;
			Обработчик.Вставить("Версия", "*");
			Обработчик.Вставить("ВерсияРегистрации", "*");
			Обработчик.Вставить("РежимВыполнения", "Оперативно");
			Обработчик.Вставить("Процедура", ИтерацияОбновления.ИмяОсновногоСерверногоМодуля + ".ПослеОбновленияИнформационнойБазы");
			ОписаниеОбработчика =  ПодготовитьДетальнуюИнформациюОХодеОбновления(Обработчик, Неопределено, ИтерацияОбновления.Подсистема);
		КонецЕсли;

		Попытка
			ИтерацияОбновления.ОсновнойСерверныйМодуль.ПослеОбновленияИнформационнойБазы(
				ИтерацияОбновления.ПредыдущаяВерсия,
				ИтерацияОбновления.Версия,
				ИтерацияОбновления.ВыполненныеОбработчики,
				ВыводитьОписаниеОбновлений,
				НЕ ОперативноеОбновление);
		Исключение
			Если ЗаписыватьВЖурнал Тогда
				ЗаписатьДетальнуюИнформациюОХодеОбновления(ОписаниеОбработчика);
			КонецЕсли;

			ВызватьИсключение;
		КонецПопытки;

		Если ЗаписыватьВЖурнал Тогда
			ЗаписатьДетальнуюИнформациюОХодеОбновления(ОписаниеОбработчика);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписатьИнформациюОХодеОбновления(Обработчик, ХодВыполненияОбработчиков, ВФоне)
	Если ХодВыполненияОбработчиков = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ХодВыполненияОбработчиков.ВыполненоОбработчиков = ХодВыполненияОбработчиков.ВыполненоОбработчиков + 1;

	Сообщение = "Выполняется обработчик обновления %1 (%2 из %3).";
	Сообщение = СтрШаблон(Сообщение, Обработчик.Процедура, ХодВыполненияОбработчиков.ВыполненоОбработчиков, ХодВыполненияОбработчиков.ВсегоОбработчиков);
	ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Информация,,, Сообщение);

	Если ВФоне Тогда
		Прогресс = 10 + ХодВыполненияОбработчиков.ВыполненоОбработчиков / ХодВыполненияОбработчиков.ВсегоОбработчиков * 90;
		БазоваяПодсистемаСервер.СообщитьПрогресс(Прогресс);
	КонецЕсли;
КонецПроцедуры

// Записывает в информационную базу версию конфигурации или родительской конфигурации (библиотеки).
//
// Параметры:
//  ИдентификаторБиблиотеки - Строка - имя конфигурации или родительской конфигурации (библиотеки),
//  НомерВерсии             - Строка - номер версии.
//  ЭтоОсновнаяКонфигурация - Булево - признак, что ИдентификаторБиблиотеки соответствует имени конфигурации.
//
Процедура УстановитьВерсиюИБ(Знач ИдентификаторБиблиотеки, Знач НомерВерсии, Знач ЭтоОсновнаяКонфигурация) Экспорт
	НаборЗаписей = РегистрыСведений.ВерсииПодсистем.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИмяПодсистемы.Установить(ИдентификаторБиблиотеки);

	НоваяЗапись							= НаборЗаписей.Добавить();
	НоваяЗапись.ИмяПодсистемы			= ИдентификаторБиблиотеки;
	НоваяЗапись.Версия					= НомерВерсии;
	НоваяЗапись.ЭтоОсновнаяКонфигурация = ЭтоОсновнаяКонфигурация;

	НаборЗаписей.Записать();
КонецПроцедуры

// Записывает в константу продолжительность основного цикла обновления.
//
Процедура ЗаписатьВремяВыполненияОбновления(ВремяНачалаОбновления, ВремяОкончанияОбновления) Экспорт
	СведенияОбОбновлении							= СведенияОбОбновленииИнформационнойБазы();
	СведенияОбОбновлении.ВремяНачалаОбновления		= ВремяНачалаОбновления;
	СведенияОбОбновлении.ВремяОкончанияОбновления	= ВремяОкончанияОбновления;

	ВремяВСекундах	= ВремяОкончанияОбновления - ВремяНачалаОбновления;

	Часы			= Цел(ВремяВСекундах/3600);
	Минуты			= Цел((ВремяВСекундах - Часы * 3600) / 60);
	Секунды 		= ВремяВСекундах - Часы * 3600 - Минуты * 60;

	ПродолжительностьЧасы		= ?(Часы = 0, "", СтрШаблон("%1 час", Часы));
	ПродолжительностьМинуты		= ?(Минуты = 0, "", СтрШаблон("%1 мин", Минуты));
	ПродолжительностьСекунды	= ?(Секунды = 0, "", СтрШаблон("%1 сек", Секунды));
	ПродолжительностьОбновления	= ПродолжительностьЧасы + " " + ПродолжительностьМинуты + " " + ПродолжительностьСекунды;
	СведенияОбОбновлении.ПродолжительностьОбновления = СокрЛП(ПродолжительностьОбновления);

	ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);
КонецПроцедуры

// Возвращает пустую таблицу обработчиков обновления и первоначального заполнения ИБ.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица с колонками:
//    1) Для всех типов обработчиков обновления:
//
//     * НачальноеЗаполнение - Булево - если Истина, то обработчик должен срабатывать при запуске на "пустой" базе.
//     * Версия              - Строка - например, "2.1.3.39". Номер версии конфигурации, при переходе
//                                      на которую должна быть выполнена процедура-обработчик обновления.
//                                      Если указана пустая строка, то это обработчик только для начального заполнения
//                                      (должно быть указано свойство НачальноеЗаполнение).
//     * Процедура           - Строка - полное имя процедуры-обработчика обновления/начального заполнения.
//                                      Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьНовыйРеквизит"
//                                      Обязательно должна быть экспортной.
//     * РежимВыполнения     - Строка - режим выполнения обработчика обновления. Допустимые значения:
//                                      Монопольно, Отложенно, Оперативно. Если значение не заполнено, обработчик
//                                      считается монопольным.
//
//    2) Для отложенных обработчиков обновления:
//
//     * Комментарий         - Строка - описание действий, выполняемых обработчиком обновления.
//     * Идентификатор       - УникальныйИдентификатор - необходимо заполнять для обработчиков отложенного обновления,
//                                                 для остальных заполнение не требуется. Требуется для идентификации
//                                                 обработчика в случае его переименования.
//
//     * БлокируемыеОбъекты  - Строка - необходимо заполнять для обработчиков отложенного обновления,
//                                      для остальных заполнение не требуется. Полные имена объектов через запятую,
//                                      которые следует блокировать от изменения до завершения процедуры обработки данных.
//                                      Если заполнено, то также требуется заполнить и свойство ПроцедураПроверки.
//     * ПроцедураПроверки   - Строка - необходимо заполнять для обработчиков отложенного обновления,
//                                      для остальных заполнение не требуется. Имя функции, которая для переданного объекта
//                                      определяет, завершена ли для него процедура обработки данных.
//                                      Если переданный объект обработан, то следует вернуть значение Истина.
//                                      Вызывается из процедуры ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан.
//                                      Параметры, передаваемые в функцию:
//                                         Параметры - Структура - см. ОбновлениеИнформационнойБазы.МетаданныеИОтборПоДанным.
//
//    3) Для обработчиков обновления в библиотеках (конфигурации) с параллельным режимом выполнения отложенных обработчиков:
//
//     * ПроцедураЗаполненияДанныхОбновления - Строка - указывается процедура, которая регистрирует данные,
//                                      подлежащие обновлению данным обработчиком.
//     * ЗапускатьТолькоВГлавномУзле  - Булево - только для обработчиков отложенного обновления с режимом выполнения Параллельно.
//                                      Указать Истина, если обработчик обновления должен выполняться только в главном
//                                      узле РИБ.
//     * ЗапускатьИВПодчиненномУзлеРИБСФильтрами - Булево - только для обработчиков отложенного обновления с режимом
//                                      выполнения Параллельно,
//                                      Указать Истина, если обработчик обновления должен также выполняться в
//                                      подчиненном узле РИБ с фильтрами.
//     * ЧитаемыеОбъекты              - Строка - Объекты, которые обработчик обновления будет читать при обработке данных.
//     * ИзменяемыеОбъекты            - Строка - Объекты, которые обработчик обновления будет изменять при обработке данных.
//     * ПриоритетыВыполнения         - ТаблицаЗначений - Таблица приоритетов выполнения между отложенными обработчиками,
//                                      изменяющими или читающими одни и те же данные. Подробнее см. в комментарии
//                                      к функции ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика.
//
//    4) Для внутреннего использования:
//
//     * ВыполнятьВГруппеОбязательных - Булево - следует указывать, если обработчик требуется
//                                      выполнять в одной группе с обработчиками на версии "*".
//                                      При этом, возможно менять порядок выполнения обработчика
//                                      относительно других путем изменения приоритета.
//     * Приоритет           - Число  - для внутреннего использования.
Функция НоваяТаблицаОбработчиковОбновления() Экспорт
	Обработчики = Новый ТаблицаЗначений;
	// Общие свойства.
	Обработчики.Колонки.Добавить("НачальноеЗаполнение",						Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("Версия",									Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("Процедура",								Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("РежимВыполнения",							Новый ОписаниеТипов("Строка"));
	// Для подсистем.
	Обработчики.Колонки.Добавить("ВыполнятьВГруппеОбязательных",			Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("Приоритет",								Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2)));

	// Удалить все вызовы
	Обработчики.Колонки.Добавить("ОбщиеДанные",             Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("УправлениеОбработчиками", Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("Опциональный");
	Обработчики.Колонки.Добавить("МонопольныйРежим");

	// Для отложенных обработчиков обновления.
	Обработчики.Колонки.Добавить("Комментарий",								Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("Идентификатор",							Новый ОписаниеТипов("УникальныйИдентификатор"));
	Обработчики.Колонки.Добавить("ПроцедураПроверки",						Новый ОписаниеТипов("Строка"));
	Обработчики.Колонки.Добавить("БлокируемыеОбъекты",						Новый ОписаниеТипов("Строка"));
	// Для параллельного режима отложенного обновления.
	Обработчики.Колонки.Добавить("ПроцедураЗаполненияДанныхОбновления",		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("ОчередьОтложеннойОбработки",				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4)));
	Обработчики.Колонки.Добавить("ЗапускатьТолькоВГлавномУзле",				Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("ЗапускатьИВПодчиненномУзлеРИБСФильтрами",	Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("ЧитаемыеОбъекты",							Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("ИзменяемыеОбъекты",						Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("ПриоритетыВыполнения");

	Возврат Обработчики;
КонецФункции

Функция ЗаблокироватьИБ(БлокировкаИБ, ИсключениеПриНевозможностиБлокировкиИБ)
	ИтерацииОбновления = Неопределено;
	Если БлокировкаИБ = Неопределено Тогда
		БлокировкаИБ = Новый Структура;
		БлокировкаИБ.Вставить("Установлена", Ложь);
		БлокировкаИБ.Вставить("Ошибка", Неопределено);
		БлокировкаИБ.Вставить("ОперативноеОбновление", Неопределено);
		БлокировкаИБ.Вставить("КлючЗаписи", Неопределено);
		БлокировкаИБ.Вставить("РежимОтладки", Неопределено);
	КонецЕсли;

	БлокировкаИБ.Установлена	= Истина;
	БлокировкаИБ.РежимОтладки	= БазоваяПодсистемаКлиентСервер.РежимОтладки();

	ИтерацииОбновления					= ИтерацииОбновления();
	БлокировкаИБ.ОперативноеОбновление	= Ложь;

	Если БлокировкаИБ.РежимОтладки Тогда
		Возврат ИтерацииОбновления;
	КонецЕсли;

	// Установка монопольного режима для обновления информационной базы.
	ИнформацияОбОшибке = Неопределено;
	Попытка
		Если НЕ МонопольныйРежим() Тогда
			УстановитьМонопольныйРежим(Истина);
		КонецЕсли;
		Возврат ИтерацииОбновления;
	Исключение
		Если ВозможноОперативноеОбновление(ИтерацииОбновления) Тогда
			БлокировкаИБ.ОперативноеОбновление = Истина;

			Возврат ИтерацииОбновления;
		КонецЕсли;
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки;

	// Обработка неудачной попытки установки монопольного режима.
	Сообщение = СтрШаблон("Невозможно выполнить обновление информационной базы:
			|- Невозможно установить монопольный режим
			|- Версия конфигурации не предусматривает обновление без установки монопольного режима
			|
			|Подробности ошибки:
			|%1",
		КраткоеПредставлениеОшибки(ИнформацияОбОшибке));

	ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, Сообщение);

	// Зарезервировано для новых подсистем

	ВызватьИсключение Сообщение;
КонецФункции

Процедура РазблокироватьИБ(БлокировкаИБ) Экспорт
	Если БлокировкаИБ.РежимОтладки Тогда
		Возврат;
	КонецЕсли;

	Если МонопольныйРежим() Тогда
		Пока ТранзакцияАктивна() Цикл
			ОтменитьТранзакцию();
		КонецЦикла;

		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры

Функция ВозможноОперативноеОбновление(ПроверяемыеИтерацииОбновления = Неопределено) Экспорт
	Если ПроверяемыеИтерацииОбновления = Неопределено Тогда
		// Режим вызова для определения полного состава процедур обработчиков обновления,
		// требующих монопольный режим (без записи сообщений в журнал регистрации).
		ИтерацииОбновления = ИтерацииОбновления();
	Иначе
		ИтерацииОбновления = ПроверяемыеИтерацииОбновления;
	КонецЕсли;

	// В режиме проверки параметр не используется.
	ОбязательныеРазделенныеОбработчики = НоваяТаблицаОбработчиковОбновления();

	ЗаписыватьВЖурнал		= Константы.ДетализироватьОбновлениеИБВЖурналеРегистрации.Получить();
	ПроцедурыОбработчиков	= Новый Массив;

	// Проверяем обработчики обновления с флагом МонопольныйРежим для подсистем конфигурации.
	Для каждого ИтерацияОбновления Из ИтерацииОбновления Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ПолучатьРазделенные", Истина);
		ПараметрыОтбора.Вставить("РежимОбновления", "Оперативно");
		ПараметрыОтбора.Вставить("УчитыватьПервыйОбменВРИБ", Ложь);
		ПараметрыОтбора.Вставить("ПервыйОбменВРИБ", Ложь);

		ДеревоОбработчиков = ОбработчикиОбновленияВИнтервале(ИтерацияОбновления.Обработчики, ИтерацияОбновления.ПредыдущаяВерсия, ИтерацияОбновления.Версия, ПараметрыОтбора);
		Если ДеревоОбработчиков.Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		Если ДеревоОбработчиков.Строки.Количество() > 1 ИЛИ ДеревоОбработчиков.Строки[0].Версия <> "*" Тогда
			Для Каждого СтрокаВерсия Из ДеревоОбработчиков.Строки Цикл
				Если СтрокаВерсия.Версия = "*" Тогда
					Продолжить;
				КонецЕсли;
				Для Каждого Обработчик Из СтрокаВерсия.Строки Цикл
					ПроцедурыОбработчиков.Добавить(Обработчик.Процедура);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;

		НайденныеОбработчики = ДеревоОбработчиков.Строки[0].Строки.НайтиСтроки(Новый Структура("МонопольныйРежим", Неопределено));
		Для Каждого Обработчик Из НайденныеОбработчики Цикл
			ПроцедурыОбработчиков.Добавить(Обработчик.Процедура);
		КонецЦикла;

		// Вызов обязательных обработчиков обновления в режиме проверки.
		Для каждого Обработчик Из ДеревоОбработчиков.Строки[0].Строки Цикл
			Если Обработчик.ВерсияРегистрации <> "*" Тогда
				ПроцедурыОбработчиков.Добавить(Обработчик.Процедура);

				Продолжить;
			КонецЕсли;

			ПараметрыОбработчика = Новый Структура;
			Если Обработчик.УправлениеОбработчиками Тогда
				ПараметрыОбработчика.Вставить("РазделенныеОбработчики", ОбязательныеРазделенныеОбработчики);
			КонецЕсли;
			ПараметрыОбработчика.Вставить("МонопольныйРежим", Ложь);

			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ЗаписыватьВЖурнал", ЗаписыватьВЖурнал);
			ДополнительныеПараметры.Вставить("ИдентификаторБиблиотеки", ИтерацияОбновления.Подсистема);
			ДополнительныеПараметры.Вставить("ХодВыполненияОбработчиков", Неопределено);
			ДополнительныеПараметры.Вставить("ВФоне", Ложь);

			ВыполнитьОбработчикОбновления(Обработчик, ПараметрыОбработчика, ДополнительныеПараметры);

			Если ПараметрыОбработчика.МонопольныйРежим = Истина Тогда
				ПроцедурыОбработчиков.Добавить(Обработчик.Процедура);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Если ПроверяемыеИтерацииОбновления = Неопределено Тогда
		ПроверяемыеИтерацииОбновления = ПроцедурыОбработчиков;
		Возврат ПроцедурыОбработчиков.Количество() = 0;
	КонецЕсли;

	Если ПроцедурыОбработчиков.Количество() <> 0 Тогда
		ТекстСообщения = "Следующие обработчики не поддерживают обновление без установки монопольного режима:";
		ТекстСообщения = ТекстСообщения + Символы.ПС;
		Для Каждого ПроцедураОбработчика Из ПроцедурыОбработчиков Цикл
			ТекстСообщения = ТекстСообщения + Символы.ПС + ПроцедураОбработчика;
		КонецЦикла;
		ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецЕсли;

	Возврат ПроцедурыОбработчиков.Количество() = 0;
КонецФункции

Процедура ПерейтиСДругойПрограммы()
	// Предыдущее имя конфигурации, с которой нужно выполнить переход.
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ ПЕРВЫЕ 1
	            	  |	ВерсииПодсистем.ИмяПодсистемы КАК ИмяПодсистемы,
	            	  |	ВерсииПодсистем.Версия КАК Версия
	            	  |ИЗ
	            	  |	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
	            	  |ГДЕ
	            	  |	ВерсииПодсистем.ЭтоОсновнаяКонфигурация = ИСТИНА";
	РезультатЗапроса = Запрос.Выполнить();
	// Если по каким-то причинам не отработал обработчик обновления ЗаполнитьРеквизитЭтоОсновнаяКонфигурация.
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	РезультатЗапроса				= Запрос.Выполнить().Выгрузить()[0];
	ПредыдущееИмяКонфигурации		= РезультатЗапроса.ИмяПодсистемы;
	ПредыдущаяВерсияКонфигурации	= РезультатЗапроса.Версия;

	Отбор = Новый Структура;
	Отбор.Вставить("ИмяБиблиотеки", ПредыдущееИмяКонфигурации);
	СведенияОбОбновлении	= СведенияОбОбновленииИнформационнойБазы();
	РезультатПоиска			= СведенияОбОбновлении.ДеревоОбработчиков.Строки.НайтиСтроки(Отбор, Истина);
	Для Каждого НайденнаяСтрока Из РезультатПоиска Цикл
		НайденнаяСтрока.ИмяБиблиотеки = Метаданные.Имя;
	КонецЦикла;
	Если РезультатПоиска.Количество() > 0 Тогда
		ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);
	КонецЕсли;

	Обработчики = ОбработчикиПереходаСДругойПрограммы(ПредыдущееИмяКонфигурации);

	// Выполняем все обработчики перехода.
	Для Каждого Обработчик Из Обработчики Цикл
		ТранзакцияАктивнаНаНачалоВыполнения = ТранзакцияАктивна();
		Попытка
			БазоваяПодсистемаСервер.ВыполнитьМетодКонфигурации(Обработчик.Процедура);
		Исключение
			ИмяОбработчика	= Обработчик.Процедура;
			Сообщение		= СтрШаблон("При вызове обработчика перехода с другой программы
				           |""%1""
				           |произошла ошибка:
				           |""%2"".",
				ИмяОбработчика,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, Сообщение);

			ВызватьИсключение;
		КонецПопытки;
		ПроверитьВложеннуюТранзакцию(ТранзакцияАктивнаНаНачалоВыполнения, Обработчик.Процедура);
	КонецЦикла;

	Параметры = Новый Структура;
	Параметры.Вставить("ВыполнитьОбновлениеСВерсии", Истина);
	Параметры.Вставить("ВерсияКонфигурации", Метаданные.Версия);
	Параметры.Вставить("ОчиститьСведенияОПредыдущейКонфигурации", Истина);
	ПриЗавершенииПереходаСДругойПрограммы(ПредыдущееИмяКонфигурации, ПредыдущаяВерсияКонфигурации, Параметры);

	// Установка текущих имени и версии конфигурации.
	НачатьТранзакцию();
	Попытка
		Если Параметры.ОчиститьСведенияОПредыдущейКонфигурации Тогда
			НаборЗаписей = РегистрыСведений.ВерсииПодсистем.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИмяПодсистемы.Установить(ПредыдущееИмяКонфигурации);
			НаборЗаписей.Записать();
		КонецЕсли;

		НаборЗаписей = РегистрыСведений.ВерсииПодсистем.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИмяПодсистемы.Установить(Метаданные.Имя);

		ВерсияКонфигурации = Метаданные.Версия;
		Если Параметры.ВыполнитьОбновлениеСВерсии Тогда
			ВерсияКонфигурации = Параметры.ВерсияКонфигурации;
		КонецЕсли;
		НоваяЗапись							= НаборЗаписей.Добавить();
		НоваяЗапись.ИмяПодсистемы			= Метаданные.Имя;
		НоваяЗапись.Версия					= ВерсияКонфигурации;
		НоваяЗапись.ПланОбновления			= Неопределено;
		НоваяЗапись.ЭтоОсновнаяКонфигурация = Истина;

		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

Функция ОбработчикиПереходаСДругойПрограммы(ПредыдущееИмяКонфигурации)
	ОбработчикиПерехода = Новый ТаблицаЗначений;
	ОбработчикиПерехода.Колонки.Добавить("ПредыдущееИмяКонфигурации",	Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	ОбработчикиПерехода.Колонки.Добавить("Процедура",					Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	ИмяОсновнойКонфигурации = Метаданные.Имя;

	ОписанияПодсистем  = БазоваяПодсистемаСерверПовтИсп.ОписанияПодсистем();
	Для каждого ИмяПодсистемы Из ОписанияПодсистем.Порядок Цикл
		ОписаниеПодсистемы = ОписанияПодсистем.ПоИменам.Получить(ИмяПодсистемы);
		Если НЕ ЗначениеЗаполнено(ОписаниеПодсистемы.ОсновнойСерверныйМодуль) Тогда
			Продолжить;
		КонецЕсли;

		Если ОписаниеПодсистемы.Имя <> ИмяОсновнойКонфигурации Тогда
			Продолжить;
		КонецЕсли;

		Модуль = БазоваяПодсистемаСервер.ОбщийМодуль(ОписаниеПодсистемы.ОсновнойСерверныйМодуль);
		Модуль.ПриДобавленииОбработчиковПереходаСДругойПрограммы(ОбработчикиПерехода);
	КонецЦикла;

	Отбор = Новый Структура("ПредыдущееИмяКонфигурации", "*");
	Результат = ОбработчикиПерехода.НайтиСтроки(Отбор);

	Отбор.ПредыдущееИмяКонфигурации = ПредыдущееИмяКонфигурации;
	БазоваяПодсистемаКлиентСервер.ДополнитьМассив(Результат, ОбработчикиПерехода.НайтиСтроки(Отбор), Истина);

	Возврат Результат;
КонецФункции

Процедура ПриЗавершенииПереходаСДругойПрограммы(ПредыдущееИмяКонфигурации, ПредыдущаяВерсияКонфигурации, Параметры)
	ИмяКонфигурации		= Метаданные.Имя;
	ОписанияПодсистем	= БазоваяПодсистемаСерверПовтИсп.ОписанияПодсистем();
	Для каждого ИмяПодсистемы Из ОписанияПодсистем.Порядок Цикл
		ОписаниеПодсистемы = ОписанияПодсистем.ПоИменам.Получить(ИмяПодсистемы);
		Если НЕ ЗначениеЗаполнено(ОписаниеПодсистемы.ОсновнойСерверныйМодуль) Тогда
			Продолжить;
		КонецЕсли;

		Если ОписаниеПодсистемы.Имя <> ИмяКонфигурации Тогда
			Продолжить;
		КонецЕсли;

		Модуль = БазоваяПодсистемаСервер.ОбщийМодуль(ОписаниеПодсистемы.ОсновнойСерверныйМодуль);
		Модуль.ПриЗавершенииПереходаСДругойПрограммы(ПредыдущееИмяКонфигурации, ПредыдущаяВерсияКонфигурации, Параметры);
	КонецЦикла;
КонецПроцедуры

Функция ОбновитьИнформационнуюБазуВФоне(УникальныйИдентификаторФормы, БлокировкаИБ) Экспорт
	// Запуск фонового задания
	ПараметрыОбновленияИБ = Новый Структура;
	ПараметрыОбновленияИБ.Вставить("ИсключениеПриНевозможностиБлокировкиИБ", Ложь);
	ПараметрыОбновленияИБ.Вставить("БлокировкаИБ", БлокировкаИБ);
	ПараметрыОбновленияИБ.Вставить("ПараметрыКлиентаНаСервере", ПараметрыСеанса.ПараметрыКлиентаНаСервере);

	// Установка монопольного режима до запуска фонового выполнения обновления.
	Попытка
		ЗаблокироватьИБ(ПараметрыОбновленияИБ.БлокировкаИБ, Ложь);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();

		Результат = Новый Структура;
		Результат.Вставить("Статус",    "Ошибка");
		Результат.Вставить("БлокировкаИБ", ПараметрыОбновленияИБ.БлокировкаИБ);
		Результат.Вставить("КраткоеПредставлениеОшибки", КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Результат.Вставить("ПодробноеПредставлениеОшибки", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));

		Возврат Результат;
	КонецПопытки;

	ПараметрыОбновленияИБ.Вставить("ВФоне", Не ПараметрыОбновленияИБ.БлокировкаИБ.РежимОтладки);

	Если Не ПараметрыОбновленияИБ.ВФоне Тогда
		ПараметрыОбновленияИБ.Удалить("ПараметрыКлиентаНаСервере");
	КонецЕсли;

	ПараметрыВыполнения								= БазоваяПодсистемаСервер.ПараметрыВыполненияВФоне(УникальныйИдентификаторФормы);
	ПараметрыВыполнения.ОжидатьЗавершение			= 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = "Фоновое обновление информационной базы";

	Результат = БазоваяПодсистемаСервер.ВыполнитьВФоне("ОбновлениеИБСервер.ВыполнитьОбновлениеИнформационнойБазыВФоне",ПараметрыОбновленияИБ, ПараметрыВыполнения);
	Результат.Вставить("БлокировкаИБ", ПараметрыОбновленияИБ.БлокировкаИБ);

	// Если обновление ИБ уже выполнилось - разблокируем ИБ.
	Если Результат.Статус <> "Выполняется" Тогда
		РазблокироватьИБ(ПараметрыОбновленияИБ.БлокировкаИБ);
	КонецЕсли;

	Возврат Результат;
КонецФункции

// Запускает обновление информационной базы в длительной операции.
Функция ВыполнитьОбновлениеИнформационнойБазыВФоне(ПараметрыОбновленияИБ, АдресХранилища) Экспорт
	Если ПараметрыОбновленияИБ.ВФоне Тогда
		ПараметрыСеанса.ПараметрыКлиентаНаСервере = ПараметрыОбновленияИБ.ПараметрыКлиентаНаСервере;
	КонецЕсли;

	ИнформацияОбОшибке = Неопределено;
	Попытка
		ПараметрыОбновления = Новый Структура;
		ПараметрыОбновления.Вставить("ИсключениеПриНевозможностиБлокировкиИБ",	ПараметрыОбновленияИБ.ИсключениеПриНевозможностиБлокировкиИБ);
		ПараметрыОбновления.Вставить("ПриЗапускеКлиентскогоПриложения",			Истина);
		ПараметрыОбновления.Вставить("Перезапустить",							Ложь);
		ПараметрыОбновления.Вставить("УстановленнаяБлокировкаИБ",				ПараметрыОбновленияИБ.БлокировкаИБ);
		ПараметрыОбновления.Вставить("ВФоне",									ПараметрыОбновленияИБ.ВФоне);
		ПараметрыОбновления.Вставить("ВыполнятьОтложенныеОбработчики",			Ложь);

		Результат = ВыполнитьОбновлениеИнформационнойБазы(ПараметрыОбновления);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки;

	Если ИнформацияОбОшибке <> Неопределено Тогда
		РезультатОбновления = Новый Структура;
		РезультатОбновления.Вставить("КраткоеПредставлениеОшибки", КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		РезультатОбновления.Вставить("ПодробноеПредставлениеОшибки", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ИначеЕсли Не ПараметрыОбновленияИБ.ВФоне Тогда
		РезультатОбновления = Результат;
	Иначе
		РезультатОбновления = Новый Структура;
		РезультатОбновления.Вставить("ПараметрыКлиентаНаСервере", ПараметрыСеанса.ПараметрыКлиентаНаСервере);
		РезультатОбновления.Вставить("Результат", Результат);
	КонецЕсли;
	ПоместитьВоВременноеХранилище(РезультатОбновления, АдресХранилища);
КонецФункции

// Основные параметры процедуры ОбновлениеИнформационнойБазы.ОтметитьКОбработке,
// которые инициализируются механизмом регистрации изменений
// и не должны переопределяться в коде процедур отметки к обработке обработчиков обновления.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//     * Очередь - Число - очередь обработки, в которой выполняется текущий обработчик.
//     * ЗаписьИзмененийДляПодчиненногоУзлаРИБСФильтрами - ЗаписьFastInfoset - параметр
//          существует, только если внедрена подсистема ОбменДанными.
//
Функция ОсновныеПараметрыОтметкиКОбработке() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("Очередь", 0);
	Параметры.Вставить("ПовторнаяРегистрация", Ложь);

	// Зарезервировано для новых подсистем

	Возврат Параметры;
КонецФункции

Процедура ЗапускРегистрацииДанныхОтложенногоОбновления(Параметры, АдресРезультата) Экспорт
	ПараметрыОбработчика = Неопределено;
	Пока ЗаполнениеДанныхОтложенногоОбработчикаВФоне(ПараметрыОбработчика, АдресРезультата) Цикл
		// Пока есть, что обрабатывать.
	КонецЦикла;

	// Зарезервировано для новых подсистем
КонецПроцедуры

Функция ЗаполнениеДанныхОтложенногоОбработчикаВФоне(ПараметрыОбработчикаСтруктура, АдресРезультата)
	ЕстьДанныеДляРегистрации = Ложь;
	НачатьТранзакцию();
	Попытка
		Блокировка			= Новый БлокировкаДанных;
		ЭлементБлокировки	= Блокировка.Добавить("Константа.СведенияОбОбновленииИБ");
		Блокировка.Заблокировать();

		СведенияОбОбновлении = СведенияОбОбновленииИнформационнойБазы();

		Для Каждого ЭлементОписаниеПроцедуры Из СведенияОбОбновлении.ОписаниеПроцедурЗаполнения Цикл
			ОписаниеПроцедуры = ЭлементОписаниеПроцедуры.Значение;

			Если ОписаниеПроцедуры.Статус = "Выполнено" Или ОписаниеПроцедуры.Статус = "Выполняется" Тогда
				Продолжить;
			КонецЕсли;

			ЕстьДанныеДляРегистрации = Истина;
			// Установка признака начала выполнения обработчика.
			ОписаниеПроцедуры.Статус = "Выполняется";

			Прервать;
		КонецЦикла;

		ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;

	Если Не ЕстьДанныеДляРегистрации Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ПараметрыОбработчикаСтруктура = Неопределено Тогда
		ПараметрыОбработчикаСтруктура = ОсновныеПараметрыОтметкиКОбработке();

		// Зарезервировано для новых подсистем
	КонецЕсли;

	ПараметрыОбработчикаСтруктура.Очередь = ОписаниеПроцедуры.Очередь;
	ПараметрыОбработчикаСтруктура.Вставить("ДанныеОбработчика", Новый Соответствие);

	ПараметрыОбработчика = Новый Массив;
	ПараметрыОбработчика.Добавить(ПараметрыОбработчикаСтруктура);
	Попытка
		Сообщение = "Выполняется процедура заполнения данных
			                   |""%1""
			                   |отложенного обработчика обновления
			                   |""%2"".";
		Сообщение = СтрШаблон(Сообщение, ОписаниеПроцедуры.ПроцедураЗаполнения,  ОписаниеПроцедуры.ИмяОбработчика);
		ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Информация,,, Сообщение);

		БазоваяПодсистемаСервер.ВыполнитьМетодКонфигурации(ОписаниеПроцедуры.ПроцедураЗаполнения, ПараметрыОбработчика);
	Исключение
		ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, СтрШаблон("При вызове процедуры заполнения данных
					   |""%1""
					   |отложенного обработчика обновления
					   |""%2""
					   |произошла ошибка:
					   |""%3"".",
			ОписаниеПроцедуры.ПроцедураЗаполнения,
			ОписаниеПроцедуры.ИмяОбработчика,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));

		ВызватьИсключение;
	КонецПопытки;

	НачатьТранзакцию();
	Попытка
		Блокировка			= Новый БлокировкаДанных;
		ЭлементБлокировки	= Блокировка.Добавить("Константа.СведенияОбОбновленииИБ");
		Блокировка.Заблокировать();

		НовыеСведенияОбОбновлении = СведенияОбОбновленииИнформационнойБазы();
		Если ТипЗнч(НовыеСведенияОбОбновлении.ОбрабатываемыеДанные) <> Тип("Соответствие") Тогда
			НовыеСведенияОбОбновлении.ОбрабатываемыеДанные = Новый Соответствие;
		КонецЕсли;
		НовыеСведенияОбОбновлении.ОбрабатываемыеДанные.Вставить(ОписаниеПроцедуры.ИмяОбработчика, ПараметрыОбработчикаСтруктура.ДанныеОбработчика);
		НовыеСведенияОбОбновлении.ОписаниеПроцедурЗаполнения[ОписаниеПроцедуры.ИмяОбработчика].Статус = "Выполнено";

		ЗаписатьСведенияОбОбновленииИнформационнойБазы(НовыеСведенияОбОбновлении);

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;

	Возврат Истина;
КонецФункции

Функция ИмяОбъектаМетаданныхПоИмениМенеджера(ИмяМенеджера)
	Позиция = СтрНайти(ИмяМенеджера, ".");
	Если Позиция = 0 Тогда
		Возврат "ОбщийМодуль." + ИмяМенеджера;
	КонецЕсли;
	ТипМенеджера = Лев(ИмяМенеджера, Позиция - 1);

	ИменаТипов = Новый Соответствие;
	ИменаТипов.Вставить("Справочники", "Справочник");
	ИменаТипов.Вставить("Документы", "Документ");
	ИменаТипов.Вставить("Обработки", "Обработка");
	ИменаТипов.Вставить("ПланыВидовХарактеристик",	"ПланВидовХарактеристик");
	ИменаТипов.Вставить("РегистрыБухгалтерии",		"РегистрБухгалтерии");
	ИменаТипов.Вставить("РегистрыНакопления",		"РегистрНакопления");
	ИменаТипов.Вставить("РегистрыРасчета",			"РегистрРасчета");
	ИменаТипов.Вставить("РегистрыСведений",			"РегистрСведений");
	ИменаТипов.Вставить("БизнесПроцессы",			"БизнесПроцесс");
	ИменаТипов.Вставить("ЖурналыДокументов",		"ЖурналДокументов");
	ИменаТипов.Вставить("Задачи",					"Задача");
	ИменаТипов.Вставить("Отчеты",					"Отчет");
	ИменаТипов.Вставить("Константы",				"Константа");
	ИменаТипов.Вставить("Перечисления",				"Перечисление");
	ИменаТипов.Вставить("ПланыВидовРасчета",		"ПланВидовРасчета");
	ИменаТипов.Вставить("ПланыОбмена",				"ПланОбмена");
	ИменаТипов.Вставить("ПланыСчетов",				"ПланСчетов");

	ИмяТипа = ИменаТипов[ТипМенеджера];
	Если ИмяТипа = Неопределено Тогда
		Возврат ИмяМенеджера;
	КонецЕсли;

	Возврат ИмяТипа + Сред(ИмяМенеджера, Позиция);
КонецФункции

// Возвращает числовой вес версии для сравнения версий между собой.
//
// Параметры:
//  Версия - Строка - Версия в строковом формате.
//
// Возвращаемое значение:
//  Число - вес версии
//
Функция ВесВерсии(Знач Версия) Экспорт
	Если Версия = "" Тогда
		Возврат 0;
	КонецЕсли;

	Возврат ВесВерсииИзМассиваСтрок(СтрРазделить(Версия, "."));
КонецФункции

Функция ВесВерсииИзМассиваСтрок(РазрядыВерсииСтроками)
	Возврат 0
		+ Число(РазрядыВерсииСтроками[0]) * 1000000000
		+ Число(РазрядыВерсииСтроками[1]) * 1000000
		+ Число(РазрядыВерсииСтроками[2]) * 1000
		+ Число(РазрядыВерсииСтроками[3]);
КонецФункции
