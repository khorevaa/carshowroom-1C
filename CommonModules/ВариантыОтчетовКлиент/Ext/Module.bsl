////////////////////////////////////////////////////////////////////////////////
// Подсистема "Варианты отчетов"
//
////////////////////////////////////////////////////////////////////////////////

// Запускает процесс формирования отчета в форме отчета.
//  После завершения формирования вызывается ОбработчикЗавершения.
//
// Параметры:
//   ФормаОтчета - УправляемаяФорма - Форма отчета.
//   ОбработчикЗавершения - ОбработчикОповещения - Обработчик, который будет вызван после формирования отчета.
//     В 1й параметр процедуры, указанной в ОбработчикЗавершения,
//     передается параметр: ОтчетСформирован (Булево) - Признак того, что отчет был успешно сформирован.
//
Процедура СформироватьОтчет(ФормаОтчета, ОбработчикЗавершения = Неопределено) Экспорт
	Если ТипЗнч(ОбработчикЗавершения) = Тип("ОписаниеОповещения") Тогда
		ФормаОтчета.ОбработчикПослеФормированияНаКлиенте = ОбработчикЗавершения;
	КонецЕсли;
	ФормаОтчета.ПодключитьОбработчикОжидания("Сформировать", 0.1, Истина);
КонецПроцедуры

// Открывает карточку варианта отчета с настройками размещения в программе.
//
// Параметры:
//   Вариант - СправочникСсылка.ВариантыОтчетов - Ссылка варианта отчета.
//
Процедура ПоказатьНастройкиОтчета(Вариант) Экспорт
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоказатьКарточку", Истина);
	ПараметрыФормы.Вставить("Ключ", Вариант);
	ОткрытьФорму("Справочник.ВариантыОтчетов.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

// Оповещает открытые панели отчетов, формы списков и элементов о изменениях.
//
// Параметры:
//   Параметр - Произвольный - могут быть переданы любые необходимые данные.
//   Источник - Произвольный - источник события. Например, можно передать другую форму.
//
Процедура ОбновитьОткрытыеФормы(Параметр = Неопределено, Источник = Неопределено) Экспорт
	Оповестить("СтандартныеПодсистемы.ИзменениеВарианта", Параметр, Источник);
КонецПроцедуры

// Открывает форму указанного отчета.
//
// Параметры:
//   ФормаВладелец - УправляемаяФорма, Неопределено - форма, из которой открывается отчет.
//   Вариант - СправочникСсылка.ВариантыОтчетов, СправочникСсылка.ДополнительныеОтчетыИОбработки - вариант
//       отчета, форму которого требуется открыть. Если передан тип СправочникСсылка.ДополнительныеОтчетыИОбработки,
//       то открывается дополнительный отчет, подключенный к программе.
//   ДополнительныеПараметры - Структура - служебный параметр, не предназначен для использования.
//
Процедура ОткрытьФормуОтчета(Знач ФормаВладелец, Знач Вариант, Знач ДополнительныеПараметры = Неопределено) Экспорт
	Тип = ТипЗнч(Вариант);
	Если Тип = Тип("Структура") Тогда
		ПараметрыОткрытия = Вариант;
	ИначеЕсли Тип = Тип("СправочникСсылка.ВариантыОтчетов") Или Тип = ВариантыОтчетовКлиентСервер.ТипСсылкиДополнительногоОтчета() Тогда
		ПараметрыОткрытия = Новый Структура("Ключ", Вариант);
		Если ДополнительныеПараметры <> Неопределено Тогда
			БазоваяПодсистемаКлиентСервер.ДополнитьСтруктуру(ПараметрыОткрытия, ДополнительныеПараметры, Истина);
		КонецЕсли;
		ОткрытьФорму("Справочник.ВариантыОтчетов.ФормаОбъекта", ПараметрыОткрытия, Неопределено, Истина);
		Возврат;
	Иначе
		ПараметрыОткрытия = Новый Структура("Ссылка, Отчет, ТипОтчета, ИмяОтчета, КлючВарианта, КлючЗамеров");
		Если ТипЗнч(ФормаВладелец) = Тип("УправляемаяФорма") Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ФормаВладелец);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, Вариант);
	КонецЕсли;

	Если ДополнительныеПараметры <> Неопределено Тогда
		БазоваяПодсистемаКлиентСервер.ДополнитьСтруктуру(ПараметрыОткрытия, ДополнительныеПараметры, Истина);
	КонецЕсли;

	БазоваяПодсистемаКлиентСервер.ДополнитьСтруктуруКлючом(ПараметрыОткрытия, "ВыполнятьЗамеры", Ложь);

	ПараметрыОткрытия.ТипОтчета = ВариантыОтчетовКлиентСервер.ТипОтчетаСтрокой(ПараметрыОткрытия.ТипОтчета, ПараметрыОткрытия.Отчет);
	Если Не ЗначениеЗаполнено(ПараметрыОткрытия.ТипОтчета) Тогда
		ВызватьИсключение СтрШаблон("Не определен тип отчета в %1", "ВариантыОтчетовКлиент.ОткрытьФормуОтчета");
	КонецЕсли;

	Если ПараметрыОткрытия.ТипОтчета = "Внутренний" Или ПараметрыОткрытия.ТипОтчета = "Расширение" Тогда
		Вид			= "Отчет";
		КлючЗамеров	= БазоваяПодсистемаКлиентСервер.СвойствоСтруктуры(ПараметрыОткрытия, "КлючЗамеров");
		Если ЗначениеЗаполнено(КлючЗамеров) Тогда
			ПараметрыКлиента = БазоваяПодсистемаКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
			Если ПараметрыКлиента.ВыполнятьЗамеры Тогда
				ПараметрыОткрытия.ВыполнятьЗамеры = Истина;
				ПараметрыОткрытия.Вставить("ИмяОперации",			КлючЗамеров + ".Открытие");
				ПараметрыОткрытия.Вставить("КомментарийОперации",	ПараметрыКлиента.ПрефиксЗамеров);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ПараметрыОткрытия.ТипОтчета = "Дополнительный" Тогда
		Вид = "ВнешнийОтчет";
		Если Не ПараметрыОткрытия.Свойство("Подключен") Тогда
			ВариантыОтчетовВызовСервера.ПриПодключенииОтчета(ПараметрыОткрытия);
		КонецЕсли;
		Если Не ПараметрыОткрытия.Подключен Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, "Вариант внешнего отчета можно открыть только из формы отчета.");

		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ПараметрыОткрытия.ИмяОтчета) Тогда
		ВызватьИсключение СтрШаблон("Не определено имя отчета в %1", "ВариантыОтчетовКлиент.ОткрытьФормуОтчета");
	КонецЕсли;

	ПолноеИмяОтчета = Вид + "." + ПараметрыОткрытия.ИмяОтчета;

	КлючУникальности = ВариантыОтчетовКлиентСервер.КлючУникальности(ПолноеИмяОтчета, ПараметрыОткрытия.КлючВарианта);
	ПараметрыОткрытия.Вставить("КлючПараметровПечати",        КлючУникальности);
	ПараметрыОткрытия.Вставить("КлючСохраненияПоложенияОкна", КлючУникальности);

	Если ПараметрыОткрытия.ВыполнятьЗамеры Тогда
		БазоваяПодсистемаКлиентСервер.ДополнитьСтруктуруКлючом(ПараметрыОткрытия, "КомментарийОперации");

		// Зарезервировано для новых подсистем
	КонецЕсли;

	ОткрытьФорму(ПолноеИмяОтчета + ".Форма", ПараметрыОткрытия, Неопределено, Истина);

	Если ПараметрыОткрытия.ВыполнятьЗамеры Тогда
		// Зарезервировано для новых подсистем
	КонецЕсли;
КонецПроцедуры

// Открывает диалог настройки размещения нескольких вариантов в разделах.
//
// Параметры:
//   Варианты - Массив - перемещаемые варианты отчетов (СправочникСсылка.ВариантыОтчетов).
//   Владелец - УправляемаяФорма - для блокирования окна владельца.
//
Процедура ОткрытьДиалогРазмещенияВариантовВРазделах(Варианты, Владелец = Неопределено) Экспорт
	Если ТипЗнч(Варианты) <> Тип("Массив") Или Варианты.Количество() < 1 Тогда
		ПоказатьПредупреждение(, "Выберите варианты отчетов, которые необходимо разместить в разделах.");

		Возврат;
	КонецЕсли;

	ПараметрыОткрытия = Новый Структура("Варианты", Варианты);
	ОткрытьФорму("Справочник.ВариантыОтчетов.Форма.РазмещениеВРазделах", ПараметрыОткрытия, Владелец);
КонецПроцедуры

// Открывает диалог диалог сброса пользовательских настроек выбранных вариантов отчетов.
//
// Параметры:
//   Варианты - Массив - обрабатываемые варианты отчетов (СправочникСсылка.ВариантыОтчетов).
//   Владелец - УправляемаяФорма - для блокирования окна владельца.
//
Процедура ОткрытьДиалогСбросаНастроекПользователей(Варианты, Владелец = Неопределено) Экспорт
	Если ТипЗнч(Варианты) <> Тип("Массив") Или Варианты.Количество() < 1 Тогда
		ПоказатьПредупреждение(, "Выберите варианты отчетов, для которых необходимо сбросить пользовательские настройки.");

		Возврат;
	КонецЕсли;

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Варианты", Варианты);
	ОткрытьФорму("Справочник.ВариантыОтчетов.Форма.СбросПользовательскихНастроек", ПараметрыОткрытия, Владелец);
КонецПроцедуры

// Открывает диалог диалог сброса настроек размещения выбранных вариантов отчетов программы.
//
// Параметры:
//   Варианты - Массив - обрабатываемые варианты отчетов (СправочникСсылка.ВариантыОтчетов).
//   Владелец - УправляемаяФорма - для блокирования окна владельца.
//
Процедура ОткрытьДиалогСбросаНастроекРазмещения(Варианты, Владелец = Неопределено) Экспорт
	Если ТипЗнч(Варианты) <> Тип("Массив") ИЛИ Варианты.Количество() < 1 Тогда
		ПоказатьПредупреждение(, "Выберите варианты отчетов программы, для которых необходимо сбросить настройки размещения.");

		Возврат;
	КонецЕсли;

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Варианты", Варианты);
	ОткрытьФорму("Справочник.ВариантыОтчетов.Форма.СбросНастроекРазмещения", ПараметрыОткрытия, Владелец);
КонецПроцедуры

Процедура РедактироватьМногострочныйТекст(ФормаИлиОбработчик, ТекстРедактирования, ВладелецРеквизита, ИмяРеквизита, Знач Заголовок = "") Экспорт
	Если ПустаяСтрока(Заголовок) Тогда
		Заголовок = "Комментарий";
	КонецЕсли;

	ПараметрыИсточника = Новый Структура;
	ПараметрыИсточника.Вставить("ФормаИлиОбработчик", ФормаИлиОбработчик);
	ПараметрыИсточника.Вставить("ВладелецРеквизита",  ВладелецРеквизита);
	ПараметрыИсточника.Вставить("ИмяРеквизита",       ИмяРеквизита);
	Обработчик = Новый ОписаниеОповещения("РедактироватьМногострочныйТекстЗавершение", ЭтотОбъект, ПараметрыИсточника);

	ПоказатьВводСтроки(Обработчик, ТекстРедактирования, Заголовок, , Истина);
КонецПроцедуры

Процедура РедактироватьМногострочныйТекстЗавершение(Текст, ПараметрыИсточника) Экспорт
	Если ТипЗнч(ПараметрыИсточника.ФормаИлиОбработчик) = Тип("УправляемаяФорма") Тогда
		Форма      = ПараметрыИсточника.ФормаИлиОбработчик;
		Обработчик = Неопределено;
	Иначе
		Форма      = Неопределено;
		Обработчик = ПараметрыИсточника.ФормаИлиОбработчик;
	КонецЕсли;

	Если Текст <> Неопределено Тогда
		Если ТипЗнч(ПараметрыИсточника.ВладелецРеквизита) = Тип("ДанныеФормыЭлементДерева")
			Или ТипЗнч(ПараметрыИсточника.ВладелецРеквизита) = Тип("ДанныеФормыЭлементКоллекции") Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыИсточника.ВладелецРеквизита, Новый Структура(ПараметрыИсточника.ИмяРеквизита, Текст));
		Иначе
			ПараметрыИсточника.ВладелецРеквизита[ПараметрыИсточника.ИмяРеквизита] = Текст;
		КонецЕсли;

		Если Форма <> Неопределено Тогда
			Если Не Форма.Модифицированность Тогда
				Форма.Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Обработчик <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Обработчик, Текст);
	КонецЕсли;
КонецПроцедуры

Процедура ДеревоПодсистемИспользованиеПриИзменении(Форма, Элемент) Экспорт
	СтрокаДерева = Форма.Элементы.ДеревоПодсистем.ТекущиеДанные;
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Пропуск корневой строки
	Если СтрокаДерева.Приоритет = "" Тогда
		СтрокаДерева.Использование = 0;

		Возврат;
	КонецЕсли;

	Если СтрокаДерева.Использование = 2 Тогда
		СтрокаДерева.Использование = 0;
	КонецЕсли;

	СтрокаДерева.Модифицированность = Истина;
КонецПроцедуры

Процедура ДеревоПодсистемВажностьПриИзменении(Форма, Элемент) Экспорт
	СтрокаДерева = Форма.Элементы.ДеревоПодсистем.ТекущиеДанные;
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Пропуск корневой строки
	Если СтрокаДерева.Приоритет = "" Тогда
		СтрокаДерева.Важность = "";
		Возврат;
	КонецЕсли;

	Если СтрокаДерева.Важность <> "" Тогда
		СтрокаДерева.Использование = 1;
	КонецЕсли;

	СтрокаДерева.Модифицированность = Истина;
КонецПроцедуры

#Область Отчеты

Функция ПараметрыВыбораОтбора(Форма, Элемент) Экспорт
	ИдентификаторЭлемента	= Прав(Элемент.Имя, 32);

	ЭлементКД				= Форма.НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ЭлементКД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ДополнительныеНастройки = Форма.НайтиДополнительныеНастройкиЭлемента(ИдентификаторЭлемента);
	Если ДополнительныеНастройки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Результат = Новый Структура("Представление, ЗначенияДляВыбора, ЗначенияДляВыбораЗаполнены, БыстрыйВыбор, ОграничиватьВыборУказаннымиЗначениями, ОписаниеТипов, ВводСписком");
	ЗаполнитьЗначенияСвойств(Результат, ДополнительныеНастройки);

	Если ТипЗнч(ЭлементКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Значение = ЭлементКД.ПравоеЗначение;
		Условие  = ЭлементКД.ВидСравнения;
	Иначе
		Значение = ЭлементКД.Значение;
		Условие  = ?(Результат.ВводСписком, ВидСравненияКомпоновкиДанных.ВСписке, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;

	ВыборГруппИЭлементов = ВариантыОтчетовКлиентСервер.ПривестиЗначениеКТипуИспользованиеГруппИЭлементов(Условие, ДополнительныеНастройки.ВыборГруппИЭлементов);

	// Стандартные параметры формы.
	Результат.Вставить("ЗакрыватьПриВыборе",            Истина);
	Результат.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	Результат.Вставить("Отбор",                         Новый Структура);
	// Стандартные параметры формы выбора (см. Расширение управляемой формы для динамического списка).
	Результат.Вставить("ВыборГруппИЭлементов",          ВыборГруппИЭлементов);
	Результат.Вставить("МножественныйВыбор",            Ложь);
	Результат.Вставить("РежимВыбора",                   Истина);
	// Предполагаемые реквизиты.
	Результат.Вставить("РежимОткрытияОкна",             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Результат.Вставить("РазрешитьНачалоПеретаскивания", Ложь);

	Результат.Вставить("ПутьКФорме",					ДополнительныеНастройки.ФормаВыбора);

	Результат.Вставить("Значение",						Значение);
	Результат.Вставить("Отмеченные",					БазоваяПодсистемаКлиентСервер.ЗначенияСписком(Значение));
	Результат.Вставить("ПараметрыВыбора",				Новый Массив);
	Результат.Вставить("КлючУникальности",				ИдентификаторЭлемента);

	// Фиксированные параметры выбора и связи от скрытых ведущих (предопределенные в текущем контексте).
	Для Каждого ПараметрВыбора Из ДополнительныеНастройки.ПараметрыВыбора Цикл
		Если ПустаяСтрока(ПараметрВыбора.Имя) Тогда
			Продолжить;
		КонецЕсли;
		Если Результат.ВводСписком Тогда
			Результат.ПараметрыВыбора.Добавить(ПараметрВыбора);
		Иначе
			Если ВРег(Лев(ПараметрВыбора.Имя, 6)) = ВРег("Отбор.") Тогда
				Результат.Отбор.Вставить(Сред(ПараметрВыбора.Имя, 7), ПараметрВыбора.Значение);
			Иначе
				Результат.Вставить(ПараметрВыбора.Имя, ПараметрВыбора.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Динамические связи от ведущих.
	Связи = Форма.ОтключаемыеСвязи.НайтиСтроки(Новый Структура("ПодчиненныйИдентификаторВФорме", ИдентификаторЭлемента));
	Для Каждого Связь Из Связи Цикл
		Если Не ЗначениеЗаполнено(Связь.ВедущийИдентификаторВФорме) Тогда
			Продолжить;
		КонецЕсли;
		ВедущийНастройкаКД = Форма.НайтиПользовательскуюНастройкуЭлемента(Связь.ВедущийИдентификаторВФорме);
		Если Не ВедущийНастройкаКД.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ВедущийНастройкаКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗначениеВедущего		= ВедущийНастройкаКД.ПравоеЗначение;
			УсловиеВедущего			= ВедущийНастройкаКД.ВидСравнения;
		Иначе
			ЗначениеВедущего		= ВедущийНастройкаКД.Значение;
			ДополнительноВедущего	= Форма.НайтиДополнительныеНастройкиЭлемента(Связь.ВедущийИдентификаторВФорме);
			Если ДополнительноВедущего.ВводСписком Тогда
				УсловиеВедущего = ВидСравненияКомпоновкиДанных.ВСписке;
			Иначе
				УсловиеВедущего = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ЗначениеВедущего) Тогда
			Продолжить;
		КонецЕсли;
		ТипЗначенияВедущего = ТипЗнч(ЗначениеВедущего);

		Если Связь.ТипСвязи = "ПоТипу" Тогда
			Если УсловиеВедущего <> ВидСравненияКомпоновкиДанных.Равно И УсловиеВедущего <> ВидСравненияКомпоновкиДанных.ВИерархии Тогда
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(Связь.ПодчиненныйИмяПараметра) = Тип("Число") И Связь.ПодчиненныйИмяПараметра > 0 Тогда
				ТипСубконто = ВариантыОтчетовВызовСервера.ТипСубконто(ЗначениеВедущего, Связь.ПодчиненныйИмяПараметра);
				Если ТипЗнч(ТипСубконто) = Тип("ОписаниеТипов") Тогда
					ФильтрПоТипам = ТипСубконто.Типы();
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				ФильтрПоТипам = Новый Массив;
				ФильтрПоТипам.Добавить(ТипЗначенияВедущего);
			КонецЕсли;
			ВычитаемыеТипы				= Результат.ОписаниеТипов.Типы();
			ОписанияТиповПересекаются	= Ложь;
			Для Каждого ТипКоторыйНадоОставить Из ФильтрПоТипам Цикл
				Индекс = ВычитаемыеТипы.Найти(ТипКоторыйНадоОставить);
				Если Индекс <> Неопределено Тогда
					ВычитаемыеТипы.Удалить(Индекс);
					ОписанияТиповПересекаются = Истина;
				КонецЕсли;
			КонецЦикла;
			Если ОписанияТиповПересекаются Тогда
				Результат.ОписаниеТипов = Новый ОписаниеТипов(Результат.ОписаниеТипов, , ВычитаемыеТипы);
			КонецЕсли;
		ИначеЕсли Связь.ТипСвязи = "ПоМетаданным" Или Связь.ТипСвязи = "ПараметровВыбора" Тогда
			Если Не ЗначениеЗаполнено(Связь.ПодчиненныйИмяПараметра) Тогда
				Продолжить;
			КонецЕсли;
			Если Связь.ТипСвязи = "ПоМетаданным" И Не Связь.ВедущийТип.СодержитТип(ТипЗначенияВедущего) Тогда
				Продолжить;
			КонецЕсли;
			Если Результат.ВводСписком Тогда
				Результат.ПараметрыВыбора.Добавить(Новый ПараметрВыбора(Связь.ПодчиненныйИмяПараметра, ЗначениеВедущего));
			Иначе
				Если ВРег(Лев(Связь.ПодчиненныйИмяПараметра, 6)) = ВРег("Отбор.") Тогда
					Результат.Отбор.Вставить(Сред(Связь.ПодчиненныйИмяПараметра, 7), ЗначениеВедущего);
				Иначе
					Результат.Вставить(Связь.ПодчиненныйИмяПараметра, ЗначениеВедущего);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Процедура ВыбратьЗначениеПримитивногоТипа(Форма, ТипЗначения, ОписаниеТипов, ТекущееЗначение, ПредставлениеПоля, Обработчик) Экспорт
	СписокВыбора = Новый СписокЗначений;
	Если ТипЗначения = Тип("ВидДвиженияБухгалтерии") Тогда
		БазоваяПодсистемаКлиентСервер.ДополнитьМассив(СписокВыбора, ВидДвиженияБухгалтерии);
	ИначеЕсли ТипЗначения = Тип("ВидДвиженияНакопления") Тогда
		БазоваяПодсистемаКлиентСервер.ДополнитьМассив(СписокВыбора, ВидДвиженияНакопления);
	ИначеЕсли ТипЗначения = Тип("ВидПериодаРегистраРасчета") Тогда
		БазоваяПодсистемаКлиентСервер.ДополнитьМассив(СписокВыбора, ВидПериодаРегистраРасчета);
	ИначеЕсли ТипЗначения = Тип("ВидСчета") Тогда
		БазоваяПодсистемаКлиентСервер.ДополнитьМассив(СписокВыбора, ВидСчета);
	ИначеЕсли ТипЗначения = Тип("ВидТочкиМаршрутаБизнесПроцесса") Тогда
		БазоваяПодсистемаКлиентСервер.ДополнитьМассив(СписокВыбора, ВидТочкиМаршрутаБизнесПроцесса);
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		ПоказатьВводЧисла(Обработчик, ТекущееЗначение, ПредставлениеПоля, ОписаниеТипов.КвалификаторыЧисла.Разрядность, ОписаниеТипов.КвалификаторыЧисла.РазрядностьДробнойЧасти);
		Возврат;
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		ПоказатьВводСтроки(Обработчик, ТекущееЗначение, ПредставлениеПоля, ОписаниеТипов.КвалификаторыСтроки.Длина, ОписаниеТипов.КвалификаторыСтроки.Длина = 0 Или ОписаниеТипов.КвалификаторыСтроки.Длина > 100);
		Возврат;
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		ПоказатьВводДаты(Обработчик, ТекущееЗначение, ПредставлениеПоля, ОписаниеТипов.КвалификаторыДаты.ЧастиДаты);
		Возврат;
	Иначе
		ПоказатьВводЗначения(Обработчик, ТекущееЗначение, ПредставлениеПоля, ОписаниеТипов);
		Возврат;
	КонецЕсли;
	Форма.ПоказатьВыборИзМеню(Обработчик, СписокВыбора);
КонецПроцедуры

Процедура СписокКомпоновщикаНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;

	ПараметрыВыбора = ПараметрыВыбораОтбора(Форма, Элемент);
	Если ПараметрыВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыОбработчика	= Новый Структура;
	ПараметрыОбработчика.Вставить("Форма", Форма);
	ПараметрыОбработчика.Вставить("ИдентификаторЭлемента", Прав(Элемент.Имя, 32));
	Обработчик				= Новый ОписаниеОповещения("СписокКомпоновщикаЗавершениеВыбора", ЭтотОбъект, ПараметрыОбработчика);

	Блокировать = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;

	ОткрытьФорму("ОбщаяФорма.ВводЗначенийСпискомСФлажками", ПараметрыВыбора, ЭтотОбъект, , , , Обработчик, Блокировать);
КонецПроцедуры

Процедура ЗначениеКомпоновщикаНачалоВыбора(Форма, Элемент, ЗначенияДляВыбора, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;

	ПараметрыВыбора = ПараметрыВыбораОтбора(Форма, Элемент);
	Если ПараметрыВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыВыбора.Вставить("МножественныйВыбор", Ложь);

	Контекст = Новый Структура;
	Контекст.Вставить("Элемент",         Элемент);
	Контекст.Вставить("Форма",           Форма);
	Контекст.Вставить("Идентификатор",   Прав(Элемент.Имя, 32));
	Контекст.Вставить("ПараметрыВыбора", ПараметрыВыбора);

	// Полное имя формы выбора.
	// Свойство "ФормаВыбора" недоступно на клиенте даже для чтения,
	//   поэтому для хранения предустановленных имен форм выбора используется коллекция БыстрыйПоискИменОбъектовМетаданных.
	Если ЗначениеЗаполнено(ПараметрыВыбора.ПутьКФорме) Тогда
		Обработчик = Новый ОписаниеОповещения("ЗначениеКомпоновщикаЗавершениеВыбора", ЭтотОбъект, Контекст);
		ОткрытьФорму(ПараметрыВыбора.ПутьКФорме, ПараметрыВыбора, Контекст.Форма, , , , Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		// Выбор типа из списка.
		Обработчик		= Новый ОписаниеОповещения("ЗначениеКомпоновщикаПоказатьВыборСсылкиПослеВыбораТипа", ЭтотОбъект, Контекст);
		СписокВыбора	= Новый СписокЗначений;
		СписокВыбора.ЗагрузитьЗначения(ПараметрыВыбора.ОписаниеТипов.Типы());
		Если СписокВыбора.Количество() = 1 Тогда // Один тип - выбор не требуется.
			ВыполнитьОбработкуОповещения(Обработчик, СписокВыбора[0]);
		Иначе
			Форма.ПоказатьВыборИзМеню(Обработчик, СписокВыбора);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗначениеКомпоновщикаПоказатьВыборСсылкиПослеВыбораТипа(ПутьКФормеИлиЭлементСписка, Контекст) Экспорт
	Если ТипЗнч(ПутьКФормеИлиЭлементСписка) <> Тип("ЭлементСпискаЗначений") Тогда
		Возврат;
	КонецЕсли;

	Обработчик		= Новый ОписаниеОповещения("ЗначениеКомпоновщикаЗавершениеВыбора", ЭтотОбъект, Контекст);
	ПараметрыВыбора = Контекст.ПараметрыВыбора;

	Тип = ПутьКФормеИлиЭлементСписка.Значение;
	ПараметрыВыбораТипа = ВариантыОтчетовВызовСервера.ПараметрыВыбораТипа(Тип, ПараметрыВыбора);
	Если ПараметрыВыбораТипа = Неопределено Тогда
		ВыбратьЗначениеПримитивногоТипа(Контекст.Форма, Тип, ПараметрыВыбора.ОписаниеТипов, ПараметрыВыбора.Значение, ПараметрыВыбора.Представление, Обработчик);
	ИначеЕсли ПараметрыВыбораТипа.БыстрыйВыбор Тогда
		Контекст.Форма.ПоказатьВыборИзМеню(Обработчик, ПараметрыВыбораТипа.ЗначенияДляВыбора);
	Иначе
		ОткрытьФорму(ПараметрыВыбораТипа.ПутьКФорме, ПараметрыВыбора, Контекст.Форма, , , , Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

Процедура ЗначениеКомпоновщикаЗавершениеВыбора(СсылкаИлиЭлементСписка, Контекст) Экспорт
	Если ТипЗнч(СсылкаИлиЭлементСписка) = Тип("ЭлементСпискаЗначений") Тогда
		Ссылка = СсылкаИлиЭлементСписка.Значение;
	Иначе
		Ссылка = СсылкаИлиЭлементСписка;
	КонецЕсли;
	Если Не Контекст.ПараметрыВыбора.ОписаниеТипов.СодержитТип(ТипЗнч(Ссылка)) Или Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;

	Форма					= Контекст.Форма;

	ЭлементКД				= Форма.НайтиПользовательскуюНастройкуЭлемента(Контекст.Идентификатор);

	Если ТипЗнч(ЭлементКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		ЭлементКД.ПравоеЗначение = Ссылка;
	Иначе
		ЭлементКД.Значение = Ссылка;
	КонецЕсли;

	ЭлементКД.Использование = Истина; // Включение флажка.

	ОтразитьИзмененияВПодчиненных(Форма, Контекст.Идентификатор, ЭлементКД);

	Форма.ПользовательскиеНастройкиМодифицированы = Истина;
КонецПроцедуры

Процедура СписокКомпоновщикаЗавершениеВыбора(РезультатВыбора, ПараметрыОбработчика) Экспорт
	Если ТипЗнч(РезультатВыбора) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	Форма						= ПараметрыОбработчика.Форма;

	ИдентификаторЭлемента		= ПараметрыОбработчика.ИдентификаторЭлемента;

	ПользовательскаяНастройкаКД	= Форма.НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	ДополнительныеНастройки		= Форма.НайтиДополнительныеНастройкиЭлемента(ИдентификаторЭлемента);

	// Загрузка выбранных значений в 2 списка.
	СписокЗначенийВСКД = Новый СписокЗначений;
	ЗаполнятьЗначенияДляВыбора = Не ДополнительныеНастройки.ОграничиватьВыборУказаннымиЗначениями Или Не ДополнительныеНастройки.ЗначенияДляВыбораЗаполнены;
	Если ЗаполнятьЗначенияДляВыбора Тогда
		ЗначенияДляВыбора = Новый СписокЗначений;
	КонецЕсли;
	Для Каждого ЭлементСпискаВФорме Из РезультатВыбора Цикл
		ЗначениеВФорме = ЭлементСпискаВФорме.Значение;
		Если ЗаполнятьЗначенияДляВыбора И ЗначенияДляВыбора.НайтиПоЗначению(ЗначениеВФорме) = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЗначенияДляВыбора.Добавить(), ЭлементСпискаВФорме, "Значение, Представление");
		КонецЕсли;
		Если ЭлементСпискаВФорме.Пометка Тогда
			ВариантыОтчетовКлиентСервер.ДобавитьУникальноеЗначениеВСписок(СписокЗначенийВСКД, ЗначениеВФорме, ЭлементСпискаВФорме.Представление, Истина);
		КонецЕсли;
	КонецЦикла;
	Если ЗаполнятьЗначенияДляВыбора Тогда
		ДополнительныеНастройки.ЗначенияДляВыбора			= ЗначенияДляВыбора;
		ДополнительныеНастройки.ЗначенияДляВыбораЗаполнены	= Истина;
	КонецЕсли;
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.ПравоеЗначение = СписокЗначенийВСКД;
	Иначе
		ПользовательскаяНастройкаКД.Значение = СписокЗначенийВСКД;
	КонецЕсли;

	// Включение флажка Использование.
	ПользовательскаяНастройкаКД.Использование		= Истина;

	Форма.ПользовательскиеНастройкиМодифицированы	= Истина;
КонецПроцедуры

Процедура ИзменитьВидСравнения(Форма, ИдентификаторЭлемента, ОбработчикРезультата) Экспорт
	ПользовательскаяНастройкаКД = Форма.НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ПользовательскаяНастройкаКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДополнительныеНастройки = Форма.НайтиДополнительныеНастройкиЭлемента(ИдентификаторЭлемента);
	Если ДополнительныеНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИнформацияОТипах = ВариантыОтчетовКлиентСервер.АнализТипов(ДополнительныеНастройки.ОписаниеТипов, Ложь);

	Список = Новый СписокЗначений;

	Если ИнформацияОТипах.ОграниченнойДлины Тогда
		Список.Добавить(ВидСравненияКомпоновкиДанных.Равно);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеРавно);

		Список.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеВСписке);

		Если ИнформацияОТипах.СодержитОбъектныеТипы Тогда
			Список.Добавить(ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
			Список.Добавить(ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии);

			Список.Добавить(ВидСравненияКомпоновкиДанных.ВИерархии);
			Список.Добавить(ВидСравненияКомпоновкиДанных.НеВИерархии);
		КонецЕсли;

		Если ИнформацияОТипах.КоличествоПримитивныхТипов > 0 Тогда
			Список.Добавить(ВидСравненияКомпоновкиДанных.Меньше);
			Список.Добавить(ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);

			Список.Добавить(ВидСравненияКомпоновкиДанных.Больше);
			Список.Добавить(ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		КонецЕсли;
	КонецЕсли;

	Если ИнформацияОТипах.СодержитТипСтрока Тогда
		Список.Добавить(ВидСравненияКомпоновкиДанных.Содержит);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеСодержит);

		Список.Добавить(ВидСравненияКомпоновкиДанных.Подобно);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеПодобно);

		Список.Добавить(ВидСравненияКомпоновкиДанных.НачинаетсяС);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеНачинаетсяС);
	КонецЕсли;

	Если ИнформацияОТипах.ОграниченнойДлины Тогда
		Список.Добавить(ВидСравненияКомпоновкиДанных.Заполнено);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеЗаполнено);
	КонецЕсли;

	ТекущийЭлемент = Список.НайтиПоЗначению(ПользовательскаяНастройкаКД.ВидСравнения);

	Контекст = Новый Структура;
	Контекст.Вставить("Форма", Форма);
	Контекст.Вставить("ИдентификаторЭлемента", ИдентификаторЭлемента);
	Контекст.Вставить("ОбработчикРезультата", ОбработчикРезультата);

	Обработчик		= Новый ОписаниеОповещения("ИзменитьВидСравненияЗавершение", ЭтотОбъект, Контекст);
	ФормаЗаголовок	= СтрШаблон("Условие отбора поля ""%1""", ДополнительныеНастройки.Представление);

	Список.ПоказатьВыборЭлемента(Обработчик, ФормаЗаголовок, ТекущийЭлемент);
КонецПроцедуры

Процедура ИзменитьВидСравненияЗавершение(ЭлементСписка, Контекст) Экспорт
	Если ЭлементСписка = Неопределено Тогда
		Результат									= Неопределено;
	Иначе
		Результат									= ЭлементСписка.Значение;
		ПользовательскаяНастройкаКД					= Контекст.Форма.НайтиПользовательскуюНастройкуЭлемента(Контекст.ИдентификаторЭлемента);
		ПользовательскаяНастройкаКД.ВидСравнения 	= Результат;
	КонецЕсли;

	Если Контекст.ОбработчикРезультата <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикРезультата, Результат);
	КонецЕсли;
КонецПроцедуры

Процедура ВыбратьПериод(Форма, КнопкаВыбораИмя) Экспорт
	ЗначениеИмя				= СтрЗаменить(КнопкаВыбораИмя, "_КнопкаВыбора_", "_Значение_");
	ИдентификаторЭлемента	= Прав(КнопкаВыбораИмя, 32);

	Значение = Форма[ЗначениеИмя];

	Контекст = Новый Структура;
	Контекст.Вставить("Форма", Форма);
	Контекст.Вставить("ЗначениеИмя", ЗначениеИмя);
	Контекст.Вставить("ИдентификаторЭлемента", ИдентификаторЭлемента);
	Обработчик = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект, Контекст);

	Диалог = Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период = Значение;
	Диалог.Показать(Обработчик);
КонецПроцедуры

Процедура ВыбратьПериодЗавершение(Период, Контекст) Экспорт
	Если ТипЗнч(Период) <> Тип("СтандартныйПериод") Тогда
		Возврат;
	КонецЕсли;

	Контекст.Форма[Контекст.ЗначениеИмя] = Период;

	ЭлементКД = Контекст.Форма.НайтиПользовательскуюНастройкуЭлемента(Контекст.ИдентификаторЭлемента);
	Если ТипЗнч(ЭлементКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		ЭлементКД.ПравоеЗначение = Период;
	ИначеЕсли ТипЗнч(ЭлементКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ЭлементКД.Значение = Период;
	КонецЕсли;
	ЭлементКД.Использование = Истина;

	Контекст.Форма.ПользовательскиеНастройкиМодифицированы = Истина;
КонецПроцедуры

Процедура ОтразитьИзмененияВПодчиненных(Форма, ИдентификаторЭлемента, НастройкаКомпоновкиДанныхВедущего) Экспорт
	// Очистка значений при изменении значения.
	Найденные = Форма.ОтключаемыеСвязи.НайтиСтроки(Новый Структура("ВедущийИдентификаторВФорме", ИдентификаторЭлемента));
	Для Каждого Связь Из Найденные Цикл
		Если Не ЗначениеЗаполнено(Связь.ПодчиненныйИдентификаторВФорме) Тогда
			Продолжить;
		КонецЕсли;
		Если Связь.ТипСвязи = "ПараметровВыбора" Тогда
			Если Связь.ПодчиненныйДействие = РежимИзмененияСвязанногоЗначения.Очищать Тогда
				ОчиститьЗначениеПодчиненного(Форма, НастройкаКомпоновкиДанныхВедущего, Связь.ПодчиненныйИдентификаторВФорме);
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОчиститьЗначениеПодчиненного(Форма, НастройкаКомпоновкиДанныхВедущего, ИдентификаторПодчиненногоВФорме)
	ПодчиненныйНастройкаКД		= Форма.НайтиПользовательскуюНастройкуЭлемента(ИдентификаторПодчиненногоВФорме);
	ПодчиненныйДополнительно	= Форма.НайтиДополнительныеНастройкиЭлемента(ИдентификаторПодчиненногоВФорме);
	Если ПодчиненныйДополнительно = Неопределено Или ПодчиненныйНастройкаКД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если НастройкаКомпоновкиДанныхВедущего.Использование Тогда
		Если ПодчиненныйДополнительно.ВводСписком Тогда
			Если ТипЗнч(ПодчиненныйНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				ПодчиненныйНастройкаКД.Значение = Новый СписокЗначений;
			ИначеЕсли ТипЗнч(ПодчиненныйНастройкаКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				ПодчиненныйНастройкаКД.ПравоеЗначение = Новый СписокЗначений;
			КонецЕсли;
		Иначе
			Если ТипЗнч(ПодчиненныйНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				ПодчиненныйНастройкаКД.Значение = Неопределено;
			ИначеЕсли ТипЗнч(ПодчиненныйНастройкаКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				ПодчиненныйНастройкаКД.ПравоеЗначение = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ПодчиненныйДополнительно.БыстрыйВыбор И Не ПодчиненныйДополнительно.ОграничиватьВыборУказаннымиЗначениями Тогда
		ПодчиненныйДополнительно.ЗначенияДляВыбораЗаполнены = Ложь;
		ПодчиненныйДополнительно.ЗначенияДляВыбора.Очистить();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
