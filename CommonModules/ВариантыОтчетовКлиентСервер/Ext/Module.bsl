////////////////////////////////////////////////////////////////////////////////
// Подсистема "Варианты отчетов"
//
////////////////////////////////////////////////////////////////////////////////

// Превращает тип отчета в строковый идентификатор.
Функция ТипОтчетаСтрокой(Знач ТипОтчета, Знач Отчет = Неопределено) Экспорт
	ТипТипаОтчета = ТипЗнч(ТипОтчета);
	Если ТипТипаОтчета = Тип("Строка") Тогда
		Возврат ТипОтчета;
	ИначеЕсли ТипТипаОтчета = Тип("ПеречислениеСсылка.ТипыОтчетов") Тогда
		Если ТипОтчета = ПредопределенноеЗначение("Перечисление.ТипыОтчетов.Внутренний") Тогда
			Возврат "Внутренний";
		ИначеЕсли ТипОтчета = ПредопределенноеЗначение("Перечисление.ТипыОтчетов.Расширение") Тогда
			Возврат "Расширение";
		ИначеЕсли ТипОтчета = ПредопределенноеЗначение("Перечисление.ТипыОтчетов.Дополнительный") Тогда
			Возврат "Дополнительный";
		ИначеЕсли ТипОтчета = ПредопределенноеЗначение("Перечисление.ТипыОтчетов.Внешний") Тогда
			Возврат "Внешний";
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Если ТипТипаОтчета <> Тип("Тип") Тогда
			ТипОтчета = ТипЗнч(Отчет);
		КонецЕсли;
		Если ТипОтчета = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
			Возврат "Внутренний";
		ИначеЕсли ТипОтчета = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
			Возврат "Расширение";
		ИначеЕсли ТипОтчета = Тип("Строка") Тогда
			Возврат "Внешний";
		Иначе
			Возврат "Дополнительный";
		КонецЕсли;
	КонецЕсли;
КонецФункции

#Область Отчеты

// Настройки формы отчета по умолчанию.
//
// Возвращаемое значение:
//   Структура - Настройки формы отчета:
//
//       * ФормироватьСразу - Булево - Значение по умолчанию для флажка "Формировать сразу" в форме отчета.
//           Когда флажок включен, то отчет будет формироваться:
//             - После открытия;
//             - После выбора пользовательских настроек;
//             - После выбора другого варианта отчета.
//
//       * ВыводитьСуммуВыделенныхЯчеек - Булево - Если Истина, то в отчете будет выводиться поле автосуммы.
//
//       * РазрешеноИзменятьСтруктуру - Булево - Если Ложь, то в настройках отчета будет скрыта вкладка "Структура".
//           Если Истина, то вкладка "Структура" показывается для отчетов на СКД: в расширенном режиме,
//           а также в простом режиме, если в пользовательские настройки выведены флажки использования группировок.
//
//       * РазрешеноИзменятьВарианты - Булево - Если Ложь, то блокируются кнопки изменения вариантов этого отчета.
//           Если у текущего пользователя нет прав "СохранениеДанныхПользователя" и "Добавление" справочника ВариантыОтчетов,
//           то принудительно устанавливается в Ложь.
//
//       * Печать - Структура - Параметры печати табличного документа "по умолчанию".
//           ** ПолеСверху - Число - Отступ сверху при печати (в миллиметрах).
//           ** ПолеСлева  - Число - Отступ слева  при печати (в миллиметрах).
//           ** ПолеСнизу  - Число - Отступ снизу  при печати (в миллиметрах).
//           ** ПолеСправа - Число - Отступ справа при печати (в миллиметрах).
//           ** ОриентацияСтраницы - ОриентацияСтраницы - "Портрет" или "Ландшафт".
//           ** АвтоМасштаб - Булево - Автоматически подгонять масштаб под размер страницы.
//           ** МасштабПечати - Число - Масштаб изображения (в процентах).
//
//       * События - Структура - События, для которых определены обработчики в модуле объекта отчета.
//
//           ** ПриСозданииНаСервере - Булево
//           ** ПередЗагрузкойНастроекВКомпоновщик - Булево
//           ** ПередЗагрузкойВариантаНаСервере - Булево
//           ** ПриЗагрузкеВариантаНаСервере - Булево
//           ** ПриЗагрузкеПользовательскихНастроекНаСервере - Булево
//           ** ПередЗаполнениемПанелиБыстрыхНастроек - Булево
//           ** ПослеЗаполненияПанелиБыстрыхНастроек - Булево
//           ** ПриОпределенииПараметровВыбора - Булево
//           ** ПриОпределенииИспользуемыхТаблиц - Булево
//           ** ДополнитьСвязиОбъектовМетаданных - Булево
//
Функция ПолучитьНастройкиОтчетаПоУмолчанию() Экспорт
	Настройки = Новый Структура;
	Настройки.Вставить("ФормироватьСразу",				Ложь);
	Настройки.Вставить("ВыводитьСуммуВыделенныхЯчеек",	Истина);
	Настройки.Вставить("РазрешеноИзменятьСтруктуру",	Истина);
	Настройки.Вставить("РазрешеноИзменятьВарианты",		Истина);

	Печать = Новый Структура;
	Печать.Вставить("ПолеСверху",			10);
	Печать.Вставить("ПолеСлева",			10);
	Печать.Вставить("ПолеСнизу",			10);
	Печать.Вставить("ПолеСправа",			10);
	Печать.Вставить("ОриентацияСтраницы",	ОриентацияСтраницы.Портрет);
	Печать.Вставить("АвтоМасштаб",			Истина);
	Печать.Вставить("МасштабПечати",		Неопределено);

	Настройки.Вставить("Печать", Печать);

	События = Новый Структура;
	События.Вставить("ПриСозданииНаСервере",							Ложь);
	События.Вставить("ПередЗагрузкойНастроекВКомпоновщик",				Ложь);
	События.Вставить("ПередЗагрузкойВариантаНаСервере",					Ложь);
	События.Вставить("ПриЗагрузкеВариантаНаСервере",					Ложь);
	События.Вставить("ПриЗагрузкеПользовательскихНастроекНаСервере",	Ложь);
	События.Вставить("ПередЗаполнениемПанелиБыстрыхНастроек",			Ложь);
	События.Вставить("ПослеЗаполненияПанелиБыстрыхНастроек",			Ложь);
	События.Вставить("ПриОпределенииПараметровВыбора",					Ложь);
	События.Вставить("ПриОпределенииИспользуемыхТаблиц",				Ложь);
	События.Вставить("ДополнитьСвязиОбъектовМетаданных",				Ложь);

	Настройки.Вставить("События", События);

	Возврат Настройки;
КонецФункции

Функция ИмяВПредставление(Знач ИсходнаяСтрока) Экспорт
	Результат		= "";
	ЭтоПервыйСимвол	= Истина;
	Для НомерСимвола = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		КодСимвола	= КодСимвола(ИсходнаяСтрока, НомерСимвола);
		Символ		= Символ(КодСимвола);
		Если ЭтоПервыйСимвол Тогда
			Если Не ПустаяСтрока(Символ) Тогда
				Результат		= Результат + Символ;
				ЭтоПервыйСимвол = Ложь;
			КонецЕсли;
		Иначе
			Если (КодСимвола >= 65 И КодСимвола <= 90)
				Или (КодСимвола >= 1040 И КодСимвола <= 1071) Тогда
				Символ = " " + НРег(Символ);
			ИначеЕсли Символ = "_" Тогда
				Символ = " ";
			КонецЕсли;
			Результат = Результат + Символ;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

// Загружает новые настройки в компоновщик без сброса пользовательских настроек.
//
// Параметры:
//   КомпоновщикНастроекКД - КомпоновщикНастроекКомпоновкиДанных - Куда надо загрузить настройки.
//   НастройкиКД - НастройкиКомпоновкиДанных - Загружаемые настройки варианта.
//   ПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных, Неопределено - Необязательный.
//       Загружаемые пользовательские настройки. Если не указан, то пользовательские настройки не загружаются.
//
Функция ЗагрузитьНастройки(КомпоновщикНастроекКД, НастройкиКД, ПользовательскиеНастройкиКД = Неопределено) Экспорт
	НастройкиЗагружены = (ТипЗнч(НастройкиКД) = Тип("НастройкиКомпоновкиДанных") И НастройкиКД <> КомпоновщикНастроекКД.Настройки);
	Если НастройкиЗагружены Тогда
		Если ТипЗнч(ПользовательскиеНастройкиКД) <> Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
			ПользовательскиеНастройкиКД = КомпоновщикНастроекКД.ПользовательскиеНастройки;
		КонецЕсли;
		КомпоновщикНастроекКД.ЗагрузитьНастройки(НастройкиКД);
	КонецЕсли;
	Если ТипЗнч(ПользовательскиеНастройкиКД) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") И ПользовательскиеНастройкиКД <> КомпоновщикНастроекКД.ПользовательскиеНастройки Тогда
		КомпоновщикНастроекКД.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройкиКД);
	КонецЕсли;

	Возврат НастройкиЗагружены;
КонецФункции

// Находит общую настройку по идентификатору пользовательской настройки.
//
// Параметры:
//   Настройки - НастройкиКомпоновкиДанных - Коллекции настроек.
//   ИдентификаторПользовательскойНастройки - Строка -
//
Функция ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки, ИдентификаторПользовательскойНастройки, Иерархия = Неопределено) Экспорт
	Если Иерархия <> Неопределено Тогда
		Иерархия.Добавить(Настройки);
	КонецЕсли;

	ТипНастройки = ТипЗнч(Настройки);

	Если ТипНастройки <> Тип("НастройкиКомпоновкиДанных") Тогда
		Если Настройки.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			Возврат Настройки;
		ИначеЕсли ТипНастройки = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
			Возврат ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Настройки, ИдентификаторПользовательскойНастройки, Иерархия);
		ИначеЕсли ТипНастройки = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
			ИЛИ ТипНастройки = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных")
			ИЛИ ТипНастройки = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда

			Для Каждого ВложенныйЭлемент Из Настройки Цикл
				РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(ВложенныйЭлемент, ИдентификаторПользовательскойНастройки, Иерархия);
				Если РезультатПоиска <> Неопределено Тогда
					Возврат РезультатПоиска;
				КонецЕсли;
			КонецЦикла;

			Если Иерархия <> Неопределено Тогда
				Иерархия.Удалить(Иерархия.ВГраница());
			КонецЕсли;

			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

	Если Настройки.Выбор.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
		Возврат Настройки.Выбор;
	ИначеЕсли Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
		Возврат Настройки.УсловноеОформление;
	КонецЕсли;

	Если ТипНастройки <> Тип("ТаблицаКомпоновкиДанных") И ТипНастройки <> Тип("ДиаграммаКомпоновкиДанных") Тогда
		Если Настройки.Отбор.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			Возврат Настройки.Отбор;
		ИначеЕсли Настройки.Порядок.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			Возврат Настройки.Порядок;
		КонецЕсли;
	КонецЕсли;

	Если ТипНастройки = Тип("НастройкиКомпоновкиДанных") Тогда
		РезультатПоиска = НайтиЭлементНастройки(Настройки.ПараметрыДанных, ИдентификаторПользовательскойНастройки);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	КонецЕсли;

	Если ТипНастройки <> Тип("ТаблицаКомпоновкиДанных") И ТипНастройки <> Тип("ДиаграммаКомпоновкиДанных") Тогда
		РезультатПоиска = НайтиЭлементНастройки(Настройки.Отбор, ИдентификаторПользовательскойНастройки);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	КонецЕсли;

	РезультатПоиска = НайтиЭлементНастройки(Настройки.УсловноеОформление, ИдентификаторПользовательскойНастройки);
	Если РезультатПоиска <> Неопределено Тогда
		Возврат РезультатПоиска;
	КонецЕсли;

	Если ТипНастройки = Тип("ТаблицаКомпоновкиДанных") Тогда
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Строки, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;

		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Колонки, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	ИначеЕсли ТипНастройки = Тип("ДиаграммаКомпоновкиДанных") Тогда
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Точки, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;

		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Серии, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	Иначе
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Структура, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	КонецЕсли;

	Если Иерархия <> Неопределено Тогда
		Иерархия.Удалить(Иерархия.ВГраница());
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Находит общую настройку компоновки данных по идентификатору.
Функция НайтиЭлементНастройки(ЭлементНастройки, ИдентификаторПользовательскойНастройки)
	// Поиск элемента с заданным значением свойства ИдентификаторПользовательскойНастройки (ИПН).

	МассивГрупп = Новый Массив;
	МассивГрупп.Добавить(ЭлементНастройки.Элементы);

	Пока МассивГрупп.Количество() > 0 Цикл
		КоллекцияЭлементов = МассивГрупп.Получить(0);
		МассивГрупп.Удалить(0);

		Для Каждого ПодчиненныйЭлемент Из КоллекцияЭлементов Цикл
			Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
				// Не содержит ИПН; Коллекция вложенных элементов не содержит ИПН.
			ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
				// Не содержит ИПН; Коллекция вложенных элементов может содержать ИПН.
				МассивГрупп.Добавить(ПодчиненныйЭлемент.ЗначенияВложенныхПараметров);
			ИначеЕсли ПодчиненныйЭлемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
				// Найден нужный элемент.
				Возврат ПодчиненныйЭлемент;
			Иначе
				// Содержит ИПН; Коллекция вложенных элементов может содержать ИПН.
				Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
					МассивГрупп.Добавить(ПодчиненныйЭлемент.Элементы);
				ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					МассивГрупп.Добавить(ПодчиненныйЭлемент.ЗначенияВложенныхПараметров);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

// Находит доступную настройку для отбора или параметра.
//
// Параметры:
//   НастройкиКД - НастройкиКомпоновкиДанных - Коллекции настроек.
//   ЭлементКД - ЭлементОтбораКомпоновкиДанных, ЗначениеПараметраНастроекКомпоновкиДанных,
//       НастройкиВложенногоОбъектаКомпоновкиДанных - Значение элемента настройки.
//
// Возвращаемое значение:
//   ДоступноеПолеКомпоновкиДанных, ДоступныйПараметрКомпоновкиДанных,
//       ДоступныйОбъектНастройкиКомпоновкиДанных - Найденная доступная настройка.
//   Неопределено - Если доступная настройка не найдена.
//
Функция НайтиДоступнуюНастройку(НастройкиКД, ЭлементКД) Экспорт
	Тип = ТипЗнч(ЭлементКД);
	Если Тип = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Возврат НайтиДоступноеПолеКД(НастройкиКД, ЭлементКД.ЛевоеЗначение);
	ИначеЕсли Тип = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		Возврат НайтиДоступныйПараметрКД(НастройкиКД, ЭлементКД.Параметр);
	ИначеЕсли Тип = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат НастройкиКД.ДоступныеОбъекты.Элементы.Найти(ЭлементКД.ИдентификаторОбъекта);
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Находит доступную настройку поля компоновки данных.
//
// Параметры:
//   НастройкиКД - НастройкиКомпоновкиДанных - Коллекции настроек.
//   Поле - Строка, ПолеКомпоновкиДанных - Имя поля.
//
// Возвращаемое значение:
//   Неопределено - Когда доступная настройка поля не найдена.
//   ДоступноеПолеКомпоновкиДанных - Доступная настройка для поля.
//
Функция НайтиДоступноеПолеКД(НастройкиКД, ПолеКД)
	Если ПолеКД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ДоступнаяНастройка = НастройкиКД.ДоступныеПоляОтбора.НайтиПоле(ПолеКД);
	Если ДоступнаяНастройка <> Неопределено Тогда
		Возврат ДоступнаяНастройка;
	КонецЕсли;

	МассивСтруктур = Новый Массив;
	МассивСтруктур.Добавить(НастройкиКД.Структура);
	Пока МассивСтруктур.Количество() > 0 Цикл
		СтруктураКД = МассивСтруктур[0];
		МассивСтруктур.Удалить(0);

		Для Каждого ЭлементСтруктурыКД Из СтруктураКД Цикл
			Если ТипЗнч(ЭлементСтруктурыКД) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
				ДоступнаяНастройка = ЭлементСтруктурыКД.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеКД);
				Если ДоступнаяНастройка <> Неопределено Тогда
					Возврат ДоступнаяНастройка;
				КонецЕсли;

				МассивСтруктур.Добавить(ЭлементСтруктурыКД.Настройки.Структура);
			ИначеЕсли ТипЗнч(ЭлементСтруктурыКД) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				ДоступнаяНастройка = ЭлементСтруктурыКД.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеКД);
				Если ДоступнаяНастройка <> Неопределено Тогда
					Возврат ДоступнаяНастройка;
				КонецЕсли;

				МассивСтруктур.Добавить(ЭлементСтруктурыКД.Структура);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

// Находит доступную настройку параметра компоновки данных.
//
// Параметры:
//   НастройкиКД - НастройкиКомпоновкиДанных - Коллекции настроек.
//   ПараметрКД - ПараметрКомпоновкиДанных - Имя параметра.
//
// Возвращаемое значение:
//   ДоступныйПараметрКомпоновкиДанных, Неопределено - Доступная настройка для параметра.
//
Функция НайтиДоступныйПараметрКД(НастройкиКД, ПараметрКД)
	Если ПараметрКД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если НастройкиКД.ПараметрыДанных.ДоступныеПараметры <> Неопределено Тогда
		// Настройки, которым принадлежат параметры данных, связаны с источником доступных настроек.
		ДоступнаяНастройка = НастройкиКД.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(ПараметрКД);
		Если ДоступнаяНастройка <> Неопределено Тогда
			Возврат ДоступнаяНастройка;
		КонецЕсли;
	КонецЕсли;

	МассивСтруктур = Новый Массив;
	МассивСтруктур.Добавить(НастройкиКД.Структура);
	Пока МассивСтруктур.Количество() > 0 Цикл
		СтруктураКД = МассивСтруктур[0];
		МассивСтруктур.Удалить(0);

		Для Каждого ЭлементСтруктурыКД Из СтруктураКД Цикл
			Если ТипЗнч(ЭлементСтруктурыКД) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
				Если ЭлементСтруктурыКД.Настройки.ПараметрыДанных.ДоступныеПараметры <> Неопределено Тогда
					// Настройки, которым принадлежат параметры данных, связаны с источником доступных настроек.
					ДоступнаяНастройка = ЭлементСтруктурыКД.Настройки.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(ПараметрКД);
					Если ДоступнаяНастройка <> Неопределено Тогда
						Возврат ДоступнаяНастройка;
					КонецЕсли;
				КонецЕсли;

				МассивСтруктур.Добавить(ЭлементСтруктурыКД.Настройки.Структура);
			ИначеЕсли ТипЗнч(ЭлементСтруктурыКД) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				МассивСтруктур.Добавить(ЭлементСтруктурыКД.Структура);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

Функция ТипНастройкиСтрокой(Тип) Экспорт
	Если Тип = Тип("НастройкиКомпоновкиДанных") Тогда
		Возврат "Настройки";
	ИначеЕсли Тип = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат "НастройкиВложенногоОбъекта";

	ИначеЕсли Тип = Тип("ОтборКомпоновкиДанных") Тогда
		Возврат "Отбор";
	ИначеЕсли Тип = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Возврат "ЭлементОтбора";
	ИначеЕсли Тип = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		Возврат "ГруппаЭлементовОтбора";

	ИначеЕсли Тип = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		Возврат "ЗначениеПараметраНастроек";

	ИначеЕсли Тип = Тип("ГруппировкаКомпоновкиДанных") Тогда
		Возврат "Группировка";
	ИначеЕсли Тип = Тип("ПоляГруппировкиКомпоновкиДанных") Тогда
		Возврат "ПоляГруппировки";
	ИначеЕсли Тип = Тип("КоллекцияПолейГруппировкиКомпоновкиДанных") Тогда
		Возврат "КоллекцияПолейГруппировки";
	ИначеЕсли Тип = Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
		Возврат "ПолеГруппировки";
	ИначеЕсли Тип = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
		Возврат "АвтоПолеГруппировки";

	ИначеЕсли Тип = Тип("ВыбранныеПоляКомпоновкиДанных") Тогда
		Возврат "ВыбранныеПоля";
	ИначеЕсли Тип = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
		Возврат "ВыбранноеПоле";
	ИначеЕсли Тип = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
		Возврат "ГруппаВыбранныхПолей";
	ИначеЕсли Тип = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
		Возврат "АвтоВыбранноеПоле";

	ИначеЕсли Тип = Тип("ПорядокКомпоновкиДанных") Тогда
		Возврат "Порядок";
	ИначеЕсли Тип = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
		Возврат "ЭлементПорядка";
	ИначеЕсли Тип = Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда
		Возврат "АвтоЭлементПорядка";

	ИначеЕсли Тип = Тип("УсловноеОформлениеКомпоновкиДанных") Тогда
		Возврат "УсловноеОформление";
	ИначеЕсли Тип = Тип("ЭлементУсловногоОформленияКомпоновкиДанных") Тогда
		Возврат "ЭлементУсловногоОформления";

	ИначеЕсли Тип = Тип("СтруктураНастроекКомпоновкиДанных") Тогда
		Возврат "СтруктураНастроек";
	ИначеЕсли Тип = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
		Возврат "КоллекцияЭлементовСтруктурыНастроек";

	ИначеЕсли Тип = Тип("ТаблицаКомпоновкиДанных") Тогда
		Возврат "Таблица";
	ИначеЕсли Тип = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		Возврат "ГруппировкаТаблицы";
	ИначеЕсли Тип = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
		Возврат "КоллекцияЭлементовСтруктурыТаблицы";

	ИначеЕсли Тип = Тип("ДиаграммаКомпоновкиДанных") Тогда
		Возврат "Диаграмма";
	ИначеЕсли Тип = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		Возврат "ГруппировкаДиаграммы";
	ИначеЕсли Тип = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
		Возврат "КоллекцияЭлементовСтруктурыДиаграммы";

	ИначеЕсли Тип = Тип("ЗначенияПараметровДанныхКомпоновкиДанных") Тогда
		Возврат "ЗначенияПараметровДанных";

	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Функция ПредставлениеЭлементаУсловногоОформления(ЭлементКД, НастройкаВариантаКД, Состояние) Экспорт
	ПредставлениеОформления = ПредставлениеОформления(ЭлементКД.Оформление);
	Если ПредставлениеОформления = "" Тогда
		ПредставлениеОформления = "Не оформлять";
	КонецЕсли;
	ДоступныСведенияИзВарианта = (НастройкаВариантаКД <> Неопределено И НастройкаВариантаКД <> ЭлементКД);

	ПредставлениеПолей = ПредставлениеОформляемыхПолей(ЭлементКД.Поля, Состояние);
	Если ПредставлениеПолей = "" И ДоступныСведенияИзВарианта Тогда
		ПредставлениеПолей = ПредставлениеОформляемыхПолей(НастройкаВариантаКД.Поля, Состояние);
	КонецЕсли;
	Если ПредставлениеПолей = "" Тогда
		ПредставлениеПолей = "Все поля";
	Иначе
		ПредставлениеПолей = "Поля: " + ПредставлениеПолей;
	КонецЕсли;

	ПредставлениеОтбора = ПредставлениеОтбора(ЭлементКД.Отбор, ЭлементКД.Отбор.Элементы, Состояние);
	Если ПредставлениеОтбора = "" И ДоступныСведенияИзВарианта Тогда
		ПредставлениеОтбора = ПредставлениеОтбора(НастройкаВариантаКД.Отбор, НастройкаВариантаКД.Отбор.Элементы, Состояние);
	КонецЕсли;
	Если ПредставлениеОтбора = "" Тогда
		Разделитель = "";
	Иначе
		Разделитель = "; ";
		ПредставлениеОтбора = "Условие: " + ПредставлениеОтбора;
	КонецЕсли;

	Возврат ПредставлениеОформления + " (" + ПредставлениеПолей + Разделитель + ПредставлениеОтбора + ")";
КонецФункции

Функция ПредставлениеОформления(ОформлениеКД)
	Представление = "";
	Для Каждого ЭлементКД Из ОформлениеКД.Элементы Цикл
		Если ЭлементКД.Использование Тогда
			ДоступныйПараметрКД = ОформлениеКД.ДоступныеПараметры.НайтиПараметр(ЭлементКД.Параметр);
			Если ДоступныйПараметрКД <> Неопределено И ЗначениеЗаполнено(ДоступныйПараметрКД.Заголовок) Тогда
				ПредставлениеКлюча = ДоступныйПараметрКД.Заголовок;
			Иначе
				ПредставлениеКлюча = Строка(ЭлементКД.Параметр);
			КонецЕсли;

			Если ТипЗнч(ЭлементКД.Значение) = Тип("Цвет") Тогда
				ПредставлениеЗначения = ПредставлениеЦвета(ЭлементКД.Значение);
			Иначе
				ПредставлениеЗначения = Строка(ЭлементКД.Значение);
			КонецЕсли;

			Представление = Представление + ?(Представление = "", "", ", ") + ПредставлениеКлюча + ?(ПредставлениеЗначения = "", "", ": " + ПредставлениеЗначения);
		КонецЕсли;
	КонецЦикла;

	Возврат Представление;
КонецФункции

Функция ПредставлениеЦвета(Цвет)
	Если Цвет.Вид = ВидЦвета.ЭлементСтиля Тогда
		Представление = Строка(Цвет);
		Представление = Сред(Представление, СтрНайти(Представление, ":")+1);
		Представление = ИмяВПредставление(Представление);
	ИначеЕсли Цвет.Вид = ВидЦвета.WebЦвет
		Или Цвет.Вид = ВидЦвета.WindowsЦвет Тогда
		Представление = БазоваяПодсистемаКлиентСервер.СтрЛевДоСимвола(Строка(Цвет), " (");
	ИначеЕсли Цвет.Вид = ВидЦвета.Абсолютный Тогда
		Представление = Строка(Цвет);
		Если Представление = "0, 0, 0" Тогда
			Представление = "Черный";
		ИначеЕсли Представление = "255, 255, 255" Тогда
			Представление = "Белый";
		КонецЕсли;
	ИначеЕсли Цвет.Вид = ВидЦвета.АвтоЦвет Тогда
		Представление = "Авто";
	Иначе
		Представление = "";
	КонецЕсли;

	Возврат Представление;
КонецФункции

Функция ПредставлениеОформляемыхПолей(ОформляемыеПоляКД, Состояние)
	Представление = "";

	Для Каждого ОформляемоеПолеКД Из ОформляемыеПоляКД.Элементы Цикл
		Если Не ОформляемоеПолеКД.Использование Тогда
			Продолжить;
		КонецЕсли;

		ДоступноеПолеКД = ОформляемыеПоляКД.ДоступныеПоляОформляемыхПолей.НайтиПоле(ОформляемоеПолеКД.Поле);
		Если ДоступноеПолеКД = Неопределено Тогда
			Состояние = "ПометкаУдаления";
			ПредставлениеПоля = Строка(ОформляемоеПолеКД.Поле);
		Иначе
			Если ЗначениеЗаполнено(ДоступноеПолеКД.Заголовок) Тогда
				ПредставлениеПоля = ДоступноеПолеКД.Заголовок;
			Иначе
				ПредставлениеПоля = Строка(ОформляемоеПолеКД.Поле);
			КонецЕсли;
		КонецЕсли;
		Представление = Представление + ?(Представление = "", "", ", ") + ПредставлениеПоля;

	КонецЦикла;

	Возврат Представление;
КонецФункции

Функция ПредставлениеОтбора(УзелКД, НаборСтрокКД, Состояние)
	Представление = "";

	Для Каждого ЭлементКД Из НаборСтрокКД Цикл
		Если Не ЭлементКД.Использование Тогда
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(ЭлементКД) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ПредставлениеГруппы		= Строка(ЭлементКД.ТипГруппы);
			ПредставлениеВложенных	= ПредставлениеОтбора(УзелКД, ЭлементКД.Элементы, Состояние);
			Если ПредставлениеВложенных = "" Тогда
				Продолжить;
			КонецЕсли;
			ПредставлениеЭлемента = ПредставлениеГруппы + "(" + ПредставлениеВложенных + ")";
		ИначеЕсли ТипЗнч(ЭлементКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ДоступноеПолеОтбораКД = УзелКД.ДоступныеПоляОтбора.НайтиПоле(ЭлементКД.ЛевоеЗначение);
			Если ДоступноеПолеОтбораКД = Неопределено Тогда
				Состояние			= "ПометкаУдаления";
				ПредставлениеПоля	= Строка(ЭлементКД.ЛевоеЗначение);
			Иначе
				Если ЗначениеЗаполнено(ДоступноеПолеОтбораКД.Заголовок) Тогда
					ПредставлениеПоля = ДоступноеПолеОтбораКД.Заголовок;
				Иначе
					ПредставлениеПоля = Строка(ЭлементКД.ЛевоеЗначение);
				КонецЕсли;
			КонецЕсли;

			ПредставлениеЗначения = Строка(ЭлементКД.ПравоеЗначение);

			Если ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				ПредставлениеУсловия = "=";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
				ПредставлениеУсловия = "<>";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
				ПредставлениеУсловия = ">";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
				ПредставлениеУсловия = ">=";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
				ПредставлениеУсловия = "<";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
				ПредставлениеУсловия = "<=";

			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
				ПредставлениеУсловия = "В группе";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
				ПредставлениеУсловия = "Не в группе";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				ПредставлениеУсловия = "В списке";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
				ПредставлениеУсловия = "Не в списке";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
				ПредставлениеУсловия = "В списке включая подчиненные";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
				ПредставлениеУсловия = "Не в списке включая подчиненные";

			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда
				ПредставлениеУсловия = "Содержит";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
				ПредставлениеУсловия = "Не содержит";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Подобно Тогда
				ПредставлениеУсловия = "Соответствует шаблону";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеПодобно Тогда
				ПредставлениеУсловия = "Не соответствует шаблону";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НачинаетсяС Тогда
				ПредставлениеУсловия = "Начинается с";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеНачинаетсяС Тогда
				ПредставлениеУсловия = "Не начинается с";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
				ПредставлениеУсловия = "Заполнено";
				ПредставлениеЗначения = "";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
				ПредставлениеУсловия = "Не заполнено";
				ПредставлениеЗначения = "";
			КонецЕсли;

			ПредставлениеЭлемента = СокрЛП(ПредставлениеПоля + " " + ПредставлениеУсловия + " " + ПредставлениеЗначения);
		Иначе
			Продолжить;
		КонецЕсли;

		Представление = Представление + ?(Представление = "", "", ", ") + ПредставлениеЭлемента;
	КонецЦикла;

	Возврат Представление;
КонецФункции

// Приводит значение типа ИспользованиеГруппИЭлементов к типу ГруппыИЭлементы.
//  Для других типов возвращает значение Авто.
//
Функция ПривестиЗначениеКТипуГруппыИЭлементы(ИсходноеЗначение, ЗначениеПоУмолчанию = Неопределено) Экспорт
	Тип = ТипЗнч(ИсходноеЗначение);
	Если Тип = Тип("ГруппыИЭлементы") Тогда
		Возврат ИсходноеЗначение;
	ИначеЕсли Тип = Тип("ИспользованиеГруппИЭлементов") Тогда
		Если ИсходноеЗначение = ИспользованиеГруппИЭлементов.Элементы Тогда
			Возврат ГруппыИЭлементы.Элементы;
		ИначеЕсли ИсходноеЗначение = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
			Возврат ГруппыИЭлементы.ГруппыИЭлементы;
		ИначеЕсли ИсходноеЗначение = ИспользованиеГруппИЭлементов.Группы Тогда
			Возврат ГруппыИЭлементы.Группы;
		КонецЕсли;
	ИначеЕсли Тип = Тип("ВидСравненияКомпоновкиДанных") Тогда
		Если ИсходноеЗначение = ВидСравненияКомпоновкиДанных.ВСписке
			Или ИсходноеЗначение = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
			Или ИсходноеЗначение = ВидСравненияКомпоновкиДанных.НеВСписке
			Или ИсходноеЗначение = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
			// Виды сравнения ВСпискеПоИерархии (В группе из списка) и НеВСпискеПоИерархии (Не в группе из списка)
			// следует понимать как "В списке или в группах" и "Не в списке и не в группах".
			// - Тогда более понятно почему для них используется "ГруппыИЭлементы", а не "Группы".
			Возврат ГруппыИЭлементы.ГруппыИЭлементы;
		ИначеЕсли ИсходноеЗначение = ВидСравненияКомпоновкиДанных.ВИерархии Или ИсходноеЗначение = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
			Возврат ГруппыИЭлементы.Группы;
		КонецЕсли;
	КонецЕсли;

	Возврат ?(ЗначениеПоУмолчанию = Неопределено, ГруппыИЭлементы.Авто, ЗначениеПоУмолчанию);
КонецФункции

#КонецОбласти
