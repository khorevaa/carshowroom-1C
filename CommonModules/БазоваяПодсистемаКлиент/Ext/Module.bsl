////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая подсистема"
//
////////////////////////////////////////////////////////////////////////////////

// Выполнить стандартные действия перед началом работы пользователя
// с областью данных, либо в локальном режиме работы.
//
// Предназначена для вызова из обработчика ПередНачаломРаботыСистемы модулей управляемого и обычного приложения.
//
// Параметры:
//  ОповещениеЗавершения - ОписаниеОповещения - не задается при вызове из обработчика ПередНачаломРаботыСистемы 
//                         модулей управляемого и обычного приложения. В других случаях, после запуска будет вызвано
//                         оповещение с параметром типа Структура со свойствами:
//                         - Отказ - Булево - Ложь, если запуск выполнен успешно, или Истина, если вход в программу не
//                         выполнен;
//                         - Перезапустить - Булево - если требуется перезапуск программы;
//                         - ДополнительныеПараметрыКоманднойСтроки - Строка - для перезапуска.
//
Процедура ПередНачаломРаботыСистемы(Знач ОповещениеЗавершения = Неопределено) Экспорт
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();

	Если ПараметрыПриложения = Неопределено Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;

	ПараметрыПриложения.Вставить("СтандартныеПодсистемы.ОценкаПроизводительности.ВремяНачалаЗапуска", ВремяНачала);

	Если ОповещениеЗавершения <> Неопределено Тогда
		БазоваяПодсистемаКлиентСервер.ПроверитьПараметр("БазоваяПодсистемаКлиент.ПередНачаломРаботыСистемы","ОповещениеЗавершения", ОповещениеЗавершения, Тип("ОписаниеОповещения"));
	КонецЕсли;

	Параметры = Новый Структура;

	// Внешние параметры описания результата.
	Параметры.Вставить("Отказ", Ложь);
	Параметры.Вставить("Перезапустить", Ложь);
	Параметры.Вставить("ДополнительныеПараметрыКоманднойСтроки", "");

	// Внешние параметры управления выполнением.
	Параметры.Вставить("ИнтерактивнаяОбработка", Неопределено); // ОписаниеОповещения.
	Параметры.Вставить("ОбработкаПродолжения",   Неопределено); // ОписаниеОповещения.
	Параметры.Вставить("НепрерывноеВыполнение", Истина);
	Параметры.Вставить("ПолученныеПараметрыКлиента", Новый Структура);

	// Внутренние параметры.
	Параметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	Параметры.Вставить("ОбработкаЗавершения", Новый ОписаниеОповещения("ДействияПередНачаломРаботыСистемыОбработкаЗавершения", ЭтотОбъект, Параметры));

	ОбновитьПараметрыРаботыКлиента(Параметры, Истина, ОповещениеЗавершения <> Неопределено);

	// Подготовка перехода к следующей процедуре.
	Параметры.Вставить("ОбработкаПродолжения", Новый ОписаниеОповещения("ДействияПередНачаломРаботыСистемыВИнтеграционнойПроцедуре", ЭтотОбъект, Параметры));

	Если ОтключенаЛогикаНачалаРаботыСистемы() Тогда
		Попытка
			БазоваяПодсистемаВызовСервера.ПроверитьПравоОтключитьЛогикуНачалаРаботыСистемы();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПользователиКлиент.УстановитьИнтерактивнуюОбработкуПриОшибкеНедостаточноПравДляВходаВПрограмму(Параметры, КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
		Если ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
			Возврат;
		КонецЕсли;
		СкрытьРабочийСтолПриНачалеРаботыСистемы(Истина, Истина);
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

// Выполнить стандартные действия при начале работы пользователя
// с областью данных, либо в локальном режиме работы.
//
// Предназначена для вызова из обработчика ПриНачалеРаботыСистемы модулей управляемого и обычного приложения.
//
// Параметры:
//  ОповещениеЗавершения - ОписаниеОповещения - не задается при вызове из обработчика ПриНачалеРаботыСистемы 
//                         модулей управляемого и обычного приложения. В других случаях, после запуска будет вызвано
//                         оповещение с параметром типа Структура со свойствами:
//                         - Отказ - Булево - Ложь, если запуск выполнен успешно, или Истина, если вход в программу не
//                         выполнен;
//                         - Перезапустить - Булево - если требуется перезапуск программы;
//                         - ДополнительныеПараметрыКоманднойСтроки - Строка - для перезапуска.
//
//  НепрерывноеВыполнение - Булево - Только для внутреннего использования.
//                          Для перехода из обработчика ПередНачаломРаботыСистемы
//                          выполненного в режиме интерактивной обработки.
//
Процедура ПриНачалеРаботыСистемы(Знач ОповещениеЗавершения = Неопределено, НепрерывноеВыполнение = Истина) Экспорт
	Если ВыполняетсяИнтерактивнаяОбработкаПередНачаломРаботыСистемы() Тогда
		Возврат;
	КонецЕсли;

	Если ОтключенаЛогикаНачалаРаботыСистемы() Тогда
		Возврат;
	КонецЕсли;

	Если ОповещениеЗавершения <> Неопределено Тогда
		БазоваяПодсистемаКлиентСервер.ПроверитьПараметр("БазоваяПодсистемаКлиент.ПриНачалеРаботыСистемы", "ОповещениеЗавершения", ОповещениеЗавершения, Тип("ОписаниеОповещения"));
	КонецЕсли;
	БазоваяПодсистемаКлиентСервер.ПроверитьПараметр("БазоваяПодсистемаКлиент.ПриНачалеРаботыСистемы",  "НепрерывноеВыполнение", НепрерывноеВыполнение, Тип("Булево"));

	Параметры = Новый Структура;

	// Внешние параметры описания результата.
	Параметры.Вставить("Отказ", Ложь);
	Параметры.Вставить("Перезапустить", Ложь);
	Параметры.Вставить("ДополнительныеПараметрыКоманднойСтроки", "");

	// Внешние параметры управления выполнением.
	Параметры.Вставить("ИнтерактивнаяОбработка", Неопределено); // ОписаниеОповещения.
	Параметры.Вставить("ОбработкаПродолжения",   Неопределено); // ОписаниеОповещения.
	Параметры.Вставить("НепрерывноеВыполнение", НепрерывноеВыполнение);

	// Внутренние параметры.
	Параметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	Параметры.Вставить("ОбработкаЗавершения", Новый ОписаниеОповещения("ДействияПриНачалеРаботыСистемыОбработкаЗавершения", ЭтотОбъект, Параметры));

	// Подготовка перехода к следующей процедуре.
	Параметры.Вставить("ОбработкаПродолжения", Новый ОписаниеОповещения("ДействияПриНачалеРаботыСистемыВИнтеграционнойПроцедуре", ЭтотОбъект, Параметры));

	Попытка
		УстановитьРасширенныйЗаголовокПриложения(Истина); // Для главного окна.

		Если НЕ ОбработатьПараметрыЗапуска() Тогда
			Параметры.Отказ = Истина;
			ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);

			Возврат;
		КонецЕсли;
	Исключение
		ОбработатьОшибкуПриНачалеРаботыСистемы(Параметры, ИнформацияОбОшибке(), Истина);
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

Процедура ПослеНачалаРаботыСистемы() Экспорт
	Если ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти() Тогда
		ПодключитьОбработчикОжидания("ПоказатьРекомендациюПоОбъемуОперативнойПамяти", 10, Истина);
	КонецЕсли;

	ПодключитьОбработчикОжиданияСтандартныхПериодическихПроверок();
КонецПроцедуры

// Выполнить стандартные действия перед завершением работы пользователя
// с областью данных, либо в локальном режиме работы.
//
// Предназначена для вызова из обработчика ПередЗавершениемРаботыСистемы модулей управляемого и обычного приложения.
//
// Параметры:
//  Отказ                - Булево - Возвращаемое значение. Признак отказа от завершения работы 
//                         для обработчика события ПередЗавершениемРаботыСистемы, либо программного отказа,
//                         либо потребовалась интерактивная обработка. В случае успешного взаимодействия
//                         с пользователем, завершение работы будет продолжено.
//  ТекстПредупреждения  - Строка - см. ПередЗавершениемРаботыСистемы() в синтакс-помощнике.
//
Процедура ПередЗавершениемРаботыСистемы(Отказ = Ложь, ТекстПредупреждения = "") Экспорт

КонецПроцедуры

// Обновляет параметры работы клиента после очередной интерактивной обработки при запуске.
Процедура ОбновитьПараметрыРаботыКлиента(Параметры, ПервыйВызов = Ложь, ОбновитьПовторноИспользуемыеЗначения = Истина)
	Если ПервыйВызов Тогда
		ИмяПараметра = "СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы";
		Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
			ПараметрыПриложения.Вставить(ИмяПараметра, Новый Структура);
		КонецЕсли;
		ИмяПараметра = "СтандартныеПодсистемы.ЗапускПрограммыЗавершен";
		Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
			ПараметрыПриложения.Вставить(ИмяПараметра, Ложь);
		КонецЕсли;
	ИначеЕсли Параметры.КоличествоПолученныхПараметровКлиента = Параметры.ПолученныеПараметрыКлиента.Количество() Тогда
		Возврат;
	КонецЕсли;

	Параметры.Вставить("КоличествоПолученныхПараметровКлиента", Параметры.ПолученныеПараметрыКлиента.Количество());

	ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"].Вставить("ПолученныеПараметрыКлиента", Параметры.ПолученныеПараметрыКлиента);

	Если ОбновитьПовторноИспользуемыеЗначения Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
КонецПроцедуры

Функция ПараметрКлиента(ИмяПараметра = Неопределено) Экспорт
	ПараметрыКлиента	= ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыКлиента"];

	Если ПараметрыКлиента = Неопределено Тогда
		// Заполнение постоянных параметров клиента.
		БазоваяПодсистемаКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	КонецЕсли;

	Если ИмяПараметра = Неопределено Тогда
		Возврат ПараметрыКлиента;
	Иначе
		Возврат ПараметрыКлиента[ИмяПараметра];
	КонецЕсли;
КонецФункции

Процедура ЗаполнитьПараметрыКлиента(ПараметрыКлиента) Экспорт
	ИмяПараметра = "СтандартныеПодсистемы.ПараметрыКлиента";
	Если ТипЗнч(ПараметрыПриложения[ИмяПараметра]) <> Тип("Структура") Тогда
		ПараметрыПриложения[ИмяПараметра] = Новый Структура;
		ПараметрыПриложения[ИмяПараметра].Вставить("ИнформационнаяБазаФайловая");
		ПараметрыПриложения[ИмяПараметра].Вставить("ЭтоСеансВнешнегоПользователя");
		ПараметрыПриложения[ИмяПараметра].Вставить("АвторизованныйПользователь");
		ПараметрыПриложения[ИмяПараметра].Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы");
		ПараметрыПриложения[ИмяПараметра].Вставить("ДоступноИспользованиеРазделенныхДанных");
		ПараметрыПриложения[ИмяПараметра].Вставить("ПараметрыАвтономнойРаботы");
		ПараметрыПриложения[ИмяПараметра].Вставить("ПерсональныеНастройкиРаботыСФайлами");
		ПараметрыПриложения[ИмяПараметра].Вставить("КоличествоЗанятыхФайлов");
		ПараметрыПриложения[ИмяПараметра].Вставить("РезервноеКопированиеИБПриЗавершенииРаботы");
		ПараметрыПриложения[ИмяПараметра].Вставить("СмещениеДатыКлиента");
		ПараметрыПриложения[ИмяПараметра].Вставить("КодОсновногоЯзыка");
		Если ПараметрыКлиента.Свойство("ОценкаПроизводительности") Тогда
			ПараметрыПриложения[ИмяПараметра].Вставить("ОценкаПроизводительности");
		КонецЕсли;
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(ПараметрыПриложения[ИмяПараметра], ПараметрыКлиента);
КонецПроцедуры

// Устанавливает флаг скрытия рабочего стола при начале работы системы,
// который блокирует создание форм на рабочем столе.
// Снимает флаг скрытия и обновляет рабочий стол, когда это станет возможным,
// если скрытие выполнялось.
//
// Параметры:
//  Скрыть - Булево. Если передать Ложь, тогда при условии скрытия рабочего
//           стола он будет вновь показан.
//
//  УжеВыполненоНаСервере - Булево. Если передать Истина, тогда уже был вызван
//           метод в модуле СтандартныеПодсистемыВызовСервера, и его не требуется
//           вызвать, а требуется только установить на клиенте, что рабочий стол
//           был скрыт и позднее его требуется показать.
//
Процедура СкрытьРабочийСтолПриНачалеРаботыСистемы(Скрыть = Истина, УжеВыполненоНаСервере = Ложь) Экспорт
	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];

	Если Скрыть Тогда
		Если НЕ ПараметрыПриЗапускеПрограммы.Свойство("СкрытьРабочийСтолПриНачалеРаботыСистемы") Тогда
			ПараметрыПриЗапускеПрограммы.Вставить("СкрытьРабочийСтолПриНачалеРаботыСистемы");
			Если НЕ УжеВыполненоНаСервере Тогда
				БазоваяПодсистемаВызовСервера.СкрытьРабочийСтолПриНачалеРаботыСистемы();
			КонецЕсли;
			ОбновитьИнтерфейс();
		КонецЕсли;
	Иначе
		Если ПараметрыПриЗапускеПрограммы.Свойство("СкрытьРабочийСтолПриНачалеРаботыСистемы") Тогда
			ПараметрыПриЗапускеПрограммы.Удалить("СкрытьРабочийСтолПриНачалеРаботыСистемы");
			Если НЕ УжеВыполненоНаСервере Тогда
				БазоваяПодсистемаВызовСервера.СкрытьРабочийСтолПриНачалеРаботыСистемы(Ложь);
			КонецЕсли;
			ТекущееАктивноеОкно = АктивноеОкно();
			ОбновитьИнтерфейс();
			Если ТекущееАктивноеОкно <> Неопределено Тогда
				ТекущееАктивноеОкно.Активизировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ВыполняетсяИнтерактивнаяОбработкаПередНачаломРаботыСистемы()
	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];

	Если НЕ ПараметрыПриЗапускеПрограммы.Свойство("ПараметрыОбработки") Тогда
		Возврат Ложь;
	КонецЕсли;

	Параметры = ПараметрыПриЗапускеПрограммы.ПараметрыОбработки;

	Если Параметры.ИнтерактивнаяОбработка <> Неопределено Тогда
		Параметры.НепрерывноеВыполнение		= Ложь;
		ИнтерактивнаяОбработка				= Параметры.ИнтерактивнаяОбработка;
		Параметры.ИнтерактивнаяОбработка	= Неопределено;
		ВыполнитьОбработкуОповещения(ИнтерактивнаяОбработка, Параметры);
		ПараметрыПриЗапускеПрограммы.Удалить("ПараметрыОбработки");

		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

// Устанавливает заголовок главного окна приложения, используя значение константы
// ЗаголовокПриложения и заголовок приложения по умолчанию.
//
// Параметры:
//   ПриЗапуске - Булево - Истина, если вызывается при начале работы программы.
//
Процедура УстановитьРасширенныйЗаголовокПриложения(ПриЗапуске = Ложь) Экспорт
	ПараметрыКлиента			= ?(ПриЗапуске, БазоваяПодсистемаКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске(), БазоваяПодсистемаКлиентПовтИсп.ПараметрыРаботыКлиента());

	ПредставлениеЗаголовка		= ПараметрыКлиента.ЗаголовокПриложения;
	ПредставлениеКонфигурации	= ПараметрыКлиента.ПодробнаяИнформация;

	Если ПустаяСтрока(СокрЛП(ПредставлениеЗаголовка)) Тогда
		Если ПараметрыКлиента.Свойство("ПредставлениеОбластиДанных") Тогда
			ШаблонЗаголовка		= "%1 / %2";
			ЗаголовокПриложения = СтрШаблон(ШаблонЗаголовка, ПараметрыКлиента.ПредставлениеОбластиДанных, ПредставлениеКонфигурации);
		Иначе
			ШаблонЗаголовка		= "%1";
			ЗаголовокПриложения = СтрШаблон(ШаблонЗаголовка, ПредставлениеКонфигурации);
		КонецЕсли;
	Иначе
		ШаблонЗаголовка		= "%1 / %2";
		ЗаголовокПриложения = СтрШаблон(ШаблонЗаголовка, СокрЛП(ПредставлениеЗаголовка), ПредставлениеКонфигурации);
	КонецЕсли;

	КлиентскоеПриложение.УстановитьЗаголовок(ЗаголовокПриложения);
КонецПроцедуры

// Обработать параметры запуска программы.
//
// Возвращаемое значение:
//   Булево   - Истина, если необходимо прервать выполнение процедуры ПриНачалеРаботыСистемы.
//
Функция ОбработатьПараметрыЗапуска()
	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат Истина;
	КонецЕсли;

	// Параметр может состоять из частей, разделенных символом ";".
	ПараметрыЗапуска = СтрРазделить(ПараметрЗапуска, ";", Ложь);

	Отказ = Ложь;
	ИнтеграцияПодсистемКлиент.ПриОбработкеПараметровЗапуска(ПараметрыЗапуска, Отказ);


	Возврат Не Отказ;
КонецФункции

// Проверяет результат обработчика события ПриНачалеРаботыСистемы и выполняет обработчик оповещения.
//
// Параметры:
//   Параметры - Структура - см. ОбщегоНазначенияКлиентПереопределяемый.ПриНачалеРаботыСистемы.
//
// Возвращаемое значение:
//   Булево - Истина, если был выполнен обработчик оповещения, указанный в
//            свойствах ОбработкаЗавершения или ИнтерактивнаяОбработка.
//
Функция ИнтерактивнаяОбработкаПриНачалеРаботыСистемы(Параметры)
	Если Параметры.ИнтерактивнаяОбработка = Неопределено Тогда
		Если Параметры.Отказ Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);

			Возврат Истина;
		КонецЕсли;

		Возврат Ложь;
	КонецЕсли;

	ИнтерактивнаяОбработка				= Параметры.ИнтерактивнаяОбработка;

	Параметры.НепрерывноеВыполнение		= Ложь;
	Параметры.ИнтерактивнаяОбработка	= Неопределено;

	ВыполнитьОбработкуОповещения(ИнтерактивнаяОбработка, Параметры);

	Возврат Истина;
КонецФункции

#Область ПередНачаломРаботыСистемы

// Продолжение процедуры ПередНачаломРаботыСистемы.
Процедура ДействияПередНачаломРаботыСистемыВИнтеграционнойПроцедуре(Неопределен, Параметры) Экспорт
	Если Не ПродолжитьДействияПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	Параметры.Вставить("ОбработкаПродолжения", Новый ОписаниеОповещения("ДействияПередНачаломРаботыСистемыВМодуляхИнтеграционнойПроцедуры", ЭтотОбъект, Параметры));
	Параметры.Вставить("ИндексТекущегоМодуля", 0);
	Параметры.Вставить("ДобавленныеМодули", Новый Массив);
	Попытка
		Параметры.Вставить("Модули", Новый Массив);
		ИнтеграцияПодсистемКлиент.ПередНачаломРаботыСистемы(Параметры);
		Параметры.Вставить("ДобавленныеМодули", Параметры.Модули);
		Параметры.Удалить("Модули");
	Исключение
		ОбработатьОшибкуПередНачаломРаботыСистемы(Параметры, ИнформацияОбОшибке(), Истина);
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

// Продолжение процедуры ПередНачаломРаботыСистемы.
Процедура ДействияПередНачаломРаботыСистемыВМодуляхИнтеграционнойПроцедуры(Неопределен, Параметры) Экспорт
	Если Не ПродолжитьДействияПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	Если Параметры.ИндексТекущегоМодуля >= Параметры.ДобавленныеМодули.Количество() Тогда
		ДействияПередНачаломРаботыСистемыПослеВсехПроцедур(Неопределено, Параметры);

		Возврат;
	КонецЕсли;

	ОписаниеМодуля					= Параметры.ДобавленныеМодули[Параметры.ИндексТекущегоМодуля];
	Параметры.ИндексТекущегоМодуля	= Параметры.ИндексТекущегоМодуля + 1;

	Попытка
		Если ТипЗнч(ОписаниеМодуля) <> Тип("Структура") Тогда
			ТекущийМодуль = ОписаниеМодуля;
			ТекущийМодуль.ПередНачаломРаботыСистемы(Параметры);
		Иначе
			ТекущийМодуль = ОписаниеМодуля.Модуль;
			Если ОписаниеМодуля.Номер = 2 Тогда
				ТекущийМодуль.ПередНачаломРаботыСистемы2(Параметры);
			ИначеЕсли ОписаниеМодуля.Номер = 3 Тогда
				ТекущийМодуль.ПередНачаломРаботыСистемы3(Параметры);
			ИначеЕсли ОписаниеМодуля.Номер = 4 Тогда
				ТекущийМодуль.ПередНачаломРаботыСистемы4(Параметры);
			ИначеЕсли ОписаниеМодуля.Номер = 5 Тогда
				ТекущийМодуль.ПередНачаломРаботыСистемы5(Параметры);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ОбработатьОшибкуПередНачаломРаботыСистемы(Параметры, ИнформацияОбОшибке(), Истина);
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

// Продолжение процедуры ПередНачаломРаботыСистемы.
Процедура ДействияПередНачаломРаботыСистемыПослеВсехПроцедур(Неопределен, Параметры) Экспорт
	Если Не ПродолжитьДействияПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	Параметры.Вставить("ОбработкаПродолжения", Параметры.ОбработкаЗавершения);

	Попытка
		УстановитьПараметрыФункциональныхОпцийИнтерфейсаПриЗапуске();
	Исключение
		ОбработатьОшибкуПередНачаломРаботыСистемы(Параметры, ИнформацияОбОшибке(), Истина);
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

// Завершение процедуры ПередНачаломРаботыСистемы.
Процедура ДействияПередНачаломРаботыСистемыОбработкаЗавершения(Неопределен, Параметры) Экспорт
	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];
	ПараметрыПриЗапускеПрограммы.Удалить("ПолученныеПараметрыКлиента");
	ПараметрыПриложения["СтандартныеПодсистемы.ЗапускПрограммыЗавершен"] = Истина;

	Если Параметры.ОповещениеЗавершения <> Неопределено Тогда
		Результат = Новый Структура;
		Результат.Вставить("Отказ", Параметры.Отказ);
		Результат.Вставить("Перезапустить", Параметры.Перезапустить);
		Результат.Вставить("ДополнительныеПараметрыКоманднойСтроки", Параметры.ДополнительныеПараметрыКоманднойСтроки);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеЗавершения, Результат);

		Возврат;
	КонецЕсли;

	Если Параметры.Отказ Тогда
		Если Параметры.Перезапустить <> Истина Тогда
			ПрекратитьРаботуСистемы();
		ИначеЕсли ЗначениеЗаполнено(Параметры.ДополнительныеПараметрыКоманднойСтроки) Тогда
			ПрекратитьРаботуСистемы(Параметры.Перезапустить, Параметры.ДополнительныеПараметрыКоманднойСтроки);
		Иначе
			ПрекратитьРаботуСистемы(Параметры.Перезапустить);
		КонецЕсли;
	ИначеЕсли Не Параметры.НепрерывноеВыполнение Тогда
		Если ПараметрыПриЗапускеПрограммы.Свойство("ПараметрыОбработки") Тогда
			ПараметрыПриЗапускеПрограммы.Удалить("ПараметрыОбработки");
		КонецЕсли;
		ПодключитьОбработчикОжидания("ОбработчикОжиданияПриНачалеРаботыСистемы", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

 #КонецОбласти

#Область ПриНачалеРаботыСистемы

// Продолжение процедуры ПриНачалеРаботыСистемы.
Процедура ДействияПриНачалеРаботыСистемыВИнтеграционнойПроцедуре(Неопределен, Параметры) Экспорт
	Если Не ПродолжитьДействияПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	Параметры.Вставить("ОбработкаПродолжения", Новый ОписаниеОповещения("ДействияПриНачалеРаботыСистемыВМодуляхИнтеграционнойПроцедуры", ЭтотОбъект, Параметры));

	Параметры.Вставить("ИндексТекущегоМодуля", 0);
	Параметры.Вставить("ДобавленныеМодули", Новый Массив);
	Попытка
		Параметры.Вставить("Модули", Новый Массив);
		ИнтеграцияПодсистемКлиент.ПриНачалеРаботыСистемы(Параметры);
		Параметры.Вставить("ДобавленныеМодули", Параметры.Модули);
		Параметры.Удалить("Модули");
	Исключение
		ОбработатьОшибкуПриНачалеРаботыСистемы(Параметры, ИнформацияОбОшибке());
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

// Продолжение процедуры ПриНачалеРаботыСистемы.
Процедура ДействияПриНачалеРаботыСистемыВМодуляхИнтеграционнойПроцедуры(Неопределен, Параметры) Экспорт
	Если Не ПродолжитьДействияПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	Если Параметры.ИндексТекущегоМодуля >= Параметры.ДобавленныеМодули.Количество() Тогда
		ДействияПриНачалеРаботыСистемыПослеВсехПроцедур(Неопределено, Параметры);

		Возврат;
	КонецЕсли;

	ОписаниеМодуля					= Параметры.ДобавленныеМодули[Параметры.ИндексТекущегоМодуля];
	Параметры.ИндексТекущегоМодуля	= Параметры.ИндексТекущегоМодуля + 1;

	Попытка
		Если ТипЗнч(ОписаниеМодуля) <> Тип("Структура") Тогда
			ТекущийМодуль = ОписаниеМодуля;
			ТекущийМодуль.ПриНачалеРаботыСистемы(Параметры);
		Иначе
			ТекущийМодуль = ОписаниеМодуля.Модуль;
			Если ОписаниеМодуля.Номер = 2 Тогда
				ТекущийМодуль.ПриНачалеРаботыСистемы2(Параметры);
			ИначеЕсли ОписаниеМодуля.Номер = 3 Тогда
				ТекущийМодуль.ПриНачалеРаботыСистемы3(Параметры);
			ИначеЕсли ОписаниеМодуля.Номер = 4 Тогда
				ТекущийМодуль.ПриНачалеРаботыСистемы4(Параметры);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ОбработатьОшибкуПриНачалеРаботыСистемы(Параметры, ИнформацияОбОшибке());
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

// Продолжение процедуры ПриНачалеРаботыСистемы.
Процедура ДействияПриНачалеРаботыСистемыПослеВсехПроцедур(Неопределен, Параметры) Экспорт
	Если Не ПродолжитьДействияПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	Параметры.Вставить("ОбработкаПродолжения", Параметры.ОбработкаЗавершения);

	Попытка
		ИнтеграцияПодсистемКлиент.ПослеНачалаРаботыСистемы();
	Исключение
		ОбработатьОшибкуПриНачалеРаботыСистемы(Параметры, ИнформацияОбОшибке());
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

// Завершение процедуры ПриНачалеРаботыСистемы.
Процедура ДействияПриНачалеРаботыСистемыОбработкаЗавершения(Неопределен, Параметры) Экспорт
	Если НЕ Параметры.Отказ Тогда
		ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];
		Если ПараметрыПриЗапускеПрограммы.Свойство("ПропуститьОчисткуСкрытияРабочегоСтола") Тогда
			ПараметрыПриЗапускеПрограммы.Удалить("ПропуститьОчисткуСкрытияРабочегоСтола");
		КонецЕсли;
		СкрытьРабочийСтолПриНачалеРаботыСистемы(Ложь);
	КонецЕсли;

	Если Параметры.ОповещениеЗавершения <> Неопределено Тогда
		Результат = Новый Структура;
		Результат.Вставить("Отказ",										Параметры.Отказ);
		Результат.Вставить("Перезапустить",								Параметры.Перезапустить);
		Результат.Вставить("ДополнительныеПараметрыКоманднойСтроки",	Параметры.ДополнительныеПараметрыКоманднойСтроки);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеЗавершения, Результат);

		Возврат;
	Иначе
		Если Параметры.Отказ Тогда
			Если Параметры.Перезапустить <> Истина Тогда
				ПрекратитьРаботуСистемы();
			ИначеЕсли ЗначениеЗаполнено(Параметры.ДополнительныеПараметрыКоманднойСтроки) Тогда
				ПрекратитьРаботуСистемы(Параметры.Перезапустить, Параметры.ДополнительныеПараметрыКоманднойСтроки);
			Иначе
				ПрекратитьРаботуСистемы(Параметры.Перезапустить);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

 #Область ПередЗавершениемРаботыСистемы

 // Завершение процедуры ПередЗавершениемРаботыСистемы.
Процедура ДействияПередЗавершениемРаботыСистемыПослеОбработкиОшибки(Неопределен, ДополнительныеПараметры) Экспорт
	Параметры						= ДополнительныеПараметры.Параметры;
	Параметры.ОбработкаПродолжения	= ДополнительныеПараметры.ОбработкаПродолжения;

	Если Параметры.Отказ Тогда
		Параметры.Отказ = Ложь;
		ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
	Иначе
		ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	КонецЕсли;
КонецПроцедуры

 #КонецОбласти

 // Проверяет результат интерактивной обработки, если Отказ, тогда вызывает обработку завершения.
// Если добавлен новый полученный параметр клиента, обновляет параметры работы клиента.
//
// Параметры:
//   Параметры - Структура.
//
// Возвращаемое значение:
//   Булево - Истина, если можно продолжить выполнения, и соответственно, не выполнялся
//            обработчик оповещения, указанный в свойствах ОбработкаЗавершения.
//
Функция ПродолжитьДействияПередНачаломРаботыСистемы(Параметры)
	Если Параметры.Отказ Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
		Возврат Ложь;
	КонецЕсли;

	ОбновитьПараметрыРаботыКлиента(Параметры);

	Возврат Истина;
КонецФункции

// Обрабатывает ошибку, найденную при вызове обработчика события ПриНачалеРаботыСистемы.
//
// Параметры:
//   Параметры          - Структура - см. ОбщегоНазначенияКлиентПереопределяемый.ПриНачалеРаботыСистемы.
//   ИнформацияОбОшибке - ИнформацияОбОшибке - информация об ошибке.
//   ПрекратитьРаботу   - Булево - если указано Истина, то при ошибке запуска не будет возможности продолжить работу.
//
Процедура ОбработатьОшибкуПередНачаломРаботыСистемы(Параметры, ИнформацияОбОшибке, ПрекратитьРаботу = Ложь)
	ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке, "Запуск", ПрекратитьРаботу);
КонецПроцедуры

// Проверяет результат интерактивной обработки, если Отказ, тогда вызывает обработку завершения.
//
// Параметры:
//   Параметры - Структура
//
// Возвращаемое значение:
//   Булево - Истина, если можно продолжить выполнения, и соответственно, не выполнялся
//            обработчик оповещения, указанный в свойствах ОбработкаЗавершения.
//
Функция ПродолжитьДействияПриНачалеРаботыСистемы(Параметры)
	Если Параметры.Отказ Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

// Обрабатывает ошибку, найденную при вызове обработчика события ПриНачалеРаботыСистемы.
//
// Параметры:
//   Параметры          - Структура
//   ИнформацияОбОшибке - ИнформацияОбОшибке - информация об ошибке.
//   ПрекратитьРаботу   - Булево - если указано Истина, то при ошибке запуска не будет возможности продолжить работу.
//
Процедура ОбработатьОшибкуПриНачалеРаботыСистемы(Параметры, ИнформацияОбОшибке, ПрекратитьРаботу = Ложь)
	ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке, "Запуск", ПрекратитьРаботу);
КонецПроцедуры

// Если указан ПрекратитьРаботу = Истина, то прервать дальнейшее выполнение клиентского кода и прекратить работу.
//
Процедура ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке, Событие, ПрекратитьРаботу = Ложь)
	Если Событие = "Запуск" Тогда
		Если ПрекратитьРаботу Тогда
			Параметры.Отказ					= Истина;
			Параметры.ОбработкаПродолжения	= Параметры.ОбработкаЗавершения;
		КонецЕсли;
	Иначе
		ДополнительныеПараметры			= Новый Структура("Параметры, ОбработкаПродолжения", Параметры, Параметры.ОбработкаПродолжения);

		Параметры.ОбработкаПродолжения	= Новый ОписаниеОповещения("ДействияПередЗавершениемРаботыСистемыПослеОбработкиОшибки", ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;

	НачалоОписанияОшибки = БазоваяПодсистемаВызовСервера.ЗаписатьОшибкуВЖурналРегистрацииПриЗапускеИлиЗавершении(ПрекратитьРаботу, Событие, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	НачалоОписанияОшибки = "";

	ТекстПредупреждения = НачалоОписанияОшибки + Символы.ПС
		+ "Техническая информация об ошибке записана в журнал регистрации."
		+ Символы.ПС + Символы.ПС
		+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке);

	ИнтерактивнаяОбработка				= Новый ОписаниеОповещения("ПоказатьПредупреждениеИПродолжить", БазоваяПодсистемаКлиент.ЭтотОбъект, ТекстПредупреждения);

	Параметры.ИнтерактивнаяОбработка	= ИнтерактивнаяОбработка;
КонецПроцедуры

// После предупреждения вызывает процедуру с параметрами Результат, ДополнительныеПараметры.
//
// Параметры:
//  Параметры           - Структура, которая содержит свойство:
//                          ОбработкаПродолжения - ОписаниеОповещения, которое
//                          содержит процедуру с двумя параметрами:
//                            Результат, ДополнительныеПараметры.
//
//  ОписаниеПредупреждения - Неопределено - предупреждение не требуется.
//  ОписаниеПредупреждения - Строка - текст предупреждения, который нужно показать.
//  ОписаниеПредупреждения - Структура - со свойствами:
//       * ТекстПредупреждения - Строка - текст предупреждения, который нужно показать.
//       * Кнопки              - СписокЗначений - для процедуры ПоказатьВопросПользователю.
//       * ПараметрыВопроса    - Структура - содержит подмножество свойств,
//                                 которые нужно переопределить, из числа
//                                 возвращаемых функцией ПараметрыВопросаПользователю.
//
Процедура ПоказатьПредупреждениеИПродолжить(Параметры, ОписаниеПредупреждения) Экспорт
	ОповещениеСРезультатом = Параметры.ОбработкаПродолжения;

	Если ОписаниеПредупреждения = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеСРезультатом);

		Возврат;
	КонецЕсли;

	Кнопки													= Новый СписокЗначений;
	ПараметрыВопроса										= ПараметрыВопросаПользователю();
	ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос	= Ложь;
	ПараметрыВопроса.БлокироватьВесьИнтерфейс				= Истина;
	ПараметрыВопроса.Картинка								= БиблиотекаКартинок.Предупреждение;

	Если Параметры.Отказ Тогда
		Кнопки.Добавить("Завершить", "Завершить работу");
		ПараметрыВопроса.КнопкаПоУмолчанию = "Завершить";
	Иначе
		Кнопки.Добавить("Продолжить", "Продолжить");
		Кнопки.Добавить("Завершить",  "Завершить работу");
		ПараметрыВопроса.КнопкаПоУмолчанию = "Продолжить";
	КонецЕсли;

	Если ТипЗнч(ОписаниеПредупреждения) = Тип("Структура") Тогда
		ТекстПредупреждения	= ОписаниеПредупреждения.ТекстПредупреждения;
		Кнопки				= ОписаниеПредупреждения.Кнопки;
		ЗаполнитьЗначенияСвойств(ПараметрыВопроса, ОписаниеПредупреждения.ПараметрыВопроса);
	Иначе
		ТекстПредупреждения	= ОписаниеПредупреждения;
	КонецЕсли;

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПоказатьПредупреждениеИПродолжитьЗавершение", ЭтотОбъект, Параметры);

	ПоказатьВопросПользователю(ОповещениеОЗакрытии, ТекстПредупреждения, Кнопки, ПараметрыВопроса);
КонецПроцедуры

// Продолжение процедуры ПоказатьПредупреждениеИПродолжить.
Процедура ПоказатьПредупреждениеИПродолжитьЗавершение(Результат, Параметры) Экспорт
	Если Результат <> Неопределено Тогда
		Если Результат.Значение = "Завершить" Тогда
			Параметры.Отказ			= Истина;
		ИначеЕсли Результат.Значение = "Перезапустить" Или Результат.Значение = КодВозвратаДиалога.Таймаут Тогда
			Параметры.Отказ			= Истина;
			Параметры.Перезапустить	= Истина;
		КонецЕсли;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

// Возвращает новую структуру дополнительных параметров.
//
// Возвращаемое значение:
//  Структура   - структура со свойствами:
//    * КнопкаПоУмолчанию             - Произвольный - определяет кнопку по умолчанию по типу кнопки или по связанному
//                                                     с ней значению.
//    * Таймаут                       - Число        - интервал времени в секундах до автоматического закрытия окна
//                                                     вопроса.
//    * КнопкаТаймаута                - Произвольный - кнопка (по типу кнопки или по связанному с ней значению),
//                                                     на которой отображается количество секунд, оставшихся до
//                                                     истечения таймаута.
//    * Заголовок                     - Строка       - заголовок вопроса.
//    * ПредлагатьБольшеНеЗадаватьЭтотВопрос - Булево- если Истина, то в окне вопроса будет доступен одноименный флажок.
//    * БольшеНеЗадаватьЭтотВопрос    - Булево       - принимает значение, выбранное пользователем в соответствующем
//                                                     флажке.
//    * БлокироватьВесьИнтерфейс      - Булево       - если Истина, форма вопроса открывается блокируя работу всех
//                                                     остальных открытых окон, включая главное окно.
//    * Картинка                      - Картинка     - картинка, выводимая в окне вопроса.
//
Функция ПараметрыВопросаПользователю() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("КнопкаПоУмолчанию",						Неопределено);
	Параметры.Вставить("Таймаут",								0);
	Параметры.Вставить("КнопкаТаймаута",						Неопределено);
	Параметры.Вставить("Заголовок",								КлиентскоеПриложение.ПолучитьЗаголовок());
	Параметры.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос",	Истина);
	Параметры.Вставить("БольшеНеЗадаватьЭтотВопрос",			Ложь);
	Параметры.Вставить("БлокироватьВесьИнтерфейс",				Ложь);
	Параметры.Вставить("Картинка",								БиблиотекаКартинок.Вопрос);

	Возврат Параметры;
КонецФункции

// Показать форму вопроса.
//
// Параметры:
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - описание процедуры, которая будет вызвана после закрытия окна
//                                                        вопроса
//                                                        со следующими параметрами:
//                                                          РезультатВопроса - Структура - структура со свойствами:
//                                                            Значение - результат выбора пользователя: значение
//                                                                       системного перечисления или значение,
//                                                                       связанное с нажатой кнопкой. В случае закрытия
//                                                                       диалога по истечении времени - значение
//                                                                       Таймаут.
//                                                            БольшеНеЗадаватьЭтотВопрос - Булево - результат выбора
//                                                                                                  пользователя в
//                                                                                                  одноименном флажке.
//                                                          ДополнительныеПараметры - Структура
//   ТекстВопроса                  - Строка             - текст задаваемого вопроса.
//   Кнопки                        - РежимДиалогаВопрос, СписокЗначений - может быть задан список значений, в котором.
//                                       Значение - содержит значение, связанное с
//                                                  кнопкой и возвращаемое при выборе кнопки. В качестве значения может
//                                                  использоваться значение
//                                                  перечисления КодВозвратаДиалога, а также другие значения,
//                                                  поддерживающее XDTO-сериализацию.
//                                       Представление - задает текст кнопки.
//
//   ДополнительныеПараметры       - Структура          - дополнительные параметры, см. описание к
//                                                        ПараметрыВопросаПользователю.
//
// Возвращаемое значение:
//   Результат выбора пользователя будет передан в метод, описанный параметром ОписаниеОповещенияОЗавершении.
//
Процедура ПоказатьВопросПользователю(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки, ДополнительныеПараметры = Неопределено) Экспорт
	Если ДополнительныеПараметры <> Неопределено Тогда
		Параметры = ДополнительныеПараметры;
	Иначе
		Параметры = Новый Структура;
	КонецЕсли;

	БазоваяПодсистемаКлиентСервер.ДополнитьСтруктуру(Параметры, ПараметрыВопросаПользователю(), Ложь);

	Если ТипЗнч(Кнопки) = Тип("РежимДиалогаВопрос") Тогда
		Если      Кнопки = РежимДиалогаВопрос.ДаНет Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНет";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ДаНетОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНетОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОК Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОК";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОКОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОКОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПовторитьОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПовторитьОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПрерватьПовторитьПропустить Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПрерватьПовторитьПропустить";
		КонецЕсли;
	Иначе
		КнопкиПараметр = Кнопки;
	КонецЕсли;

	Если ТипЗнч(Параметры.КнопкаПоУмолчанию) = Тип("КодВозвратаДиалога") Тогда
		Параметры.КнопкаПоУмолчанию = КодВозвратаДиалогаВСтроку(Параметры.КнопкаПоУмолчанию);
	КонецЕсли;

	Если ТипЗнч(Параметры.КнопкаТаймаута) = Тип("КодВозвратаДиалога") Тогда
		Параметры.КнопкаТаймаута = КодВозвратаДиалогаВСтроку(Параметры.КнопкаТаймаута);
	КонецЕсли;

	Параметры.Вставить("Кнопки",         КнопкиПараметр);
	Параметры.Вставить("ТекстСообщения", ТекстВопроса);

	ОткрытьФорму("ОбщаяФорма.Вопрос", Параметры,,,,,ОписаниеОповещенияОЗавершении);
КонецПроцедуры

// Возвращает строковое представление значения типа КодВозвратаДиалога.
Функция КодВозвратаДиалогаВСтроку(Значение)
	Результат = "КодВозвратаДиалога." + Строка(Значение);

	Если Значение = КодВозвратаДиалога.Да Тогда
		Результат = "КодВозвратаДиалога.Да";
	ИначеЕсли Значение = КодВозвратаДиалога.Нет Тогда
		Результат = "КодВозвратаДиалога.Нет";
	ИначеЕсли Значение = КодВозвратаДиалога.ОК Тогда
		Результат = "КодВозвратаДиалога.ОК";
	ИначеЕсли Значение = КодВозвратаДиалога.Отмена Тогда
		Результат = "КодВозвратаДиалога.Отмена";
	ИначеЕсли Значение = КодВозвратаДиалога.Повторить Тогда
		Результат = "КодВозвратаДиалога.Повторить";
	ИначеЕсли Значение = КодВозвратаДиалога.Прервать Тогда
		Результат = "КодВозвратаДиалога.Прервать";
	ИначеЕсли Значение = КодВозвратаДиалога.Пропустить Тогда
		Результат = "КодВозвратаДиалога.Пропустить";
	КонецЕсли;

	Возврат Результат;
КонецФункции

 // Проверяет, выполнено ли опасное отключение процедур запуска для целей автоматического тестирования.
Функция ОтключенаЛогикаНачалаРаботыСистемы() Экспорт
	Возврат СтрНайти(ПараметрЗапуска, "ОтключитьЛогикуНачалаРаботыСистемы") > 0;
КонецФункции

// Проверяет результат обработчика события ПередНачаломРаботыСистемы и выполняет обработчик оповещения.
//
// Параметры:
//   Параметры - Структура - см. ОбщегоНазначенияКлиентПереопределяемый.ПередНачаломРаботыСистемы.
//
// Возвращаемое значение:
//   Булево - Истина, если был выполнен обработчик оповещения, указанный
//            ОбработкаЗавершения ОбработкаЗавершения или запланирован переход к выполнению
//            интерактивной обработке, указанной в свойстве ИнтерактивнаяОбработка.
//
Функция ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры)
	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];

	Если Параметры.ИнтерактивнаяОбработка = Неопределено Тогда
		Если Параметры.Отказ Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
			Возврат Истина;
		КонецЕсли;

		Возврат Ложь;
	КонецЕсли;

	ОбновитьПараметрыРаботыКлиента(Параметры);

	Если НЕ Параметры.НепрерывноеВыполнение Тогда
		ИнтерактивнаяОбработка				= Параметры.ИнтерактивнаяОбработка;
		Параметры.ИнтерактивнаяОбработка	= Неопределено;
		ВыполнитьОбработкуОповещения(ИнтерактивнаяОбработка, Параметры);
	Иначе
		// Требуется подготовка к выполнению интерактивной обработки, затребованной
		// в процессе выполнения обработчика ПередНачаломРаботыСистемы, которая
		// предполагает скрытие рабочего стола и обновление интерфейса перед
		// продолжением при первом вызове процедуры ПриНачалеРаботыСистемы.
		ПараметрыПриЗапускеПрограммы.Вставить("ПараметрыОбработки", Параметры);
		СкрытьРабочийСтолПриНачалеРаботыСистемы();
		ПараметрыПриЗапускеПрограммы.Вставить("ПропуститьОчисткуСкрытияРабочегоСтола");

		Если Параметры.ОповещениеЗавершения = Неопределено Тогда
			// Вызов процедуры ПередНачаломРаботыСистемы выполнен платформой,
			// как обработчика события, до открытия главного окна 1С:Предприятия 8.
			Если Не ОтключенаЛогикаНачалаРаботыСистемы() Тогда
				УстановитьПараметрыФункциональныхОпцийИнтерфейсаПриЗапуске();
			КонецЕсли;
		Иначе
			// Вызов процедуры ПередНачаломРаботыСистемы выполнен программно, как вход в область данных,
			// поэтому продолжение после обновления интерфейса возможно только через обработчик ожидания.
			ПодключитьОбработчикОжидания("ОбработчикОжиданияПриНачалеРаботыСистемы", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Процедура УстановитьПараметрыФункциональныхОпцийИнтерфейсаПриЗапуске()
	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];

	Если ТипЗнч(ПараметрыПриЗапускеПрограммы) <> Тип("Структура")
	 Или Не ПараметрыПриЗапускеПрограммы.Свойство("ОпцииИнтерфейса") Тогда
		// Обработка ошибки запуска.
		Возврат;
	КонецЕсли;

	Если ПараметрыПриЗапускеПрограммы.Свойство("ОпцииИнтерфейсаУстановлены") Тогда
		Возврат;
	КонецЕсли;

	ОпцииИнтерфейса = ПараметрыПриЗапускеПрограммы.ОпцииИнтерфейса;

	Если ТипЗнч(ОпцииИнтерфейса) = Тип("ФиксированнаяСтруктура") Тогда
		#Если ВебКлиент Тогда
			Структура = Новый Структура;
			БазоваяПодсистемаКлиентСервер.ДополнитьСтруктуру(Структура, ОпцииИнтерфейса, Истина);
			ОпцииИнтерфейса = Структура;
		#Иначе
			ОпцииИнтерфейса = Новый Структура(ОпцииИнтерфейса);
		#КонецЕсли
	КонецЕсли;

	// Установка параметров функциональных опций производится только тогда, когда они заданы.
	Если ОпцииИнтерфейса.Количество() > 0 Тогда
		УстановитьПараметрыФункциональныхОпцийИнтерфейса(ОпцииИнтерфейса);
	КонецЕсли;

	ПараметрыПриЗапускеПрограммы.Вставить("ОпцииИнтерфейсаУстановлены");
КонецПроцедуры

Функция ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти()
	ПараметрыКлиента	= БазоваяПодсистемаКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();

	Возврат ПараметрыКлиента.ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти;
КонецФункции

Процедура ОповеститьОНехваткеПамяти() Экспорт
	РекомендуемыйОбъем = БазоваяПодсистемаКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске().РекомендуемыйОбъемОперативнойПамяти;

	Заголовок	= "Скорость работы снижена";
	Текст		= СтрШаблон("Рекомендуется увеличить объем памяти до %1 Гб.", РекомендуемыйОбъем);

	ПоказатьОповещениеПользователя(Заголовок, "e1cib/app/Обработка.РекомендацияПоПовышениюСкоростиРаботы", Текст, БиблиотекаКартинок.Предупреждение);
КонецПроцедуры

Процедура ПодключитьОбработчикОжиданияСтандартныхПериодическихПроверок()
	// Вызов стандартных периодических проверок 1 раз в 20 минут.
	ПодключитьОбработчикОжидания("ОбработчикОжиданияСтандартныхПериодическихПроверок", 20 * 60, Истина);
КонецПроцедуры

// Вызывается из обработчика ожидания каждые 20 минут, например, для контроля
// динамического обновления и окончания срока действия учетной записи пользователя.
//
Процедура ПриВыполненииСтандартныхПериодическихПроверок() Экспорт
	Параметры = Новый Структура;

	// зарезервировано для новых подсистем

	БазоваяПодсистемаВызовСервера.ПриВыполненииСтандартныхПериодическихПроверокНаСервере(Параметры);

	// зарезервировано для новых подсистем

	Контекст				= Новый Структура("Параметры", Параметры);

	ОбработкаПродолжения	= Новый ОписаниеОповещения("ПриВыполненииСтандартныхПериодическихПроверокПодсистемаПользователи", ЭтотОбъект, Контекст);

	ДополнительныеПараметры	= Новый Структура;
	ДополнительныеПараметры.Вставить("ОбработкаПродолжения", ОбработкаПродолжения);

	Если Не Параметры.КонфигурацияБазыДанныхИзмененаДинамически Тогда
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения);

		Возврат;
	КонецЕсли;

	ТекстСообщения = "Версия программы обновлена (внесены изменения в конфигурацию информационной базы).
		           |Для дальнейшей работы рекомендуется перезапустить программу.
		           |Перезапустить?";

	ОписаниеОповещения = Новый ОписаниеОповещения("ПриВыполненииСтандартныхПериодическихПроверокЗавершение", ЭтотОбъект, ДополнительныеПараметры);

	ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет,,, КлиентскоеПриложение.ПолучитьЗаголовок());
КонецПроцедуры

// Продолжение процедуры ПриВыполненииСтандартныхПериодическихПроверок.
Процедура ПриВыполненииСтандартныхПериодическихПроверокПодсистемаПользователи(Результат, Контекст) Экспорт
	ОбработкаПродолжения = Новый ОписаниеОповещения("ПриВыполненииСтандартныхПериодическихПроверокПодсистемаПользователиЗавершение", ЭтотОбъект, Контекст);

	ПользователиКлиент.ПриВыполненииСтандартныхПериодическихПроверок(Контекст.Параметры, ОбработкаПродолжения);
КонецПроцедуры

// Продолжение процедуры ПриВыполненииСтандартныхПериодическихПроверок.
Процедура ПриВыполненииСтандартныхПериодическихПроверокПодсистемаПользователиЗавершение(Результат, Контекст) Экспорт
	ПодключитьОбработчикОжиданияСтандартныхПериодическихПроверок();
КонецПроцедуры

// Продолжение процедуры ПриВыполненииСтандартныхПериодическихПроверок.
Процедура ПриВыполненииСтандартныхПериодическихПроверокЗавершение(Ответ, Контекст) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПараметрыПриложения.Вставить("СтандартныеПодсистемы.ПропуститьПредупреждениеПередЗавершениемРаботыСистемы", Истина);

		ЗавершитьРаботуСистемы(Истина, Истина);

		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Контекст.ОбработкаПродолжения);
КонецПроцедуры

// Выводит предупреждение или текст ошибки.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма, для которой требуется вывод.
//   ПараметрыПредупреждения - Структура - Параметры предупреждения.
//       * Текст               - Строка - Текст предупреждения.
//       * Подробно            - Строка - Необязательный. Тексты ошибок, которые при желании может просмотреть пользователь.
//       * Заголовок           - Строка - Необязательный. Заголовок окна.
//       * ПутьКРеквизитуФормы - Строка - Необязательный. Путь к реквизиту формы, значение которого вызывало ошибку.
//   ОбработчикЗавершения - ОписаниеОповещения - Описание процедуры,
//       которая будет вызвана после завершения показа (со значением Неопределено).
//
Процедура ВывестиПредупреждение(Форма, ПараметрыПредупреждения, ОбработчикЗавершения = Неопределено) Экспорт
	Контекст						= Новый Структура("Текст, Подробно, Заголовок, ПутьКРеквизитуФормы, Форма, ОбработчикЗавершения");
	ЗаполнитьЗначенияСвойств(Контекст, ПараметрыПредупреждения);
	Контекст.Форма					= Форма;
	Контекст.ОбработчикЗавершения	= ОбработчикЗавершения;

	Если Не ЗначениеЗаполнено(Контекст.Текст) Тогда
		ВывестиПредупреждениеЗавершение(Неопределено, Контекст);
		Возврат;
	КонецЕсли;
	Если Контекст.Заголовок = Неопределено Тогда
		Контекст.Заголовок = "";
	КонецЕсли;

	КнопкаПоУмолчанию	= КодВозвратаДиалога.ОК;

	Кнопки				= Новый СписокЗначений;
	Если ЗначениеЗаполнено(Контекст.Подробно) И Контекст.Подробно <> Контекст.Текст Тогда
		Кнопки.Добавить(1, "Подробнее...");
	КонецЕсли;
	Если ТипЗнч(Форма) = Тип("УправляемаяФорма") И ЗначениеЗаполнено(Контекст.ПутьКРеквизитуФормы) Тогда
		Кнопки.Добавить(2, "Перейти к реквизиту");
	КонецЕсли;
	// Кнопка "Закрыть" должна быть крайней справа,
	// т.к. это ее стандартное место в диалогах, в которых команды размещаются внизу формы.
	Кнопки.Добавить(КодВозвратаДиалога.ОК, "Закрыть");

	Обработчик = Новый ОписаниеОповещения("ВывестиПредупреждениеПродолжение", ЭтотОбъект, Контекст);
	ПоказатьВопрос(Обработчик, Контекст.Текст, Кнопки, , КнопкаПоУмолчанию, Контекст.Заголовок);
КонецПроцедуры

// Продолжение процедуры ВывестиПредупреждение.
Процедура ВывестиПредупреждениеПродолжение(Ответ, Контекст) Экспорт
	Если Ответ = 1 Тогда
		Обработчик	= Новый ОписаниеОповещения("ВывестиПредупреждениеЗавершение", ЭтотОбъект, Контекст);
		ПолныйТекст	= Строка(Контекст.Текст) + Символы.ПС + Символы.ПС + Контекст.Подробно;
		ПоказатьПодробнуюИнформацию(Обработчик, ПолныйТекст, Контекст.Заголовок);

		Возврат;
	ИначеЕсли Ответ = 2 Тогда
		Сообщение							= Новый СообщениеПользователю;
		Сообщение.ИдентификаторНазначения	= Контекст.Форма.УникальныйИдентификатор;
		Сообщение.Текст						= Контекст.Текст;
		Сообщение.Поле						= Контекст.ПутьКРеквизитуФормы;
		Сообщение.Сообщить();
	КонецЕсли;

	ВывестиПредупреждениеЗавершение(Неопределено, Контекст);
КонецПроцедуры

// Продолжение процедуры ВывестиПредупреждение.
Процедура ВывестиПредупреждениеЗавершение(Ответ, Контекст) Экспорт
	Если ТипЗнч(Контекст.ОбработчикЗавершения) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикЗавершения, Неопределено);
	КонецЕсли;
КонецПроцедуры

// Выводит текст, который пользователь может скопировать.
//
// Параметры:
//   Обработчик - ОписаниеОповещения - Описание процедуры, которая будет вызвана после завершения показа.
//       Возвращаемое значение аналогично ПоказатьВопросПользователю().
//   Текст     - Строка - Текст информации.
//   Заголовок - Строка - Необязательный. Заголовок окна. По умолчанию "Подробнее".
//
Процедура ПоказатьПодробнуюИнформацию(Обработчик, Текст, Заголовок = Неопределено) Экспорт
	НастройкиДиалога = Новый Структура;
	НастройкиДиалога.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос",	Ложь);
	НастройкиДиалога.Вставить("Картинка",								Неопределено);
	НастройкиДиалога.Вставить("ПоказыватьКартинку",						Ложь);
	НастройкиДиалога.Вставить("МожноКопировать",						Истина);
	НастройкиДиалога.Вставить("КнопкаПоУмолчанию",						0);
	НастройкиДиалога.Вставить("ВыделятьКнопкуПоУмолчанию",				Ложь);
	НастройкиДиалога.Вставить("Заголовок",								Заголовок);

	Если Не ЗначениеЗаполнено(НастройкиДиалога.Заголовок) Тогда
		НастройкиДиалога.Заголовок = "Подробнее";
	КонецЕсли;

	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(0, "Закрыть");

	ПоказатьВопросПользователю(Обработчик, Текст, Кнопки, НастройкиДиалога);
КонецПроцедуры


#Область ОбщегоНазначения

// Возвращает ссылку на общий модуль по имени.
//
// Параметры:
//  Имя - Строка - имя общего модуля, например:
//                 "БазоваяПодсистемаСервер",
//                 "БазоваяПодсистемаКлиент".
//
// Возвращаемое значение:
//  ОбщийМодуль - общий модуль.
//
Функция ОбщийМодуль(Имя) Экспорт
	Модуль = Вычислить(Имя);

#Если НЕ ВебКлиент Тогда
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение СтрШаблон("Общий модуль ""%1"" не найден.", Имя);
	КонецЕсли;
#КонецЕсли

	Возврат Модуль;
КонецФункции

#КонецОбласти

#Область ДлительныеОперации

// Возвращает пустую структуру для параметра ПараметрыОжидания процедуры ДлительныеОперацииКлиент.ОжидатьЗавершение.
//
// Параметры:
//  ФормаВладелец - УправляемаяФорма, Неопределено - форма, из которой вызывается длительная операция.
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания:
//   * ФормаВладелец          - УправляемаяФорма, Неопределено - форма, из которой вызывается длительная операция.
//   * ТекстСообщения         - Строка - текст сообщения, выводимый на форме ожидания.
//                                       Если не задан, то выводится "Пожалуйста, подождите...".
//   * ВыводитьОкноОжидания   - Булево - если Истина, то открыть окно ожидания с визуальной индикацией длительной операции.
//                                       Если используется собственный механизм индикации, то следует указать Ложь.
//   * ВыводитьПрогрессВыполнения - Булево - выводить прогресс выполнения в процентах на форме ожидания.
//   * ОповещениеОПрогрессеВыполнения - ОписаниеОповещения - оповещение, которое периодически вызывается при
//                                      проверке готовности фонового задания. Параметры процедуры-обработчика оповещения:
//     ** Прогресс - Структура, Неопределено - структура со свойствами или Неопределено, если задание было отменено. Свойства:
//	     *** Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                           "Выполнено", если задание было успешно выполнено;
//	                                         "Ошибка", если задание завершено с ошибкой;
//                                           "Отменено", если задание отменено пользователем или администратором.
//	     *** ИдентификаторЗадания - УникальныйИдентификатор - идентификатор запущенного фонового задания.
//	     *** Прогресс             - Структура, Неопределено - результат функции ДлительныеОперации.ПрочитатьПрогресс,
//                                                            если ВыводитьПрогрессВыполнения = Истина.
//	     *** Сообщения            - ФиксированныйМассив, Неопределено - если ВыводитьСообщения = Истина, массив объектов СообщениеПользователю,
//                                  очередная порция сообщений, сформированных в процедуре-обработчике длительной операции.
//     ** ДополнительныеПараметры - Произвольный - произвольные данные, переданные в описании оповещения.
//
//   * ВыводитьСообщения      - Булево - выводить в оповещения о завершении и прогресс сообщения,
//                                       сформированные в процедуре-обработчике длительной операции.
//   * Интервал               - Число  - интервал в секундах между проверками готовности длительной операции.
//                                       По умолчанию 0 - после каждой проверки интервал увеличивается с 1 до 15 секунд
//                                       с коэффициентом 1.4.
//   * ОповещениеПользователя - Структура - содержит свойства:
//     ** Показать            - Булево - если Истина, то по завершении длительной операции вывести оповещение пользователя.
//     ** Текст               - Строка - текст оповещения пользователя.
//     ** НавигационнаяСсылка - Строка - навигационная ссылка оповещения пользователя.
//     ** Пояснение           - Строка - пояснение оповещения пользователя.
//
//   * ПолучатьРезультат - Булево - Служебный параметр. Не предназначен для использования.
//
Функция ПараметрыОжидания(ФормаВладелец) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ФормаВладелец", ФормаВладелец);
	Результат.Вставить("ТекстСообщения", "");
	Результат.Вставить("ВыводитьОкноОжидания", Истина);
	Результат.Вставить("ВыводитьПрогрессВыполнения", Ложь);
	Результат.Вставить("ОповещениеОПрогрессеВыполнения", Неопределено);
	Результат.Вставить("ВыводитьСообщения", Ложь);
	Результат.Вставить("Интервал", 0);
	Результат.Вставить("ПолучатьРезультат", Ложь);

	ОповещениеПользователя = Новый Структура;
	ОповещениеПользователя.Вставить("Показать", Ложь);
	ОповещениеПользователя.Вставить("Текст", Неопределено);
	ОповещениеПользователя.Вставить("НавигационнаяСсылка", Неопределено);
	ОповещениеПользователя.Вставить("Пояснение", Неопределено);
	Результат.Вставить("ОповещениеПользователя", ОповещениеПользователя);

	Возврат Результат;
КонецФункции

// Ожидать завершения выполнения процедуры в фоновом задании и открыть форму ожидания длительной операции.
// Применяется совместно с функцией ДлительныеОперации.ВыполнитьВФоне для повышения отзывчивости пользовательского
// интерфейса, заменяя длительный серверный вызов на запуск фонового задания.
//
// Параметры:
//  ДлительнаяОперация     - Структура - см. возвращаемое значение функции ДлительныеОперации.ВыполнитьВФоне.
//  ОповещениеОЗавершении  - ОписаниеОповещения - оповещение, которое вызывается при завершении фонового задания.
//                           Параметры процедуры-обработчика оповещения:
//   * Результат - Структура, Неопределено - структура со свойствами или Неопределено, если задание было отменено. Свойства:
//	   ** Статус           - Строка - "Выполнено", если задание было успешно выполнено;
//	                                  "Ошибка", если задание завершено с ошибкой.
//	   ** АдресРезультата  - Строка - адрес временного хранилища, в которое будет
//	                                  помещен (или уже помещен) результат работы процедуры.
//	   ** АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат,
//	                                     содержит адрес дополнительного временного хранилища,
//	                                     в которое будет помещен (или уже помещен) результат работы процедуры.
//	   ** КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//	   ** ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//	   ** Сообщения        - ФиксированныйМассив, Неопределено - массив объектов СообщениеПользователю,
//                                                сформированных в процедуре-обработчике длительной операции.
//   * ДополнительныеПараметры - Произвольный - произвольные данные, переданные в описании оповещения.
//  ПараметрыОжидания      - Структура - см. ДлительныеОперацииКлиент.ПараметрыОжидания.
//
Процедура ОжидатьЗавершение(Знач ДлительнаяОперация, Знач ОповещениеОЗавершении = Неопределено, Знач ПараметрыОжидания = Неопределено) Экспорт
	ПроверитьПараметрыОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);

	Если ДлительнаяОперация.Статус <> "Выполняется" Тогда
		Если ОповещениеОЗавершении <> Неопределено Тогда
			Если ДлительнаяОперация.Статус <> "Отменено" Тогда
				Результат = Новый Структура;
				Результат.Вставить("Статус",							ДлительнаяОперация.Статус);
				Результат.Вставить("АдресРезультата",					ДлительнаяОперация.АдресРезультата);
				Результат.Вставить("АдресДополнительногоРезультата",	ДлительнаяОперация.АдресДополнительногоРезультата);
				Результат.Вставить("КраткоеПредставлениеОшибки",		ДлительнаяОперация.КраткоеПредставлениеОшибки);
				Результат.Вставить("ПодробноеПредставлениеОшибки",		ДлительнаяОперация.ПодробноеПредставлениеОшибки);
				Результат.Вставить("Сообщения",							?(ПараметрыОжидания <> Неопределено И ПараметрыОжидания.ВыводитьСообщения, ДлительнаяОперация.Сообщения, Неопределено));
			Иначе
				Результат = Неопределено;
			КонецЕсли;

			Если ДлительнаяОперация.Статус = "Выполнено" И ПараметрыОжидания <> Неопределено Тогда
				ПоказатьОповещение(ПараметрыОжидания);
			КонецЕсли;
			ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
		КонецЕсли;

		Возврат;
	КонецЕсли;

	ПараметрыФормы = ПараметрыОжидания(Неопределено);
	Если ПараметрыОжидания <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ПараметрыОжидания);
	КонецЕсли;
	ПараметрыФормы.Вставить("АдресРезультата",					ДлительнаяОперация.АдресРезультата);
	ПараметрыФормы.Вставить("АдресДополнительногоРезультата",	ДлительнаяОперация.АдресДополнительногоРезультата);
	ПараметрыФормы.Вставить("ИдентификаторЗадания",				ДлительнаяОперация.ИдентификаторЗадания);

	Если ПараметрыФормы.ВыводитьОкноОжидания Тогда
		ПараметрыФормы.Удалить("ФормаВладелец");

		ОткрытьФорму("ОбщаяФорма.ДлительнаяОперация", ПараметрыФормы, ?(ПараметрыОжидания <> Неопределено, ПараметрыОжидания.ФормаВладелец, Неопределено),,,,ОповещениеОЗавершении);
	Иначе
		ПараметрыФормы.Вставить("ОповещениеОЗавершении",	ОповещениеОЗавершении);
		ПараметрыФормы.Вставить("ТекущийИнтервал",			?(ПараметрыФормы.Интервал <> 0, ПараметрыФормы.Интервал, 1));
		ПараметрыФормы.Вставить("Контроль",					ТекущаяДата() + ПараметрыФормы.ТекущийИнтервал); // дата сеанса не используется

		Операции = АктивныеДлительныеОперации();
		Операции.Список.Вставить(ПараметрыФормы.ИдентификаторЗадания, ПараметрыФормы);

		ПодключитьОбработчикОжидания("КонтрольДлительныхОпераций", ПараметрыФормы.ТекущийИнтервал, Истина);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьПараметрыОжидатьЗавершение(Знач ДлительнаяОперация, Знач ОповещениеОЗавершении, Знач ПараметрыОжидания)
	БазоваяПодсистемаКлиентСервер.ПроверитьПараметр("БазоваяПодсистемаКлиент.ОжидатьЗавершение", "ДлительнаяОперация", ДлительнаяОперация, Тип("Структура"));

	Если ОповещениеОЗавершении <> Неопределено Тогда
		БазоваяПодсистемаКлиентСервер.ПроверитьПараметр("БазоваяПодсистемаКлиент.ОжидатьЗавершение", "ОповещениеОЗавершении", ОповещениеОЗавершении, Тип("ОписаниеОповещения"));
	КонецЕсли;

	Если ПараметрыОжидания <> Неопределено Тогда
		ТипыСвойств = Новый Структура;
		Если ПараметрыОжидания.ФормаВладелец <> Неопределено Тогда
			ТипыСвойств.Вставить("ФормаВладелец", Тип("УправляемаяФорма"));
		КонецЕсли;
		ТипыСвойств.Вставить("ТекстСообщения",				Тип("Строка"));
		ТипыСвойств.Вставить("ВыводитьОкноОжидания",		Тип("Булево"));
		ТипыСвойств.Вставить("ВыводитьПрогрессВыполнения",	Тип("Булево"));
		ТипыСвойств.Вставить("ВыводитьСообщения",			Тип("Булево"));
		ТипыСвойств.Вставить("Интервал",					Тип("Число"));
		ТипыСвойств.Вставить("ОповещениеПользователя",		Тип("Структура"));
		ТипыСвойств.Вставить("ПолучатьРезультат",			Тип("Булево"));

		БазоваяПодсистемаКлиентСервер.ПроверитьПараметр("ДлительныеОперацииКлиент.ОжидатьЗавершение", "ПараметрыОжидания", ПараметрыОжидания, Тип("Структура"), ТипыСвойств);
		БазоваяПодсистемаКлиентСервер.Проверить(ПараметрыОжидания.Интервал = 0 Или ПараметрыОжидания.Интервал >= 1, "Параметр ПараметрыОжидания.Интервал должен быть больше или равен 1", "БазоваяПодсистемаКлиент.ОжидатьЗавершение");
		БазоваяПодсистемаКлиентСервер.Проверить(Не (ПараметрыОжидания.ОповещениеОПрогрессеВыполнения <> Неопределено И ПараметрыОжидания.ВыводитьОкноОжидания), "Если параметр ПараметрыОжидания.ВыводитьОкноОжидания установлен в Истина, то параметр ПараметрыОжидания.ОповещениеОПрогрессеВыполнения не поддерживается", "БазоваяПодсистемаКлиент.ОжидатьЗавершение");
	КонецЕсли;
КонецПроцедуры

Процедура ПоказатьОповещение(ДлительнаяОперация) Экспорт
	Оповещение = ДлительнаяОперация.ОповещениеПользователя;
	Если Не Оповещение.Показать Тогда
		Возврат;
	КонецЕсли;

	ПоказатьОповещениеПользователя(?(Оповещение.Текст <> Неопределено, Оповещение.Текст, "Действие выполнено"), Оповещение.НавигационнаяСсылка, Оповещение.Пояснение);
КонецПроцедуры

Функция АктивныеДлительныеОперации() Экспорт
	ИмяПараметра = "СтандартныеПодсистемы.АктивныеДлительныеОперации";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		Операции = Новый Структура("Обработка,Список", Ложь, Новый Соответствие);
		ПараметрыПриложения.Вставить(ИмяПараметра, Операции);
	КонецЕсли;

	Возврат ПараметрыПриложения[ИмяПараметра];
КонецФункции

#КонецОбласти

#Область ЖурналРегистрации

// Выполняет обработку выбора отдельного события в таблице событий.
//
// Параметры:
//  ТекущиеДанные - Строка таблицы значений - строка журнала регистрации.
//  Поле - Поле таблицы значений - поле.
//  ИнтервалДат - интервал.
//  ОтборЖурналаРегистрации - Отбор - отбор журнала регистрации.
//
Процедура СобытияВыбор(ТекущиеДанные, Поле, ИнтервалДат, ОтборЖурналаРегистрации) Экспорт
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Поле.Имя = "Данные" Или Поле.Имя = "ПредставлениеДанных" Тогда
		Если ТекущиеДанные.Данные <> Неопределено
			И Не ЗначениеЗаполнено(ТекущиеДанные.Комментарий)
			И (ТипЗнч(ТекущиеДанные.Данные) <> Тип("Строка")
			И ЗначениеЗаполнено(ТекущиеДанные.Данные)) Тогда

			ОткрытьДанныеДляПросмотра(ТекущиеДанные);

			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Поле.Имя = "Дата" Тогда
		УстановитьИнтервалДатДляПросмотра(ИнтервалДат, ОтборЖурналаРегистрации);

		Возврат;
	КонецЕсли;

	ПросмотрТекущегоСобытияВОтдельномОкне(ТекущиеДанные);
КонецПроцедуры

// Открывает форму для просмотра дополнительных данных события.
//
// Параметры:
//  ТекущиеДанные - Строка таблицы значений - строка журнала регистрации.
//
Процедура ОткрытьДанныеДляПросмотра(ТекущиеДанные) Экспорт
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.Данные = Неопределено Тогда
		ПоказатьПредупреждение(, "Эта запись журнала регистрации не связана с данными (см. колонку ""Данные"")");

		Возврат;
	КонецЕсли;

	Попытка
		ПоказатьЗначение(, ТекущиеДанные.Данные);
	Исключение
		ТекстПредупреждения = "Эта запись журнала регистрации связана с данными, но отобразить их невозможно.
									|%1";
		Если ТекущиеДанные.Событие = "_$Data$_.Delete" Тогда
			// это - событие удаления
			ТекстПредупреждения = СтрШаблон(ТекстПредупреждения, "Данные удалены из информационной базы");
		Иначе
			ТекстПредупреждения = СтрШаблон(ТекстПредупреждения, "Возможно, данные удалены из информационной базы");
		КонецЕсли;
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецПопытки;
КонецПроцедуры

// Запрашивает у пользователя ограничение периода
// и включает его в отбор журнала регистрации.
//
// Параметры:
//  ИнтервалДат - СтандартныйПериод, интервал дат отбора.
//  ОтборЖурналаРегистрации - Структура, отбор журнала регистрации.
//
Процедура УстановитьИнтервалДатДляПросмотра(ИнтервалДат, ОтборЖурналаРегистрации, ОбработчикОповещения = Неопределено) Экспорт
	// Получение текущего периода
	ДатаНачала    = Неопределено;
	ДатаОкончания = Неопределено;
	ОтборЖурналаРегистрации.Свойство("ДатаНачала", ДатаНачала);
	ОтборЖурналаРегистрации.Свойство("ДатаОкончания", ДатаОкончания);
	ДатаНачала    = ?(ТипЗнч(ДатаНачала)    = Тип("Дата"), ДатаНачала, '00010101000000');
	ДатаОкончания = ?(ТипЗнч(ДатаОкончания) = Тип("Дата"), ДатаОкончания, '00010101000000');

	Если ИнтервалДат.ДатаНачала <> ДатаНачала Тогда
		ИнтервалДат.ДатаНачала = ДатаНачала;
	КонецЕсли;

	Если ИнтервалДат.ДатаОкончания <> ДатаОкончания Тогда
		ИнтервалДат.ДатаОкончания = ДатаОкончания;
	КонецЕсли;

	// Редактирование текущего периода.
	Диалог			= Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период	= ИнтервалДат;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОтборЖурналаРегистрации", ОтборЖурналаРегистрации);
	ДополнительныеПараметры.Вставить("ИнтервалДат", ИнтервалДат);
	ДополнительныеПараметры.Вставить("ОбработчикОповещения", ОбработчикОповещения);

	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалДатДляПросмотраЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Диалог.Показать(Оповещение);
КонецПроцедуры

Процедура УстановитьИнтервалДатДляПросмотраЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ОтборЖурналаРегистрации	= ДополнительныеПараметры.ОтборЖурналаРегистрации;
	ИнтервалУстановлен		= Ложь;

	Если Результат <> Неопределено Тогда
		// Обновление текущего периода.
		ИнтервалДат = Результат;
		Если ИнтервалДат.ДатаНачала = '00010101000000' Тогда
			ОтборЖурналаРегистрации.Удалить("ДатаНачала");
		Иначе
			ОтборЖурналаРегистрации.Вставить("ДатаНачала", ИнтервалДат.ДатаНачала);
		КонецЕсли;

		Если ИнтервалДат.ДатаОкончания = '00010101000000' Тогда
			ОтборЖурналаРегистрации.Удалить("ДатаОкончания");
		Иначе
			ОтборЖурналаРегистрации.Вставить("ДатаОкончания", ИнтервалДат.ДатаОкончания);
		КонецЕсли;
		ИнтервалУстановлен = Истина;
	КонецЕсли;

	Если ДополнительныеПараметры.ОбработчикОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикОповещения, ИнтервалУстановлен);
	КонецЕсли;
КонецПроцедуры

// Открывает форму просмотра события обработки "Журнал регистрации"
// для отображения в ней подробных данных выбранного события.
//
// Параметры:
//  Данные  - Строка таблицы значений - строка журнала регистрации.
//
Процедура ПросмотрТекущегоСобытияВОтдельномОкне(Данные) Экспорт
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	КлючУникальностиФормы = Данные.АдресДанных;
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма.Событие", СобытиеЖурналаРегистрацииВСтруктуру(Данные),, КлючУникальностиФормы);
КонецПроцедуры

Функция СобытиеЖурналаРегистрацииВСтруктуру(Данные)
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		Возврат Данные;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Дата",                    Данные.Дата);
	ПараметрыФормы.Вставить("ИмяПользователя",         Данные.ИмяПользователя);
	ПараметрыФормы.Вставить("ПредставлениеПриложения", Данные.ПредставлениеПриложения);
	ПараметрыФормы.Вставить("Компьютер",               Данные.Компьютер);
	ПараметрыФормы.Вставить("Событие",                 Данные.Событие);
	ПараметрыФормы.Вставить("ПредставлениеСобытия",    Данные.ПредставлениеСобытия);
	ПараметрыФормы.Вставить("Комментарий",             Данные.Комментарий);
	ПараметрыФормы.Вставить("ПредставлениеМетаданных", Данные.ПредставлениеМетаданных);
	ПараметрыФормы.Вставить("Данные",                  Данные.Данные);
	ПараметрыФормы.Вставить("ПредставлениеДанных",     Данные.ПредставлениеДанных);
	ПараметрыФормы.Вставить("Транзакция",              Данные.Транзакция);
	ПараметрыФормы.Вставить("СтатусТранзакции",        Данные.СтатусТранзакции);
	ПараметрыФормы.Вставить("Сеанс",                   Данные.Сеанс);
	ПараметрыФормы.Вставить("РабочийСервер",           Данные.РабочийСервер);
	ПараметрыФормы.Вставить("ОсновнойIPПорт",          Данные.ОсновнойIPПорт);
	ПараметрыФормы.Вставить("ВспомогательныйIPПорт",   Данные.ВспомогательныйIPПорт);

	Если ЗначениеЗаполнено(Данные.АдресДанных) Тогда
		ПараметрыФормы.Вставить("АдресДанных", Данные.АдресДанных);
	КонецЕсли;

	Возврат ПараметрыФормы;
КонецФункции

// Заполняет отбор в соответствии с значением в текущей колонке событий.
//
// Параметры:
//  ТекущиеДанные - Строка таблицы значений.
//  ТекущийЭлемент - Текущий элемент строки таблицы значений.
//  ОтборЖурналаРегистрации - Отбор - отбор журнала регистрации.
//  КолонкиИсключения - Список значений - колонки исключения.
//
// Возвращаемое значение:
//  Булево - Истина, если отбор установлен, Ложь - Иначе.
//
Функция УстановитьОтборПоЗначениюВТекущейКолонке(ТекущиеДанные, ТекущийЭлемент, ОтборЖурналаРегистрации, КолонкиИсключения) Экспорт
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	ИмяКолонкиПредставления = ТекущийЭлемент.Имя;

	Если КолонкиИсключения.Найти(ИмяКолонкиПредставления) <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗначениеОтбора = ТекущиеДанные[ИмяКолонкиПредставления];
	Представление  = ТекущиеДанные[ИмяКолонкиПредставления];

	ИмяЭлементаОтбора = ИмяКолонкиПредставления;
	Если ИмяКолонкиПредставления = "ИмяПользователя" Тогда
		ИмяЭлементаОтбора	= "Пользователь";
		ЗначениеОтбора		= ТекущиеДанные["Пользователь"];
	ИначеЕсли ИмяКолонкиПредставления = "ПредставлениеПриложения" Тогда
		ИмяЭлементаОтбора	= "ИмяПриложения";
		ЗначениеОтбора		= ТекущиеДанные["ИмяПриложения"];
	ИначеЕсли ИмяКолонкиПредставления = "ПредставлениеСобытия" Тогда
		ИмяЭлементаОтбора	= "Событие";
		ЗначениеОтбора		= ТекущиеДанные["Событие"];
	КонецЕсли;

	// По пустым строкам не отбираем.
	Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") И ПустаяСтрока(ЗначениеОтбора) Тогда
		// Для пользователя по умолчанию имя пустое, разрешаем отбирать.
		Если ИмяКолонкиПредставления <> "ИмяПользователя" Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	ТекущееЗначение = Неопределено;
	Если ОтборЖурналаРегистрации.Свойство(ИмяЭлементаОтбора, ТекущееЗначение) Тогда
		// Уже установлен отбор
		ОтборЖурналаРегистрации.Удалить(ИмяЭлементаОтбора);
	КонецЕсли;

	Если ИмяЭлементаОтбора = "Данные" // Не списочные отборы, только 1 значение.
		Или ИмяЭлементаОтбора = "Комментарий"
		Или ИмяЭлементаОтбора = "Транзакция"
		Или ИмяЭлементаОтбора = "ПредставлениеДанных" Тогда
		ОтборЖурналаРегистрации.Вставить(ИмяЭлементаОтбора, ЗначениеОтбора);
	Иначе
		СписокОтбора = Новый СписокЗначений;
		СписокОтбора.Добавить(ЗначениеОтбора, Представление);

		ОтборЖурналаРегистрации.Вставить(ИмяЭлементаОтбора, СписокОтбора);
	КонецЕсли;

	Возврат Истина;
КонецФункции

// Возвращает новую структуру для параметра ПараметрыВыполнения функции ВыполнитьВФоне.
//
// Параметры:
//   ИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы,
//                               во временное хранилище которой надо поместить результат выполнения процедуры.
//
// Возвращаемое значение:
//   Структура - со свойствами:
//     * ИдентификаторФормы      - УникальныйИдентификатор - уникальный идентификатор формы,
//                               во временное хранилище которой надо поместить результат выполнения процедуры.
//     * ДополнительныйРезультат - Булево     - признак использования дополнительного временного хранилища для передачи
//                                 результата из фонового задания в родительский сеанс. По умолчанию - Ложь.
//     * ОжидатьЗавершение       - Число, Неопределено - таймаут в секундах ожидания завершения фонового задания.
//                               Если задано Неопределено, то ждать до момента завершения задания.
//                               Если задано 0, то ждать завершения задания не требуется.
//                               По умолчанию - 2 секунды; а для низкой скорости соединения - 4.
//     * НаименованиеФоновогоЗадания - Строка - описание фонового задания. По умолчанию - имя процедуры.
//     * КлючФоновогоЗадания      - Строка    - уникальный ключ для активных фоновых заданий, имеющих такое же имя процедуры.
//                                              По умолчанию, не задан.
//     * АдресРезультата          - Строка - адрес временного хранилища, в которое должен быть помещен результат
//                                           работы процедуры. Если не задан, адрес формируется автоматически.
//     * ЗапуститьВФоне           - Булево - если Истина, то задание будет всегда выполняться в фоне,
//                               за исключением режима отладки.
//                               В файловом варианте, при наличии ранее запущенных заданий,
//                               новое задание становится в очередь и начинает выполняться после завершения предыдущих.
//     * ЗапуститьНеВФоне         - Булево - если Истина, задание всегда будет запускаться непосредственно,
//                               без использования фонового задания.
//     * БезРасширений            - Булево - если Истина, то фоновое задание будет запущено без подключения
//                               расширений конфигурации.
//
Функция ПараметрыВыполненияВФоне(Знач ИдентификаторФормы) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторФормы",			ИдентификаторФормы);
	Результат.Вставить("ДополнительныйРезультат",		Ложь);
	Результат.Вставить("ОжидатьЗавершение",				?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2));
	Результат.Вставить("НаименованиеФоновогоЗадания",	"");
	Результат.Вставить("КлючФоновогоЗадания",			"");
	Результат.Вставить("АдресРезультата",				Неопределено);
	Результат.Вставить("ЗапуститьНеВФоне",				Ложь);
	Результат.Вставить("ЗапуститьВФоне",				Ложь);
	Результат.Вставить("БезРасширений",					Ложь);

	Возврат Результат;
КонецФункции

#КонецОбласти