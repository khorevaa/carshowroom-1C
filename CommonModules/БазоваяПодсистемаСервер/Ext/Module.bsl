////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая подсистема"
//
////////////////////////////////////////////////////////////////////////////////

// Для вызова из обработчика УстановкаПараметровСеанса модуля сеанса.
//
// Параметры:
//  ИменаПараметровСеанса - Массив, Неопределено - в массиве имена параметров сеанса для инициализации.
//
// Возвращаемое значение:
//  Массив - имена установленных параметров сеанса.
//
Функция УстановкаПараметровСеанса(ИменаПараметровСеанса) Экспорт
	// Параметры сеанса, инициализация которых требует обращения к одним и тем же данным
	// следует инициализировать сразу группой. Для того, чтобы избежать их повторной инициализации,
	// имена уже установленных параметров сеанса сохраняются в массиве УстановленныеПараметры.
	УстановленныеПараметры = Новый Массив;

	Если ИменаПараметровСеанса = Неопределено Тогда
		ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(Новый Соответствие);
		Справочники.ВерсииРасширений.УстановкаПараметровСеанса(ИменаПараметровСеанса, УстановленныеПараметры);

		// При установке соединения с информационной базой до вызова всех остальных обработчиков.
		ПередЗапускомПрограммы();

		Возврат УстановленныеПараметры;
	КонецЕсли;

	Если ИменаПараметровСеанса.Найти("ПараметрыКлиентаНаСервере") <> Неопределено Тогда
		ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(Новый Соответствие);
		УстановленныеПараметры.Добавить("ПараметрыКлиентаНаСервере");
	КонецЕсли;

	Справочники.ВерсииРасширений.УстановкаПараметровСеанса(ИменаПараметровСеанса, УстановленныеПараметры);

	Если ИменаПараметровСеанса.Найти("БуферОбмена") <> Неопределено Тогда
		ПараметрыСеанса.БуферОбмена = Новый ФиксированнаяСтруктура(Новый Структура("Источник, Данные"));
		УстановленныеПараметры.Добавить("БуферОбмена");
	КонецЕсли;

	Обработчики = Новый Соответствие;
	ИнтеграцияПодсистемСервер.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);

	ВыполнитьОбработчикиУстановкиПараметровСеанса(ИменаПараметровСеанса, Обработчики, УстановленныеПараметры);

	Возврат УстановленныеПараметры;
КонецФункции

Процедура ПередЗапускомПрограммы()
	// Привилегированный режим (установлен платформой).

	// Проверка основного языка программирования, установленного в конфигурации.
	Если Метаданные.ВариантВстроенногоЯзыка <> Метаданные.СвойстваОбъектов.ВариантВстроенногоЯзыка.Русский Тогда
		ВызватьИсключение СтрШаблон("Вариант встроенного языка конфигурации ""%1"" не поддерживается. Необходимо использовать вариант языка ""%2"".",
			Метаданные.ВариантВстроенногоЯзыка,
			Метаданные.СвойстваОбъектов.ВариантВстроенногоЯзыка.Русский);
	КонецЕсли;

	// Проверка настройки совместимости конфигурации с версией платформы.
	СистемнаяИнформация	= Новый СистемнаяИнформация;
	МинимальнаяВерсияПлатформы = "8.3.10.1981";
	Если БазоваяПодсистемаКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, МинимальнаяВерсияПлатформы) < 0 Тогда
		ВызватьИсключение СтрШаблон("Для запуска необходима версия платформы 1С:Предприятие %1 или выше.", МинимальнаяВерсияПлатформы);
	КонецЕсли;

	Режимы			= Метаданные.СвойстваОбъектов.РежимСовместимости;
	ТекущийРежим	= Метаданные.РежимСовместимости;

	Если ТекущийРежим = Режимы.НеИспользовать Тогда
		НедоступныйРежим = "";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_1 Тогда
		НедоступныйРежим = "8.1"
	ИначеЕсли ТекущийРежим = Режимы.Версия8_2_13 Тогда
		НедоступныйРежим = "8.2.13"
	ИначеЕсли ТекущийРежим = Режимы.Версия8_2_16 Тогда
		НедоступныйРежим = "8.2.16";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_1 Тогда
		НедоступныйРежим = "8.3.1";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_2 Тогда
		НедоступныйРежим = "8.3.2";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_3 Тогда
		НедоступныйРежим = "8.3.3";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_4 Тогда
		НедоступныйРежим = "8.3.4";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_5 Тогда
		НедоступныйРежим = "8.3.5";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_6 Тогда
		НедоступныйРежим = "8.3.6";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_7 Тогда
		НедоступныйРежим = "8.3.7";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_8 Тогда
		НедоступныйРежим = "8.3.8";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_9 Тогда
		НедоступныйРежим = "8.3.9";
	Иначе
		НедоступныйРежим = "";
	КонецЕсли;

	Если ЗначениеЗаполнено(НедоступныйРежим) Тогда
		ВызватьИсключение СтрШаблон("Режим совместимости конфигурации с 1С:Предприятием версии %1 не поддерживается.
			           |Для запуска установите в конфигурации режим совместимости с 1С:Предприятием
			           |версии не ниже 8.3.10 или ""Не использовать"".",
			НедоступныйРежим);
	КонецЕсли;

	// Проверка заполнения версии конфигурации.
	Если ПустаяСтрока(Метаданные.Версия) Тогда
		ВызватьИсключение "Не заполнено свойство конфигурации Версия.";
	Иначе
		Попытка
			НулеваяВерсия = БазоваяПодсистемаКлиентСервер.СравнитьВерсии(Метаданные.Версия, "0.0.0.0") = 0;
		Исключение
			ВызватьИсключение СтрШаблон("Не правильно заполнено свойство конфигурации Версия: ""%1"".
				           |Правильный формат, например: ""1.2.3.45"".",
				Метаданные.Версия);
		КонецПопытки;
		Если НулеваяВерсия Тогда
			ВызватьИсключение СтрШаблон("Не правильно заполнено свойство конфигурации Версия: ""%1"".
				           |Версия не может быть нулевой.",
				Метаданные.Версия);
		КонецЕсли;
	КонецЕсли;

	Если (Метаданные.ОсновныеРоли.Количество() <> 2 И Метаданные.ОсновныеРоли.Количество() <> 3)
	 Или Не Метаданные.ОсновныеРоли.Содержит(Метаданные.Роли.АдминистраторСистемы)
	 Или Не Метаданные.ОсновныеРоли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
		ВызватьИсключение "В конфигурации в свойстве ОсновныеРоли не указаны стандартные роли
			           |АдминистраторСистемы и ПолныеПрава или указаны лишние роли.";
	КонецЕсли;

	// Проверка возможности выполнения обработчиков установки параметров сеанса для запуска программы.
	ПроверитьВозможностьВыполненияОбработчиковУстановкиПараметровСеанса();

	Если Не ЗначениеЗаполнено(ПользователиИнформационнойБазы.ТекущийПользователь().Имя) И ОбновлениеИБСервер.ВерсияИБ("СтандартныеПодсистемы") = "0.0.0.0" Тогда
		ПользователиСервер.УстановитьНачальныеНастройки("");
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьОбработчикиУстановкиПараметровСеанса(ИменаПараметровСеанса, Обработчики, УстановленныеПараметры)
	Перем ТекстСообщения;

	// Массив с ключами параметров сеанса
	// задаются начальным словом в имени параметра сеанса и символом "*".
	ПараметрыСеансаКлючи = Новый Массив;

	Для Каждого Запись Из Обработчики Цикл
		Если СтрНайти(Запись.Ключ, "*") > 0 Тогда
			КлючПараметра = СокрЛП(Запись.Ключ);
			ПараметрыСеансаКлючи.Добавить(Лев(КлючПараметра, СтрДлина(КлючПараметра)-1));
		КонецЕсли;
	КонецЦикла;

	Для каждого ИмяПараметра Из ИменаПараметровСеанса Цикл
		Если УстановленныеПараметры.Найти(ИмяПараметра) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Обработчик = Обработчики.Получить(ИмяПараметра);
		Если Обработчик <> Неопределено Тогда
			ПараметрыОбработчика = Новый Массив;
			ПараметрыОбработчика.Добавить(ИмяПараметра);
			ПараметрыОбработчика.Добавить(УстановленныеПараметры);
			ВыполнитьМетодКонфигурации(Обработчик, ПараметрыОбработчика);
			Продолжить;
		КонецЕсли;

		Для Каждого ИмяКлючаПараметра Из ПараметрыСеансаКлючи Цикл
			Если СтрНачинаетсяС(ИмяПараметра, ИмяКлючаПараметра) Тогда
				Обработчик				= Обработчики.Получить(ИмяКлючаПараметра + "*");
				ПараметрыОбработчика	= Новый Массив;
				ПараметрыОбработчика.Добавить(ИмяПараметра);
				ПараметрыОбработчика.Добавить(УстановленныеПараметры);
				ВыполнитьМетодКонфигурации(Обработчик, ПараметрыОбработчика);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Проверяет возможность выполнения обработчиков установки параметров сеанса.
//
// В случае, если при текущих настройках профилей безопасности (в кластере серверов и в информационной
// базе) выполнение обработчиков установки параметров сеанса невозможно - генерируется исключение,
// содержащее описание причины невозможности выполнения обработчиков установки параметров сеанса
// и перечень действий, которые можно предпринять для устранения этой причины.
//
Процедура ПроверитьВозможностьВыполненияОбработчиковУстановкиПараметровСеанса()
	Если ИнформационнаяБазаФайловая(СтрокаСоединенияИнформационнойБазы()) Тогда
		Возврат;
	КонецЕсли;

	// зарезервировано для новых подсистем

	Попытка
		ДоступенПривилегированныйРежим = Вычислить("ДоступенПереходВПривилегированныйРежим()");
	Исключение
		ВызватьИсключение СтрШаблон("Невозможно выполнение обработчиков установки параметров сеанса по причине: %1.
					|
					|Возможно, для информационной базы через консоль кластера был установлен профиль безопасности, не допускающий выполнения внешних модулей без установки безопасного режима. В этом случае для восстановления работоспособности программы требуется отключить использование профиля безопасности через консоль кластера и заново настроить профили безопасности с помощью интерфейса конфигурации (соответствующие команды находятся в разделе настроек программы).При этом программа будет автоматически корректно настроена на использование совместно с включенными профилями безопасности.",
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

// Проверяет возможность перехода в привилегированный режим из текущего безопасного режима.
//
// Возвращаемое значение: Булево.
//
Функция ДоступенПереходВПривилегированныйРежим()
	УстановитьПривилегированныйРежим(Истина);

	Возврат ПривилегированныйРежим();
КонецФункции

// Заполняет структуру параметров, необходимых для работы клиентского кода
// данной подсистемы при запуске конфигурации, т.е. в обработчиках событий.
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы.
//
// Важно: при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам.
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
// Возвращаемое значение:
//   Булево   - Ложь, если дальнейшее заполнение параметров необходимо прервать.
//
Функция ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	ЭтоВызовПередНачаломРаботыСистемы = Параметры.ПолученныеПараметрыКлиента <> Неопределено;

	// Обязательные параметры для продолжения работы.
	Параметры.Вставить("ЕстьДоступДляОбновленияВерсииПлатформы",				ПользователиСервер.ЭтоПолноправныйПользователь(,Истина));
	Параметры.Вставить("ИменаПодсистем",										БазоваяПодсистемаСерверПовтИсп.ИменаПодсистем());
	Параметры.Вставить("ЭтоУчебнаяПлатформа",									ЭтоУчебнаяПлатформа());
	Параметры.Вставить("ИмяТекущегоПользователя",								ТекущийПользователь().Имя);
	Параметры.Вставить("ИмяCOMСоединителя",										БазоваяПодсистемаКлиентСервер.ИмяCOMСоединителя());
	Параметры.Вставить("КодОсновногоЯзыка",										Метаданные.ОсновнойЯзык.КодЯзыка);
	Параметры.Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",		ЗапрашиватьПодтверждениеПриЗавершенииПрограммы());

	ОбщиеПараметры = ОбщиеПараметрыБазовойФункциональности();

	Параметры.Вставить("МинимальнаяВерсияПлатформы",							ОбщиеПараметры.МинимальнаяВерсияПлатформы);
	Параметры.Вставить("РекомендуемаяВерсияПлатформы",							ОбщиеПараметры.РекомендуемаяВерсияПлатформы);
	Параметры.Вставить("РаботаВПрограммеЗапрещена",								ОбщиеПараметры.РаботаВПрограммеЗапрещена);
	Параметры.Вставить("РекомендуемыйОбъемОперативнойПамяти",					ОбщиеПараметры.РекомендуемыйОбъемОперативнойПамяти);

	Параметры.Вставить("ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти",	ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти());
	Параметры.Вставить("ЭтоСеансВнешнегоПользователя",							ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя());
	Параметры.Вставить("ИнформационнаяБазаФайловая",							ИнформационнаяБазаФайловая());

	Если ЭтоВызовПередНачаломРаботыСистемы И Не Параметры.ПолученныеПараметрыКлиента.Свойство("ОпцииИнтерфейса") Тогда
		Параметры.Вставить("ОпцииИнтерфейса", Новый Структура);
	КонецЕсли;

	Если ЭтоВызовПередНачаломРаботыСистемы Тогда
		ОшибкаНедостаточноПравДляВходаВПрограмму = ПользователиСервер.ОшибкаНедостаточноПравДляВходаВПрограмму(Не Параметры.ПолученныеПараметрыКлиента.Свойство("ОшибкаНедостаточноПравДляВходаВПрограмму"));

		Если ЗначениеЗаполнено(ОшибкаНедостаточноПравДляВходаВПрограмму) Тогда
			Параметры.Вставить("ОшибкаНедостаточноПравДляВходаВПрограмму", ОшибкаНедостаточноПравДляВходаВПрограмму);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	// зарезервировано для новых подсистем

	Если Не ОбновлениеИБСервер.ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры) И ЭтоВызовПередНачаломРаботыСистемы Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ЭтоВызовПередНачаломРаботыСистемы
	   И Не Параметры.ПолученныеПараметрыКлиента.Свойство("ПоказатьНерекомендуемуюВерсиюПлатформы")
	   И ПоказатьНерекомендуемуюВерсиюПлатформы(Параметры) Тогда

		Параметры.Вставить("ПоказатьНерекомендуемуюВерсиюПлатформы");
		БазоваяПодсистемаВызовСервера.СкрытьРабочийСтолПриНачалеРаботыСистемы();

		Возврат Ложь;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	Если ЭтоВызовПередНачаломРаботыСистемы
	   И Не Параметры.ПолученныеПараметрыКлиента.Свойство("ВосстановитьСвязьСГлавнымУзлом")
	   И ПланыОбмена.ГлавныйУзел() = Неопределено
	   И ЗначениеЗаполнено(Константы.ГлавныйУзел.Получить()) Тогда

		УстановитьПривилегированныйРежим(Ложь);
		Параметры.Вставить("ВосстановитьСвязьСГлавнымУзлом", ПользователиСервер.ЭтоПолноправныйПользователь(, Истина, Ложь));
		БазоваяПодсистемаВызовСервера.СкрытьРабочийСтолПриНачалеРаботыСистемы();

		Возврат Ложь;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);

	Если ОбновлениеИБСерверПовтИсп.НеобходимоОбновлениеИнформационнойБазы() И ОбновлениеИБСервер.СтатусНевыполненныхОбработчиков(Истина) = "СтатусНеВыполнено" Тогда
		Параметры.Вставить("НеобходимоВыполнитьОбработчикиОтложенногоОбновления");
	КонецЕсли;

	// зарезервировано для новых подсистем

	// Проверка необходимости предварительного обновления параметров работы программы.
	Если ЭтоВызовПередНачаломРаботыСистемы И НЕ Параметры.ПолученныеПараметрыКлиента.Свойство("НеобходимоОбновлениеПараметровРаботыПрограммы") Тогда
		Если РегистрыСведений.ПараметрыРаботыПрограммы.НеобходимоОбновление() Тогда
			// Будет выполнено предварительное обновление.
			Параметры.Вставить("НеобходимоОбновлениеПараметровРаботыПрограммы");

			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	// Обязательные параметры для всех режимов работы.
	Параметры.Вставить("ПодробнаяИнформация", Метаданные.ПодробнаяИнформация);

	// зарезервировано для новых подсистем

	// Параметры для работы в локальном режиме или
	// в сеансе с установленными значениями разделителей в модели сервиса.

	Если ОбновлениеИБСерверПовтИсп.НеобходимоОбновлениеИнформационнойБазы() Тогда
		Параметры.Вставить("НеобходимоОбновлениеИнформационнойБазы");
		БазоваяПодсистемаВызовСервера.СкрытьРабочийСтолПриНачалеРаботыСистемы();
	КонецЕсли;

	// зарезервировано для новых подсистем

	Отказ = Ложь;
	Если ЭтоВызовПередНачаломРаботыСистемы Тогда
		ПользователиСервер.ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры, Отказ, Истина);
	КонецЕсли;
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;

	ДобавитьОбщиеПараметрыРаботыКлиента(Параметры);

	Если ЭтоВызовПередНачаломРаботыСистемы И Параметры.Свойство("НеобходимоОбновлениеИнформационнойБазы") Тогда
		// Не следует добавлять остальные параметры до окончания обновления ИБ,
		// так как они могут рассчитывать, что обновление ИБ уже выполнено.
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

// Заполняет структуру параметров, необходимых для работы клиентского кода
// данной подсистемы.
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьПараметрыРаботыКлиента(Параметры) Экспорт
	Параметры.Вставить("ИменаПодсистем",									БазоваяПодсистемаСерверПовтИсп.ИменаПодсистем());
	Параметры.Вставить("ЭтоУчебнаяПлатформа",								ЭтоУчебнаяПлатформа());
	Параметры.Вставить("ИмяCOMСоединителя",									БазоваяПодсистемаКлиентСервер.ИмяCOMСоединителя());

	ДобавитьОбщиеПараметрыРаботыКлиента(Параметры);

	Параметры.Вставить("ИмяКонфигурации",									Метаданные.Имя);
	Параметры.Вставить("СинонимКонфигурации",								Метаданные.Синоним);
	Параметры.Вставить("ВерсияКонфигурации",								Метаданные.Версия);
	Параметры.Вставить("ПодробнаяИнформация",								Метаданные.ПодробнаяИнформация);
	Параметры.Вставить("КодОсновногоЯзыка",									Метаданные.ОсновнойЯзык.КодЯзыка);

	Параметры.Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",	ЗапрашиватьПодтверждениеПриЗавершенииПрограммы());

	Параметры.Вставить("ИнформационнаяБазаФайловая",						ИнформационнаяБазаФайловая());
КонецПроцедуры

// Заполняет структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации и в дальнейшем во время работы с ней.
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьОбщиеПараметрыРаботыКлиента(Параметры)
	УстановитьПривилегированныйРежим(Истина);
	Параметры.Вставить("АвторизованныйПользователь", ПользователиКлиентСервер.АвторизованныйПользователь());
	Параметры.Вставить("ЗаголовокПриложения", СокрЛП(Константы.ЗаголовокСистемы.Получить()));
	УстановитьПривилегированныйРежим(Ложь);

	Параметры.Вставить("ЭтоГлавныйУзел", НЕ ЭтоПодчиненныйУзелРИБ());

	Параметры.Вставить("ТребуетсяОбновлениеКонфигурацииУзлаРИБ", ТребуетсяОбновлениеКонфигурацииПодчиненногоУзлаРИБ());
КонецПроцедуры

// Сохраняет ссылку на главный узел в константе ГлавныйУзел для возможности восстановления.
Процедура СохранитьГлавныйУзел() Экспорт
	ГлавныйУзелМенеджер				= Константы.ГлавныйУзел.СоздатьМенеджерЗначения();
	ГлавныйУзелМенеджер.Значение	= ПланыОбмена.ГлавныйУзел();
	ОбновлениеИБСервер.ЗаписатьДанные(ГлавныйУзелМенеджер);
КонецПроцедуры

// Возвращает сохраненные в информационной базы параметры администрирования.
// Предназначена для использования в механизмах, требующих для свой работы
// ввода параметров администрирования информационной базы и/или кластера серверов.
// Например, блокировка установки соединений с информационной базой.
//
// Возвращаемое значение:
//  Структура - содержит свойства двух структур
//              АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера
//              и АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера.
//              При этом поля, содержащие пароли, возвращаются пустыми. Если параметры администрирования
//              не были ранее сохранены при помощи функции УстановитьПараметрыАдминистрирования
//              то буду возвращены автоматически вычисленные параметры администрирования по-умолчанию.
//
Функция ПараметрыАдминистрирования() Экспорт
	Если Не ПользователиСервер.ЭтоПолноправныйПользователь(, Истина) Тогда
		ВызватьИсключение "Недостаточно прав для выполнения операции";
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	ПараметрыАдминистрированияИБ			= Константы.ПараметрыАдминистрированияИБ.Получить().Получить();
	ПараметрыАдминистрированияПоУмолчанию	= ПараметрыАдминистрированияПоУмолчанию();

	Если ТипЗнч(ПараметрыАдминистрированияИБ) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыАдминистрированияПоУмолчанию, ПараметрыАдминистрированияИБ);
	КонецЕсли;
	ПараметрыАдминистрированияИБ = ПараметрыАдминистрированияПоУмолчанию;

	Если Не ИнформационнаяБазаФайловая() Тогда
		ПрочитатьПараметрыИзСтрокиСоединения(ПараметрыАдминистрированияИБ);
	КонецЕсли;

	Возврат ПараметрыАдминистрированияИБ;
КонецФункции

Функция ПараметрыАдминистрированияПоУмолчанию()
	ПараметрыАдминистрированияКластера	= БазоваяПодсистемаКлиентСервер.ПараметрыАдминистрированияКластера();
	ПараметрыАдминистрированияИБ		= БазоваяПодсистемаКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера();

	// Объединяем структуры параметров.
	СтруктураПараметровАдминистрирования = ПараметрыАдминистрированияКластера;
	Для Каждого Элемент Из ПараметрыАдминистрированияИБ Цикл
		СтруктураПараметровАдминистрирования.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;

	СтруктураПараметровАдминистрирования.Вставить("ПринятоРешениеПоОткрытиюВнешнихОтчетовИОбработок", Ложь);

	Возврат СтруктураПараметровАдминистрирования;
КонецФункции

// Сохраняет параметры администрирования информационной базы и кластера серверов.
// При сохранении поля, содержащие пароли, будут очищены в целях безопасности.
//
// Параметры:
//  ПараметрыАдминистрированияИБ - Структура - см. функция ПараметрыАдминистрирования.
//
// Пример:
//  ПараметрыАдминистрирования = СтандартныеПодсистемыСервер.ПараметрыАдминистрирования();
//  // Вывод параметров администрирования администратору для подтверждения корректности и ввода паролей.
//  // Далее выполнение действий, связанных с подключением к кластеру серверов.
//  СтандартныеПодсистемыСервер.ПараметрыАдминистрирования(ПараметрыАдминистрирования);
//
Процедура УстановитьПараметрыАдминистрирования(ПараметрыАдминистрированияИБ) Экспорт
	ПараметрыАдминистрированияИБ.ПарольАдминистратораКластера			= "";
	ПараметрыАдминистрированияИБ.ПарольАдминистратораИнформационнойБазы	= "";
	Константы.ПараметрыАдминистрированияИБ.Установить(Новый ХранилищеЗначения(ПараметрыАдминистрированияИБ));
КонецПроцедуры

Процедура ПрочитатьПараметрыИзСтрокиСоединения(СтруктураПараметровАдминистрирования)
	ПодстрокиСтрокиСоединения = СтрРазделить(СтрокаСоединенияИнформационнойБазы(), ";");

	СтрокаИмениСервера									= БазоваяПодсистемаКлиентСервер.СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[0], 7));
	СтруктураПараметровАдминистрирования.ИмяВКластере	= БазоваяПодсистемаКлиентСервер.СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[1], 6));

	СписокСерверовКластера = СтрРазделить(СтрокаИмениСервера, ",");

	ИмяСервера = СписокСерверовКластера[0];

	// Протокол может быть только tcp. Можно отбросить.
	Если СтрНачинаетсяС(ВРег(ИмяСервера), "TCP://") Тогда
		ИмяСервера = Сред(ИмяСервера, 7);
	КонецЕсли;

	// Если в качестве имени сервера передается адрес IPv6, то порт может быть только после закрывающей квадратной скобки.
	НачальнаяПозиция = СтрНайти(ИмяСервера, "]");
	Если НачальнаяПозиция <> 0 Тогда
		РазделительПорта = СтрНайти(ИмяСервера, ":",, НачальнаяПозиция);
	Иначе
		РазделительПорта = СтрНайти(ИмяСервера, ":");
	КонецЕсли;

	Если РазделительПорта > 0 Тогда
		АдресАгентаСервера	= Сред(ИмяСервера, 1, РазделительПорта - 1);
		ПортКластера		= Число(Сред(ИмяСервера, РазделительПорта + 1));
		Если СтруктураПараметровАдминистрирования.ПортКластера = 1541 Тогда
			СтруктураПараметровАдминистрирования.ПортКластера = ПортКластера;
		КонецЕсли;
	Иначе
		АдресАгентаСервера = ИмяСервера;
	КонецЕсли;

	СтруктураПараметровАдминистрирования.АдресАгентаСервера = АдресАгентаСервера;
КонецПроцедуры

// Возвращает фиксированное соответствие, содержащее некоторые параметры клиента:
//  ПараметрЗапуска                    - Строка,
//  СтрокаСоединенияИнформационнойБазы - Строка - строка соединения, полученная на клиенте.
//
// Возвращает пустое фиксированное соответствие, если ТекущийРежимЗапуска() = Неопределено.
//
Функция ПараметрыКлиентаНаСервере() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыКлиента = ПараметрыСеанса.ПараметрыКлиентаНаСервере;
	УстановитьПривилегированныйРежим(Ложь);

	Если ПараметрыКлиента.Количество() = 0 И ТекущийРежимЗапуска() <> Неопределено Тогда
		ВызватьИсключение "Не заполнены параметры клиента на сервере.";
	КонецЕсли;

	Возврат ПараметрыКлиента;
КонецФункции

// Проверят, что выполнение происходит на учебной платформе,
// на которой, например, недоступно получение свойства ПользовательОС.
//
Функция ЭтоУчебнаяПлатформа() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();

	Попытка
		ПользовательОС		= ТекущийПользователь.ПользовательОС;
	Исключение
		ТекущийПользователь	= Неопределено;
	КонецПопытки;

	Возврат ТекущийПользователь = Неопределено;
КонецФункции

// Возвращает текущего пользователя информационной базы.
//
Функция ТекущийПользователь() Экспорт
	// Вычисляем актуальное имя пользователя, даже если оно было ранее изменено в текущем сеансе;
	// Например, для подключения к текущей ИБ через внешнее соединение из этого сеанса;
	// Во всех остальных случаях достаточно получить ПользователиИнформационнойБазы.ТекущийПользователь().
	ТекущийПользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);

	Если ТекущийПользователь = Неопределено Тогда
		ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	КонецЕсли;

	Возврат ТекущийПользователь;
КонецФункции

// Получает настройку необходимости выводить подтверждение при завершении работы программы
// для текущего пользователя. Предназначена для использования в форме персональных настроек
// пользователя. Пример использования см. в общей форме _ДемоМоиНастройки.
//
// Возвращаемое значение:
//   Булево - Если Истина, то пользователю при закрытии программы будет показано
//            окно с подтверждением завершения сеанса.
//
Функция ЗапрашиватьПодтверждениеПриЗавершенииПрограммы() Экспорт
	Результат = ХранилищеОбщихНастроекЗагрузить("ОбщиеНастройкиПользователя", "ЗапрашиватьПодтверждениеПриЗавершенииПрограммы");

	Если Результат = Неопределено Тогда
		Результат = ОбщиеПараметрыБазовойФункциональности().ЗапрашиватьПодтверждениеПриЗавершенииПрограммы;
		Настройки = Новый Структура("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы", Результат);
		СохранитьПерсональныеНастройки(Настройки);
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти()
	РекомендуемыйОбъем	= ОбщиеПараметрыБазовойФункциональности().РекомендуемыйОбъемОперативнойПамяти;
	ОперативнаяПамять	= ПараметрыКлиентаНаСервере().Получить("ОперативнаяПамять");
	Рекомендация		= ХранилищеОбщихНастроекЗагрузить("ОбщиеНастройкиПользователя", "РекомендацияПоОбъемуОперативнойПамяти");

	Возврат Не БазоваяПодсистемаКлиентСервер.ЭтоВебКлиент()
		И ИнформационнаяБазаФайловая()
		И (Рекомендация = Неопределено Или Рекомендация.Показывать
			Или (ТекущаяДатаСеанса() - Рекомендация.ДатаПредыдущегоПоказа) > 60*60*24*60)
		И ОперативнаяПамять < РекомендуемыйОбъем;
КонецФункции

Функция ПоказатьНерекомендуемуюВерсиюПлатформы(Параметры)
	// Проверка, что пользователь не внешний.
	УстановитьПривилегированныйРежим(Истина);

	Запрос			= Новый Запрос;
	Запрос.Текст	=  "ВЫБРАТЬ ПЕРВЫЕ 1
	            	   |	ИСТИНА КАК ЗначениеИстина
	            	   |ИЗ
	            	   |	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	            	   |ГДЕ
	            	   |	ВнешниеПользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
	Запрос.УстановитьПараметр("ИдентификаторПользователяИБ", ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);

	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;

	СистемнаяИнформация	= Новый СистемнаяИнформация;
	Текущая				= СистемнаяИнформация.ВерсияПриложения;
	Минимальная			= Параметры.МинимальнаяВерсияПлатформы;
	Рекомендуемая		= Параметры.РекомендуемаяВерсияПлатформы;

	Возврат БазоваяПодсистемаКлиентСервер.СравнитьВерсии(Текущая, Минимальная) < 0
		Или БазоваяПодсистемаКлиентСервер.СравнитьВерсии(Текущая, Рекомендуемая) < 0;
КонецФункции

// Устанавливает жирное оформление шрифта заголовков групп формы для их корректного отображения в интерфейсе 8.2.
// В интерфейсе Такси заголовки групп с обычным выделением и без выделения выводится большим шрифтом.
// В интерфейсе 8.2 такие заголовки выводятся как обычные надписи и не ассоциируются с заголовками.
// Эта функция предназначена для визуального выделения (жирным шрифтом) заголовков групп в режиме интерфейса 8.2.
//
// Параметры:
//  Форма - УправляемаяФорма - форма для изменения шрифта заголовков групп;
//  ИменаГрупп - Строка - список имен групп формы, разделенных запятыми. Если имена групп не указаны,
//                        то оформление будет применено ко всем группам на форме.
//
// Пример:
//  Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
//    СтандартныеПодсистемыСервер.УстановитьОтображениеЗаголовковГрупп(ЭтотОбъект);
//
Процедура УстановитьОтображениеЗаголовковГрупп(Форма, ИменаГрупп = "") Экспорт
	Если КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		ЖирныйШрифт = Новый Шрифт(,, Истина);
		Если НЕ ЗначениеЗаполнено(ИменаГрупп) Тогда
			Для Каждого Элемент Из Форма.Элементы Цикл
				Если Тип(Элемент) = Тип("ГруппаФормы")
					И Элемент.Вид = ВидГруппыФормы.ОбычнаяГруппа
					И Элемент.ОтображатьЗаголовок = Истина
					И (Элемент.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение
					Или Элемент.Отображение = ОтображениеОбычнойГруппы.Нет) Тогда
						Элемент.ШрифтЗаголовка = ЖирныйШрифт;
				КонецЕсли;
			КонецЦикла;
		Иначе
			МассивЗаголовков = СтрРазделить(ИменаГрупп,",");
			Для Каждого ИмяЗаголовка Из МассивЗаголовков Цикл
				Элемент = Форма.Элементы[ИмяЗаголовка];
				Если Элемент.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение ИЛИ Элемент.Отображение = ОтображениеОбычнойГруппы.Нет Тогда
					Элемент.ШрифтЗаголовка = ЖирныйШрифт;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Проверяет, что в текущем сеансе есть динамическое изменение конфигурации базы и
// при этом нет режима обновления информационной базы.
//
// Возвращаемое значение:
//  Булево - Истина, если версия программы обновлена.
//
Функция ВерсияПрограммыОбновленаДинамически() Экспорт
	Если Не КонфигурацияБазыДанныхИзмененаДинамически() Тогда
		Возврат Ложь;
	КонецЕсли;

	// Если конфигурация базы данных изменена динамически после запуска
	// обновления информационной базы, но до его завершения, тогда нужно
	// продолжать обновление несмотря на изменение.

	Возврат Не ОбновлениеИБСерверПовтИсп.НеобходимоОбновлениеИнформационнойБазы();
КонецФункции

// Проверяет, что в текущем сеансе доступна последняя версия программы,
// в противном случае, вызывает исключение с требованием перезапустить сеанс.
//
// В старых сеансах нельзя обновлять параметры работы программы, а также
// нельзя выполнять изменение некоторых данных, чтобы не перезаписать
// новую версию данных (полученную с помощью новой версии программы)
// старой версией данных (полученной с помощью старой версии программы).
//
Процедура ПроверитьДинамическоеОбновлениеВерсииПрограммы() Экспорт
	Если ВерсияПрограммыОбновленаДинамически() Тогда
		ПотребоватьПерезапускСеансаПоПричинеДинамическогоОбновленияВерсииПрограммы();
	КонецЕсли;
КонецПроцедуры

// Вызывает исключение с требованием перезапустить сеанс из-за обновления версии программы.
Процедура ПотребоватьПерезапускСеансаПоПричинеДинамическогоОбновленияВерсииПрограммы() Экспорт
	ТекстОшибки = "Версия программы обновлена, требуется перезапустить сеанс.";

	ВызватьИсключение ТекстОшибки;
КонецПроцедуры

// Устанавливает ключ назначения формы (ключ назначения использования и
// ключ сохранения положения окна). При необходимости копирует текущие настройки формы,
// если для соответствующего нового ключа они еще не были записаны.
//
// Параметры:
//  Форма - УправляемаяФорма - форма ПриСозданииНаСервере, которой устанавливается ключ.
//  Ключ  - Строка - новый ключ назначения формы.
//  УстановитьНастройки - Булево - установить новому ключу настройки, сохраненные для текущего ключа.
//
Процедура УстановитьКлючНазначенияФормы(Форма, Ключ, КлючПоложения = "", УстановитьНастройки = Истина) Экспорт
	УстановитьКлючНазначенияИспользованияФормы(Форма, Ключ, УстановитьНастройки);
	УстановитьКлючСохраненияПоложенияОкнаФормы(Форма, ?(КлючПоложения = "", Ключ, КлючПоложения), УстановитьНастройки);
КонецПроцедуры

Процедура УстановитьКлючНазначенияИспользованияФормы(Форма, Ключ, УстановитьНастройки)
	Если Не ЗначениеЗаполнено(Ключ) Или Форма.КлючНазначенияИспользования = Ключ Тогда
		Возврат;
	КонецЕсли;

	Если Не УстановитьНастройки Тогда
		Форма.КлючНазначенияИспользования = Ключ;

		Возврат;
	КонецЕсли;

	ТипыНастроек = Новый Массив;
	// Русский вариант.
	ТипыНастроек.Добавить("/КлючТекущегоВарианта");
	ТипыНастроек.Добавить("/КлючТекущихПользовательскихНастроек");
	ТипыНастроек.Добавить("/ТекущиеПользовательскиеНастройки");
	ТипыНастроек.Добавить("/КлючТекущихНастроекДанных");
	ТипыНастроек.Добавить("/ТекущиеДанные");
	ТипыНастроек.Добавить("/НастройкиФормы");
	// Английский вариант.
	ТипыНастроек.Добавить("/CurrentVariantKey");
	ТипыНастроек.Добавить("/CurrentUserSettingsKey");
	ТипыНастроек.Добавить("/CurrentUserSettings");
	ТипыНастроек.Добавить("/CurrentDataSettingsKey");
	ТипыНастроек.Добавить("/CurrentData");
	ТипыНастроек.Добавить("/FormSettings");
	Если ХранилищеСистемныхНастроек.Загрузить(Ключ, "КлючНазначенияИспользованияФормы") <> Истина  И ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		УстановитьНастройкиДляКлюча(Ключ, ТипыНастроек, Форма.ИмяФормы, Форма.КлючНазначенияИспользования);
		ХранилищеСистемныхНастроек.Сохранить(Ключ, "КлючНазначенияИспользованияФормы", Истина);
	КонецЕсли;

	Форма.КлючНазначенияИспользования = Ключ;
КонецПроцедуры

Процедура УстановитьКлючСохраненияПоложенияОкнаФормы(Форма, Ключ, УстановитьНастройки)
	Если Не ЗначениеЗаполнено(Ключ) Или Форма.КлючСохраненияПоложенияОкна = Ключ Тогда

		Возврат;
	КонецЕсли;

	Если Не УстановитьНастройки Тогда
		Форма.КлючСохраненияПоложенияОкна = Ключ;

		Возврат;
	КонецЕсли;

	ТипыНастроек = Новый Массив;
	// Русский вариант.
	ТипыНастроек.Добавить("/НастройкиОкна");
	ТипыНастроек.Добавить("/Такси/НастройкиОкна");
	ТипыНастроек.Добавить("/НастройкиОкнаВебКлиента");
	ТипыНастроек.Добавить("/Такси/НастройкиОкнаВебКлиента");
	// Английский вариант.
	ТипыНастроек.Добавить("/WindowSettings");
	ТипыНастроек.Добавить("/Taxi/WindowSettings");
	ТипыНастроек.Добавить("/WebClientWindowSettings");
	ТипыНастроек.Добавить("/Taxi/WebClientWindowSettings");

	Если ХранилищеСистемныхНастроек.Загрузить(Ключ, "КлючСохраненияПоложенияОкнаФормы") <> Истина  И ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		УстановитьНастройкиДляКлюча(Ключ, ТипыНастроек, Форма.ИмяФормы, Форма.КлючСохраненияПоложенияОкна);
		ХранилищеСистемныхНастроек.Сохранить(Ключ, "КлючСохраненияПоложенияОкнаФормы", Истина);
	КонецЕсли;

	Форма.КлючСохраненияПоложенияОкна = Ключ;
КонецПроцедуры

Процедура УстановитьНастройкиДляКлюча(Ключ, ТипыНастроек, ИмяФормы, ТекущийКлюч)
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат;
	КонецЕсли;

	НовыйКлюч	= "/" + Ключ;
	Отбор		= Новый Структура;
	Отбор.Вставить("Пользователь", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);

	Для каждого ТипНастроек Из ТипыНастроек Цикл
		Отбор.Вставить("КлючОбъекта", ИмяФормы + НовыйКлюч + ТипНастроек);
		Выборка = ХранилищеСистемныхНастроек.Выбрать(Отбор);
		Если Выборка.Следующий() Тогда
			Возврат; // Настройки для ключа уже установлены.
		КонецЕсли;
	КонецЦикла;

	Если ЗначениеЗаполнено(ТекущийКлюч) Тогда
		ТекущийКлюч = "/" + ТекущийКлюч;
	КонецЕсли;

	// Установка начальных настроек ключа копированием от текущего ключа.
	Для Каждого ТипНастроек Из ТипыНастроек Цикл
		Отбор.Вставить("КлючОбъекта", ИмяФормы + ТекущийКлюч + ТипНастроек);
		Выборка		= ХранилищеСистемныхНастроек.Выбрать(Отбор);
		КлючОбъекта	= ИмяФормы + НовыйКлюч + ТипНастроек;
		Пока Выборка.Следующий() Цикл
			ОписаниеНастроек				= Новый ОписаниеНастроек;
			ОписаниеНастроек.Представление	= Выборка.Представление;
			ХранилищеСистемныхНастроек.Сохранить(КлючОбъекта, Выборка.КлючНастроек, Выборка.Настройки, ОписаниеНастроек);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Обработчик регламентного задания УдалениеУстаревшихПараметровРаботыВерсийРасширений.
Процедура УдалениеУстаревшихПараметровРаботыВерсийРасширенийОбработчикЗадания() Экспорт
	ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.УдалениеУстаревшихПараметровРаботыВерсийРасширений);

	Справочники.ВерсииРасширений.УдалитьУстаревшиеВерсииПараметров();
КонецПроцедуры

#Область ОбщегоНазначения

// Выполнить экспортную процедуру по имени с уровнем привилегий конфигурации.
// При включении профилей безопасности для вызова оператора Выполнить() используется
// переход в безопасный режим с профилем безопасности, используемом для информационной базы
// (если выше по стеку не был установлен другой безопасный режим).
//
// Параметры:
//  ИмяМетода  - Строка - имя экспортной процедуры в формате
//                       <имя объекта>.<имя процедуры>, где <имя объекта> - это
//                       общий модуль или модуль менеджера объекта.
//  Параметры  - Массив - параметры передаются в процедуру <ИмяЭкспортнойПроцедуры>
//                        в порядке расположения элементов массива.
//
// Пример:
//  Параметры = Новый Массив;
//  Параметры.Добавить("1");
//  БазоваяПодсистемаСервер.ВыполнитьМетодКонфигурации("МойОбщийМодуль.МояПроцедура", Параметры);
//
Процедура ВыполнитьМетодКонфигурации(Знач ИмяМетода, Знач Параметры = Неопределено) Экспорт
	ПроверитьИмяПроцедурыКонфигурации(ИмяМетода);

	ПараметрыСтрока = "";
	Если Параметры <> Неопределено И Параметры.Количество() > 0 Тогда
		Для Индекс = 0 По Параметры.ВГраница() Цикл
			ПараметрыСтрока = ПараметрыСтрока + "Параметры[" + Индекс + "],";
		КонецЦикла;
		ПараметрыСтрока = Сред(ПараметрыСтрока, 1, СтрДлина(ПараметрыСтрока) - 1);
	КонецЕсли;

	Выполнить ИмяМетода + "(" + ПараметрыСтрока + ")";
КонецПроцедуры

// Выполнить экспортную процедуру объекта встроенного языка по имени.
// При включении профилей безопасности для вызова оператора Выполнить() используется
// переход в безопасный режим с профилем безопасности, используемом для информационной базы
// (если выше по стеку не был установлен другой безопасный режим).
//
// Параметры:
//  Объект    - Произвольный - объект встроенного языка 1С:Предприятия, содержащий методы (например, ОбработкаОбъект).
//  ИмяМетода - Строка       - имя экспортной процедуры модуля объекта обработки.
//  Параметры - Массив       - параметры передаются в процедуру <ИмяПроцедуры>
//                             в порядке расположения элементов массива.
//
Процедура ВыполнитьМетодОбъекта(Знач Объект, Знач ИмяМетода, Знач Параметры = Неопределено) Экспорт
	// Проверка имени метода на корректность.
	Попытка
		Тест = Новый Структура(ИмяМетода, ИмяМетода);
	Исключение
		ВызватьИсключение СтрШаблон("Некорректное значение параметра ИмяМетода (%1) в БазоваяПодсистемаСервер.ВыполнитьМетодОбъекта", ИмяМетода);
	КонецПопытки;

	// зарезервировано для новых подсистем

	ПараметрыСтрока = "";
	Если Параметры <> Неопределено И Параметры.Количество() > 0 Тогда
		Для Индекс = 0 По Параметры.ВГраница() Цикл
			ПараметрыСтрока = ПараметрыСтрока + "Параметры[" + Индекс + "],";
		КонецЦикла;
		ПараметрыСтрока = Сред(ПараметрыСтрока, 1, СтрДлина(ПараметрыСтрока) - 1);
	КонецЕсли;

	Выполнить "Объект." + ИмяМетода + "(" + ПараметрыСтрока + ")";
КонецПроцедуры

// Проверяет, что переданное имя ИмяПроцедуры является именем экспортной процедуры конфигурации.
// Может использоваться для проверки, что переданная строка не содержит произвольного алгоритма
// на встроенном языке 1С:Предприятия перед использованием его в операторах Выполнить и Вычислить
// при их использовании для динамического вызова методов код конфигурации.
//
// В случае если переданная строка не является именем процедуры конфигурации, генерируется исключение.
//
// Предназначена для вызова из см. процедуру ВыполнитьМетодКонфигурации.
//
// Параметры:
//   ИмяПроцедуры - Строка - проверяемое имя экспортной процедуры.
//
Процедура ПроверитьИмяПроцедурыКонфигурации(Знач ИмяПроцедуры)
	ЧастиИмени = СтрРазделить(ИмяПроцедуры, ".");
	Если ЧастиИмени.Количество() <> 2 И ЧастиИмени.Количество() <> 3 Тогда
		ВызватьИсключение СтрШаблон("Неправильный формат параметра ИмяПроцедуры (передано значение: ""%1"") в БазоваяПодсистемаСервер.ВыполнитьМетодКонфигурации", ИмяПроцедуры);
	КонецЕсли;

	ИмяОбъекта = ЧастиИмени[0];
	Если ЧастиИмени.Количество() = 2 И Метаданные.ОбщиеМодули.Найти(ИмяОбъекта) = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Неправильный формат параметра ИмяПроцедуры (передано значение: ""%1"") в БазоваяПодсистемаСервер.ВыполнитьМетодКонфигурации:
				|Не найден общий модуль ""%2"".",
			ИмяПроцедуры,
			ИмяОбъекта);
	КонецЕсли;

	Если ЧастиИмени.Количество() = 3 Тогда
		ПолноеИмяОбъекта = ЧастиИмени[0] + "." + ЧастиИмени[1];
		Попытка
			Менеджер = МенеджерОбъектаПоИмени(ПолноеИмяОбъекта);
		Исключение
			Менеджер = Неопределено;
		КонецПопытки;
		Если Менеджер = Неопределено Тогда
			ВызватьИсключение СтрШаблон("Неправильный формат параметра ИмяПроцедуры (передано значение: ""%1"") в БазоваяПодсистемаСервер.ВыполнитьМетодКонфигурации:
				           |Не найден менеджер объекта ""%2"".",
				ИмяПроцедуры,
				ПолноеИмяОбъекта);
		КонецЕсли;
	КонецЕсли;

	ИмяМетодаОбъекта	= ЧастиИмени[ЧастиИмени.ВГраница()];
	ВременнаяСтруктура	= Новый Структура;
	Попытка
		// Проверка того, что ИмяПроцедуры является допустимым идентификатором.
		// Например: МояПроцедура.
		ВременнаяСтруктура.Вставить(ИмяМетодаОбъекта);
	Исключение
		ЗаписьЖурналаРегистрации("Безопасное выполнение метода", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		ВызватьИсключение СтрШаблон("Неправильный формат параметра ИмяПроцедуры (передано значение: ""%1"") в БазоваяПодсистемаСервер.ВыполнитьМетодКонфигурации:
			           |Имя метода ""%2"" не соответствует требованиям образования имен процедур и функций.",
			ИмяПроцедуры, ИмяМетодаОбъекта);
	КонецПопытки;
КонецПроцедуры

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
//
//  Если доступа к реквизиту нет, то в случае "ВыбратьРазрешенные = Ложь" возникнет исключение прав доступа,
//  а в случае "ВыбратьРазрешенные = Истина" вернется значение Неопределено.
//
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
//
// Функция не предназначена для получения значений реквизитов пустых ссылок.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//  ИмяРеквизита - Строка - имя получаемого реквизита.
//  ВыбратьРазрешенные - Булево - если Истина, то запрос к объекту выполняется с учетом прав пользователя, и в случае,
//                                если выборка будет пустая, то вернется значение Неопределено.
//
// Возвращаемое значение:
//  Произвольный - зависит от типа значения прочитанного реквизита.
//
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные = Ложь) Экспорт
	Результат = ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные);

	Возврат Результат[СтрЗаменить(ИмяРеквизита, ".", "")];
КонецФункции

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
//
//  Если доступа к одному из реквизитов нет, то в случае "ВыбратьРазрешенные = Ложь" возникнет исключение прав доступа,
//  а в случае "ВыбратьРазрешенные = Истина" вернется значение Неопределено для всех реквизитов.
//
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
//
// Функция не предназначена для получения значений реквизитов пустых ссылок.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
//  ВыбратьРазрешенные - Булево - если Истина, то запрос к объекту выполняется с учетом прав пользователя, и в случае,
//                                если выборка будет пустая, то все реквизиты вернутся со значением Неопределено;
//                                если Ложь, то возникнет исключение при отсутствии прав на любой из реквизитов.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//              Если в качестве объекта передана пустая ссылка, то все реквизиты вернутся со значением Неопределено.
//
Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты, ВыбратьРазрешенные = Ложь) Экспорт
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		Реквизиты = СтрРазделить(Реквизиты, ",", Ложь);
	КонецЕсли;

	СтруктураРеквизитов = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура") Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктураРеквизитов = Реквизиты;
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение СтрШаблон("Неверный тип второго параметра Реквизиты: %1", Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;

	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Ключ));

		Псевдоним = СокрЛП(КлючИЗначение.Ключ);

		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ " + ?(ВыбратьРазрешенные, "РАЗРЕШЕННЫЕ", "") + "
						|" + ТекстПолей + "
						|ИЗ
						|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
						|ГДЕ
						|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
						|";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();

	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;

	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;

	Возврат Результат;
КонецФункции

// Возвращает менеджер объекта по имени.
// Ограничение: не обрабатываются точки маршрутов бизнес-процессов.
//
// Параметры:
//  Имя - Строка - имя например, "Справочник", "Справочники", "Справочник.Организации".
//
// Возвращаемое значение:
//  СправочникиМенеджер, СправочникМенеджер, ДокументыМенеджер, ДокументМенеджер, ...
//
Функция МенеджерОбъектаПоИмени(Имя)
	Перем КлассОМ, ИмяОМ, Менеджер;

	ЧастиИмени = СтрРазделить(Имя, ".");

	Если ЧастиИмени.Количество() > 0 Тогда
		КлассОМ = ВРег(ЧастиИмени[0]);
	КонецЕсли;

	Если ЧастиИмени.Количество() > 1 Тогда
		ИмяОМ = ЧастиИмени[1];
	КонецЕсли;

	Если      КлассОМ = "ПЛАНОБМЕНА"
	 Или      КлассОМ = "ПЛАНЫОБМЕНА" Тогда
		Менеджер = ПланыОбмена;
	ИначеЕсли КлассОМ = "СПРАВОЧНИК"
	      Или КлассОМ = "СПРАВОЧНИКИ" Тогда
		Менеджер = Справочники;
	ИначеЕсли КлассОМ = "ДОКУМЕНТ"
	      Или КлассОМ = "ДОКУМЕНТЫ" Тогда
		Менеджер = Документы;
	ИначеЕсли КлассОМ = "ЖУРНАЛДОКУМЕНТОВ"
	      Или КлассОМ = "ЖУРНАЛЫДОКУМЕНТОВ" Тогда
		Менеджер = ЖурналыДокументов;
	ИначеЕсли КлассОМ = "ПЕРЕЧИСЛЕНИЕ"
	      Или КлассОМ = "ПЕРЕЧИСЛЕНИЯ" Тогда
		Менеджер = Перечисления;
	ИначеЕсли КлассОМ = "ОБЩИЙМОДУЛЬ"
	      Или КлассОМ = "ОБЩИЕМОДУЛИ" Тогда

		Возврат ОбщийМодуль(ИмяОМ);
	ИначеЕсли КлассОМ = "ОТЧЕТ"
	      Или КлассОМ = "ОТЧЕТЫ" Тогда
		Менеджер = Отчеты;
	ИначеЕсли КлассОМ = "ОБРАБОТКА"
	      Или КлассОМ = "ОБРАБОТКИ" Тогда
		Менеджер = Обработки;
	ИначеЕсли КлассОМ = "ПЛАНВИДОВХАРАКТЕРИСТИК"
	      Или КлассОМ = "ПЛАНЫВИДОВХАРАКТЕРИСТИК" Тогда
		Менеджер = ПланыВидовХарактеристик;
	ИначеЕсли КлассОМ = "ПЛАНСЧЕТОВ"
	      Или КлассОМ = "ПЛАНЫСЧЕТОВ" Тогда
		Менеджер = ПланыСчетов;
	ИначеЕсли КлассОМ = "ПЛАНВИДОВРАСЧЕТА"
	      Или КлассОМ = "ПЛАНЫВИДОВРАСЧЕТА" Тогда
		Менеджер = ПланыВидовРасчета;
	ИначеЕсли КлассОМ = "РЕГИСТРСВЕДЕНИЙ"
	      Или КлассОМ = "РЕГИСТРЫСВЕДЕНИЙ" Тогда
		Менеджер = РегистрыСведений;
	ИначеЕсли КлассОМ = "РЕГИСТРНАКОПЛЕНИЯ"
	      Или КлассОМ = "РЕГИСТРЫНАКОПЛЕНИЯ" Тогда
		Менеджер = РегистрыНакопления;
	ИначеЕсли КлассОМ = "РЕГИСТРБУХГАЛТЕРИИ"
	      Или КлассОМ = "РЕГИСТРЫБУХГАЛТЕРИИ" Тогда
		Менеджер = РегистрыБухгалтерии;
	ИначеЕсли КлассОМ = "РЕГИСТРРАСЧЕТА"
	      Или КлассОМ = "РЕГИСТРЫРАСЧЕТА" Тогда

		Если ЧастиИмени.Количество() < 3 Тогда
			// Регистр расчета
			Менеджер = РегистрыРасчета;
		Иначе
			КлассПодчиненногоОМ = ВРег(ЧастиИмени[2]);
			Если ЧастиИмени.Количество() > 3 Тогда
				ИмяПодчиненногоОМ = ЧастиИмени[3];
			КонецЕсли;
			Если КлассПодчиненногоОМ = "ПЕРЕРАСЧЕТ"
			 Или КлассПодчиненногоОМ = "ПЕРЕРАСЧЕТЫ" Тогда
				// Перерасчет
				Попытка
					Менеджер	= РегистрыРасчета[ИмяОМ].Перерасчеты;
					ИмяОМ		= ИмяПодчиненногоОМ;
				Исключение
					Менеджер	= Неопределено;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли КлассОМ = "БИЗНЕСПРОЦЕСС"
	      Или КлассОМ = "БИЗНЕСПРОЦЕССЫ" Тогда
		Менеджер = БизнесПроцессы;
	ИначеЕсли КлассОМ = "ЗАДАЧА"
	      Или КлассОМ = "ЗАДАЧИ" Тогда
		Менеджер = Задачи;
	ИначеЕсли КлассОМ = "КОНСТАНТА"
	      Или КлассОМ = "КОНСТАНТЫ" Тогда
		Менеджер = Константы;
	ИначеЕсли КлассОМ = "ПОСЛЕДОВАТЕЛЬНОСТЬ"
	      Или КлассОМ = "ПОСЛЕДОВАТЕЛЬНОСТИ" Тогда
		Менеджер = Последовательности;
	КонецЕсли;

	Если Менеджер <> Неопределено Тогда
		Если ЗначениеЗаполнено(ИмяОМ) Тогда
			Попытка
				Возврат Менеджер[ИмяОМ];
			Исключение
				Менеджер = Неопределено;
			КонецПопытки;
		Иначе
			Возврат Менеджер;
		КонецЕсли;
	КонецЕсли;

	ВызватьИсключение СтрШаблон("Не удалось получить менеджер для объекта ""%1""", Имя);
КонецФункции

// Возвращает менеджер объекта по полному имени объекта метаданных.
// Ограничение: не обрабатываются точки маршрутов бизнес-процессов.
//
// Параметры:
//  ПолноеИмя - Строка - полное имя объекта метаданных. Пример: "Справочник.Организации".
//
// Возвращаемое значение:
//  СправочникМенеджер, ДокументМенеджер, ОбработкаМенеджер, РегистрСведенийМенеджер - менеджер объекта.
//
// Пример:
//  МенеджерСправочника = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник.Организации");
//  ПустаяСсылка = МенеджерСправочника.ПустаяСсылка();
//
Функция МенеджерОбъектаПоПолномуИмени(ПолноеИмя) Экспорт
	Перем КлассОМ, ИмяОМ, Менеджер;

	ЧастиИмени = СтрРазделить(ПолноеИмя, ".");

	Если ЧастиИмени.Количество() >= 2 Тогда
		КлассОМ	= ЧастиИмени[0];
		ИмяОМ	= ЧастиИмени[1];
	КонецЕсли;

	Если      ВРег(КлассОМ) = "ПЛАНОБМЕНА" Тогда
		Менеджер = ПланыОбмена;
	ИначеЕсли ВРег(КлассОМ) = "СПРАВОЧНИК" Тогда
		Менеджер = Справочники;
	ИначеЕсли ВРег(КлассОМ) = "ДОКУМЕНТ" Тогда
		Менеджер = Документы;
	ИначеЕсли ВРег(КлассОМ) = "ЖУРНАЛДОКУМЕНТОВ" Тогда
		Менеджер = ЖурналыДокументов;
	ИначеЕсли ВРег(КлассОМ) = "ПЕРЕЧИСЛЕНИЕ" Тогда
		Менеджер = Перечисления;
	ИначеЕсли ВРег(КлассОМ) = "ОТЧЕТ" Тогда
		Менеджер = Отчеты;
	ИначеЕсли ВРег(КлассОМ) = "ОБРАБОТКА" Тогда
		Менеджер = Обработки;
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		Менеджер = ПланыВидовХарактеристик;
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНСЧЕТОВ" Тогда
		Менеджер = ПланыСчетов;
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВРАСЧЕТА" Тогда
		Менеджер = ПланыВидовРасчета;
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРСВЕДЕНИЙ" Тогда
		Менеджер = РегистрыСведений;
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
		Менеджер = РегистрыНакопления;
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРБУХГАЛТЕРИИ" Тогда
		Менеджер = РегистрыБухгалтерии;
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРРАСЧЕТА" Тогда
		Если ЧастиИмени.Количество() = 2 Тогда
			// Регистр расчета
			Менеджер = РегистрыРасчета;
		Иначе
			КлассПодчиненногоОМ	= ЧастиИмени[2];
			ИмяПодчиненногоОМ	= ЧастиИмени[3];
			Если ВРег(КлассПодчиненногоОМ) = "ПЕРЕРАСЧЕТ" Тогда
				// Перерасчет
				Попытка
					Менеджер	= РегистрыРасчета[ИмяОМ].Перерасчеты;
					ИмяОм		= ИмяПодчиненногоОМ;
				Исключение
					Менеджер	= Неопределено;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВРег(КлассОМ) = "БИЗНЕСПРОЦЕСС" Тогда
		Менеджер = БизнесПроцессы;
	ИначеЕсли ВРег(КлассОМ) = "ЗАДАЧА" Тогда
		Менеджер = Задачи;
	ИначеЕсли ВРег(КлассОМ) = "КОНСТАНТА" Тогда
		Менеджер = Константы;
	ИначеЕсли ВРег(КлассОМ) = "ПОСЛЕДОВАТЕЛЬНОСТЬ" Тогда
		Менеджер = Последовательности;
	КонецЕсли;

	Если Менеджер <> Неопределено Тогда
		Попытка
			Возврат Менеджер[ИмяОМ];
		Исключение
			Менеджер = Неопределено;
		КонецПопытки;
	КонецЕсли;

	ВызватьИсключение СтрШаблон("Неизвестный тип объекта метаданных ""%1""", ПолноеИмя);
КонецФункции

// Возвращает менеджер объекта по ссылке на объект.
// Ограничение: не обрабатываются точки маршрутов бизнес-процессов.
// См. так же МенеджерОбъектаПоПолномуИмени.
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - объект, менеджер которого требуется получить.
//
// Возвращаемое значение:
//  СправочникМенеджер, ДокументМенеджер, ОбработкаМенеджер, РегистрСведенийМенеджер - менеджер объекта.
//
// Пример:
//  МенеджерСправочника = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СсылкаНаОрганизацию);
//  ПустаяСсылка = МенеджерСправочника.ПустаяСсылка();
//
Функция МенеджерОбъектаПоСсылке(Ссылка) Экспорт
	ИмяОбъекта	= Ссылка.Метаданные().Имя;
	ТипСсылки	= ТипЗнч(Ссылка);

	Если Справочники.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Справочники[ИмяОбъекта];
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Документы[ИмяОбъекта];
	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат БизнесПроцессы[ИмяОбъекта];
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыВидовХарактеристик[ИмяОбъекта];
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыСчетов[ИмяОбъекта];
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыВидовРасчета[ИмяОбъекта];
	ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Задачи[ИмяОбъекта];
	ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыОбмена[ИмяОбъекта];
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Перечисления[ИмяОбъекта];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Возвращает ссылку на общий модуль по имени.
//
// Параметры:
//  Имя          - Строка - имя общего модуля, например:
//                 "ОбщегоНазначения",
//                 "ОбщегоНазначенияКлиент".
//
// Возвращаемое значение:
//  ОбщийМодуль - общий модуль.
//
Функция ОбщийМодуль(Имя) Экспорт
	Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
		Модуль = Вычислить(Имя); // ВычислитьВБезопасномРежиме не требуется, т.к. проверка надежная.
	ИначеЕсли СтрЧислоВхождений(Имя, ".") = 1 Тогда
		Возврат СерверныйМодульМенеджера(Имя);
	Иначе
		Модуль = Неопределено;
	КонецЕсли;

	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение СтрШаблон("Общий модуль ""%1"" не найден.", Имя);
	КонецЕсли;

	Возврат Модуль;
КонецФункции

// Возвращает серверный модуль менеджера по имени объекта.
Функция СерверныйМодульМенеджера(Имя)
	ОбъектНайден	= Ложь;

	ЧастиИмени		= СтрРазделить(Имя, ".");
	Если ЧастиИмени.Количество() = 2 Тогда
		ИмяВида		= ВРег(ЧастиИмени[0]);
		ИмяОбъекта	= ЧастиИмени[1];

		Если ИмяВида = ВРег("Константы") Тогда
			Если Метаданные.Константы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыСведений") Тогда
			Если Метаданные.РегистрыСведений.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыНакопления") Тогда
			Если Метаданные.РегистрыНакопления.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыБухгалтерии") Тогда
			Если Метаданные.РегистрыБухгалтерии.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыРасчета") Тогда
			Если Метаданные.РегистрыРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Справочники") Тогда
			Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Документы") Тогда
			Если Метаданные.Документы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Отчеты") Тогда
			Если Метаданные.Отчеты.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Обработки") Тогда
			Если Метаданные.Обработки.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("БизнесПроцессы") Тогда
			Если Метаданные.БизнесПроцессы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ЖурналыДокументов") Тогда
			Если Метаданные.ЖурналыДокументов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Задачи") Тогда
			Если Метаданные.Задачи.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыСчетов") Тогда
			Если Метаданные.ПланыСчетов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыОбмена") Тогда
			Если Метаданные.ПланыОбмена.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовХарактеристик") Тогда
			Если Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовРасчета") Тогда
			Если Метаданные.ПланыВидовРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Не ОбъектНайден Тогда
		ВызватьИсключение СтрШаблон("Объект метаданных ""%1"" не найден, либо для него не поддерживается получение модуля менеджера.", Имя);
	КонецЕсли;

	Модуль = Вычислить(Имя);

	Возврат Модуль;
КонецФункции

// Определяет принадлежность объекта метаданных к ссылочному типу.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
//
// Возвращаемое значение:
//   Булево - Истина, если объект ссылочного типа.
//
Функция ЭтоОбъектСсылочногоТипа(ОбъектМетаданных) Экспорт
	ИмяОбъектаМетаданных	= ОбъектМетаданных.ПолноеИмя();
	Позиция					= СтрНайти(ИмяОбъектаМетаданных, ".");
	Если Позиция > 0 Тогда
		ИмяБазовогоТипа = Лев(ИмяОбъектаМетаданных, Позиция - 1);
		Возврат ИмяБазовогоТипа = "Справочник"
			Или ИмяБазовогоТипа = "Документ"
			Или ИмяБазовогоТипа = "БизнесПроцесс"
			Или ИмяБазовогоТипа = "Задача"
			Или ИмяБазовогоТипа = "ПланСчетов"
			Или ИмяБазовогоТипа = "ПланОбмена"
			Или ИмяБазовогоТипа = "ПланВидовХарактеристик"
			Или ИмяБазовогоТипа = "ПланВидовРасчета";
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

// Проверка того, что переданный тип является ссылочным типом данных.
// Для типа "Неопределено" возвращается Ложь.
//
// Параметры:
//  ПроверяемыйТип - Тип - для проверки на тип ссылка.
//
// Возвращаемое значение:
//  Булево - Истина, если это ссылка.
//
Функция ЭтоСсылка(ПроверяемыйТип) Экспорт
	Возврат ПроверяемыйТип <> Тип("Неопределено")
		И (Справочники.ТипВсеСсылки().СодержитТип(ПроверяемыйТип)
		ИЛИ Документы.ТипВсеСсылки().СодержитТип(ПроверяемыйТип)
		ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(ПроверяемыйТип)
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ПроверяемыйТип)
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(ПроверяемыйТип)
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ПроверяемыйТип)
		ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(ПроверяемыйТип)
		ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(ПроверяемыйТип)
		ИЛИ Задачи.ТипВсеСсылки().СодержитТип(ПроверяемыйТип)
		ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(ПроверяемыйТип));
КонецФункции

// Определяет, что эта информационная база является подчиненным узлом
// распределенной информационной базы (РИБ).
//
// Возвращаемое значение:
//  Булево - Истина, если эта информационная база является подчиненным узлом РИБ.
//
Функция ЭтоПодчиненныйУзелРИБ() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Возврат ПланыОбмена.ГлавныйУзел() <> Неопределено;
КонецФункции

// Возвращаемое значение:
//  Булево - признак автономного рабочего места.
//
Функция ЭтоАвтономноеРабочееМесто() Экспорт
	// зарезервировано для новых подсистем

	Возврат Ложь;
КонецФункции

// Фиксирует данные типов Структура, Соответствие, Массив с учетом вложенности.
//
// Параметры:
//  Данные - Структура, Соответствие, Массив - коллекции, значения которых являются примитивными типами,
//           хранилищем значения или не могут быть изменены. Поддерживаются типы значений:
//           Булево, Строка, Число, Дата, Неопределено, УникальныйИдентификатор, Null, Тип,
//           ХранилищеЗначения, ОбщийМодуль, ОбъектМетаданных, ТипЗначенияXDTO, ТипОбъектаXDTO,
//           ЛюбаяСсылка.
//
//  ВызыватьИсключение - Булево - начальное значение Истина. Когда установлено Ложь, тогда в случае наличия
//                                нефиксируемых данных исключение не будет вызвано, при этом данные будут
//                                зафиксированы на сколько возможно.
//
// Возвращаемое значение:
//  ФиксированнаяСтруктура, ФиксированноеСоответствие, ФиксированныйМассив - фиксированные данные, аналогичные
//  переданным в параметре Данные.
//
Функция ФиксированныеДанные(Данные, ВызыватьИсключение = Истина) Экспорт
	Если ТипЗнч(Данные) = Тип("Массив") Тогда
		Массив = Новый Массив;

		Индекс = Данные.Количество() - 1;

		Для каждого Значение Из Данные Цикл
			Если ТипЗнч(Значение) = Тип("Структура") ИЛИ ТипЗнч(Значение) = Тип("Соответствие") ИЛИ ТипЗнч(Значение) = Тип("Массив") Тогда
				Массив.Добавить(ФиксированныеДанные(Значение, ВызыватьИсключение));
			Иначе
				Если ВызыватьИсключение Тогда
					ПроверкаФиксированностиДанных(Значение, Истина);
				КонецЕсли;
				Массив.Добавить(Значение);
			КонецЕсли;
		КонецЦикла;

		Возврат Новый ФиксированныйМассив(Массив);
	ИначеЕсли ТипЗнч(Данные) = Тип("Структура") ИЛИ ТипЗнч(Данные) = Тип("Соответствие") Тогда
		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			Коллекция = Новый Структура;
		Иначе
			Коллекция = Новый Соответствие;
		КонецЕсли;

		Для каждого КлючИЗначение Из Данные Цикл
			Значение = КлючИЗначение.Значение;

			Если ТипЗнч(Значение) = Тип("Структура") ИЛИ ТипЗнч(Значение) = Тип("Соответствие") ИЛИ ТипЗнч(Значение) = Тип("Массив") Тогда
				Коллекция.Вставить(КлючИЗначение.Ключ, ФиксированныеДанные(Значение, ВызыватьИсключение));
			Иначе
				Если ВызыватьИсключение Тогда
					ПроверкаФиксированностиДанных(Значение, Истина);
				КонецЕсли;
				Коллекция.Вставить(КлючИЗначение.Ключ, Значение);
			КонецЕсли;
		КонецЦикла;

		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			Возврат Новый ФиксированнаяСтруктура(Коллекция);
		Иначе
			Возврат Новый ФиксированноеСоответствие(Коллекция);
		КонецЕсли;
	ИначеЕсли ВызыватьИсключение Тогда
		ПроверкаФиксированностиДанных(Данные);
	КонецЕсли;

	Возврат Данные;
КонецФункции

Процедура ПроверкаФиксированностиДанных(Данные, ДанныеВЗначенииФиксированныхТипов = Ложь)
	ТипДанных = ТипЗнч(Данные);

	Если ТипДанных = Тип("ХранилищеЗначения")
	 ИЛИ ТипДанных = Тип("ФиксированныйМассив")
	 ИЛИ ТипДанных = Тип("ФиксированнаяСтруктура")
	 ИЛИ ТипДанных = Тип("ФиксированноеСоответствие") Тогда

		Возврат;
	КонецЕсли;

	Если ДанныеВЗначенииФиксированныхТипов Тогда
		Если ТипДанных = Тип("Булево")
		 ИЛИ ТипДанных = Тип("Строка")
		 ИЛИ ТипДанных = Тип("Число")
		 ИЛИ ТипДанных = Тип("Дата")
		 ИЛИ ТипДанных = Тип("Неопределено")
		 ИЛИ ТипДанных = Тип("УникальныйИдентификатор")
		 ИЛИ ТипДанных = Тип("Null")
		 ИЛИ ТипДанных = Тип("Тип")
		 ИЛИ ТипДанных = Тип("ХранилищеЗначения")
		 ИЛИ ТипДанных = Тип("ОбщийМодуль")
		 ИЛИ ТипДанных = Тип("ОбъектМетаданных")
		 ИЛИ ТипДанных = Тип("ТипЗначенияXDTO")
		 ИЛИ ТипДанных = Тип("ТипОбъектаXDTO")
		 ИЛИ ЭтоСсылка(ТипДанных) Тогда

			Возврат;
		КонецЕсли;
	КонецЕсли;

	ВызватьИсключение СтрШаблон("Ошибка в функции ФиксированныеДанные общего модуля БазоваяПодсистемаСервер. Данные типа ""%1"" не могут быть зафиксированы.",Строка(ТипДанных) );
КонецПроцедуры

// Возвращает данные из безопасного хранилища.
// Вызывающий код должен самостоятельно устанавливать привилегированный режим.
//
// Безопасное хранилище недоступно для чтения пользователям (кроме администраторов),
// а доступно только коду, который делает обращения только к своей части данных и
// в том контексте, который предполагает чтение или запись конфиденциальных данных.
//
// Параметры:
//  Владелец    - ПланОбменаСсылка, СправочникСсылка, Строка - ссылка на объект информационной базы,
//                  представляющий объект-владелец сохраняемого пароля или строка до 128 символов.
//
//  Ключи       - Строка - Содержит список имен сохраненных данных, указанных через запятую.
//
// Возвращаемое значение:
//  Произвольный, Структура - Данные из безопасного хранилища. Если указан один ключ,
//                            то возвращается его значение, иначе структура.
//                            Если данные отсутствуют - Неопределенно.
//
Функция ПрочитатьДанныеИзБезопасногоХранилища(Владелец, Ключи = "Пароль") Экспорт
	БазоваяПодсистемаКлиентСервер.Проверить(ЗначениеЗаполнено(Владелец),
		СтрШаблон("Недопустимое значение параметра %1 в %2. Параметр должен содержать ссылку; передано значение: %3 (тип %4).",
			"Владелец", "БазоваяПодсистемаСервер.ПрочитатьДанныеИзБезопасногоХранилища", Владелец, ТипЗнч(Владелец)));

	Результат = ДанныеИзБезопасногоХранилища(Владелец, Ключи);

	Если Результат <> Неопределено И Результат.Количество() = 1 Тогда
		Возврат ?(Результат.Свойство(Ключи), Результат[Ключи], Неопределено);
	КонецЕсли;

	Возврат Результат;
КонецФункции

// Записывает конфиденциальные данные в безопасное хранилище.
// Вызывающий код должен самостоятельно устанавливать привилегированный режим.
//
// Безопасное хранилище недоступно для чтения пользователям (кроме администраторов),
// а доступно только коду, который делает обращения только к своей части данных и
// в том контексте, который предполагает чтение или запись конфиденциальных данных.
//
// Параметры:
//  Владелец - ПланОбменаСсылка, СправочникСсылка, Строка - ссылка на объект информационной базы,
//             представляющий объект-владелец сохраняемого пароля или строка до 128 символов.
//             Для объектов других типов в качестве Владельца рекомендуется использовать ссылку на
//             элемент метаданных этого типа в справочнике ИдентификаторыОбъектовМетаданных
//             или ключ в виде строки с учетом имен подсистем.
//             Например, для БСП:
//               Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("РегистрСведений.АдресныеОбъекты");
//             если нужно 1 хранилище на подсистему БСП:
//               Владелец = "СтандартныеПодсистемы.УправлениеДоступом";
//             если нужно более 1 хранилища на подсистему БСП:
//               Владелец = "СтандартныеПодсистемы.УправлениеДоступом.<Уточнение>";
//
//  Данные  - Произвольный - Данные помещаемые в безопасное хранилище. Неопределенно - удаляет данные.
//  Ключ    - Строка       - Ключ сохраняемых настроек, по умолчанию "Пароль".
//
Процедура ЗаписатьДанныеВБезопасноеХранилище(Владелец, Данные, Ключ = "Пароль") Экспорт
	БазоваяПодсистемаКлиентСервер.Проверить(ЗначениеЗаполнено(Владелец),
		СтрШаблон("Недопустимое значение параметра %1 в %2. Параметр должен содержать ссылку; передано значение: %3 (тип %4).",
			"Владелец", "БазоваяПодсистемаСервер.ЗаписатьДанныеВБезопасноеХранилище", Владелец, ТипЗнч(Владелец)));

	БезопасноеХранилищеДанных = РегистрыСведений.БезопасноеХранилищеДанных.СоздатьМенеджерЗаписи();

	Отбор								= Новый Структура("Владелец", Владелец);
	БезопасноеХранилищеДанных.Владелец	= Владелец;
	БезопасноеХранилищеДанных.Прочитать();
	Если Данные <> Неопределено Тогда
		Если БезопасноеХранилищеДанных.Выбран() Тогда
			ДанныеДляСохранения					= БезопасноеХранилищеДанных.Данные.Получить();
			Если ТипЗнч(ДанныеДляСохранения) <> Тип("Структура") Тогда
				ДанныеДляСохранения				= Новый Структура;
			КонецЕсли;
			ДанныеДляСохранения.Вставить(Ключ, Данные);
			ДанныеДляХранилищеЗначения			= Новый ХранилищеЗначения(ДанныеДляСохранения, Новый СжатиеДанных(6));
			БезопасноеХранилищеДанных.Данные	= ДанныеДляХранилищеЗначения;
			БезопасноеХранилищеДанных.Записать();
		Иначе
			ДанныеДляСохранения					= Новый Структура(Ключ, Данные);
			ДанныеДляХранилищеЗначения			= Новый ХранилищеЗначения(ДанныеДляСохранения, Новый СжатиеДанных(6));
			БезопасноеХранилищеДанных.Данные	= ДанныеДляХранилищеЗначения;
			БезопасноеХранилищеДанных.Владелец	= Владелец;
			БезопасноеХранилищеДанных.Записать();
		КонецЕсли;
	Иначе
		БезопасноеХранилищеДанных.Удалить();
	КонецЕсли;
КонецПроцедуры

Функция ДанныеИзБезопасногоХранилища(Владелец, Ключ)
	Результат		= Новый Структура(Ключ);

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	БезопасноеХранилищеДанных.Данные КАК Данные
	            	  |ИЗ
	            	  |	РегистрСведений.БезопасноеХранилищеДанных КАК БезопасноеХранилищеДанных
	            	  |ГДЕ
	            	  |	БезопасноеХранилищеДанных.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", Владелец);

	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Если ЗначениеЗаполнено(РезультатЗапроса.Данные) Тогда
			СохраненныеДанные = РезультатЗапроса.Данные.Получить();
			Если ЗначениеЗаполнено(СохраненныеДанные) Тогда
				ЗаполнитьЗначенияСвойств(Результат, СохраненныеДанные);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
КонецФункции

// Определяет режим эксплуатации информационной базы файловый (Истина) или серверный (Ложь).
// При проверке используется СтрокаСоединенияИнформационнойБазы, которую можно указать явно.
//
// Параметры:
//  СтрокаСоединенияИнформационнойБазы - Строка - параметр используется, если
//                 нужно проверить строку соединения не текущей информационной базы.
//
// Возвращаемое значение:
//  Булево - Истина, если файловая.
//
Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
	Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;

	Возврат СтрНайти(ВРег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
КонецФункции

// Загружает настройку из хранилища общих настроек, как метод платформы Загрузить,
// объектов СтандартноеХранилищеНастроекМенеджер или ХранилищеНастроекМенеджер.<Имя хранилища>,
// но с поддержкой длины ключа настроек более 128 символов путем хеширования части,
// которая превышает 96 символов.
// Кроме того, возвращает указанное значение по умолчанию, если настройки не найдены.
// Если нет права СохранениеДанныхПользователя, возвращается значение по умолчанию без ошибки.
//
// В возвращаемом значении очищаются ссылки на несуществующий объект в базе данных, а именно
// - возвращаемая ссылка заменяется на указанное значение по умолчанию;
// - из данных типа Массив ссылки удаляются;
// - у данных типа Структура и Соответствие ключ не меняется, а значение устанавливается Неопределено;
// - анализ значений в данных типа Массив, Структура, Соответствие выполняется рекурсивно.
//
// Параметры:
//   КлючОбъекта          - Строка           - см. синтакс-помощник платформы.
//   КлючНастроек         - Строка           - см. синтакс-помощник платформы.
//   ЗначениеПоУмолчанию  - Произвольный     - значение, которое возвращается, если настройки не найдены.
//                                             Если не указано, возвращается значение Неопределено.
//   ОписаниеНастроек     - ОписаниеНастроек - см. синтакс-помощник платформы.
//   ИмяПользователя      - Строка           - см. синтакс-помощник платформы.
//
// Возвращаемое значение:
//   Произвольный - см. синтакс-помощник платформы.
//
Функция ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию = Неопределено, ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено) Экспорт
	Возврат ХранилищеЗагрузить(ХранилищеОбщихНастроек,
		КлючОбъекта,
		КлючНастроек,
		ЗначениеПоУмолчанию,
		ОписаниеНастроек,
		ИмяПользователя);
КонецФункции

Функция ХранилищеЗагрузить(МенеджерХранилища, КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию, ОписаниеНастроек, ИмяПользователя)
	Результат = Неопределено;

	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Результат	= МенеджерХранилища.Загрузить(КлючОбъекта, КлючНастроек(КлючНастроек), ОписаниеНастроек, ИмяПользователя);
	КонецЕсли;

	Если Результат = Неопределено Тогда
		Результат	= ЗначениеПоУмолчанию;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		Если УдалитьБитыеСсылки(Результат) Тогда
			Результат = ЗначениеПоУмолчанию;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
КонецФункции

// Сохраняет настройку в хранилище общих настроек, как метод платформы Сохранить,
// объектов СтандартноеХранилищеНастроекМенеджер или ХранилищеНастроекМенеджер.<Имя хранилища>,
// но с поддержкой длины ключа настроек более 128 символов путем хеширования части,
// которая превышает 96 символов.
// Если нет права СохранениеДанныхПользователя, сохранение пропускается без ошибки.
//
// Параметры:
//   КлючОбъекта       - Строка           - см. синтакс-помощник платформы.
//   КлючНастроек      - Строка           - см. синтакс-помощник платформы.
//   Настройки         - Произвольный     - см. синтакс-помощник платформы.
//   ОписаниеНастроек  - ОписаниеНастроек - см. синтакс-помощник платформы.
//   ИмяПользователя   - Строка           - см. синтакс-помощник платформы.
//   ОбновитьПовторноИспользуемыеЗначения - Булево - выполнить одноименный метод платформы.
//
Процедура ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Настройки, ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено, ОбновитьПовторноИспользуемыеЗначения = Ложь) Экспорт
	ХранилищеСохранить(ХранилищеОбщихНастроек,
		КлючОбъекта,
		КлючНастроек,
		Настройки,
		ОписаниеНастроек,
		ИмяПользователя,
		ОбновитьПовторноИспользуемыеЗначения);
КонецПроцедуры

Процедура ХранилищеСохранить(МенеджерХранилища, КлючОбъекта, КлючНастроек, Настройки, ОписаниеНастроек, ИмяПользователя, ОбновитьПовторноИспользуемыеЗначения)
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат;
	КонецЕсли;

	МенеджерХранилища.Сохранить(КлючОбъекта, КлючНастроек(КлючНастроек), Настройки, ОписаниеНастроек, ИмяПользователя);

	Если ОбновитьПовторноИспользуемыеЗначения Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
КонецПроцедуры

// Удаляет настройку из хранилища общих настроек, как метод платформы Удалить,
// объектов СтандартноеХранилищеНастроекМенеджер или ХранилищеНастроекМенеджер.<Имя хранилища>,
// но с поддержкой длины ключа настроек более 128 символов путем хеширования части,
// которая превышает 96 символов.
// Если нет права СохранениеДанныхПользователя, удаление пропускается без ошибки.
//
// Параметры:
//   КлючОбъекта     - Строка, Неопределено - см. синтакс-помощник платформы.
//   КлючНастроек    - Строка, Неопределено - см. синтакс-помощник платформы.
//   ИмяПользователя - Строка, Неопределено - см. синтакс-помощник платформы.
//
Процедура ХранилищеОбщихНастроекУдалить(КлючОбъекта, КлючНастроек, ИмяПользователя) Экспорт
	ХранилищеУдалить(ХранилищеОбщихНастроек,
		КлючОбъекта,
		КлючНастроек,
		ИмяПользователя);
КонецПроцедуры

Процедура ХранилищеУдалить(МенеджерХранилища, КлючОбъекта, КлючНастроек, ИмяПользователя)
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		МенеджерХранилища.Удалить(КлючОбъекта, КлючНастроек(КлючНастроек), ИмяПользователя);
	КонецЕсли;
КонецПроцедуры

// Возвращает строку ключа настроек, не превышающую допустимую длину 128 символов.
// Если указанная строка превышает 128, тогда вместо символов сверх 96 символов
// добавляется их хеш-сумма по алгоритму MD5 размером 32 символа.
//
// Параметры:
//  Строка - Строка - строка произвольной длины.
//
// Возвращаемое значение:
//  Строка - не более 128 символов.
//
Функция КлючНастроек(Знач Строка)
	Возврат СократитьСтрокуКонтрольнойСуммой(Строка, 128);
КонецФункции

// Сокращает строку до нужной длины, при этом обрезанная часть хешируется,
// обеспечивая уникальность строки. Проверяет длину строки на входе и, в случае
// превышения максимальной длины, преобразует ее конец по алгоритму MD5 в
// уникальную строку из 32 символов.
//
// Параметры:
//  Строка            - Строка - исходная строка произвольной длины.
//  МаксимальнаяДлина - Число  - требуемое максимальное количество символов в строке,
//                               минимальное значение: 32.
//
// Возвращаемое значение:
//   Строка - строка, не превышающая максимальную длину.
//
Функция СократитьСтрокуКонтрольнойСуммой(Строка, МаксимальнаяДлина) Экспорт
	БазоваяПодсистемаКлиентСервер.Проверить(МаксимальнаяДлина >= 32, "Параметр МаксимальнаяДлина не может быть меньше 32", "БазоваяПодсистемаСервер.СократитьСтрокуКонтрольнойСуммой");

	Результат = Строка;
	Если СтрДлина(Строка) > МаксимальнаяДлина Тогда
		Результат			= Лев(Строка, МаксимальнаяДлина - 32);
		ХешированиеДанных	= Новый ХешированиеДанных(ХешФункция.MD5);
		ХешированиеДанных.Добавить(Сред(Строка, МаксимальнаяДлина - 32 + 1));
		Результат = Результат + СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	КонецЕсли;

	Возврат Результат;
КонецФункции

// Удаляет битые ссылки из переменной.
//
// Параметры:
//   СсылкаИлиКоллекция - ЛюбаяСсылка, Произвольный - Проверяемый объект или очищаемая коллекция.
//
// Возвращаемое значение:
//   Булево -
//       * Истина - СсылкаИлиКоллекция ссылочного типа и объект не найден в базе данных.
//       * Ложь - Когда СсылкаИлиКоллекция не ссылочного типа или объект найден в базе данных.
//
Функция УдалитьБитыеСсылки(СсылкаИлиКоллекция)
	Тип = ТипЗнч(СсылкаИлиКоллекция);

	Если Тип = Тип("Неопределено")
		Или Тип = Тип("Булево")
		Или Тип = Тип("Строка")
		Или Тип = Тип("Число")
		Или Тип = Тип("Дата") Тогда // Оптимизация - часто используемые примитивные типы.

		Возврат Ложь; // Не ссылка.
	ИначеЕсли Тип = Тип("Массив") Тогда
		Количество = СсылкаИлиКоллекция.Количество();
		Для Номер = 1 По Количество Цикл
			ОбратныйИндекс	= Количество - Номер;
			Значение		= СсылкаИлиКоллекция[ОбратныйИндекс];
			Если УдалитьБитыеСсылки(Значение) Тогда
				СсылкаИлиКоллекция.Удалить(ОбратныйИндекс);
			КонецЕсли;
		КонецЦикла;

		Возврат Ложь; // Не ссылка.
	ИначеЕсли Тип = Тип("Структура")
		Или Тип = Тип("Соответствие") Тогда

		Для Каждого КлючИЗначение Из СсылкаИлиКоллекция Цикл
			Значение = КлючИЗначение.Значение;
			Если УдалитьБитыеСсылки(Значение) Тогда
				СсылкаИлиКоллекция.Вставить(КлючИЗначение.Ключ, Неопределено);
			КонецЕсли;
		КонецЦикла;

		Возврат Ложь; // Не ссылка.
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип)
		Или Справочники.ТипВсеСсылки().СодержитТип(Тип)
		Или Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип)
		Или БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		Или Задачи.ТипВсеСсылки().СодержитТип(Тип) Тогда
		// Ссылочный тип, исключая ТочкаМаршрутаБизнесПроцессаСсылка.

		Если СсылкаИлиКоллекция.Пустая() Тогда
			Возврат Ложь; // Ссылка пустая.
		ИначеЕсли ЗначениеРеквизитаОбъекта(СсылкаИлиКоллекция, "Ссылка") = Неопределено Тогда
			СсылкаИлиКоллекция = Неопределено;

			Возврат Истина; // "Битая" ссылка.
		Иначе
			Возврат Ложь; // Объект найден.
		КонецЕсли;
	Иначе
		Возврат Ложь; // Не ссылка.
	КонецЕсли;
КонецФункции

// Выполняет действия перед продолжением выполнения обработчика регламентного задания.
//
// Например, проверяет возможность выполнения обработчика регламентного задания.
// Если администратор не заблокировал выполнение регламентных заданий до
// окончания обновления ИБ, тогда требуется прекратить выполнение обработчика.
//
// Параметры:
//  РегламентноеЗадание - ОбъектМетаданных.РегламентноеЗадание - регламентное задание,
//    из которого был вызван данный метод. Необходимо передавать для проверки доступности
//    по функциональным опциям.
//
Процедура ПриНачалеВыполненияРегламентногоЗадания(РегламентноеЗадание = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Справочники.ВерсииРасширений.ЗарегистрироватьИспользованиеВерсииРасширений();
	УстановитьПривилегированныйРежим(Ложь);

	Если РегистрыСведений.ПараметрыРаботыПрограммы.НеобходимоОбновление() Тогда
		ВызватьИсключение "Вход в программу временно невозможен в связи с обновлением на новую версию.
			           |Рекомендуется запрещать выполнение регламентных заданий на время обновления.";
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Если ПланыОбмена.ГлавныйУзел() = Неопределено И ЗначениеЗаполнено(Константы.ГлавныйУзел.Получить()) Тогда
		ВызватьИсключение "Вход в программу временно невозможен до восстановления связи с главным узлом.
			           |Рекомендуется запрещать выполнение регламентных заданий на время восстановления.";
	КонецЕсли;

	// Зарезервировано для новых подсистем
КонецПроцедуры

// Процедура удаляет из массива МассивРеквизитов элементы, соответствующие именам
// реквизитов объекта из массива МассивНепроверяемыхРеквизитов.
// Для использования в обработчиках события ОбработкаПроверкиЗаполнения.
//
// Параметры:
//  МассивРеквизитов              - Массив - коллекция имен реквизитов объекта.
//  МассивНепроверяемыхРеквизитов - Массив - коллекция имен реквизитов объекта, не требующих проверки.
//
Процедура УдалитьНепроверяемыеРеквизитыИзМассива(МассивРеквизитов, МассивНепроверяемыхРеквизитов) Экспорт
	Для Каждого ЭлементМассива Из МассивНепроверяемыхРеквизитов Цикл
		ПорядковыйНомер = МассивРеквизитов.Найти(ЭлементМассива);
		Если ПорядковыйНомер <> Неопределено Тогда
			МассивРеквизитов.Удалить(ПорядковыйНомер);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ОбщиеПараметрыБазовойФункциональности() Экспорт
	ОбщиеПараметры = Новый Структура;
	ОбщиеПараметры.Вставить("ИмяФормыПерсональныхНастроек", "");
	ОбщиеПараметры.Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы", Истина);
	ОбщиеПараметры.Вставить("ОтключитьИдентификаторыОбъектовМетаданных", Ложь);
	ОбщиеПараметры.Вставить("РекомендуемыйОбъемОперативнойПамяти", 2);
	ОбщиеПараметры.Вставить("МинимальнаяВерсияПлатформы", "8.3.10.1981");
	ОбщиеПараметры.Вставить("РекомендуемаяВерсияПлатформы", "8.3.10.1981");
	ОбщиеПараметры.Вставить("РаботаВПрограммеЗапрещена", Ложь); // Блокировать запуск, если версия ниже минимальной.

	Минимальная   = ОбщиеПараметры.МинимальнаяВерсияПлатформы;
	Рекомендуемая = ОбщиеПараметры.РекомендуемаяВерсияПлатформы;
	Если Не ПустаяСтрока(Минимальная) И Не ПустаяСтрока(Рекомендуемая) И БазоваяПодсистемаКлиентСервер.СравнитьВерсии(Минимальная, Рекомендуемая) > 0 Тогда
		ТекстСообщения = "Минимальная версия платформы ""1С:Предприятие 8"" указана выше рекомендуемой. Минимальная версия - ""%1"", рекомендуемая версия - ""%2"".";

		ВызватьИсключение СтрШаблон(ТекстСообщения, ОбщиеПараметры.МинимальнаяВерсияПлатформы, ОбщиеПараметры.РекомендуемаяВерсияПлатформы);
	КонецЕсли;

	СистемнаяИнформация = Новый СистемнаяИнформация;
	Текущая             = СистемнаяИнформация.ВерсияПриложения;
	Если БазоваяПодсистемаКлиентСервер.СравнитьВерсии(Минимальная, Текущая) > 0 Тогда
		ОбщиеПараметры.МинимальнаяВерсияПлатформы	= Минимальная;
		ОбщиеПараметры.РаботаВПрограммеЗапрещена	= Истина;
	Иначе
		ОбщиеПараметры.МинимальнаяВерсияПлатформы	= Рекомендуемая;
		ОбщиеПараметры.РаботаВПрограммеЗапрещена	= Ложь;
	КонецЕсли;

	Возврат ОбщиеПараметры;
КонецФункции

Процедура СохранитьПерсональныеНастройки(Настройки) Экспорт
	Если Настройки.Свойство("НапоминатьОбУстановкеРасширенияРаботыСФайлами") Тогда
		ПараметрыКлиентаНаСервере = ПараметрыСеанса.ПараметрыКлиентаНаСервере;
		Если ПараметрыКлиентаНаСервере.Получить("ЭтоВебКлиент") Тогда
			ИдентификаторКлиента = ПараметрыКлиентаНаСервере.Получить("ИдентификаторКлиента");
			ХранилищеОбщихНастроекСохранить("НастройкиПрограммы/ПредлагатьУстановкуРасширенияРаботыСФайлами", ИдентификаторКлиента, Настройки.НапоминатьОбУстановкеРасширенияРаботыСФайлами);
		КонецЕсли;
	КонецЕсли;

	Если Настройки.Свойство("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы") Тогда
		ХранилищеОбщихНастроекСохранить("ОбщиеНастройкиПользователя","ЗапрашиватьПодтверждениеПриЗавершенииПрограммы", Настройки.ЗапрашиватьПодтверждениеПриЗавершенииПрограммы);
	КонецЕсли;
КонецПроцедуры

// Возвращает Истина при необходимости обновления конфигурации информационной базы подчиненного узла РИБ.
// В главном узле всегда Ложь.
//
// Возвращаемое значение:
//  Булево - Истина, если требуется.
//
Функция ТребуетсяОбновлениеКонфигурацииПодчиненногоУзлаРИБ() Экспорт
	Возврат ЭтоПодчиненныйУзелРИБ() И КонфигурацияИзменена();
КонецФункции

// Выполняет преобразование (десериализацию) XML-строки в значение.
// См. также ЗначениеВСтрокуXML.
//
// Параметры:
//  СтрокаXML - Строка - XML-строка, с сериализованным объектом..
//
// Возвращаемое значение:
//  Произвольный - значение, полученное из переданной XML-строки.
//
Функция ЗначениеИзСтрокиXML(СтрокаXML) Экспорт
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);

	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
КонецФункции

// Преобразует (сериализует) любое значение в XML-строку.
// Преобразованы в могут быть только те объекты, для которых в синтакс-помощнике указано, что они сериализуются.
// См. также ЗначениеИзСтрокиXML.
//
// Параметры:
//  Значение - Произвольный - значение, которое необходимо сериализовать в XML-строку.
//
// Возвращаемое значение:
//  Строка - XML-строка.
//
Функция ЗначениеВСтрокуXML(Значение) Экспорт
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);

	Возврат ЗаписьXML.Закрыть();
КонецФункции

// Вычисляет контрольную сумму для произвольных данных по указанному алгоритму.
//
// Параметры:
//  Данные   - Произвольный - любое сериализуемое значение.
//  Алгоритм - ХешФункция   - алгоритм расчета контрольной суммы. По умолчанию, MD5.
//
// Возвращаемое значение:
//  Строка - контрольная сумма строкой без пробелов, 32 байта.
//
Функция КонтрольнаяСуммаСтрокой(Знач Данные, Знач Алгоритм = Неопределено) Экспорт
	Если Алгоритм = Неопределено Тогда
		Алгоритм = ХешФункция.MD5;
	КонецЕсли;

	ХешированиеДанных = Новый ХешированиеДанных(Алгоритм);
	Если ТипЗнч(Данные) <> Тип("Строка") И ТипЗнч(Данные) <> Тип("ДвоичныеДанные") Тогда
		Данные = ЗначениеВСтрокуXML(Данные);
	КонецЕсли;
	ХешированиеДанных.Добавить(Данные);
	Результат = СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");

	Возврат Результат;
КонецФункции

// Возвращает описание защиты от опасных действий с отключенными предупреждениями.
// Функция не приводит к ошибке компиляции при отсутствии в платформе механизмов
// предупреждений безопасности.
//
// Возвращаемое значение:
//  ОписаниеЗащитыОтОпасныхДействий - со свойством ПредупреждатьОбОпасныхДействиях = Ложь.
//
Функция ОписаниеЗащитыБезПредупреждений() Экспорт
	ИмяТипа			= "ОписаниеЗащитыОтОпасныхДействий";
	ОписаниеЗащиты	= Новый(ИмяТипа);
	ОписаниеЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;

	Возврат ОписаниеЗащиты;
КонецФункции


#КонецОбласти

#Область ДлительныеОперации

// Возвращает новую структуру для параметра ПараметрыВыполнения функции ВыполнитьВФоне.
//
// Параметры:
//   ИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы,
//                               во временное хранилище которой надо поместить результат выполнения процедуры.
//
// Возвращаемое значение:
//   Структура - со свойствами:
//     * ИдентификаторФормы      - УникальныйИдентификатор - уникальный идентификатор формы,
//                               во временное хранилище которой надо поместить результат выполнения процедуры.
//     * ДополнительныйРезультат - Булево     - признак использования дополнительного временного хранилища для передачи
//                                 результата из фонового задания в родительский сеанс. По умолчанию - Ложь.
//     * ОжидатьЗавершение       - Число, Неопределено - таймаут в секундах ожидания завершения фонового задания.
//                               Если задано Неопределено, то ждать до момента завершения задания.
//                               Если задано 0, то ждать завершения задания не требуется.
//                               По умолчанию - 2 секунды; а для низкой скорости соединения - 4.
//     * НаименованиеФоновогоЗадания - Строка - описание фонового задания. По умолчанию - имя процедуры.
//     * КлючФоновогоЗадания      - Строка    - уникальный ключ для активных фоновых заданий, имеющих такое же имя процедуры.
//                                              По умолчанию, не задан.
//     * АдресРезультата          - Строка - адрес временного хранилища, в которое должен быть помещен результат
//                                           работы процедуры. Если не задан, адрес формируется автоматически.
//     * ЗапуститьВФоне           - Булево - если Истина, то задание будет всегда выполняться в фоне,
//                               за исключением режима отладки.
//                               В файловом варианте, при наличии ранее запущенных заданий,
//                               новое задание становится в очередь и начинает выполняться после завершения предыдущих.
//     * ЗапуститьНеВФоне         - Булево - если Истина, задание всегда будет запускаться непосредственно,
//                               без использования фонового задания.
//     * БезРасширений            - Булево - если Истина, то фоновое задание будет запущено без подключения
//                               расширений конфигурации.
//
Функция ПараметрыВыполненияВФоне(Знач ИдентификаторФормы) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	Результат.Вставить("ДополнительныйРезультат", Ложь);
	Результат.Вставить("ОжидатьЗавершение", ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2));
	Результат.Вставить("НаименованиеФоновогоЗадания", "");
	Результат.Вставить("КлючФоновогоЗадания", "");
	Результат.Вставить("АдресРезультата", Неопределено);
	Результат.Вставить("ЗапуститьНеВФоне", Ложь);
	Результат.Вставить("ЗапуститьВФоне", Ложь);
	Результат.Вставить("БезРасширений", Ложь);

	Возврат Результат;
КонецФункции

// Запустить выполнение процедуры в фоновом задании, если это возможно.
// При выполнении любого из следующих условий запуск выполняется не в фоне, а сразу в основном потоке:
//  * если приложение запущено в режиме отладки (параметр /C РежимОтладки) - для упрощения отладки конфигурации;
//  * если в файловой ИБ имеются активные фоновые задания - для снижения времени ожидания пользователя;
//  * если выполняется процедура модуля внешней обработки или внешнего отчета.
//
// Не следует использовать эту функцию, если необходимо безусловно запускать фоновое задание.
// Может применяться совместно с функцией ДлительныеОперацииКлиент.ОжидатьЗавершение.
//
// Параметры:
//  ИмяПроцедуры           - Строка    - имя экспортной процедуры общего модуля, модуля менеджера объекта
//                                       или модуля обработки, которую необходимо выполнить в фоне.
//                                       Например, "МойОбщийМодуль.МояПроцедура", "Отчет.ЗагруженныеДанные.Сформировать"
//                                       или "Обработка.ЗагрузкаДанных.МодульОбъекта.Загрузить".
//                                       У процедуры может быть два или три формальных параметра:
//                                        * Параметры       - Структура - произвольные параметры ПараметрыПроцедуры;
//                                        * АдресРезультата - Строка    - адрес временного хранилища, в которое нужно
//                                          поместить результат работы процедуры. Обязательно;
//                                        * АдресДополнительногоРезультата - Строка - если в ПараметрыВыполнения установлен
//                                          параметр ДополнительныйРезультат, то содержит адрес дополнительного временного
//                                          хранилища, в которое нужно поместить результат работы процедуры. Опционально.
//                                       При необходимости выполнить в фоне функцию, ее следует обернуть в процедуру,
//                                       а ее результат возвращать через второй параметр АдресРезультата.
//  ПараметрыПроцедуры     - Структура - произвольные параметры вызова процедуры ИмяПроцедуры.
//  ПараметрыВыполнения    - Структура - см. функцию ПараметрыВыполненияВФоне.
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания:
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит
//                                     идентификатор запущенного фонового задания.
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет
//                                     помещен (или уже помещен) результат работы процедуры.
//   * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат,
//                                     содержит адрес дополнительного временного хранилища,
//                                     в которое будет помещен (или уже помещен) результат работы процедуры.
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//
Функция ВыполнитьВФоне(Знач ИмяПроцедуры, Знач ПараметрыПроцедуры, Знач ПараметрыВыполнения) Экспорт
	БазоваяПодсистемаКлиентСервер.ПроверитьПараметр("ДлительныеОперации.ВыполнитьВФоне", "ПараметрыВыполнения", ПараметрыВыполнения, Тип("Структура"));
	Если ПараметрыВыполнения.ЗапуститьНеВФоне И ПараметрыВыполнения.ЗапуститьВФоне Тогда
		ВызватьИсключение "Параметры ""ВсегдаНеВФоне"" и ""ВсегдаВФоне""
			|не могут одновременно принимать значение Истина в БазоваяПодсистемаСервер.ВыполнитьВФоне.";
	КонецЕсли;

	АдресРезультата = ?(ПараметрыВыполнения.АдресРезультата <> Неопределено, ПараметрыВыполнения.АдресРезультата, ПоместитьВоВременноеХранилище(Неопределено, ПараметрыВыполнения.ИдентификаторФормы));

	Результат = Новый Структура;
	Результат.Вставить("Статус",							"Выполняется");
	Результат.Вставить("ИдентификаторЗадания",				Неопределено);
	Результат.Вставить("АдресРезультата",					АдресРезультата);
	Результат.Вставить("АдресДополнительногоРезультата",	"");
	Результат.Вставить("КраткоеПредставлениеОшибки",		"");
	Результат.Вставить("ПодробноеПредставлениеОшибки",		"");
	Результат.Вставить("Сообщения",							Новый ФиксированныйМассив(Новый Массив));

	Если ПараметрыВыполнения.БезРасширений Тогда
		ПараметрыВыполнения.БезРасширений = ЗначениеЗаполнено(ПараметрыСеанса.ПодключенныеРасширения);
	КонецЕсли;

	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыПроцедуры);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресРезультата);

	Если ПараметрыВыполнения.ДополнительныйРезультат Тогда
		Результат.АдресДополнительногоРезультата = ПоместитьВоВременноеХранилище(Неопределено, ПараметрыВыполнения.ИдентификаторФормы);
		ПараметрыЭкспортнойПроцедуры.Добавить(Результат.АдресДополнительногоРезультата);
	КонецЕсли;

	// Выполнить в основном потоке.
	Если Не ПараметрыВыполнения.БезРасширений
		И (БазоваяПодсистемаКлиентСервер.РежимОтладки() Или ПараметрыВыполнения.ЗапуститьНеВФоне
		Или (ЕстьФоновыеЗаданияВФайловойИБ() И Не ПараметрыВыполнения.ЗапуститьВФоне)
		Или Не ВозможноВыполнитьВФоне(ИмяПроцедуры)) Тогда
		Попытка
			ВыполнитьПроцедуру(ИмяПроцедуры, ПараметрыЭкспортнойПроцедуры);
			Результат.Статус = "Выполнено";
		Исключение
			Результат.Статус = "Ошибка";
			Результат.КраткоеПредставлениеОшибки	= КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Результат.ПодробноеПредставлениеОшибки	= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации("Ошибка выполнения", УровеньЖурналаРегистрации.Ошибка, , , Результат.ПодробноеПредставлениеОшибки);
		КонецПопытки;

		Возврат Результат;
	КонецЕсли;

	// Выполнить в фоне.
	Попытка
		Задание = ЗапуститьФоновоеЗаданиеСКонтекстомКлиента(ИмяПроцедуры, ПараметрыВыполнения, ПараметрыЭкспортнойПроцедуры);
	Исключение
		Результат.Статус = "Ошибка";
		Если Задание <> Неопределено И Задание.ИнформацияОбОшибке <> Неопределено Тогда
			Результат.КраткоеПредставлениеОшибки	= КраткоеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
			Результат.ПодробноеПредставлениеОшибки	= ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
		Иначе
			Результат.КраткоеПредставлениеОшибки	= КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Результат.ПодробноеПредставлениеОшибки	= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецЕсли;

		Возврат Результат;
	КонецПопытки;

	Если Задание <> Неопределено И Задание.ИнформацияОбОшибке <> Неопределено Тогда
		Результат.Статус						= "Ошибка";
		Результат.КраткоеПредставлениеОшибки	= КраткоеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
		Результат.ПодробноеПредставлениеОшибки	= ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);

		Возврат Результат;
	КонецЕсли;

	Результат.ИдентификаторЗадания	= Задание.УникальныйИдентификатор;
	ЗаданиеВыполнено				= Ложь;

	Если ПараметрыВыполнения.ОжидатьЗавершение <> 0 Тогда
		Попытка
			Задание.ОжидатьЗавершения(ПараметрыВыполнения.ОжидатьЗавершение);
			ЗаданиеВыполнено = Истина;
		Исключение
			// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
		КонецПопытки;
	КонецЕсли;

	Если ЗаданиеВыполнено Тогда
		ПрогрессИСообщения	= ПрочитатьПрогрессИСообщения(Задание.УникальныйИдентификатор, "ПрогрессИСообщения");
		Результат.Сообщения	= ПрогрессИСообщения.Сообщения;
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(Результат, ОперацияВыполнена(Задание.УникальныйИдентификатор), , "Сообщения");

	Возврат Результат;
КонецФункции

Функция ВыполнитьФоновоеЗадание(ПараметрыВыполнения, ИмяМетода, Параметры, Ключ, Наименование)
	Если ТекущийРежимЗапуска() = Неопределено И ИнформационнаяБазаФайловая() Тогда

		Сеанс = ПолучитьТекущийСеансИнформационнойБазы();
		Если ПараметрыВыполнения.ОжидатьЗавершение = Неопределено И Сеанс.ИмяПриложения = "BackgroundJob" Тогда
			ВызватьИсключение "В файловой информационной базе невозможно одновременно выполнять более одного фонового задания";
		ИначеЕсли Сеанс.ИмяПриложения = "COMConnection" Тогда
			ВызватьИсключение "В файловой информационной базе можно запустить фоновое задание только из клиентского приложения";
		КонецЕсли;

	КонецЕсли;

	Если ПараметрыВыполнения.БезРасширений Тогда
		Возврат РасширенияКонфигурации.ВыполнитьФоновоеЗаданиеБезРасширений(ИмяМетода, Параметры, Ключ, Наименование);
	Иначе
		Возврат ФоновыеЗадания.Выполнить(ИмяМетода, Параметры, Ключ, Наименование);
	КонецЕсли;
КонецФункции

// Отменяет выполнение фонового задания по переданному идентификатору.
//
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания.
//
Процедура ОтменитьВыполнениеЗадания(Знач ИдентификаторЗадания) Экспорт
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат;
	КонецЕсли;

	Задание = НайтиЗаданиеПоИдентификатору(ИдентификаторЗадания);
	Если Задание = Неопределено ИЛИ Задание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
		Возврат;
	КонецЕсли;

	Попытка
		Задание.Отменить();
	Исключение
		// Возможно задание как раз в этот момент закончилось и ошибки нет.
		ЗаписьЖурналаРегистрации("Длительные операции.Отмена выполнения фонового задания", УровеньЖурналаРегистрации.Предупреждение, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

Функция НайтиЗаданиеПоИдентификатору(Знач ИдентификаторЗадания)
	Если ТипЗнч(ИдентификаторЗадания) = Тип("Строка") Тогда
		ИдентификаторЗадания = Новый УникальныйИдентификатор(ИдентификаторЗадания);
	КонецЕсли;

	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);

	Возврат Задание;
КонецФункции

Функция ЕстьФоновыеЗаданияВФайловойИБ()
	ЗапущеноЗаданийВФайловойИБ = 0;
	Если ИнформационнаяБазаФайловая() И Не ОбновлениеИБСерверПовтИсп.НеобходимоОбновлениеИнформационнойБазы() Тогда
		Отбор						= Новый Структура;
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
		ЗапущеноЗаданийВФайловойИБ	= ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор).Количество();
	КонецЕсли;

	Возврат ЗапущеноЗаданийВФайловойИБ > 0;
КонецФункции

Функция ВозможноВыполнитьВФоне(ИмяПроцедуры)
	ЧастиИмени = СтрРазделить(ИмяПроцедуры, ".");
	Если ЧастиИмени.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	ЭтоВнешняяОбработка	= (ВРег(ЧастиИмени[0]) = "ВНЕШНЯЯОБРАБОТКА");
	ЭтоВнешнийОтчет		= (ВРег(ЧастиИмени[0]) = "ВНЕШНИЙОТЧЕТ");
	Возврат Не (ЭтоВнешняяОбработка Или ЭтоВнешнийОтчет);
КонецФункции

Процедура ВыполнитьПроцедуру(ИмяПроцедуры, ПараметрыПроцедуры)
	ЧастиИмени					= СтрРазделить(ИмяПроцедуры, ".");
	ЭтоПроцедураМодуляОбработки = (ЧастиИмени.Количество() = 4) И ВРег(ЧастиИмени[2]) = "МОДУЛЬОБЪЕКТА";
	Если Не ЭтоПроцедураМодуляОбработки Тогда
		ВыполнитьМетодКонфигурации(ИмяПроцедуры, ПараметрыПроцедуры);

		Возврат;
	КонецЕсли;

	ЭтоОбработка	= ВРег(ЧастиИмени[0]) = "ОБРАБОТКА";
	ЭтоОтчет		= ВРег(ЧастиИмени[0]) = "ОТЧЕТ";
	Если ЭтоОбработка Или ЭтоОтчет Тогда
		МенеджерОбъекта			= ?(ЭтоОтчет, Отчеты, Обработки);
		ОбработкаОтчетОбъект	= МенеджерОбъекта[ЧастиИмени[1]].Создать();
		ВыполнитьМетодОбъекта(ОбработкаОтчетОбъект, ЧастиИмени[3], ПараметрыПроцедуры);

		Возврат;
	КонецЕсли;

	ЭтоВнешняяОбработка	= ВРег(ЧастиИмени[0]) = "ВНЕШНЯЯОБРАБОТКА";
	ЭтоВнешнийОтчет		= ВРег(ЧастиИмени[0]) = "ВНЕШНИЙОТЧЕТ";
	Если ЭтоВнешняяОбработка Или ЭтоВнешнийОтчет Тогда
		ВыполнитьПроверкуПравДоступа("ИнтерактивноеОткрытиеВнешнихОбработок", Метаданные);
		МенеджерОбъекта			= ?(ЭтоВнешнийОтчет, ВнешниеОтчеты, ВнешниеОбработки);
		ОбработкаОтчетОбъект	= МенеджерОбъекта.Создать(ЧастиИмени[1], БезопасныйРежим());
		ВыполнитьМетодОбъекта(ОбработкаОтчетОбъект, ЧастиИмени[3], ПараметрыПроцедуры);

		Возврат;
	КонецЕсли;

	ВызватьИсключение СтрШаблон("Неверный формат параметра ИмяПроцедуры (переданное значение: %1)", ИмяПроцедуры);
КонецПроцедуры

// Запуск фонового задания с контекстом клиента. Например, передаются ПараметрыКлиентаНаСервере.
// Запуск выполняется с помощью процедуры ВыполнитьМетодКонфигурации общего модуля БазоваяПодсистемаСервер.
//
// Параметры:
//  ИмяМетода    - Строка - как в функции Выполнить менеджера фоновых заданий.
//  Параметры    - Массив - как в функции Выполнить менеджера фоновых заданий.
//  Ключ         - Строка - как в функции Выполнить менеджера фоновых заданий.
//  Наименование - Строка - как в функции Выполнить менеджера фоновых заданий.
//
// Возвращаемое значение:
//  ФоновоеЗадание.
//
Функция ЗапуститьФоновоеЗаданиеСКонтекстомКлиента(ИмяПроцедуры, ПараметрыВыполнения, ПараметрыПроцедуры = Неопределено) Экспорт
	КлючФоновогоЗадания			= ПараметрыВыполнения.КлючФоновогоЗадания;
	НаименованиеФоновогоЗадания = ?(ПустаяСтрока(ПараметрыВыполнения.НаименованиеФоновогоЗадания), ИмяПроцедуры, ПараметрыВыполнения.НаименованиеФоновогоЗадания);

	Если ТекущийРежимЗапуска() = Неопределено Тогда
		Возврат ВыполнитьФоновоеЗадание(ПараметрыВыполнения, ИмяПроцедуры, ПараметрыПроцедуры, КлючФоновогоЗадания, НаименованиеФоновогоЗадания)
	КонецЕсли;

	ВсеПараметры = Новый Структура;
	ВсеПараметры.Вставить("ИмяПроцедуры",				ИмяПроцедуры);
	ВсеПараметры.Вставить("ПараметрыПроцедуры",			ПараметрыПроцедуры);
	ВсеПараметры.Вставить("ПараметрыКлиентаНаСервере",	ПараметрыКлиентаНаСервере());

	ПараметрыПроцедурыФоновогоЗадания = Новый Массив;
	ПараметрыПроцедурыФоновогоЗадания.Добавить(ВсеПараметры);

	Возврат ВыполнитьФоновоеЗадание(ПараметрыВыполнения, "БазоваяПодсистемаСервер.ВыполнитьСКонтекстомКлиента", ПараметрыПроцедурыФоновогоЗадания, КлючФоновогоЗадания, НаименованиеФоновогоЗадания);
КонецФункции

// Продолжение процедуры ЗапуститьФоновоеЗаданиеСКонтекстомКлиента.
Процедура ВыполнитьСКонтекстомКлиента(ВсеПараметры) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если ПравоДоступа("Установка", Метаданные.ПараметрыСеанса.ПараметрыКлиентаНаСервере) Тогда
		ПараметрыСеанса.ПараметрыКлиентаНаСервере = ВсеПараметры.ПараметрыКлиентаНаСервере;
	КонецЕсли;
	Справочники.ВерсииРасширений.ЗарегистрироватьИспользованиеВерсииРасширений();
	УстановитьПривилегированныйРежим(Ложь);

	ВыполнитьПроцедуру(ВсеПараметры.ИмяПроцедуры, ВсеПараметры.ПараметрыПроцедуры);
КонецПроцедуры

// Считывает информацию о ходе выполнения фонового задания и сообщения, которые в нем были сформированы.
//
// Параметры:
//   ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания.
//   Режим                - Строка - "ПрогрессИСообщения", "Прогресс" или "Сообщения".
//
// Возвращаемое значение:
//   Структура - со свойствами:
//    * Прогресс  - Неопределено, Структура - Информация о ходе выполнения фонового задания, записанная процедурой СообщитьПрогресс:
//     ** Процент                 - Число  - Необязательный. Процент выполнения.
//     ** Текст                   - Строка - Необязательный. Информация о текущей операции.
//     ** ДополнительныеПараметры - Произвольный - Необязательный. Любая дополнительная информация.
//    * Сообщения - ФиксированныйМассив - Массив объектов СообщениеПользователю, которые были сформированы в фоновом задании.
//
Функция ПрочитатьПрогрессИСообщения(Знач ИдентификаторЗадания, Знач Режим = "ПрогрессИСообщения")
	Результат = Новый Структура("Сообщения, Прогресс", Новый Массив, Неопределено);

	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если Задание = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	МассивСообщений = Задание.ПолучитьСообщенияПользователю(Истина);
	Если МассивСообщений = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	Количество		= МассивСообщений.Количество();
	Сообщения		= Новый Массив;
	ЧитатьСообщения = (Режим = "ПрогрессИСообщения" Или Режим = "Сообщения");
	ЧитатьПрогресс  = (Режим = "ПрогрессИСообщения" Или Режим = "Прогресс");

	Если ЧитатьСообщения И Не ЧитатьПрогресс Тогда
		Результат.Сообщения = Новый ФиксированныйМассив(МассивСообщений);

		Возврат Результат;
	КонецЕсли;

	Для Номер = 0 По Количество - 1 Цикл
		Сообщение = МассивСообщений[Номер];

		Если ЧитатьПрогресс И СтрНачинаетсяС(Сообщение.Текст, "{") Тогда
			Позиция = СтрНайти(Сообщение.Текст, "}");
			Если Позиция > 2 Тогда
				ИдентификаторМеханизма = Сред(Сообщение.Текст, 2, Позиция - 2);
				Если ИдентификаторМеханизма = "СтандартныеПодсистемы.БазоваяПодсистемаСервер" Тогда
					ПолученныйТекст		= Сред(Сообщение.Текст, Позиция + 1);
					Результат.Прогресс	= ЗначениеИзСтрокиXML(ПолученныйТекст);

					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЧитатьСообщения Тогда
			Сообщения.Добавить(Сообщение);
		КонецЕсли;
	КонецЦикла;

	Результат.Сообщения = Новый ФиксированныйМассив(Сообщения);

	Возврат Результат;
КонецФункции

Функция ОперацииВыполнены(Знач Задания) Экспорт
	Результат = Новый Соответствие;
	Для каждого Задание Из Задания Цикл
		Результат.Вставить(Задание.ИдентификаторЗадания, ОперацияВыполнена(Задание.ИдентификаторЗадания, Ложь, Задание.ВыводитьПрогрессВыполнения, Задание.ВыводитьСообщения));
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция ОперацияВыполнена(Знач ИдентификаторЗадания, Знач ИсключениеПриОшибке = Ложь, Знач ВыводитьПрогрессВыполнения = Ложь, Знач ВыводитьСообщения = Ложь) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Статус",						"Выполняется");
	Результат.Вставить("КраткоеПредставлениеОшибки",	Неопределено);
	Результат.Вставить("ПодробноеПредставлениеОшибки",	Неопределено);
	Результат.Вставить("Прогресс",						Неопределено);
	Результат.Вставить("Сообщения",						Неопределено);

	Задание = НайтиЗаданиеПоИдентификатору(ИдентификаторЗадания);
	Если Задание = Неопределено Тогда
		ЗаписьЖурналаРегистрации("Длительные операции",
			УровеньЖурналаРегистрации.Ошибка, , , "Фоновое задание не найдено:" + " " + Строка(ИдентификаторЗадания));
		Если ИсключениеПриОшибке Тогда
			ВызватьИсключение("Не удалось выполнить данную операцию.");
		КонецЕсли;
		Результат.Статус = "Ошибка";

		Возврат Результат;
	КонецЕсли;

	Если ВыводитьПрогрессВыполнения Тогда
		ПрогрессИСообщения = ПрочитатьПрогрессИСообщения(ИдентификаторЗадания, ?(ВыводитьСообщения, "ПрогрессИСообщения", "Прогресс"));
		Результат.Прогресс = ПрогрессИСообщения.Прогресс;
		Если ВыводитьСообщения Тогда
			Результат.Сообщения = ПрогрессИСообщения.Сообщения;
		КонецЕсли;
	ИначеЕсли ВыводитьСообщения Тогда
		Результат.Сообщения = Задание.ПолучитьСообщенияПользователю(Истина);
	КонецЕсли;

	Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Возврат Результат;
	КонецЕсли;

	Если Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		Результат.Статус = "Отменено";

		Возврат Результат;
	КонецЕсли;

	Если Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно  Или Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		Результат.Статус = "Ошибка";
		Если Задание.ИнформацияОбОшибке <> Неопределено Тогда
			Результат.КраткоеПредставлениеОшибки   = КраткоеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
			Результат.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
		КонецЕсли;
		Если ИсключениеПриОшибке Тогда
			Если Не ПустаяСтрока(Результат.КраткоеПредставлениеОшибки) Тогда
				ТекстСообщения = Результат.КраткоеПредставлениеОшибки;
			Иначе
				ТекстСообщения = "Не удалось выполнить данную операцию.";
			КонецЕсли;

			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;

	Результат.Статус = "Выполнено";

	Возврат Результат;
КонецФункции

// Регистрирует информацию о ходе выполнения фонового задания.
// В дальнейшем ее можно считать при помощи функции ПрочитатьПрогресс.
//
// Параметры:
//  Процент - Число  - Необязательный. Процент выполнения.
//  Текст   - Строка - Необязательный. Информация о текущей операции.
//  ДополнительныеПараметры - Произвольный - Необязательный. Любая дополнительная информация,
//      которую необходимо передать на клиент. Значение должно быть простым (сериализуемым в XML строку).
//
Процедура СообщитьПрогресс(Знач Процент = Неопределено, Знач Текст = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
	Если ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание() = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПередаваемоеЗначение = Новый Структура;
	Если Процент <> Неопределено Тогда
		ПередаваемоеЗначение.Вставить("Процент", Процент);
	КонецЕсли;
	Если Текст <> Неопределено Тогда
		ПередаваемоеЗначение.Вставить("Текст", Текст);
	КонецЕсли;
	Если ДополнительныеПараметры <> Неопределено Тогда
		ПередаваемоеЗначение.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	КонецЕсли;

	ПередаваемыйТекст = ЗначениеВСтрокуXML(ПередаваемоеЗначение);

	Текст = "{СтандартныеПодсистемы.ДлительныеОперации}" + ПередаваемыйТекст;
	БазоваяПодсистемаКлиентСервер.СообщитьПользователю(Текст);
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

// Устанавливает использование предопределенного регламентного задания.
//
// Параметры:
//  ЗаданиеМетаданные - ОбъектМетаданных - метаданные предопределенного регламентного задания.
//  Использование     - Булево - Истина, если задание нужно включить, иначе Ложь.
//
Процедура УстановитьИспользованиеПредопределенногоРегламентногоЗадания(ЗаданиеМетаданные, Использование) Экспорт
	Задание = РегламентныеЗадания.НайтиПредопределенное(ЗаданиеМетаданные);

	Если Задание.Использование <> Использование Тогда
		Задание.Использование = Использование;
		Задание.Записать();
	КонецЕсли;
КонецПроцедуры

// Возвращает регламентные задания, соответствующие отбору.
//
// Параметры:
//  Отбор - Структура - со свойствами:
//             * УникальныйИдентификатор - УникальныйИдентификатор - идентификатор регламентного задания
//                                            в локальном режиме работы.
//                                       - СправочникСсылка.ОчередьЗаданий,
//                                         СправочникСсылка.ОчередьЗаданийОбластейДанных - идентификатор задания
//                                            очереди в модели сервиса.
//             * Метаданные              - ОбъектМетаданных: РегламентноеЗадание - метаданные регламентного задания.
//                                       - Строка - имя регламентного задания.
//             * Использование           - Булево - если Истина, задание включено.
//             * Ключ                    - Строка - прикладной идентификатор задания.
//             * Наименование            - Строка - наименование регламентного задания.
//             * Предопределенное        - Булево - если Истина, регламентное задание определено в метаданных.
//
// Возвращаемое значение:
//     Массив - в локальном режиме работы массив регламентных заданий.
//              см. описание метода РегламентноеЗадание в синтакс-помощнике.
//     ТаблицаЗначений - в модели сервиса таблица значений со свойствами:
//        * ИнтервалПовтораПриАварийномЗавершении - Число - Интервал в секундах, через который нужно перезапускать
//                                                     задание в случае его аварийного завершения.
//        * Использование                         - Булево - если Истина, задание включено.
//        * Ключ                                  - Строка - прикладной идентификатор задания.
//        * КоличествоПовторовПриАварийномЗавершении - Число - количество повторов при аварийном завершении задания.
//        * Параметры                             - Массив - параметры, передаваемые в обработчик задания.
//        * Расписание                            - Расписание - расписание задания.
//        * УникальныйИдентификатор               - УникальныйИдентификатор - идентификатор регламентного задания
//                                                     в локальном режиме работы.
//                                                - СправочникСсылка.ОчередьЗаданий,
//                                                  СправочникСсылка.ОчередьЗаданийОбластейДанных - идентификатор задания
//                                                     очереди в модели сервиса.
//        * ЗапланированныйМоментЗапуска          - Дата - дата и время запланированного запуска задания
//                                                     (в часовом поясе области данных).
//        * ИмяМетода                             - Строка - имя метода (или псевдоним) обработчика очереди задании.
//        * ОбластьДанных                         - Число - значение разделителя области данных задания.
//        * СостояниеЗадания                      - ПеречислениеСсылка.СостоянияЗаданий - состояние задания очереди.
//        * Шаблон                                - СправочникСсылка.ШаблоныЗаданийОчереди - шаблон задания,
//                                                     используется только для разделенных заданий очереди.
//        * ЭксклюзивноеВыполнение                - Булево - при установленном флаге задание будет выполнено
//                                                     даже при установленной блокировке начала сеансов в области
//                                                     данных. Так же если в области есть задания с таким флагом
//                                                     сначала будут выполнены они.
//
Функция НайтиЗадания(Отбор) Экспорт
	ВызватьИсключениеЕслиНетПраваАдминистрирования();

	КопияОтбора		= БазоваяПодсистемаКлиентСервер.СкопироватьСтруктуру(Отбор);

	СписокЗаданий	= РегламентныеЗадания.ПолучитьРегламентныеЗадания(КопияОтбора);

	Возврат СписокЗаданий;
КонецФункции

// Вызывает исключение, если у пользователя нет права администрирования.
Процедура ВызватьИсключениеЕслиНетПраваАдминистрирования()
	ПроверятьПраваАдминистрированияСистемы = Истина;

	Если НЕ ПользователиСервер.ЭтоПолноправныйПользователь(, ПроверятьПраваАдминистрированияСистемы) Тогда
		ВызватьИсключение "Нарушение прав доступа.";
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ЖурналРегистрации

// Выполняет чтение событий журнала регистрации в соответствии с установленным отбором.
//
// Параметры:
//
//     ПараметрыОтчета - Структура - Содержит параметры для чтения событий журнала регистрации. Содержит поля:
//         Журнал                  - ТаблицаЗначений         - Содержит записи журнала регистрации.
//         ОтборЖурналаНаКлиенте   - Структура               - Настройки отбора для чтения записей журнала регистрации.
//         КоличествоСобытий       - Число                   - Ограничение числа считываемых событий журнала.
//         УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы.
//         МенеджерВладельца       - Произвольный            - Менеджер объекта, в форме которого отображается журнал
//                                                             регистрации, необходим для обратного вызова функций
//                                                             оформления.
//         ДобавлятьДополнительныеКолонки - Булево           - Определяет необходимость обратного вызова для добавления
//                                                             дополнительных колонок.
//     АдресХранилища - Строка, УникальныйИдентификатор - Адрес временного хранилища для результата.
//
// Результат представляет собой структуру с полями:
//     СобытияЖурнала - ТаблицаЗначений - Отобранные события.
//
Процедура ПрочитатьСобытияЖурналаРегистрации(ПараметрыОтчета, АдресХранилища) Экспорт
	Журнал                         = ПараметрыОтчета.Журнал;
	ОтборЖурналаНаКлиенте          = ПараметрыОтчета.ОтборЖурналаРегистрации;
	КоличествоСобытий              = ПараметрыОтчета.КоличествоПоказываемыхСобытий;
	УникальныйИдентификатор        = ПараметрыОтчета.УникальныйИдентификатор;
	МенеджерВладельца              = ПараметрыОтчета.МенеджерВладельца;
	ДобавлятьДополнительныеКолонки = ПараметрыОтчета.ДобавлятьДополнительныеКолонки;

	// Проверяем параметры на корректность.
	ДатаНачала			= Неопределено;
	ДатаОкончания		= Неопределено;
	ДатыОтбораУказаны	= ОтборЖурналаНаКлиенте.Свойство("ДатаНачала", ДатаНачала) И ОтборЖурналаНаКлиенте.Свойство("ДатаОкончания", ДатаОкончания)
		И ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ОтборЖурналаНаКлиенте.ДатаОкончания);

	Если ДатыОтбораУказаны И ДатаНачала > ДатаОкончания Тогда
		ВызватьИсключение "Некорректно заданы условия отбора журнала регистрации. Дата начала больше даты окончания.";
	КонецЕсли;
	СмещениеВремениСервера = СмещениеВремениСервера();

	// Подготовка отбора
	Отбор = Новый Структура;
	Для Каждого ЭлементОтбора Из ОтборЖурналаНаКлиенте Цикл
		Отбор.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
	КонецЦикла;
	ПреобразованиеОтбора(Отбор, СмещениеВремениСервера);

	// Выгрузка отбираемых событий и формирование структуры таблицы.
	СобытияЖурнала = Новый ТаблицаЗначений;
	ВыгрузитьЖурналРегистрации(СобытияЖурнала, Отбор, , , КоличествоСобытий);

	СобытияЖурнала.Колонки.Дата.Имя = "ДатаНаСервере";
	СобытияЖурнала.Колонки.Добавить("Дата",			Новый ОписаниеТипов("Дата"));
	СобытияЖурнала.Колонки.Добавить("НомерРисунка", Новый ОписаниеТипов("Число"));
	СобытияЖурнала.Колонки.Добавить("АдресДанных",  Новый ОписаниеТипов("Строка"));

	Если ДобавлятьДополнительныеКолонки Тогда
		МенеджерВладельца.ДобавитьДополнительныеКолонкиСобытия(СобытияЖурнала);
	КонецЕсли;

	Для Каждого СобытиеЖурнала Из СобытияЖурнала Цикл
		СобытиеЖурнала.Дата = СобытиеЖурнала.ДатаНаСервере - СмещениеВремениСервера;

		// Заполнение номеров картинок строк.
		МенеджерВладельца.УстановитьНомерРисунка(СобытиеЖурнала);

		Если ДобавлятьДополнительныеКолонки Тогда
			// Заполнение дополнительных полей, определенных только у владельца.
			МенеджерВладельца.ЗаполнитьДополнительныеКолонкиСобытия(СобытиеЖурнала);
		КонецЕсли;

		// Преобразование массива метаданных в список значений.
		СписокПредставленийМетаданных = Новый СписокЗначений;
		Если ТипЗнч(СобытиеЖурнала.ПредставлениеМетаданных) = Тип("Массив") Тогда
			СписокПредставленийМетаданных.ЗагрузитьЗначения(СобытиеЖурнала.ПредставлениеМетаданных);
			СобытиеЖурнала.ПредставлениеМетаданных = СписокПредставленийМетаданных;
		Иначе
			СобытиеЖурнала.ПредставлениеМетаданных = Строка(СобытиеЖурнала.ПредставлениеМетаданных);
		КонецЕсли;

		// Обработка данных специальных событий.
		Если СобытиеЖурнала.Событие = "_$Access$_.Access" Тогда
			УстановитьСтрокуАдресаДанных(СобытиеЖурнала);

			Если СобытиеЖурнала.Данные <> Неопределено Тогда
				СобытиеЖурнала.Данные = ?(СобытиеЖурнала.Данные.Данные = Неопределено, "", "...");
			КонецЕсли;
		ИначеЕсли СобытиеЖурнала.Событие = "_$Access$_.AccessDenied" Тогда
			УстановитьСтрокуАдресаДанных(СобытиеЖурнала);

			Если СобытиеЖурнала.Данные <> Неопределено Тогда
				Если СобытиеЖурнала.Данные.Свойство("Право") Тогда
					СобытиеЖурнала.Данные = СтрШаблон("Право: %1", СобытиеЖурнала.Данные.Право);
				Иначе
					СобытиеЖурнала.Данные = СтрШаблон("Действие: %1%2", СобытиеЖурнала.Данные.Действие, ?(СобытиеЖурнала.Данные.Данные = Неопределено, "", ", ...") );
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли СобытиеЖурнала.Событие = "_$Session$_.Authentication"
		      Или СобытиеЖурнала.Событие = "_$Session$_.AuthenticationError" Тогда

			УстановитьСтрокуАдресаДанных(СобытиеЖурнала);

			СобытиеЖурналаДанные = "";
			Если СобытиеЖурнала.Данные <> Неопределено Тогда
				Для Каждого КлючИЗначение Из СобытиеЖурнала.Данные Цикл
					Если ЗначениеЗаполнено(СобытиеЖурналаДанные) Тогда
						СобытиеЖурналаДанные = СобытиеЖурналаДанные + ", ...";

						Прервать;
					КонецЕсли;
					СобытиеЖурналаДанные = КлючИЗначение.Ключ + ": " + КлючИЗначение.Значение;
				КонецЦикла;
			КонецЕсли;
			СобытиеЖурнала.Данные = СобытиеЖурналаДанные;
		ИначеЕсли СобытиеЖурнала.Событие = "_$User$_.Delete" Тогда
			УстановитьСтрокуАдресаДанных(СобытиеЖурнала);

			СобытиеЖурналаДанные = "";
			Если СобытиеЖурнала.Данные <> Неопределено Тогда
				Для каждого КлючИЗначение Из СобытиеЖурнала.Данные Цикл
					СобытиеЖурналаДанные = КлючИЗначение.Ключ + ": " + КлючИЗначение.Значение;

					Прервать;
				КонецЦикла;
			КонецЕсли;
			СобытиеЖурнала.Данные = СобытиеЖурналаДанные;
		ИначеЕсли СобытиеЖурнала.Событие = "_$User$_.New"
		      ИЛИ СобытиеЖурнала.Событие = "_$User$_.Update" Тогда
			УстановитьСтрокуАдресаДанных(СобытиеЖурнала);

			ИмяПользователяИБ = "";
			Если СобытиеЖурнала.Данные <> Неопределено Тогда
				СобытиеЖурнала.Данные.Свойство("Имя", ИмяПользователяИБ);
			КонецЕсли;
			СобытиеЖурнала.Данные = СтрШаблон("Имя: %1, ...", ИмяПользователяИБ);
		КонецЕсли;

		УстановитьПривилегированныйРежим(Истина);
		// Уточнение имени пользователя.
		Если СобытиеЖурнала.Пользователь = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
			СобытиеЖурнала.ИмяПользователя = "<Неопределен>";
		ИначеЕсли СобытиеЖурнала.ИмяПользователя = "" Тогда
			СобытиеЖурнала.ИмяПользователя = "<Не указан>";
		ИначеЕсли ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(СобытиеЖурнала.Пользователь) = Неопределено Тогда
			СобытиеЖурнала.ИмяПользователя = СтрШаблон("%1 <Удален>", СобытиеЖурнала.ИмяПользователя);
		КонецЕсли;

		// Преобразование идентификатора в имя для использования в дальнейшем при установке отборе.
		СобытиеЖурнала.Пользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(СобытиеЖурнала.Пользователь);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЦикла;

	// Успешное завершение
	Результат = Новый Структура;
	Результат.Вставить("СобытияЖурнала", СобытияЖурнала);

	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
КонецПроцедуры

// Определяет смещение времени сервера относительно времени программы.
//
// Возвращаемое значение:
//   Число - Смещение времени в секундах.
//       Может использоваться для приведения фильтров, применяемых к журналу, к дате сервера,
//       а также для приведения дат, полученных из журнала, к датам программы.
//
Функция СмещениеВремениСервера() Экспорт
	СмещениеВремениСервера = ТекущаяДата() - ТекущаяДатаСеанса();
	Если СмещениеВремениСервера >= -1 И СмещениеВремениСервера <= 1 Тогда
		СмещениеВремениСервера = 0;
	КонецЕсли;

	Возврат СмещениеВремениСервера;
КонецФункции

// Преобразование отбора.
//
// Параметры:
//  Отбор - отбор - передаваемый отбор.
//
Процедура ПреобразованиеОтбора(Отбор, СмещениеВремениСервера)
	Для Каждого ЭлементОтбора Из Отбор Цикл
		Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
			ПреобразованиеЭлементаОтбора(Отбор, ЭлементОтбора);
		ИначеЕсли ВРег(ЭлементОтбора.Ключ) = ВРег("Транзакция") Тогда
			Если СтрНайти(ЭлементОтбора.Значение, "(") = 0 Тогда
				Отбор.Вставить(ЭлементОтбора.Ключ, "(" + ЭлементОтбора.Значение);
			КонецЕсли;
		ИначеЕсли СмещениеВремениСервера <> 0 И (ВРег(ЭлементОтбора.Ключ) = ВРег("ДатаНачала") Или ВРег(ЭлементОтбора.Ключ) = ВРег("ДатаОкончания")) Тогда
			Отбор.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение + СмещениеВремениСервера);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Преобразование элемента отбора.
//
// Параметры:
//  Отбор - отбор - передаваемый отбор.
//  Отбор - Элемент отбора - элемент передаваемого отбора.
//
Процедура ПреобразованиеЭлементаОтбора(Отбор, ЭлементОтбора)
	КлючСтруктурыОтбора = ЭлементОтбора.Ключ;
	НовоеЗначение = Новый Массив;

	КлючСтруктурыОтбора = ЭлементОтбора.Ключ;

	Для Каждого ЗначениеИзСписка Из ЭлементОтбора.Значение Цикл
		Если ВРег(КлючСтруктурыОтбора) = ВРег("Уровень") Тогда
			// Уровни сообщений представлены строкой, требуется преобразование в значение перечисления.
			НовоеЗначение.Добавить(Обработки.ЖурналРегистрации.УровеньЖурналаРегистрацииЗначениеПоИмени(ЗначениеИзСписка.Значение));
		ИначеЕсли ВРег(КлючСтруктурыОтбора) = ВРег("СтатусТранзакции") Тогда
			// Статусы транзакций представлены строкой, требуется преобразование в значение перечисления.
			НовоеЗначение.Добавить(Обработки.ЖурналРегистрации.СтатусТранзакцииЗаписиЖурналаРегистрацииЗначениеПоИмени(ЗначениеИзСписка.Значение));
		Иначе
			ЗначенияОтбора = СтрРазделить(ЗначениеИзСписка.Значение, Символы.ПС);
			Для Каждого ЗначениеОтбора Из ЗначенияОтбора Цикл
				НовоеЗначение.Добавить(ЗначениеОтбора);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Отбор.Вставить(ЭлементОтбора.Ключ, НовоеЗначение);
КонецПроцедуры

Процедура УстановитьСтрокуАдресаДанных(СобытиеЖурнала)
	ЗаписьXML					= Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, СобытиеЖурнала.Данные);
	СобытиеЖурнала.АдресДанных	= ЗаписьXML.Закрыть();
КонецПроцедуры

// Создает пользовательское представление отбора журнала регистрации.
//
// Параметры:
//  ПредставлениеОтбора - Строка - строка, содержащая пользовательское представление отбора.
//  ОтборЖурналаРегистрации - Структура - значения отбора журнала регистрации.
//  ОтборЖурналаРегистрацииПоУмолчанию - Структура - значения отбора журнала регистрации по умолчанию
//     (не включаются в пользовательское представления).
//
Процедура СформироватьПредставлениеОтбора(ПредставлениеОтбора, ОтборЖурналаРегистрации, ОтборЖурналаРегистрацииПоУмолчанию = Неопределено) Экспорт
	ПредставлениеОтбора = "";
	// Интервал
	ДатаНачалаИнтервала    = Неопределено;
	ДатаОкончанияИнтервала = Неопределено;
	Если Не ОтборЖурналаРегистрации.Свойство("ДатаНачала", ДатаНачалаИнтервала)
		Или ДатаНачалаИнтервала = Неопределено Тогда
		ДатаНачалаИнтервала    = '00010101000000';
	КонецЕсли;

	Если Не ОтборЖурналаРегистрации.Свойство("ДатаОкончания", ДатаОкончанияИнтервала) Или ДатаОкончанияИнтервала = Неопределено Тогда
		ДатаОкончанияИнтервала = '00010101000000';
	КонецЕсли;

	Если Не (ДатаНачалаИнтервала = '00010101000000' И ДатаОкончанияИнтервала = '00010101000000') Тогда
		ПредставлениеОтбора = ПредставлениеПериода(ДатаНачалаИнтервала, ДатаОкончанияИнтервала);
	КонецЕсли;

	ДобавитьОграничениеВПредставлениеОтбора(ОтборЖурналаРегистрации, ПредставлениеОтбора,	"Пользователь");
	ДобавитьОграничениеВПредставлениеОтбора(ОтборЖурналаРегистрации, ПредставлениеОтбора,	"Событие", ОтборЖурналаРегистрацииПоУмолчанию);
	ДобавитьОграничениеВПредставлениеОтбора(ОтборЖурналаРегистрации, ПредставлениеОтбора,	"ИмяПриложения", ОтборЖурналаРегистрацииПоУмолчанию);
	ДобавитьОграничениеВПредставлениеОтбора(ОтборЖурналаРегистрации, ПредставлениеОтбора,	"Сеанс");
	ДобавитьОграничениеВПредставлениеОтбора(ОтборЖурналаРегистрации, ПредставлениеОтбора,	"Уровень");

	// Остальные ограничения указываем просто по представлением, без указания значений ограничения.
	Для Каждого ЭлементОтбора Из ОтборЖурналаРегистрации Цикл
		ИмяОграничения = ЭлементОтбора.Ключ;
		Если ВРег(ИмяОграничения) = ВРег("ДатаНачала")
			Или ВРег(ИмяОграничения) = ВРег("ДатаОкончания")
			Или ВРег(ИмяОграничения) = ВРег("Событие")
			Или ВРег(ИмяОграничения) = ВРег("ИмяПриложения")
			Или ВРег(ИмяОграничения) = ВРег("Пользователь")
			Или ВРег(ИмяОграничения) = ВРег("Сеанс")
			Или ВРег(ИмяОграничения) = ВРег("Уровень") Тогда

			Продолжить; // Интервал и особые ограничения уже выводили.
		КонецЕсли;

		// Для некоторых ограничений меняем представление.
		Если ВРег(ИмяОграничения) = ВРег("ИмяПриложения") Тогда
			ИмяОграничения = "Приложение";
		ИначеЕсли ВРег(ИмяОграничения) = ВРег("СтатусТранзакции") Тогда
			ИмяОграничения = "Статус транзакции";
		ИначеЕсли ВРег(ИмяОграничения) = ВРег("ПредставлениеДанных") Тогда
			ИмяОграничения = "Представление данных";
		ИначеЕсли ВРег(ИмяОграничения) = ВРег("РабочийСервер") Тогда
			ИмяОграничения = "Рабочий сервер";
		ИначеЕсли ВРег(ИмяОграничения) = ВРег("ОсновнойIPПорт") Тогда
			ИмяОграничения = "Основной IP порт";
		ИначеЕсли ВРег(ИмяОграничения) = ВРег("ВспомогательныйIPПорт") Тогда
			ИмяОграничения = "Вспомогательный IP порт";
		КонецЕсли;

		Если Не ПустаяСтрока(ПредставлениеОтбора) Тогда
			ПредставлениеОтбора = ПредставлениеОтбора + "; ";
		КонецЕсли;
		ПредставлениеОтбора = ПредставлениеОтбора + ИмяОграничения;
	КонецЦикла;

	Если ПустаяСтрока(ПредставлениеОтбора) Тогда
		ПредставлениеОтбора = "Не установлен";
	КонецЕсли;
КонецПроцедуры

// Добавить ограничение в представление отбора.
//
// Параметры:
//  ОтборЖурналаРегистрации - Отбор - отбор журнала регистрации.
//  ПредставлениеОтбора - Строка - представление отбора.
//  ИмяОграничения - Строка - имя ограничения.
//  ОтборЖурналаРегистрацииПоУмолчанию - Отбор - отбор журнала регистрации по умолчанию.
//
Процедура ДобавитьОграничениеВПредставлениеОтбора(ОтборЖурналаРегистрации, ПредставлениеОтбора, ИмяОграничения, ОтборЖурналаРегистрацииПоУмолчанию = Неопределено)
	СписокОграничений	= "";
	Ограничение			= "";

	Если ОтборЖурналаРегистрации.Свойство(ИмяОграничения, СписокОграничений) Тогда
		// Не формируем представление отбора, если его значение соответствует значению отбора по умолчанию.
		Если ОтборЖурналаРегистрацииПоУмолчанию <> Неопределено Тогда
			СписокОграниченийПоУмолчанию = "";
			Если ОтборЖурналаРегистрацииПоУмолчанию.Свойство(ИмяОграничения, СписокОграниченийПоУмолчанию)
				И БазоваяПодсистемаКлиентСервер.СпискиЗначенийИдентичны(СписокОграниченийПоУмолчанию, СписокОграничений) Тогда

				Возврат;
			КонецЕсли;
		КонецЕсли;

		Если ИмяОграничения = "Событие" И СписокОграничений.Количество() > 5 Тогда
			Ограничение = СтрШаблон("События (%1)", СписокОграничений.Количество());
		ИначеЕсли ИмяОграничения = "Сеанс" И СписокОграничений.Количество() > 3 Тогда
			Ограничение = СтрШаблон("Сеансы (%1)", СписокОграничений.Количество());
		Иначе
			Для Каждого ЭлементСписка Из СписокОграничений Цикл
				Если Не ПустаяСтрока(Ограничение) Тогда
					Ограничение = Ограничение + ", ";
				КонецЕсли;

				Если (ВРег(ИмяОграничения) = ВРег("Сеанс") ИЛИ ВРег(ИмяОграничения) = ВРег("Уровень")) И ПустаяСтрока(Ограничение) Тогда
					Ограничение = СтрШаблон("%1: %2", ЭлементСписка.Значение, ИмяОграничения);
				ИначеЕсли ВРег(ИмяОграничения) = ВРег("Сеанс") ИЛИ ВРег(ИмяОграничения) = ВРег("Уровень")Тогда
					Ограничение = Ограничение + ЭлементСписка.Значение;
				Иначе
					Ограничение = Ограничение + ЭлементСписка.Представление;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		Если Не ПустаяСтрока(ПредставлениеОтбора) Тогда
			ПредставлениеОтбора = ПредставлениеОтбора + "; ";
		КонецЕсли;

		ПредставлениеОтбора = ПредставлениеОтбора + Ограничение;

	КонецЕсли;
КонецПроцедуры

Процедура ПоместитьДанныеВоВременноеХранилище(СобытияЖурнала, УникальныйИдентификатор) Экспорт
	Для Каждого СтрокаСобытие Из СобытияЖурнала Цикл
		Если ПустаяСтрока(СтрокаСобытие.АдресДанных) Тогда
			АдресДанных	= "";
		Иначе
			ЧтениеXML	= Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(СтрокаСобытие.АдресДанных);
			АдресДанных	= СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		КонецЕсли;
		СтрокаСобытие.АдресДанных = ПоместитьВоВременноеХранилище(АдресДанных, УникальныйИдентификатор);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти