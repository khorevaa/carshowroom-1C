////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая подсистема"
//
////////////////////////////////////////////////////////////////////////////////

// Для вызова из обработчика УстановкаПараметровСеанса модуля сеанса.
//
// Параметры:
//  ИменаПараметровСеанса - Массив, Неопределено - в массиве имена параметров сеанса для инициализации.
//
// Возвращаемое значение:
//  Массив - имена установленных параметров сеанса.
//
Функция УстановкаПараметровСеанса(ИменаПараметровСеанса) Экспорт
	// Параметры сеанса, инициализация которых требует обращения к одним и тем же данным
	// следует инициализировать сразу группой. Для того, чтобы избежать их повторной инициализации,
	// имена уже установленных параметров сеанса сохраняются в массиве УстановленныеПараметры.
	УстановленныеПараметры = Новый Массив;

	Если ИменаПараметровСеанса = Неопределено Тогда
		ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(Новый Соответствие);
		Справочники.ВерсииРасширений.УстановкаПараметровСеанса(ИменаПараметровСеанса, УстановленныеПараметры);

		// При установке соединения с информационной базой до вызова всех остальных обработчиков.
		ПередЗапускомПрограммы();

		Возврат УстановленныеПараметры;
	КонецЕсли;

	Если ИменаПараметровСеанса.Найти("ПараметрыКлиентаНаСервере") <> Неопределено Тогда
		ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(Новый Соответствие);
		УстановленныеПараметры.Добавить("ПараметрыКлиентаНаСервере");
	КонецЕсли;

	Справочники.ВерсииРасширений.УстановкаПараметровСеанса(ИменаПараметровСеанса, УстановленныеПараметры);

	Если ИменаПараметровСеанса.Найти("БуферОбмена") <> Неопределено Тогда
		ПараметрыСеанса.БуферОбмена = Новый ФиксированнаяСтруктура(Новый Структура("Источник, Данные"));
		УстановленныеПараметры.Добавить("БуферОбмена");
	КонецЕсли;

	Обработчики = Новый Соответствие;
	ИнтеграцияПодсистемСервер.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);

	ВыполнитьОбработчикиУстановкиПараметровСеанса(ИменаПараметровСеанса, Обработчики, УстановленныеПараметры);

	Возврат УстановленныеПараметры;
КонецФункции

Процедура ПередЗапускомПрограммы()
	// Привилегированный режим (установлен платформой).

	// Проверка основного языка программирования, установленного в конфигурации.
	Если Метаданные.ВариантВстроенногоЯзыка <> Метаданные.СвойстваОбъектов.ВариантВстроенногоЯзыка.Русский Тогда
		ВызватьИсключение СтрШаблон("Вариант встроенного языка конфигурации ""%1"" не поддерживается. Необходимо использовать вариант языка ""%2"".",
			Метаданные.ВариантВстроенногоЯзыка,
			Метаданные.СвойстваОбъектов.ВариантВстроенногоЯзыка.Русский);
	КонецЕсли;

	// Проверка настройки совместимости конфигурации с версией платформы.
	СистемнаяИнформация	= Новый СистемнаяИнформация;
	МинимальнаяВерсияПлатформы = "8.3.10.1981";
	Если БазоваяПодсистемаКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, МинимальнаяВерсияПлатформы) < 0 Тогда
		ВызватьИсключение СтрШаблон("Для запуска необходима версия платформы 1С:Предприятие %1 или выше.", МинимальнаяВерсияПлатформы);
	КонецЕсли;

	Режимы			= Метаданные.СвойстваОбъектов.РежимСовместимости;
	ТекущийРежим	= Метаданные.РежимСовместимости;

	Если ТекущийРежим = Режимы.НеИспользовать Тогда
		НедоступныйРежим = "";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_1 Тогда
		НедоступныйРежим = "8.1"
	ИначеЕсли ТекущийРежим = Режимы.Версия8_2_13 Тогда
		НедоступныйРежим = "8.2.13"
	ИначеЕсли ТекущийРежим = Режимы.Версия8_2_16 Тогда
		НедоступныйРежим = "8.2.16";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_1 Тогда
		НедоступныйРежим = "8.3.1";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_2 Тогда
		НедоступныйРежим = "8.3.2";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_3 Тогда
		НедоступныйРежим = "8.3.3";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_4 Тогда
		НедоступныйРежим = "8.3.4";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_5 Тогда
		НедоступныйРежим = "8.3.5";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_6 Тогда
		НедоступныйРежим = "8.3.6";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_7 Тогда
		НедоступныйРежим = "8.3.7";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_8 Тогда
		НедоступныйРежим = "8.3.8";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_9 Тогда
		НедоступныйРежим = "8.3.9";
	Иначе
		НедоступныйРежим = "";
	КонецЕсли;

	Если ЗначениеЗаполнено(НедоступныйРежим) Тогда
		ВызватьИсключение СтрШаблон("Режим совместимости конфигурации с 1С:Предприятием версии %1 не поддерживается.
			           |Для запуска установите в конфигурации режим совместимости с 1С:Предприятием
			           |версии не ниже 8.3.10 или ""Не использовать"".",
			НедоступныйРежим);
	КонецЕсли;

	// Проверка заполнения версии конфигурации.
	Если ПустаяСтрока(Метаданные.Версия) Тогда
		ВызватьИсключение "Не заполнено свойство конфигурации Версия.";
	Иначе
		Попытка
			НулеваяВерсия = БазоваяПодсистемаКлиентСервер.СравнитьВерсии(Метаданные.Версия, "0.0.0.0") = 0;
		Исключение
			ВызватьИсключение СтрШаблон("Не правильно заполнено свойство конфигурации Версия: ""%1"".
				           |Правильный формат, например: ""1.2.3.45"".",
				Метаданные.Версия);
		КонецПопытки;
		Если НулеваяВерсия Тогда
			ВызватьИсключение СтрШаблон("Не правильно заполнено свойство конфигурации Версия: ""%1"".
				           |Версия не может быть нулевой.",
				Метаданные.Версия);
		КонецЕсли;
	КонецЕсли;

	Если (Метаданные.ОсновныеРоли.Количество() <> 2 И Метаданные.ОсновныеРоли.Количество() <> 3)
	 Или Не Метаданные.ОсновныеРоли.Содержит(Метаданные.Роли.АдминистраторСистемы)
	 Или Не Метаданные.ОсновныеРоли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
		ВызватьИсключение "В конфигурации в свойстве ОсновныеРоли не указаны стандартные роли
			           |АдминистраторСистемы и ПолныеПрава или указаны лишние роли.";
	КонецЕсли;

	// Проверка возможности выполнения обработчиков установки параметров сеанса для запуска программы.
	ПроверитьВозможностьВыполненияОбработчиковУстановкиПараметровСеанса();

	Если Не ЗначениеЗаполнено(ПользователиИнформационнойБазы.ТекущийПользователь().Имя) И ОбновлениеИБСервер.ВерсияИБ("СтандартныеПодсистемы") = "0.0.0.0" Тогда
		ПользователиСервер.УстановитьНачальныеНастройки("");
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьОбработчикиУстановкиПараметровСеанса(ИменаПараметровСеанса, Обработчики, УстановленныеПараметры)
	Перем ТекстСообщения;

	// Массив с ключами параметров сеанса
	// задаются начальным словом в имени параметра сеанса и символом "*".
	ПараметрыСеансаКлючи = Новый Массив;

	Для Каждого Запись Из Обработчики Цикл
		Если СтрНайти(Запись.Ключ, "*") > 0 Тогда
			КлючПараметра = СокрЛП(Запись.Ключ);
			ПараметрыСеансаКлючи.Добавить(Лев(КлючПараметра, СтрДлина(КлючПараметра)-1));
		КонецЕсли;
	КонецЦикла;

	Для каждого ИмяПараметра Из ИменаПараметровСеанса Цикл
		Если УстановленныеПараметры.Найти(ИмяПараметра) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Обработчик = Обработчики.Получить(ИмяПараметра);
		Если Обработчик <> Неопределено Тогда
			ПараметрыОбработчика = Новый Массив;
			ПараметрыОбработчика.Добавить(ИмяПараметра);
			ПараметрыОбработчика.Добавить(УстановленныеПараметры);
			ВыполнитьМетодКонфигурации(Обработчик, ПараметрыОбработчика);
			Продолжить;
		КонецЕсли;

		Для Каждого ИмяКлючаПараметра Из ПараметрыСеансаКлючи Цикл
			Если СтрНачинаетсяС(ИмяПараметра, ИмяКлючаПараметра) Тогда
				Обработчик				= Обработчики.Получить(ИмяКлючаПараметра + "*");
				ПараметрыОбработчика	= Новый Массив;
				ПараметрыОбработчика.Добавить(ИмяПараметра);
				ПараметрыОбработчика.Добавить(УстановленныеПараметры);
				ВыполнитьМетодКонфигурации(Обработчик, ПараметрыОбработчика);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Проверяет возможность выполнения обработчиков установки параметров сеанса.
//
// В случае, если при текущих настройках профилей безопасности (в кластере серверов и в информационной
// базе) выполнение обработчиков установки параметров сеанса невозможно - генерируется исключение,
// содержащее описание причины невозможности выполнения обработчиков установки параметров сеанса
// и перечень действий, которые можно предпринять для устранения этой причины.
//
Процедура ПроверитьВозможностьВыполненияОбработчиковУстановкиПараметровСеанса()
	Если ИнформационнаяБазаФайловая(СтрокаСоединенияИнформационнойБазы()) Тогда
		Возврат;
	КонецЕсли;

	// зарезервировано для новых подсистем

	Попытка
		ДоступенПривилегированныйРежим = Вычислить("ДоступенПереходВПривилегированныйРежим()");
	Исключение
		ВызватьИсключение СтрШаблон("Невозможно выполнение обработчиков установки параметров сеанса по причине: %1.
					|
					|Возможно, для информационной базы через консоль кластера был установлен профиль безопасности, не допускающий выполнения внешних модулей без установки безопасного режима. В этом случае для восстановления работоспособности программы требуется отключить использование профиля безопасности через консоль кластера и заново настроить профили безопасности с помощью интерфейса конфигурации (соответствующие команды находятся в разделе настроек программы).При этом программа будет автоматически корректно настроена на использование совместно с включенными профилями безопасности.",
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

// Проверяет возможность перехода в привилегированный режим из текущего безопасного режима.
//
// Возвращаемое значение: Булево.
//
Функция ДоступенПереходВПривилегированныйРежим()
	УстановитьПривилегированныйРежим(Истина);

	Возврат ПривилегированныйРежим();
КонецФункции

// Заполняет структуру параметров, необходимых для работы клиентского кода
// данной подсистемы при запуске конфигурации, т.е. в обработчиках событий.
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы.
//
// Важно: при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам.
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
// Возвращаемое значение:
//   Булево   - Ложь, если дальнейшее заполнение параметров необходимо прервать.
//
Функция ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	ЭтоВызовПередНачаломРаботыСистемы = Параметры.ПолученныеПараметрыКлиента <> Неопределено;

	// Обязательные параметры для продолжения работы.
	Параметры.Вставить("ЕстьДоступДляОбновленияВерсииПлатформы",				ПользователиСервер.ЭтоПолноправныйПользователь(,Истина));
	Параметры.Вставить("ИменаПодсистем",										БазоваяПодсистемаСерверПовтИсп.ИменаПодсистем());
	Параметры.Вставить("ЭтоУчебнаяПлатформа",									ЭтоУчебнаяПлатформа());
	Параметры.Вставить("ИмяТекущегоПользователя",								ТекущийПользователь().Имя);
	Параметры.Вставить("ИмяCOMСоединителя",										БазоваяПодсистемаКлиентСервер.ИмяCOMСоединителя());
	Параметры.Вставить("КодОсновногоЯзыка",										Метаданные.ОсновнойЯзык.КодЯзыка);
	Параметры.Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",		ЗапрашиватьПодтверждениеПриЗавершенииПрограммы());

	ОбщиеПараметры = ОбщиеПараметрыБазовойФункциональности();

	Параметры.Вставить("МинимальнаяВерсияПлатформы",							ОбщиеПараметры.МинимальнаяВерсияПлатформы);
	Параметры.Вставить("РекомендуемаяВерсияПлатформы",							ОбщиеПараметры.РекомендуемаяВерсияПлатформы);
	Параметры.Вставить("РаботаВПрограммеЗапрещена",								ОбщиеПараметры.РаботаВПрограммеЗапрещена);
	Параметры.Вставить("РекомендуемыйОбъемОперативнойПамяти",					ОбщиеПараметры.РекомендуемыйОбъемОперативнойПамяти);

	Параметры.Вставить("ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти",	ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти());
	Параметры.Вставить("ЭтоСеансВнешнегоПользователя",							ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя());
	Параметры.Вставить("ИнформационнаяБазаФайловая",							ИнформационнаяБазаФайловая());

	Если ЭтоВызовПередНачаломРаботыСистемы И Не Параметры.ПолученныеПараметрыКлиента.Свойство("ОпцииИнтерфейса") Тогда
		Параметры.Вставить("ОпцииИнтерфейса", Новый Структура);
	КонецЕсли;

	Если ЭтоВызовПередНачаломРаботыСистемы Тогда
		ОшибкаНедостаточноПравДляВходаВПрограмму = ПользователиСервер.ОшибкаНедостаточноПравДляВходаВПрограмму(Не Параметры.ПолученныеПараметрыКлиента.Свойство("ОшибкаНедостаточноПравДляВходаВПрограмму"));

		Если ЗначениеЗаполнено(ОшибкаНедостаточноПравДляВходаВПрограмму) Тогда
			Параметры.Вставить("ОшибкаНедостаточноПравДляВходаВПрограмму", ОшибкаНедостаточноПравДляВходаВПрограмму);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	// зарезервировано для новых подсистем

	Если Не ОбновлениеИБСервер.ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры) И ЭтоВызовПередНачаломРаботыСистемы Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ЭтоВызовПередНачаломРаботыСистемы
	   И Не Параметры.ПолученныеПараметрыКлиента.Свойство("ПоказатьНерекомендуемуюВерсиюПлатформы")
	   И ПоказатьНерекомендуемуюВерсиюПлатформы(Параметры) Тогда

		Параметры.Вставить("ПоказатьНерекомендуемуюВерсиюПлатформы");
		БазоваяПодсистемаВызовСервера.СкрытьРабочийСтолПриНачалеРаботыСистемы();

		Возврат Ложь;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	Если ЭтоВызовПередНачаломРаботыСистемы
	   И Не Параметры.ПолученныеПараметрыКлиента.Свойство("ВосстановитьСвязьСГлавнымУзлом")
	   И ПланыОбмена.ГлавныйУзел() = Неопределено
	   И ЗначениеЗаполнено(Константы.ГлавныйУзел.Получить()) Тогда

		УстановитьПривилегированныйРежим(Ложь);
		Параметры.Вставить("ВосстановитьСвязьСГлавнымУзлом", ПользователиСервер.ЭтоПолноправныйПользователь(, Истина, Ложь));
		БазоваяПодсистемаВызовСервера.СкрытьРабочийСтолПриНачалеРаботыСистемы();

		Возврат Ложь;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);

	Если ОбновлениеИБСерверПовтИсп.НеобходимоОбновлениеИнформационнойБазы() И ОбновлениеИБСервер.СтатусНевыполненныхОбработчиков(Истина) = "СтатусНеВыполнено" Тогда
		Параметры.Вставить("НеобходимоВыполнитьОбработчикиОтложенногоОбновления");
	КонецЕсли;

	// зарезервировано для новых подсистем

	// Проверка необходимости предварительного обновления параметров работы программы.
	Если ЭтоВызовПередНачаломРаботыСистемы И НЕ Параметры.ПолученныеПараметрыКлиента.Свойство("НеобходимоОбновлениеПараметровРаботыПрограммы") Тогда
		Если РегистрыСведений.ПараметрыРаботыПрограммы.НеобходимоОбновление() Тогда
			// Будет выполнено предварительное обновление.
			Параметры.Вставить("НеобходимоОбновлениеПараметровРаботыПрограммы");

			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	// Обязательные параметры для всех режимов работы.
	Параметры.Вставить("ПодробнаяИнформация", Метаданные.ПодробнаяИнформация);

	// зарезервировано для новых подсистем

	// Параметры для работы в локальном режиме или
	// в сеансе с установленными значениями разделителей в модели сервиса.

	Если ОбновлениеИБСерверПовтИсп.НеобходимоОбновлениеИнформационнойБазы() Тогда
		Параметры.Вставить("НеобходимоОбновлениеИнформационнойБазы");
		БазоваяПодсистемаВызовСервера.СкрытьРабочийСтолПриНачалеРаботыСистемы();
	КонецЕсли;

	// зарезервировано для новых подсистем

	Отказ = Ложь;
	Если ЭтоВызовПередНачаломРаботыСистемы Тогда
		ПользователиСервер.ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры, Отказ, Истина);
	КонецЕсли;
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;

	ДобавитьОбщиеПараметрыРаботыКлиента(Параметры);

	Если ЭтоВызовПередНачаломРаботыСистемы И Параметры.Свойство("НеобходимоОбновлениеИнформационнойБазы") Тогда
		// Не следует добавлять остальные параметры до окончания обновления ИБ,
		// так как они могут рассчитывать, что обновление ИБ уже выполнено.
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

// Заполняет структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации и в дальнейшем во время работы с ней.
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьОбщиеПараметрыРаботыКлиента(Параметры)
	УстановитьПривилегированныйРежим(Истина);
	Параметры.Вставить("АвторизованныйПользователь", ПользователиКлиентСервер.АвторизованныйПользователь());
	Параметры.Вставить("ЗаголовокПриложения", СокрЛП(Константы.ЗаголовокСистемы.Получить()));
	УстановитьПривилегированныйРежим(Ложь);

	Параметры.Вставить("ЭтоГлавныйУзел", НЕ ЭтоПодчиненныйУзелРИБ());

	Параметры.Вставить("ТребуетсяОбновлениеКонфигурацииУзлаРИБ", ТребуетсяОбновлениеКонфигурацииПодчиненногоУзлаРИБ());
КонецПроцедуры

// Сохраняет ссылку на главный узел в константе ГлавныйУзел для возможности восстановления.
Процедура СохранитьГлавныйУзел() Экспорт
	ГлавныйУзелМенеджер				= Константы.ГлавныйУзел.СоздатьМенеджерЗначения();
	ГлавныйУзелМенеджер.Значение	= ПланыОбмена.ГлавныйУзел();
	ОбновлениеИБСервер.ЗаписатьДанные(ГлавныйУзелМенеджер);
КонецПроцедуры

// Возвращает сохраненные в информационной базы параметры администрирования.
// Предназначена для использования в механизмах, требующих для свой работы
// ввода параметров администрирования информационной базы и/или кластера серверов.
// Например, блокировка установки соединений с информационной базой.
//
// Возвращаемое значение:
//  Структура - содержит свойства двух структур
//              АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера
//              и АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера.
//              При этом поля, содержащие пароли, возвращаются пустыми. Если параметры администрирования
//              не были ранее сохранены при помощи функции УстановитьПараметрыАдминистрирования
//              то буду возвращены автоматически вычисленные параметры администрирования по-умолчанию.
//
Функция ПараметрыАдминистрирования() Экспорт
	Если Не ПользователиСервер.ЭтоПолноправныйПользователь(, Истина) Тогда
		ВызватьИсключение "Недостаточно прав для выполнения операции";
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	ПараметрыАдминистрированияИБ			= Константы.ПараметрыАдминистрированияИБ.Получить().Получить();
	ПараметрыАдминистрированияПоУмолчанию	= ПараметрыАдминистрированияПоУмолчанию();

	Если ТипЗнч(ПараметрыАдминистрированияИБ) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыАдминистрированияПоУмолчанию, ПараметрыАдминистрированияИБ);
	КонецЕсли;
	ПараметрыАдминистрированияИБ = ПараметрыАдминистрированияПоУмолчанию;

	Если Не ИнформационнаяБазаФайловая() Тогда
		ПрочитатьПараметрыИзСтрокиСоединения(ПараметрыАдминистрированияИБ);
	КонецЕсли;

	Возврат ПараметрыАдминистрированияИБ;
КонецФункции

Функция ПараметрыАдминистрированияПоУмолчанию()
	ПараметрыАдминистрированияКластера	= БазоваяПодсистемаКлиентСервер.ПараметрыАдминистрированияКластера();
	ПараметрыАдминистрированияИБ		= БазоваяПодсистемаКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера();

	// Объединяем структуры параметров.
	СтруктураПараметровАдминистрирования = ПараметрыАдминистрированияКластера;
	Для Каждого Элемент Из ПараметрыАдминистрированияИБ Цикл
		СтруктураПараметровАдминистрирования.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;

	СтруктураПараметровАдминистрирования.Вставить("ПринятоРешениеПоОткрытиюВнешнихОтчетовИОбработок", Ложь);

	Возврат СтруктураПараметровАдминистрирования;
КонецФункции

Процедура ПрочитатьПараметрыИзСтрокиСоединения(СтруктураПараметровАдминистрирования)
	ПодстрокиСтрокиСоединения = СтрРазделить(СтрокаСоединенияИнформационнойБазы(), ";");

	СтрокаИмениСервера									= БазоваяПодсистемаКлиентСервер.СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[0], 7));
	СтруктураПараметровАдминистрирования.ИмяВКластере	= БазоваяПодсистемаКлиентСервер.СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[1], 6));

	СписокСерверовКластера = СтрРазделить(СтрокаИмениСервера, ",");

	ИмяСервера = СписокСерверовКластера[0];

	// Протокол может быть только tcp. Можно отбросить.
	Если СтрНачинаетсяС(ВРег(ИмяСервера), "TCP://") Тогда
		ИмяСервера = Сред(ИмяСервера, 7);
	КонецЕсли;

	// Если в качестве имени сервера передается адрес IPv6, то порт может быть только после закрывающей квадратной скобки.
	НачальнаяПозиция = СтрНайти(ИмяСервера, "]");
	Если НачальнаяПозиция <> 0 Тогда
		РазделительПорта = СтрНайти(ИмяСервера, ":",, НачальнаяПозиция);
	Иначе
		РазделительПорта = СтрНайти(ИмяСервера, ":");
	КонецЕсли;

	Если РазделительПорта > 0 Тогда
		АдресАгентаСервера	= Сред(ИмяСервера, 1, РазделительПорта - 1);
		ПортКластера		= Число(Сред(ИмяСервера, РазделительПорта + 1));
		Если СтруктураПараметровАдминистрирования.ПортКластера = 1541 Тогда
			СтруктураПараметровАдминистрирования.ПортКластера = ПортКластера;
		КонецЕсли;
	Иначе
		АдресАгентаСервера = ИмяСервера;
	КонецЕсли;

	СтруктураПараметровАдминистрирования.АдресАгентаСервера = АдресАгентаСервера;
КонецПроцедуры

// Возвращает фиксированное соответствие, содержащее некоторые параметры клиента:
//  ПараметрЗапуска                    - Строка,
//  СтрокаСоединенияИнформационнойБазы - Строка - строка соединения, полученная на клиенте.
//
// Возвращает пустое фиксированное соответствие, если ТекущийРежимЗапуска() = Неопределено.
//
Функция ПараметрыКлиентаНаСервере() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыКлиента = ПараметрыСеанса.ПараметрыКлиентаНаСервере;
	УстановитьПривилегированныйРежим(Ложь);

	Если ПараметрыКлиента.Количество() = 0 И ТекущийРежимЗапуска() <> Неопределено Тогда
		ВызватьИсключение "Не заполнены параметры клиента на сервере.";
	КонецЕсли;

	Возврат ПараметрыКлиента;
КонецФункции

// Проверят, что выполнение происходит на учебной платформе,
// на которой, например, недоступно получение свойства ПользовательОС.
//
Функция ЭтоУчебнаяПлатформа() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();

	Попытка
		ПользовательОС		= ТекущийПользователь.ПользовательОС;
	Исключение
		ТекущийПользователь	= Неопределено;
	КонецПопытки;

	Возврат ТекущийПользователь = Неопределено;
КонецФункции

// Получает настройку необходимости выводить подтверждение при завершении работы программы
// для текущего пользователя. Предназначена для использования в форме персональных настроек
// пользователя. Пример использования см. в общей форме _ДемоМоиНастройки.
//
// Возвращаемое значение:
//   Булево - Если Истина, то пользователю при закрытии программы будет показано
//            окно с подтверждением завершения сеанса.
//
Функция ЗапрашиватьПодтверждениеПриЗавершенииПрограммы() Экспорт
	Результат = ХранилищеОбщихНастроекЗагрузить("ОбщиеНастройкиПользователя", "ЗапрашиватьПодтверждениеПриЗавершенииПрограммы");

	Если Результат = Неопределено Тогда
		Результат = ОбщиеПараметрыБазовойФункциональности().ЗапрашиватьПодтверждениеПриЗавершенииПрограммы;
		Настройки = Новый Структура("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы", Результат);
		СохранитьПерсональныеНастройки(Настройки);
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти()
	РекомендуемыйОбъем	= ОбщиеПараметрыБазовойФункциональности().РекомендуемыйОбъемОперативнойПамяти;
	ОперативнаяПамять	= ПараметрыКлиентаНаСервере().Получить("ОперативнаяПамять");
	Рекомендация		= ХранилищеОбщихНастроекЗагрузить("ОбщиеНастройкиПользователя", "РекомендацияПоОбъемуОперативнойПамяти");

	Возврат Не БазоваяПодсистемаКлиентСервер.ЭтоВебКлиент()
		И ИнформационнаяБазаФайловая()
		И (Рекомендация = Неопределено Или Рекомендация.Показывать
			Или (ТекущаяДатаСеанса() - Рекомендация.ДатаПредыдущегоПоказа) > 60*60*24*60)
		И ОперативнаяПамять < РекомендуемыйОбъем;
КонецФункции

Функция ПоказатьНерекомендуемуюВерсиюПлатформы(Параметры)
	// Проверка, что пользователь не внешний.
	УстановитьПривилегированныйРежим(Истина);

	Запрос			= Новый Запрос;
	Запрос.Текст	=  "ВЫБРАТЬ ПЕРВЫЕ 1
	            	   |	ИСТИНА КАК ЗначениеИстина
	            	   |ИЗ
	            	   |	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	            	   |ГДЕ
	            	   |	ВнешниеПользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
	Запрос.УстановитьПараметр("ИдентификаторПользователяИБ", ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);

	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;

	СистемнаяИнформация	= Новый СистемнаяИнформация;
	Текущая				= СистемнаяИнформация.ВерсияПриложения;
	Минимальная			= Параметры.МинимальнаяВерсияПлатформы;
	Рекомендуемая		= Параметры.РекомендуемаяВерсияПлатформы;

	Возврат БазоваяПодсистемаКлиентСервер.СравнитьВерсии(Текущая, Минимальная) < 0
		Или БазоваяПодсистемаКлиентСервер.СравнитьВерсии(Текущая, Рекомендуемая) < 0;
КонецФункции

// Обработчик регламентного задания УдалениеУстаревшихПараметровРаботыВерсийРасширений.
Процедура УдалениеУстаревшихПараметровРаботыВерсийРасширенийОбработчикЗадания() Экспорт
	ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.УдалениеУстаревшихПараметровРаботыВерсийРасширений);

	Справочники.ВерсииРасширений.УдалитьУстаревшиеВерсииПараметров();
КонецПроцедуры

#Область ОбщегоНазначения

// Выполнить экспортную процедуру по имени с уровнем привилегий конфигурации.
// При включении профилей безопасности для вызова оператора Выполнить() используется
// переход в безопасный режим с профилем безопасности, используемом для информационной базы
// (если выше по стеку не был установлен другой безопасный режим).
//
// Параметры:
//  ИмяМетода  - Строка - имя экспортной процедуры в формате
//                       <имя объекта>.<имя процедуры>, где <имя объекта> - это
//                       общий модуль или модуль менеджера объекта.
//  Параметры  - Массив - параметры передаются в процедуру <ИмяЭкспортнойПроцедуры>
//                        в порядке расположения элементов массива.
//
// Пример:
//  Параметры = Новый Массив;
//  Параметры.Добавить("1");
//  БазоваяПодсистемаСервер.ВыполнитьМетодКонфигурации("МойОбщийМодуль.МояПроцедура", Параметры);
//
Процедура ВыполнитьМетодКонфигурации(Знач ИмяМетода, Знач Параметры = Неопределено) Экспорт
	ПроверитьИмяПроцедурыКонфигурации(ИмяМетода);

	ПараметрыСтрока = "";
	Если Параметры <> Неопределено И Параметры.Количество() > 0 Тогда
		Для Индекс = 0 По Параметры.ВГраница() Цикл
			ПараметрыСтрока = ПараметрыСтрока + "Параметры[" + Индекс + "],";
		КонецЦикла;
		ПараметрыСтрока = Сред(ПараметрыСтрока, 1, СтрДлина(ПараметрыСтрока) - 1);
	КонецЕсли;

	Выполнить ИмяМетода + "(" + ПараметрыСтрока + ")";
КонецПроцедуры

// Проверяет, что переданное имя ИмяПроцедуры является именем экспортной процедуры конфигурации.
// Может использоваться для проверки, что переданная строка не содержит произвольного алгоритма
// на встроенном языке 1С:Предприятия перед использованием его в операторах Выполнить и Вычислить
// при их использовании для динамического вызова методов код конфигурации.
//
// В случае если переданная строка не является именем процедуры конфигурации, генерируется исключение.
//
// Предназначена для вызова из см. процедуру ВыполнитьМетодКонфигурации.
//
// Параметры:
//   ИмяПроцедуры - Строка - проверяемое имя экспортной процедуры.
//
Процедура ПроверитьИмяПроцедурыКонфигурации(Знач ИмяПроцедуры)
	ЧастиИмени = СтрРазделить(ИмяПроцедуры, ".");
	Если ЧастиИмени.Количество() <> 2 И ЧастиИмени.Количество() <> 3 Тогда
		ВызватьИсключение СтрШаблон("Неправильный формат параметра ИмяПроцедуры (передано значение: ""%1"") в БазоваяПодсистемаСервер.ВыполнитьМетодКонфигурации", ИмяПроцедуры);
	КонецЕсли;

	ИмяОбъекта = ЧастиИмени[0];
	Если ЧастиИмени.Количество() = 2 И Метаданные.ОбщиеМодули.Найти(ИмяОбъекта) = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Неправильный формат параметра ИмяПроцедуры (передано значение: ""%1"") в БазоваяПодсистемаСервер.ВыполнитьМетодКонфигурации:
				|Не найден общий модуль ""%2"".",
			ИмяПроцедуры,
			ИмяОбъекта);
	КонецЕсли;

	Если ЧастиИмени.Количество() = 3 Тогда
		ПолноеИмяОбъекта = ЧастиИмени[0] + "." + ЧастиИмени[1];
		Попытка
			Менеджер = МенеджерОбъектаПоИмени(ПолноеИмяОбъекта);
		Исключение
			Менеджер = Неопределено;
		КонецПопытки;
		Если Менеджер = Неопределено Тогда
			ВызватьИсключение СтрШаблон("Неправильный формат параметра ИмяПроцедуры (передано значение: ""%1"") в БазоваяПодсистемаСервер.ВыполнитьМетодКонфигурации:
				           |Не найден менеджер объекта ""%2"".",
				ИмяПроцедуры,
				ПолноеИмяОбъекта);
		КонецЕсли;
	КонецЕсли;

	ИмяМетодаОбъекта	= ЧастиИмени[ЧастиИмени.ВГраница()];
	ВременнаяСтруктура	= Новый Структура;
	Попытка
		// Проверка того, что ИмяПроцедуры является допустимым идентификатором.
		// Например: МояПроцедура.
		ВременнаяСтруктура.Вставить(ИмяМетодаОбъекта);
	Исключение
		ЗаписьЖурналаРегистрации("Безопасное выполнение метода", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		ВызватьИсключение СтрШаблон("Неправильный формат параметра ИмяПроцедуры (передано значение: ""%1"") в БазоваяПодсистемаСервер.ВыполнитьМетодКонфигурации:
			           |Имя метода ""%2"" не соответствует требованиям образования имен процедур и функций.",
			ИмяПроцедуры, ИмяМетодаОбъекта);
	КонецПопытки;
КонецПроцедуры

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
//
//  Если доступа к реквизиту нет, то в случае "ВыбратьРазрешенные = Ложь" возникнет исключение прав доступа,
//  а в случае "ВыбратьРазрешенные = Истина" вернется значение Неопределено.
//
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
//
// Функция не предназначена для получения значений реквизитов пустых ссылок.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//  ИмяРеквизита - Строка - имя получаемого реквизита.
//  ВыбратьРазрешенные - Булево - если Истина, то запрос к объекту выполняется с учетом прав пользователя, и в случае,
//                                если выборка будет пустая, то вернется значение Неопределено.
//
// Возвращаемое значение:
//  Произвольный - зависит от типа значения прочитанного реквизита.
//
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные = Ложь) Экспорт
	Результат = ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные);

	Возврат Результат[СтрЗаменить(ИмяРеквизита, ".", "")];
КонецФункции

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
//
//  Если доступа к одному из реквизитов нет, то в случае "ВыбратьРазрешенные = Ложь" возникнет исключение прав доступа,
//  а в случае "ВыбратьРазрешенные = Истина" вернется значение Неопределено для всех реквизитов.
//
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
//
// Функция не предназначена для получения значений реквизитов пустых ссылок.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
//  ВыбратьРазрешенные - Булево - если Истина, то запрос к объекту выполняется с учетом прав пользователя, и в случае,
//                                если выборка будет пустая, то все реквизиты вернутся со значением Неопределено;
//                                если Ложь, то возникнет исключение при отсутствии прав на любой из реквизитов.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//              Если в качестве объекта передана пустая ссылка, то все реквизиты вернутся со значением Неопределено.
//
Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты, ВыбратьРазрешенные = Ложь) Экспорт
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		Реквизиты = СтрРазделить(Реквизиты, ",", Ложь);
	КонецЕсли;

	СтруктураРеквизитов = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура") Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктураРеквизитов = Реквизиты;
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение СтрШаблон("Неверный тип второго параметра Реквизиты: %1", Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;

	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Ключ));

		Псевдоним = СокрЛП(КлючИЗначение.Ключ);

		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ " + ?(ВыбратьРазрешенные, "РАЗРЕШЕННЫЕ", "") + "
						|" + ТекстПолей + "
						|ИЗ
						|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
						|ГДЕ
						|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
						|";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();

	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;

	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;

	Возврат Результат;
КонецФункции

// Возвращает менеджер объекта по имени.
// Ограничение: не обрабатываются точки маршрутов бизнес-процессов.
//
// Параметры:
//  Имя - Строка - имя например, "Справочник", "Справочники", "Справочник.Организации".
//
// Возвращаемое значение:
//  СправочникиМенеджер, СправочникМенеджер, ДокументыМенеджер, ДокументМенеджер, ...
//
Функция МенеджерОбъектаПоИмени(Имя)
	Перем КлассОМ, ИмяОМ, Менеджер;

	ЧастиИмени = СтрРазделить(Имя, ".");

	Если ЧастиИмени.Количество() > 0 Тогда
		КлассОМ = ВРег(ЧастиИмени[0]);
	КонецЕсли;

	Если ЧастиИмени.Количество() > 1 Тогда
		ИмяОМ = ЧастиИмени[1];
	КонецЕсли;

	Если      КлассОМ = "ПЛАНОБМЕНА"
	 Или      КлассОМ = "ПЛАНЫОБМЕНА" Тогда
		Менеджер = ПланыОбмена;
	ИначеЕсли КлассОМ = "СПРАВОЧНИК"
	      Или КлассОМ = "СПРАВОЧНИКИ" Тогда
		Менеджер = Справочники;
	ИначеЕсли КлассОМ = "ДОКУМЕНТ"
	      Или КлассОМ = "ДОКУМЕНТЫ" Тогда
		Менеджер = Документы;
	ИначеЕсли КлассОМ = "ЖУРНАЛДОКУМЕНТОВ"
	      Или КлассОМ = "ЖУРНАЛЫДОКУМЕНТОВ" Тогда
		Менеджер = ЖурналыДокументов;
	ИначеЕсли КлассОМ = "ПЕРЕЧИСЛЕНИЕ"
	      Или КлассОМ = "ПЕРЕЧИСЛЕНИЯ" Тогда
		Менеджер = Перечисления;
	ИначеЕсли КлассОМ = "ОБЩИЙМОДУЛЬ"
	      Или КлассОМ = "ОБЩИЕМОДУЛИ" Тогда

		Возврат ОбщийМодуль(ИмяОМ);
	ИначеЕсли КлассОМ = "ОТЧЕТ"
	      Или КлассОМ = "ОТЧЕТЫ" Тогда
		Менеджер = Отчеты;
	ИначеЕсли КлассОМ = "ОБРАБОТКА"
	      Или КлассОМ = "ОБРАБОТКИ" Тогда
		Менеджер = Обработки;
	ИначеЕсли КлассОМ = "ПЛАНВИДОВХАРАКТЕРИСТИК"
	      Или КлассОМ = "ПЛАНЫВИДОВХАРАКТЕРИСТИК" Тогда
		Менеджер = ПланыВидовХарактеристик;
	ИначеЕсли КлассОМ = "ПЛАНСЧЕТОВ"
	      Или КлассОМ = "ПЛАНЫСЧЕТОВ" Тогда
		Менеджер = ПланыСчетов;
	ИначеЕсли КлассОМ = "ПЛАНВИДОВРАСЧЕТА"
	      Или КлассОМ = "ПЛАНЫВИДОВРАСЧЕТА" Тогда
		Менеджер = ПланыВидовРасчета;
	ИначеЕсли КлассОМ = "РЕГИСТРСВЕДЕНИЙ"
	      Или КлассОМ = "РЕГИСТРЫСВЕДЕНИЙ" Тогда
		Менеджер = РегистрыСведений;
	ИначеЕсли КлассОМ = "РЕГИСТРНАКОПЛЕНИЯ"
	      Или КлассОМ = "РЕГИСТРЫНАКОПЛЕНИЯ" Тогда
		Менеджер = РегистрыНакопления;
	ИначеЕсли КлассОМ = "РЕГИСТРБУХГАЛТЕРИИ"
	      Или КлассОМ = "РЕГИСТРЫБУХГАЛТЕРИИ" Тогда
		Менеджер = РегистрыБухгалтерии;
	ИначеЕсли КлассОМ = "РЕГИСТРРАСЧЕТА"
	      Или КлассОМ = "РЕГИСТРЫРАСЧЕТА" Тогда

		Если ЧастиИмени.Количество() < 3 Тогда
			// Регистр расчета
			Менеджер = РегистрыРасчета;
		Иначе
			КлассПодчиненногоОМ = ВРег(ЧастиИмени[2]);
			Если ЧастиИмени.Количество() > 3 Тогда
				ИмяПодчиненногоОМ = ЧастиИмени[3];
			КонецЕсли;
			Если КлассПодчиненногоОМ = "ПЕРЕРАСЧЕТ"
			 Или КлассПодчиненногоОМ = "ПЕРЕРАСЧЕТЫ" Тогда
				// Перерасчет
				Попытка
					Менеджер	= РегистрыРасчета[ИмяОМ].Перерасчеты;
					ИмяОМ		= ИмяПодчиненногоОМ;
				Исключение
					Менеджер	= Неопределено;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли КлассОМ = "БИЗНЕСПРОЦЕСС"
	      Или КлассОМ = "БИЗНЕСПРОЦЕССЫ" Тогда
		Менеджер = БизнесПроцессы;
	ИначеЕсли КлассОМ = "ЗАДАЧА"
	      Или КлассОМ = "ЗАДАЧИ" Тогда
		Менеджер = Задачи;
	ИначеЕсли КлассОМ = "КОНСТАНТА"
	      Или КлассОМ = "КОНСТАНТЫ" Тогда
		Менеджер = Константы;
	ИначеЕсли КлассОМ = "ПОСЛЕДОВАТЕЛЬНОСТЬ"
	      Или КлассОМ = "ПОСЛЕДОВАТЕЛЬНОСТИ" Тогда
		Менеджер = Последовательности;
	КонецЕсли;

	Если Менеджер <> Неопределено Тогда
		Если ЗначениеЗаполнено(ИмяОМ) Тогда
			Попытка
				Возврат Менеджер[ИмяОМ];
			Исключение
				Менеджер = Неопределено;
			КонецПопытки;
		Иначе
			Возврат Менеджер;
		КонецЕсли;
	КонецЕсли;

	ВызватьИсключение СтрШаблон("Не удалось получить менеджер для объекта ""%1""", Имя);
КонецФункции

// Возвращает менеджер объекта по полному имени объекта метаданных.
// Ограничение: не обрабатываются точки маршрутов бизнес-процессов.
//
// Параметры:
//  ПолноеИмя - Строка - полное имя объекта метаданных. Пример: "Справочник.Организации".
//
// Возвращаемое значение:
//  СправочникМенеджер, ДокументМенеджер, ОбработкаМенеджер, РегистрСведенийМенеджер - менеджер объекта.
//
// Пример:
//  МенеджерСправочника = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник.Организации");
//  ПустаяСсылка = МенеджерСправочника.ПустаяСсылка();
//
Функция МенеджерОбъектаПоПолномуИмени(ПолноеИмя) Экспорт
	Перем КлассОМ, ИмяОМ, Менеджер;

	ЧастиИмени = СтрРазделить(ПолноеИмя, ".");

	Если ЧастиИмени.Количество() >= 2 Тогда
		КлассОМ	= ЧастиИмени[0];
		ИмяОМ	= ЧастиИмени[1];
	КонецЕсли;

	Если      ВРег(КлассОМ) = "ПЛАНОБМЕНА" Тогда
		Менеджер = ПланыОбмена;
	ИначеЕсли ВРег(КлассОМ) = "СПРАВОЧНИК" Тогда
		Менеджер = Справочники;
	ИначеЕсли ВРег(КлассОМ) = "ДОКУМЕНТ" Тогда
		Менеджер = Документы;
	ИначеЕсли ВРег(КлассОМ) = "ЖУРНАЛДОКУМЕНТОВ" Тогда
		Менеджер = ЖурналыДокументов;
	ИначеЕсли ВРег(КлассОМ) = "ПЕРЕЧИСЛЕНИЕ" Тогда
		Менеджер = Перечисления;
	ИначеЕсли ВРег(КлассОМ) = "ОТЧЕТ" Тогда
		Менеджер = Отчеты;
	ИначеЕсли ВРег(КлассОМ) = "ОБРАБОТКА" Тогда
		Менеджер = Обработки;
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		Менеджер = ПланыВидовХарактеристик;
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНСЧЕТОВ" Тогда
		Менеджер = ПланыСчетов;
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВРАСЧЕТА" Тогда
		Менеджер = ПланыВидовРасчета;
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРСВЕДЕНИЙ" Тогда
		Менеджер = РегистрыСведений;
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
		Менеджер = РегистрыНакопления;
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРБУХГАЛТЕРИИ" Тогда
		Менеджер = РегистрыБухгалтерии;
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРРАСЧЕТА" Тогда
		Если ЧастиИмени.Количество() = 2 Тогда
			// Регистр расчета
			Менеджер = РегистрыРасчета;
		Иначе
			КлассПодчиненногоОМ	= ЧастиИмени[2];
			ИмяПодчиненногоОМ	= ЧастиИмени[3];
			Если ВРег(КлассПодчиненногоОМ) = "ПЕРЕРАСЧЕТ" Тогда
				// Перерасчет
				Попытка
					Менеджер	= РегистрыРасчета[ИмяОМ].Перерасчеты;
					ИмяОм		= ИмяПодчиненногоОМ;
				Исключение
					Менеджер	= Неопределено;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВРег(КлассОМ) = "БИЗНЕСПРОЦЕСС" Тогда
		Менеджер = БизнесПроцессы;
	ИначеЕсли ВРег(КлассОМ) = "ЗАДАЧА" Тогда
		Менеджер = Задачи;
	ИначеЕсли ВРег(КлассОМ) = "КОНСТАНТА" Тогда
		Менеджер = Константы;
	ИначеЕсли ВРег(КлассОМ) = "ПОСЛЕДОВАТЕЛЬНОСТЬ" Тогда
		Менеджер = Последовательности;
	КонецЕсли;

	Если Менеджер <> Неопределено Тогда
		Попытка
			Возврат Менеджер[ИмяОМ];
		Исключение
			Менеджер = Неопределено;
		КонецПопытки;
	КонецЕсли;

	ВызватьИсключение СтрШаблон("Неизвестный тип объекта метаданных ""%1""", ПолноеИмя);
КонецФункции

// Возвращает менеджер объекта по ссылке на объект.
// Ограничение: не обрабатываются точки маршрутов бизнес-процессов.
// См. так же МенеджерОбъектаПоПолномуИмени.
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - объект, менеджер которого требуется получить.
//
// Возвращаемое значение:
//  СправочникМенеджер, ДокументМенеджер, ОбработкаМенеджер, РегистрСведенийМенеджер - менеджер объекта.
//
// Пример:
//  МенеджерСправочника = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СсылкаНаОрганизацию);
//  ПустаяСсылка = МенеджерСправочника.ПустаяСсылка();
//
Функция МенеджерОбъектаПоСсылке(Ссылка) Экспорт
	ИмяОбъекта	= Ссылка.Метаданные().Имя;
	ТипСсылки	= ТипЗнч(Ссылка);

	Если Справочники.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Справочники[ИмяОбъекта];
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Документы[ИмяОбъекта];
	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат БизнесПроцессы[ИмяОбъекта];
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыВидовХарактеристик[ИмяОбъекта];
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыСчетов[ИмяОбъекта];
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыВидовРасчета[ИмяОбъекта];
	ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Задачи[ИмяОбъекта];
	ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыОбмена[ИмяОбъекта];
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Перечисления[ИмяОбъекта];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Возвращает ссылку на общий модуль по имени.
//
// Параметры:
//  Имя          - Строка - имя общего модуля, например:
//                 "ОбщегоНазначения",
//                 "ОбщегоНазначенияКлиент".
//
// Возвращаемое значение:
//  ОбщийМодуль - общий модуль.
//
Функция ОбщийМодуль(Имя) Экспорт
	Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
		Модуль = Вычислить(Имя); // ВычислитьВБезопасномРежиме не требуется, т.к. проверка надежная.
	ИначеЕсли СтрЧислоВхождений(Имя, ".") = 1 Тогда
		Возврат СерверныйМодульМенеджера(Имя);
	Иначе
		Модуль = Неопределено;
	КонецЕсли;

	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение СтрШаблон("Общий модуль ""%1"" не найден.", Имя);
	КонецЕсли;

	Возврат Модуль;
КонецФункции

// Возвращает серверный модуль менеджера по имени объекта.
Функция СерверныйМодульМенеджера(Имя)
	ОбъектНайден	= Ложь;

	ЧастиИмени		= СтрРазделить(Имя, ".");
	Если ЧастиИмени.Количество() = 2 Тогда
		ИмяВида		= ВРег(ЧастиИмени[0]);
		ИмяОбъекта	= ЧастиИмени[1];

		Если ИмяВида = ВРег("Константы") Тогда
			Если Метаданные.Константы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыСведений") Тогда
			Если Метаданные.РегистрыСведений.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыНакопления") Тогда
			Если Метаданные.РегистрыНакопления.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыБухгалтерии") Тогда
			Если Метаданные.РегистрыБухгалтерии.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыРасчета") Тогда
			Если Метаданные.РегистрыРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Справочники") Тогда
			Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Документы") Тогда
			Если Метаданные.Документы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Отчеты") Тогда
			Если Метаданные.Отчеты.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Обработки") Тогда
			Если Метаданные.Обработки.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("БизнесПроцессы") Тогда
			Если Метаданные.БизнесПроцессы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ЖурналыДокументов") Тогда
			Если Метаданные.ЖурналыДокументов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Задачи") Тогда
			Если Метаданные.Задачи.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыСчетов") Тогда
			Если Метаданные.ПланыСчетов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыОбмена") Тогда
			Если Метаданные.ПланыОбмена.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовХарактеристик") Тогда
			Если Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовРасчета") Тогда
			Если Метаданные.ПланыВидовРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Не ОбъектНайден Тогда
		ВызватьИсключение СтрШаблон("Объект метаданных ""%1"" не найден, либо для него не поддерживается получение модуля менеджера.", Имя);
	КонецЕсли;

	Модуль = Вычислить(Имя);

	Возврат Модуль;
КонецФункции


// Определяет принадлежность объекта метаданных к ссылочному типу.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
//
// Возвращаемое значение:
//   Булево - Истина, если объект ссылочного типа.
//
Функция ЭтоОбъектСсылочногоТипа(ОбъектМетаданных) Экспорт
	ИмяОбъектаМетаданных	= ОбъектМетаданных.ПолноеИмя();
	Позиция					= СтрНайти(ИмяОбъектаМетаданных, ".");
	Если Позиция > 0 Тогда
		ИмяБазовогоТипа = Лев(ИмяОбъектаМетаданных, Позиция - 1);
		Возврат ИмяБазовогоТипа = "Справочник"
			Или ИмяБазовогоТипа = "Документ"
			Или ИмяБазовогоТипа = "БизнесПроцесс"
			Или ИмяБазовогоТипа = "Задача"
			Или ИмяБазовогоТипа = "ПланСчетов"
			Или ИмяБазовогоТипа = "ПланОбмена"
			Или ИмяБазовогоТипа = "ПланВидовХарактеристик"
			Или ИмяБазовогоТипа = "ПланВидовРасчета";
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

// Проверка того, что переданный тип является ссылочным типом данных.
// Для типа "Неопределено" возвращается Ложь.
//
// Параметры:
//  ПроверяемыйТип - Тип - для проверки на тип ссылка.
//
// Возвращаемое значение:
//  Булево - Истина, если это ссылка.
//
Функция ЭтоСсылка(ПроверяемыйТип) Экспорт
	Возврат ПроверяемыйТип <> Тип("Неопределено")
		И (Справочники.ТипВсеСсылки().СодержитТип(ПроверяемыйТип)
		ИЛИ Документы.ТипВсеСсылки().СодержитТип(ПроверяемыйТип)
		ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(ПроверяемыйТип)
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ПроверяемыйТип)
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(ПроверяемыйТип)
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ПроверяемыйТип)
		ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(ПроверяемыйТип)
		ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(ПроверяемыйТип)
		ИЛИ Задачи.ТипВсеСсылки().СодержитТип(ПроверяемыйТип)
		ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(ПроверяемыйТип));
КонецФункции

// Определяет, что эта информационная база является подчиненным узлом
// распределенной информационной базы (РИБ).
//
// Возвращаемое значение:
//  Булево - Истина, если эта информационная база является подчиненным узлом РИБ.
//
Функция ЭтоПодчиненныйУзелРИБ() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Возврат ПланыОбмена.ГлавныйУзел() <> Неопределено;
КонецФункции

// Возвращаемое значение:
//  Булево - признак автономного рабочего места.
//
Функция ЭтоАвтономноеРабочееМесто() Экспорт
	// зарезервировано для новых подсистем

	Возврат Ложь;
КонецФункции

// Фиксирует данные типов Структура, Соответствие, Массив с учетом вложенности.
//
// Параметры:
//  Данные - Структура, Соответствие, Массив - коллекции, значения которых являются примитивными типами,
//           хранилищем значения или не могут быть изменены. Поддерживаются типы значений:
//           Булево, Строка, Число, Дата, Неопределено, УникальныйИдентификатор, Null, Тип,
//           ХранилищеЗначения, ОбщийМодуль, ОбъектМетаданных, ТипЗначенияXDTO, ТипОбъектаXDTO,
//           ЛюбаяСсылка.
//
//  ВызыватьИсключение - Булево - начальное значение Истина. Когда установлено Ложь, тогда в случае наличия
//                                нефиксируемых данных исключение не будет вызвано, при этом данные будут
//                                зафиксированы на сколько возможно.
//
// Возвращаемое значение:
//  ФиксированнаяСтруктура, ФиксированноеСоответствие, ФиксированныйМассив - фиксированные данные, аналогичные
//  переданным в параметре Данные.
//
Функция ФиксированныеДанные(Данные, ВызыватьИсключение = Истина) Экспорт
	Если ТипЗнч(Данные) = Тип("Массив") Тогда
		Массив = Новый Массив;

		Индекс = Данные.Количество() - 1;

		Для каждого Значение Из Данные Цикл
			Если ТипЗнч(Значение) = Тип("Структура") ИЛИ ТипЗнч(Значение) = Тип("Соответствие") ИЛИ ТипЗнч(Значение) = Тип("Массив") Тогда
				Массив.Добавить(ФиксированныеДанные(Значение, ВызыватьИсключение));
			Иначе
				Если ВызыватьИсключение Тогда
					ПроверкаФиксированностиДанных(Значение, Истина);
				КонецЕсли;
				Массив.Добавить(Значение);
			КонецЕсли;
		КонецЦикла;

		Возврат Новый ФиксированныйМассив(Массив);
	ИначеЕсли ТипЗнч(Данные) = Тип("Структура") ИЛИ ТипЗнч(Данные) = Тип("Соответствие") Тогда
		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			Коллекция = Новый Структура;
		Иначе
			Коллекция = Новый Соответствие;
		КонецЕсли;

		Для каждого КлючИЗначение Из Данные Цикл
			Значение = КлючИЗначение.Значение;

			Если ТипЗнч(Значение) = Тип("Структура") ИЛИ ТипЗнч(Значение) = Тип("Соответствие") ИЛИ ТипЗнч(Значение) = Тип("Массив") Тогда
				Коллекция.Вставить(КлючИЗначение.Ключ, ФиксированныеДанные(Значение, ВызыватьИсключение));
			Иначе
				Если ВызыватьИсключение Тогда
					ПроверкаФиксированностиДанных(Значение, Истина);
				КонецЕсли;
				Коллекция.Вставить(КлючИЗначение.Ключ, Значение);
			КонецЕсли;
		КонецЦикла;

		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			Возврат Новый ФиксированнаяСтруктура(Коллекция);
		Иначе
			Возврат Новый ФиксированноеСоответствие(Коллекция);
		КонецЕсли;
	ИначеЕсли ВызыватьИсключение Тогда
		ПроверкаФиксированностиДанных(Данные);
	КонецЕсли;

	Возврат Данные;
КонецФункции

Процедура ПроверкаФиксированностиДанных(Данные, ДанныеВЗначенииФиксированныхТипов = Ложь)
	ТипДанных = ТипЗнч(Данные);

	Если ТипДанных = Тип("ХранилищеЗначения")
	 ИЛИ ТипДанных = Тип("ФиксированныйМассив")
	 ИЛИ ТипДанных = Тип("ФиксированнаяСтруктура")
	 ИЛИ ТипДанных = Тип("ФиксированноеСоответствие") Тогда

		Возврат;
	КонецЕсли;

	Если ДанныеВЗначенииФиксированныхТипов Тогда
		Если ТипДанных = Тип("Булево")
		 ИЛИ ТипДанных = Тип("Строка")
		 ИЛИ ТипДанных = Тип("Число")
		 ИЛИ ТипДанных = Тип("Дата")
		 ИЛИ ТипДанных = Тип("Неопределено")
		 ИЛИ ТипДанных = Тип("УникальныйИдентификатор")
		 ИЛИ ТипДанных = Тип("Null")
		 ИЛИ ТипДанных = Тип("Тип")
		 ИЛИ ТипДанных = Тип("ХранилищеЗначения")
		 ИЛИ ТипДанных = Тип("ОбщийМодуль")
		 ИЛИ ТипДанных = Тип("ОбъектМетаданных")
		 ИЛИ ТипДанных = Тип("ТипЗначенияXDTO")
		 ИЛИ ТипДанных = Тип("ТипОбъектаXDTO")
		 ИЛИ ЭтоСсылка(ТипДанных) Тогда

			Возврат;
		КонецЕсли;
	КонецЕсли;

	ВызватьИсключение СтрШаблон("Ошибка в функции ФиксированныеДанные общего модуля БазоваяПодсистемаСервер. Данные типа ""%1"" не могут быть зафиксированы.",Строка(ТипДанных) );
КонецПроцедуры

// Возвращает данные из безопасного хранилища.
// Вызывающий код должен самостоятельно устанавливать привилегированный режим.
//
// Безопасное хранилище недоступно для чтения пользователям (кроме администраторов),
// а доступно только коду, который делает обращения только к своей части данных и
// в том контексте, который предполагает чтение или запись конфиденциальных данных.
//
// Параметры:
//  Владелец    - ПланОбменаСсылка, СправочникСсылка, Строка - ссылка на объект информационной базы,
//                  представляющий объект-владелец сохраняемого пароля или строка до 128 символов.
//
//  Ключи       - Строка - Содержит список имен сохраненных данных, указанных через запятую.
//
// Возвращаемое значение:
//  Произвольный, Структура - Данные из безопасного хранилища. Если указан один ключ,
//                            то возвращается его значение, иначе структура.
//                            Если данные отсутствуют - Неопределенно.
//
Функция ПрочитатьДанныеИзБезопасногоХранилища(Владелец, Ключи = "Пароль") Экспорт
	БазоваяПодсистемаКлиентСервер.Проверить(ЗначениеЗаполнено(Владелец),
		СтрШаблон("Недопустимое значение параметра %1 в %2. Параметр должен содержать ссылку; передано значение: %3 (тип %4).",
			"Владелец", "БазоваяПодсистемаСервер.ПрочитатьДанныеИзБезопасногоХранилища", Владелец, ТипЗнч(Владелец)));

	Результат = ДанныеИзБезопасногоХранилища(Владелец, Ключи);

	Если Результат <> Неопределено И Результат.Количество() = 1 Тогда
		Возврат ?(Результат.Свойство(Ключи), Результат[Ключи], Неопределено);
	КонецЕсли;

	Возврат Результат;
КонецФункции

// Записывает конфиденциальные данные в безопасное хранилище.
// Вызывающий код должен самостоятельно устанавливать привилегированный режим.
//
// Безопасное хранилище недоступно для чтения пользователям (кроме администраторов),
// а доступно только коду, который делает обращения только к своей части данных и
// в том контексте, который предполагает чтение или запись конфиденциальных данных.
//
// Параметры:
//  Владелец - ПланОбменаСсылка, СправочникСсылка, Строка - ссылка на объект информационной базы,
//             представляющий объект-владелец сохраняемого пароля или строка до 128 символов.
//             Для объектов других типов в качестве Владельца рекомендуется использовать ссылку на
//             элемент метаданных этого типа в справочнике ИдентификаторыОбъектовМетаданных
//             или ключ в виде строки с учетом имен подсистем.
//             Например, для БСП:
//               Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("РегистрСведений.АдресныеОбъекты");
//             если нужно 1 хранилище на подсистему БСП:
//               Владелец = "СтандартныеПодсистемы.УправлениеДоступом";
//             если нужно более 1 хранилища на подсистему БСП:
//               Владелец = "СтандартныеПодсистемы.УправлениеДоступом.<Уточнение>";
//
//  Данные  - Произвольный - Данные помещаемые в безопасное хранилище. Неопределенно - удаляет данные.
//  Ключ    - Строка       - Ключ сохраняемых настроек, по умолчанию "Пароль".
//
Процедура ЗаписатьДанныеВБезопасноеХранилище(Владелец, Данные, Ключ = "Пароль") Экспорт
	БазоваяПодсистемаКлиентСервер.Проверить(ЗначениеЗаполнено(Владелец),
		СтрШаблон("Недопустимое значение параметра %1 в %2. Параметр должен содержать ссылку; передано значение: %3 (тип %4).",
			"Владелец", "БазоваяПодсистемаСервер.ЗаписатьДанныеВБезопасноеХранилище", Владелец, ТипЗнч(Владелец)));

	БезопасноеХранилищеДанных = РегистрыСведений.БезопасноеХранилищеДанных.СоздатьМенеджерЗаписи();

	Отбор								= Новый Структура("Владелец", Владелец);
	БезопасноеХранилищеДанных.Владелец	= Владелец;
	БезопасноеХранилищеДанных.Прочитать();
	Если Данные <> Неопределено Тогда
		Если БезопасноеХранилищеДанных.Выбран() Тогда
			ДанныеДляСохранения					= БезопасноеХранилищеДанных.Данные.Получить();
			Если ТипЗнч(ДанныеДляСохранения) <> Тип("Структура") Тогда
				ДанныеДляСохранения				= Новый Структура;
			КонецЕсли;
			ДанныеДляСохранения.Вставить(Ключ, Данные);
			ДанныеДляХранилищеЗначения			= Новый ХранилищеЗначения(ДанныеДляСохранения, Новый СжатиеДанных(6));
			БезопасноеХранилищеДанных.Данные	= ДанныеДляХранилищеЗначения;
			БезопасноеХранилищеДанных.Записать();
		Иначе
			ДанныеДляСохранения					= Новый Структура(Ключ, Данные);
			ДанныеДляХранилищеЗначения			= Новый ХранилищеЗначения(ДанныеДляСохранения, Новый СжатиеДанных(6));
			БезопасноеХранилищеДанных.Данные	= ДанныеДляХранилищеЗначения;
			БезопасноеХранилищеДанных.Владелец	= Владелец;
			БезопасноеХранилищеДанных.Записать();
		КонецЕсли;
	Иначе
		БезопасноеХранилищеДанных.Удалить();
	КонецЕсли;
КонецПроцедуры

Функция ДанныеИзБезопасногоХранилища(Владелец, Ключ)
	Результат		= Новый Структура(Ключ);

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	БезопасноеХранилищеДанных.Данные КАК Данные
	            	  |ИЗ
	            	  |	РегистрСведений.БезопасноеХранилищеДанных КАК БезопасноеХранилищеДанных
	            	  |ГДЕ
	            	  |	БезопасноеХранилищеДанных.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", Владелец);

	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Если ЗначениеЗаполнено(РезультатЗапроса.Данные) Тогда
			СохраненныеДанные = РезультатЗапроса.Данные.Получить();
			Если ЗначениеЗаполнено(СохраненныеДанные) Тогда
				ЗаполнитьЗначенияСвойств(Результат, СохраненныеДанные);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
КонецФункции

// Определяет режим эксплуатации информационной базы файловый (Истина) или серверный (Ложь).
// При проверке используется СтрокаСоединенияИнформационнойБазы, которую можно указать явно.
//
// Параметры:
//  СтрокаСоединенияИнформационнойБазы - Строка - параметр используется, если
//                 нужно проверить строку соединения не текущей информационной базы.
//
// Возвращаемое значение:
//  Булево - Истина, если файловая.
//
Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
	Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;

	Возврат СтрНайти(ВРег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
КонецФункции

// Загружает настройку из хранилища общих настроек, как метод платформы Загрузить,
// объектов СтандартноеХранилищеНастроекМенеджер или ХранилищеНастроекМенеджер.<Имя хранилища>,
// но с поддержкой длины ключа настроек более 128 символов путем хеширования части,
// которая превышает 96 символов.
// Кроме того, возвращает указанное значение по умолчанию, если настройки не найдены.
// Если нет права СохранениеДанныхПользователя, возвращается значение по умолчанию без ошибки.
//
// В возвращаемом значении очищаются ссылки на несуществующий объект в базе данных, а именно
// - возвращаемая ссылка заменяется на указанное значение по умолчанию;
// - из данных типа Массив ссылки удаляются;
// - у данных типа Структура и Соответствие ключ не меняется, а значение устанавливается Неопределено;
// - анализ значений в данных типа Массив, Структура, Соответствие выполняется рекурсивно.
//
// Параметры:
//   КлючОбъекта          - Строка           - см. синтакс-помощник платформы.
//   КлючНастроек         - Строка           - см. синтакс-помощник платформы.
//   ЗначениеПоУмолчанию  - Произвольный     - значение, которое возвращается, если настройки не найдены.
//                                             Если не указано, возвращается значение Неопределено.
//   ОписаниеНастроек     - ОписаниеНастроек - см. синтакс-помощник платформы.
//   ИмяПользователя      - Строка           - см. синтакс-помощник платформы.
//
// Возвращаемое значение:
//   Произвольный - см. синтакс-помощник платформы.
//
Функция ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию = Неопределено, ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено) Экспорт
	Возврат ХранилищеЗагрузить(ХранилищеОбщихНастроек,
		КлючОбъекта,
		КлючНастроек,
		ЗначениеПоУмолчанию,
		ОписаниеНастроек,
		ИмяПользователя);
КонецФункции

Функция ХранилищеЗагрузить(МенеджерХранилища, КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию, ОписаниеНастроек, ИмяПользователя)
	Результат = Неопределено;

	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Результат	= МенеджерХранилища.Загрузить(КлючОбъекта, КлючНастроек(КлючНастроек), ОписаниеНастроек, ИмяПользователя);
	КонецЕсли;

	Если Результат = Неопределено Тогда
		Результат	= ЗначениеПоУмолчанию;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		Если УдалитьБитыеСсылки(Результат) Тогда
			Результат = ЗначениеПоУмолчанию;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
КонецФункции

// Сохраняет настройку в хранилище общих настроек, как метод платформы Сохранить,
// объектов СтандартноеХранилищеНастроекМенеджер или ХранилищеНастроекМенеджер.<Имя хранилища>,
// но с поддержкой длины ключа настроек более 128 символов путем хеширования части,
// которая превышает 96 символов.
// Если нет права СохранениеДанныхПользователя, сохранение пропускается без ошибки.
//
// Параметры:
//   КлючОбъекта       - Строка           - см. синтакс-помощник платформы.
//   КлючНастроек      - Строка           - см. синтакс-помощник платформы.
//   Настройки         - Произвольный     - см. синтакс-помощник платформы.
//   ОписаниеНастроек  - ОписаниеНастроек - см. синтакс-помощник платформы.
//   ИмяПользователя   - Строка           - см. синтакс-помощник платформы.
//   ОбновитьПовторноИспользуемыеЗначения - Булево - выполнить одноименный метод платформы.
//
Процедура ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Настройки, ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено, ОбновитьПовторноИспользуемыеЗначения = Ложь) Экспорт
	ХранилищеСохранить(ХранилищеОбщихНастроек,
		КлючОбъекта,
		КлючНастроек,
		Настройки,
		ОписаниеНастроек,
		ИмяПользователя,
		ОбновитьПовторноИспользуемыеЗначения);
КонецПроцедуры

Процедура ХранилищеСохранить(МенеджерХранилища, КлючОбъекта, КлючНастроек, Настройки, ОписаниеНастроек, ИмяПользователя, ОбновитьПовторноИспользуемыеЗначения)
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат;
	КонецЕсли;

	МенеджерХранилища.Сохранить(КлючОбъекта, КлючНастроек(КлючНастроек), Настройки, ОписаниеНастроек, ИмяПользователя);

	Если ОбновитьПовторноИспользуемыеЗначения Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
КонецПроцедуры

// Удаляет настройку из хранилища общих настроек, как метод платформы Удалить,
// объектов СтандартноеХранилищеНастроекМенеджер или ХранилищеНастроекМенеджер.<Имя хранилища>,
// но с поддержкой длины ключа настроек более 128 символов путем хеширования части,
// которая превышает 96 символов.
// Если нет права СохранениеДанныхПользователя, удаление пропускается без ошибки.
//
// Параметры:
//   КлючОбъекта     - Строка, Неопределено - см. синтакс-помощник платформы.
//   КлючНастроек    - Строка, Неопределено - см. синтакс-помощник платформы.
//   ИмяПользователя - Строка, Неопределено - см. синтакс-помощник платформы.
//
Процедура ХранилищеОбщихНастроекУдалить(КлючОбъекта, КлючНастроек, ИмяПользователя) Экспорт
	ХранилищеУдалить(ХранилищеОбщихНастроек,
		КлючОбъекта,
		КлючНастроек,
		ИмяПользователя);
КонецПроцедуры

Процедура ХранилищеУдалить(МенеджерХранилища, КлючОбъекта, КлючНастроек, ИмяПользователя)
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		МенеджерХранилища.Удалить(КлючОбъекта, КлючНастроек(КлючНастроек), ИмяПользователя);
	КонецЕсли;
КонецПроцедуры

// Возвращает строку ключа настроек, не превышающую допустимую длину 128 символов.
// Если указанная строка превышает 128, тогда вместо символов сверх 96 символов
// добавляется их хеш-сумма по алгоритму MD5 размером 32 символа.
//
// Параметры:
//  Строка - Строка - строка произвольной длины.
//
// Возвращаемое значение:
//  Строка - не более 128 символов.
//
Функция КлючНастроек(Знач Строка)
	Возврат СократитьСтрокуКонтрольнойСуммой(Строка, 128);
КонецФункции

// Сокращает строку до нужной длины, при этом обрезанная часть хешируется,
// обеспечивая уникальность строки. Проверяет длину строки на входе и, в случае
// превышения максимальной длины, преобразует ее конец по алгоритму MD5 в
// уникальную строку из 32 символов.
//
// Параметры:
//  Строка            - Строка - исходная строка произвольной длины.
//  МаксимальнаяДлина - Число  - требуемое максимальное количество символов в строке,
//                               минимальное значение: 32.
//
// Возвращаемое значение:
//   Строка - строка, не превышающая максимальную длину.
//
Функция СократитьСтрокуКонтрольнойСуммой(Строка, МаксимальнаяДлина) Экспорт
	БазоваяПодсистемаКлиентСервер.Проверить(МаксимальнаяДлина >= 32, "Параметр МаксимальнаяДлина не может быть меньше 32", "БазоваяПодсистемаСервер.СократитьСтрокуКонтрольнойСуммой");

	Результат = Строка;
	Если СтрДлина(Строка) > МаксимальнаяДлина Тогда
		Результат			= Лев(Строка, МаксимальнаяДлина - 32);
		ХешированиеДанных	= Новый ХешированиеДанных(ХешФункция.MD5);
		ХешированиеДанных.Добавить(Сред(Строка, МаксимальнаяДлина - 32 + 1));
		Результат = Результат + СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	КонецЕсли;

	Возврат Результат;
КонецФункции

// Удаляет битые ссылки из переменной.
//
// Параметры:
//   СсылкаИлиКоллекция - ЛюбаяСсылка, Произвольный - Проверяемый объект или очищаемая коллекция.
//
// Возвращаемое значение:
//   Булево -
//       * Истина - СсылкаИлиКоллекция ссылочного типа и объект не найден в базе данных.
//       * Ложь - Когда СсылкаИлиКоллекция не ссылочного типа или объект найден в базе данных.
//
Функция УдалитьБитыеСсылки(СсылкаИлиКоллекция)
	Тип = ТипЗнч(СсылкаИлиКоллекция);

	Если Тип = Тип("Неопределено")
		Или Тип = Тип("Булево")
		Или Тип = Тип("Строка")
		Или Тип = Тип("Число")
		Или Тип = Тип("Дата") Тогда // Оптимизация - часто используемые примитивные типы.

		Возврат Ложь; // Не ссылка.
	ИначеЕсли Тип = Тип("Массив") Тогда
		Количество = СсылкаИлиКоллекция.Количество();
		Для Номер = 1 По Количество Цикл
			ОбратныйИндекс	= Количество - Номер;
			Значение		= СсылкаИлиКоллекция[ОбратныйИндекс];
			Если УдалитьБитыеСсылки(Значение) Тогда
				СсылкаИлиКоллекция.Удалить(ОбратныйИндекс);
			КонецЕсли;
		КонецЦикла;

		Возврат Ложь; // Не ссылка.
	ИначеЕсли Тип = Тип("Структура")
		Или Тип = Тип("Соответствие") Тогда

		Для Каждого КлючИЗначение Из СсылкаИлиКоллекция Цикл
			Значение = КлючИЗначение.Значение;
			Если УдалитьБитыеСсылки(Значение) Тогда
				СсылкаИлиКоллекция.Вставить(КлючИЗначение.Ключ, Неопределено);
			КонецЕсли;
		КонецЦикла;

		Возврат Ложь; // Не ссылка.
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип)
		Или Справочники.ТипВсеСсылки().СодержитТип(Тип)
		Или Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип)
		Или БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		Или Задачи.ТипВсеСсылки().СодержитТип(Тип) Тогда
		// Ссылочный тип, исключая ТочкаМаршрутаБизнесПроцессаСсылка.

		Если СсылкаИлиКоллекция.Пустая() Тогда
			Возврат Ложь; // Ссылка пустая.
		ИначеЕсли ЗначениеРеквизитаОбъекта(СсылкаИлиКоллекция, "Ссылка") = Неопределено Тогда
			СсылкаИлиКоллекция = Неопределено;

			Возврат Истина; // "Битая" ссылка.
		Иначе
			Возврат Ложь; // Объект найден.
		КонецЕсли;
	Иначе
		Возврат Ложь; // Не ссылка.
	КонецЕсли;
КонецФункции

// Выполняет действия перед продолжением выполнения обработчика регламентного задания.
//
// Например, проверяет возможность выполнения обработчика регламентного задания.
// Если администратор не заблокировал выполнение регламентных заданий до
// окончания обновления ИБ, тогда требуется прекратить выполнение обработчика.
//
// Параметры:
//  РегламентноеЗадание - ОбъектМетаданных.РегламентноеЗадание - регламентное задание,
//    из которого был вызван данный метод. Необходимо передавать для проверки доступности
//    по функциональным опциям.
//
Процедура ПриНачалеВыполненияРегламентногоЗадания(РегламентноеЗадание = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Справочники.ВерсииРасширений.ЗарегистрироватьИспользованиеВерсииРасширений();
	УстановитьПривилегированныйРежим(Ложь);

	Если РегистрыСведений.ПараметрыРаботыПрограммы.НеобходимоОбновление() Тогда
		ВызватьИсключение "Вход в программу временно невозможен в связи с обновлением на новую версию.
			           |Рекомендуется запрещать выполнение регламентных заданий на время обновления.";
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Если ПланыОбмена.ГлавныйУзел() = Неопределено И ЗначениеЗаполнено(Константы.ГлавныйУзел.Получить()) Тогда
		ВызватьИсключение "Вход в программу временно невозможен до восстановления связи с главным узлом.
			           |Рекомендуется запрещать выполнение регламентных заданий на время восстановления.";
	КонецЕсли;

	// Зарезервировано для новых подсистем
КонецПроцедуры

// Процедура удаляет из массива МассивРеквизитов элементы, соответствующие именам
// реквизитов объекта из массива МассивНепроверяемыхРеквизитов.
// Для использования в обработчиках события ОбработкаПроверкиЗаполнения.
//
// Параметры:
//  МассивРеквизитов              - Массив - коллекция имен реквизитов объекта.
//  МассивНепроверяемыхРеквизитов - Массив - коллекция имен реквизитов объекта, не требующих проверки.
//
Процедура УдалитьНепроверяемыеРеквизитыИзМассива(МассивРеквизитов, МассивНепроверяемыхРеквизитов) Экспорт
	Для Каждого ЭлементМассива Из МассивНепроверяемыхРеквизитов Цикл
		ПорядковыйНомер = МассивРеквизитов.Найти(ЭлементМассива);
		Если ПорядковыйНомер <> Неопределено Тогда
			МассивРеквизитов.Удалить(ПорядковыйНомер);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ОбщиеПараметрыБазовойФункциональности() Экспорт
	ОбщиеПараметры = Новый Структура;
	ОбщиеПараметры.Вставить("ИмяФормыПерсональныхНастроек", "");
	ОбщиеПараметры.Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы", Истина);
	ОбщиеПараметры.Вставить("ОтключитьИдентификаторыОбъектовМетаданных", Ложь);
	ОбщиеПараметры.Вставить("РекомендуемыйОбъемОперативнойПамяти", 2);
	ОбщиеПараметры.Вставить("МинимальнаяВерсияПлатформы", "8.3.10.1981");
	ОбщиеПараметры.Вставить("РекомендуемаяВерсияПлатформы", "8.3.10.1981");
	ОбщиеПараметры.Вставить("РаботаВПрограммеЗапрещена", Ложь); // Блокировать запуск, если версия ниже минимальной.

	Минимальная   = ОбщиеПараметры.МинимальнаяВерсияПлатформы;
	Рекомендуемая = ОбщиеПараметры.РекомендуемаяВерсияПлатформы;
	Если Не ПустаяСтрока(Минимальная) И Не ПустаяСтрока(Рекомендуемая) И БазоваяПодсистемаКлиентСервер.СравнитьВерсии(Минимальная, Рекомендуемая) > 0 Тогда
		ТекстСообщения = "Минимальная версия платформы ""1С:Предприятие 8"" указана выше рекомендуемой. Минимальная версия - ""%1"", рекомендуемая версия - ""%2"".";

		ВызватьИсключение СтрШаблон(ТекстСообщения, ОбщиеПараметры.МинимальнаяВерсияПлатформы, ОбщиеПараметры.РекомендуемаяВерсияПлатформы);
	КонецЕсли;

	СистемнаяИнформация = Новый СистемнаяИнформация;
	Текущая             = СистемнаяИнформация.ВерсияПриложения;
	Если БазоваяПодсистемаКлиентСервер.СравнитьВерсии(Минимальная, Текущая) > 0 Тогда
		ОбщиеПараметры.МинимальноНеобходимаяВерсияПлатформы	= Минимальная;
		ОбщиеПараметры.РаботаВПрограммеЗапрещена			= Истина;
	Иначе
		ОбщиеПараметры.МинимальноНеобходимаяВерсияПлатформы	= Рекомендуемая;
		ОбщиеПараметры.РаботаВПрограммеЗапрещена			= Ложь;
	КонецЕсли;

	Возврат ОбщиеПараметры;
КонецФункции

Процедура СохранитьПерсональныеНастройки(Настройки) Экспорт
	Если Настройки.Свойство("НапоминатьОбУстановкеРасширенияРаботыСФайлами") Тогда
		ПараметрыКлиентаНаСервере = ПараметрыСеанса.ПараметрыКлиентаНаСервере;
		Если ПараметрыКлиентаНаСервере.Получить("ЭтоВебКлиент") Тогда
			ИдентификаторКлиента = ПараметрыКлиентаНаСервере.Получить("ИдентификаторКлиента");
			ХранилищеОбщихНастроекСохранить("НастройкиПрограммы/ПредлагатьУстановкуРасширенияРаботыСФайлами", ИдентификаторКлиента, Настройки.НапоминатьОбУстановкеРасширенияРаботыСФайлами);
		КонецЕсли;
	КонецЕсли;

	Если Настройки.Свойство("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы") Тогда
		ХранилищеОбщихНастроекСохранить("ОбщиеНастройкиПользователя","ЗапрашиватьПодтверждениеПриЗавершенииПрограммы", Настройки.ЗапрашиватьПодтверждениеПриЗавершенииПрограммы);
	КонецЕсли;
КонецПроцедуры

// Возвращает Истина при необходимости обновления конфигурации информационной базы подчиненного узла РИБ.
// В главном узле всегда Ложь.
//
// Возвращаемое значение:
//  Булево - Истина, если требуется.
//
Функция ТребуетсяОбновлениеКонфигурацииПодчиненногоУзлаРИБ() Экспорт
	Возврат ЭтоПодчиненныйУзелРИБ() И КонфигурацияИзменена();
КонецФункции

#КонецОбласти

#Область РегламентныеЗадания

// Устанавливает использование предопределенного регламентного задания.
//
// Параметры:
//  ЗаданиеМетаданные - ОбъектМетаданных - метаданные предопределенного регламентного задания.
//  Использование     - Булево - Истина, если задание нужно включить, иначе Ложь.
//
Процедура УстановитьИспользованиеПредопределенногоРегламентногоЗадания(ЗаданиеМетаданные, Использование) Экспорт
	Задание = РегламентныеЗадания.НайтиПредопределенное(ЗаданиеМетаданные);

	Если Задание.Использование <> Использование Тогда
		Задание.Использование = Использование;
		Задание.Записать();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти