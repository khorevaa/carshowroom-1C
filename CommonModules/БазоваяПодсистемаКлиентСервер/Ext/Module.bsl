////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая подсистема"
//
////////////////////////////////////////////////////////////////////////////////

#Область ОбщегоНазначения

// Вызывает исключение, если тип значения параметра ИмяПараметра процедуры или функции ИмяПроцедурыИлиФункции
// отличается от ожидаемого.
// Для диагностики типов параметров, передаваемых в процедуры и функции программного интерфейса.
//
// Параметры:
//   ИмяПроцедурыИлиФункции - Строка             - имя процедуры или функции, параметр которой проверяется.
//   ИмяПараметра           - Строка             - имя проверяемого параметра процедуры или функции.
//   ЗначениеПараметра      - Произвольный       - фактическое значение параметра.
//   ОжидаемыеТипы  - ОписаниеТипов, Тип, Массив - тип(ы) параметра процедуры или функции.
//   ОжидаемыеТипыСвойств   - Структура          - если ожидаемый тип - структура, то
//                                                 в этом параметре можно указать типы ее свойств.
//
Процедура ПроверитьПараметр(Знач ИмяПроцедурыИлиФункции, Знач ИмяПараметра, Знач ЗначениеПараметра, Знач ОжидаемыеТипы, Знач ОжидаемыеТипыСвойств = Неопределено) Экспорт
	Контекст = "БазоваяПодсистемаКлиентСервер.ПроверитьПараметр";
	Проверить(ТипЗнч(ИмяПроцедурыИлиФункции) = Тип("Строка"), "Недопустимо значение параметра ИмяПроцедурыИлиФункции", Контекст);
	Проверить(ТипЗнч(ИмяПараметра) = Тип("Строка"), "Недопустимо значение параметра ИмяПараметра", Контекст);

	ЭтоКорректныйТип = ЗначениеОжидаемогоТипа(ЗначениеПараметра, ОжидаемыеТипы);
	Проверить(ЭтоКорректныйТип <> Неопределено, "Недопустимо значение параметра ОжидаемыеТипы", Контекст);

	НедопустимыйПараметр = "Недопустимое значение параметра %1 в %2. Ожидалось: %3; передано значение: %4 (тип %5).";
	Проверить(ЭтоКорректныйТип,
		СтрШаблон(НедопустимыйПараметр, ИмяПараметра, ИмяПроцедурыИлиФункции, ПредставлениеТипов(ОжидаемыеТипы), ?(ЗначениеПараметра <> Неопределено, ЗначениеПараметра, "Неопределено"), ТипЗнч(ЗначениеПараметра)));

	Если ТипЗнч(ЗначениеПараметра) = Тип("Структура") И ОжидаемыеТипыСвойств <> Неопределено Тогда
		Проверить(ТипЗнч(ОжидаемыеТипыСвойств) = Тип("Структура"), "Недопустимо значение параметра ИмяПроцедурыИлиФункции", Контекст);

		НетСвойства				= "Недопустимое значение параметра %1 (Структура) в %2. В структуре ожидалось свойство %3 (тип %4).";
		НедопустимоеСвойство	= "Недопустимое значение свойства %1 в параметре %2 (Структура) в %3. Ожидалось: %4; передано значение: %5 (тип %6).";
		Для каждого Свойство Из ОжидаемыеТипыСвойств Цикл
			ОжидаемоеИмяСвойства	= Свойство.Ключ;
			ОжидаемыйТипСвойства	= Свойство.Значение;
			ЗначениеСвойства		= Неопределено;

			Проверить(ЗначениеПараметра.Свойство(ОжидаемоеИмяСвойства, ЗначениеСвойства),
				СтрШаблон(НетСвойства, ИмяПараметра, ИмяПроцедурыИлиФункции, ОжидаемоеИмяСвойства, ОжидаемыйТипСвойства));

			ЭтоКорректныйТип = ЗначениеОжидаемогоТипа(ЗначениеСвойства, ОжидаемыйТипСвойства);
			Проверить(ЭтоКорректныйТип,
				СтрШаблон(НедопустимоеСвойство, ОжидаемоеИмяСвойства, ИмяПараметра, ИмяПроцедурыИлиФункции, ПредставлениеТипов(ОжидаемыеТипы), ?(ЗначениеСвойства <> Неопределено, ЗначениеСвойства, "Неопределено"), ТипЗнч(ЗначениеСвойства)));
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Вызывает исключение с текстом Сообщение, если Условие не равно Истина.
// Применяется для самодиагностики кода.
//
// Параметры:
//   Условие                - Булево - если не равно Истина, то вызывается исключение.
//   КонтекстПроверки       - Строка - например, имя процедуры или функции, в которой выполняется проверка.
//   Сообщение              - Строка - текст сообщения. Если не задан, то исключение вызывается с сообщением по
//                                     умолчанию.
//
Процедура Проверить(Знач Условие, Знач Сообщение = "", Знач КонтекстПроверки = "") Экспорт
	Если Условие <> Истина Тогда
		Если ПустаяСтрока(Сообщение) Тогда
			ТекстИсключения = "Недопустимая операция"; // Assertion failed
		Иначе
			ТекстИсключения = Сообщение;
		КонецЕсли;
		Если Не ПустаяСтрока(КонтекстПроверки) Тогда
			ТекстИсключения = ТекстИсключения + " " + СтрШаблон("в %1", КонтекстПроверки);
		КонецЕсли;
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
КонецПроцедуры

Функция ЗначениеОжидаемогоТипа(Значение, ОжидаемыеТипы)
	ТипЗначения = ТипЗнч(Значение);
	Если ТипЗнч(ОжидаемыеТипы) = Тип("ОписаниеТипов") Тогда
		Возврат ОжидаемыеТипы.Типы().Найти(ТипЗначения) <> Неопределено;
	ИначеЕсли ТипЗнч(ОжидаемыеТипы) = Тип("Тип") Тогда
		Возврат ТипЗначения = ОжидаемыеТипы;
	ИначеЕсли ТипЗнч(ОжидаемыеТипы) = Тип("Массив") Тогда
		Возврат ОжидаемыеТипы.Найти(ТипЗначения) <> Неопределено;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

Функция ПредставлениеТипов(ОжидаемыеТипы)
	Если ТипЗнч(ОжидаемыеТипы) = Тип("Массив") Тогда
		Результат = "";
		Для Каждого Тип Из ОжидаемыеТипы Цикл
			Если Не ПустаяСтрока(Результат) Тогда
				Результат = Результат + ", ";
			КонецЕсли;
			Результат = Результат + ?(Тип = Неопределено, "Неопределено", Строка(Тип));
		КонецЦикла;
		Возврат Результат;
	Иначе
		Возврат Строка(ОжидаемыеТипы);
	КонецЕсли;
КонецФункции

// Дополняет структуру значениями из другой структуры.
//
// Параметры:
//   Приемник - Структура - коллекция, в которую будут добавляться новые значения.
//   Источник - Структура - коллекция, из которой будут считываться пары Ключ и Значение для заполнения.
//   Заменять - Булево, Неопределено - Что делать в местах пересечения ключей источника и приемника:
//                                       Истина - Заменять значения приемника (самый быстрый способ),
//                                       Ложь   - Не заменять значения приемника (пропускать),
//                                       Неопределено - Значение по умолчанию. Бросать исключение.
//
Процедура ДополнитьСтруктуру(Приемник, Источник, Заменять = Неопределено) Экспорт
	Для Каждого Элемент Из Источник Цикл
		Если Заменять <> Истина И Приемник.Свойство(Элемент.Ключ) Тогда
			Если Заменять = Ложь Тогда
				Продолжить;
			Иначе
				ВызватьИсключение СтрШаблон("Пересечение ключей источника и приемника: ""%1"".", Элемент.Ключ);
			КонецЕсли
		КонецЕсли;
		Приемник.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
КонецПроцедуры

// Создает копию значения типа Структура, рекурсивно, с учетом типов значений свойств.
// Если свойства структуры содержат значения объектных типов (СправочникОбъект, ДокументОбъект и т.п.),
// то их содержимое не копируются, а возвращаются ссылки на исходный объект.
//
// Параметры:
//  СтруктураИсточник - Структура - копируемая структура.
//
// Возвращаемое значение:
//  Структура - копия исходной структуры.
//
Функция СкопироватьСтруктуру(СтруктураИсточник) Экспорт
	СтруктураРезультат = Новый Структура;

	Для Каждого КлючИЗначение Из СтруктураИсточник Цикл
		СтруктураРезультат.Вставить(КлючИЗначение.Ключ, СкопироватьРекурсивно(КлючИЗначение.Значение));
	КонецЦикла;

	Возврат СтруктураРезультат;
КонецФункции

// Создает копию значения типа Соответствие, рекурсивно, с учетом типов значений.
// Если значения соответствия содержат значения объектных типов (СправочникОбъект, ДокументОбъект и т.п.),
// то их содержимое не копируются, а возвращаются ссылки на исходный объект.
//
// Параметры:
//  СоответствиеИсточник - Соответствие - соответствие, копию которого необходимо получить.
//
// Возвращаемое значение:
//  Соответствие - копия исходного соответствия.
//
Функция СкопироватьСоответствие(СоответствиеИсточник) Экспорт
	СоответствиеРезультат = Новый Соответствие;

	Для Каждого КлючИЗначение Из СоответствиеИсточник Цикл
		СоответствиеРезультат.Вставить(КлючИЗначение.Ключ, СкопироватьРекурсивно(КлючИЗначение.Значение));
	КонецЦикла;

	Возврат СоответствиеРезультат;
КонецФункции

// Дополняет массив МассивПриемник значениями из массива МассивИсточник.
//
// Параметры:
//  МассивПриемник - Массив - массив, в который необходимо добавить значения.
//  МассивИсточник - Массив - массив значений для заполнения.
//  ТолькоУникальныеЗначения - Булево - если истина, то в массив будут включены только уникальные значения.
//
Процедура ДополнитьМассив(МассивПриемник, МассивИсточник, ТолькоУникальныеЗначения = Ложь) Экспорт
	Если ТолькоУникальныеЗначения Тогда
		УникальныеЗначения = Новый Соответствие;

		Для Каждого Значение Из МассивПриемник Цикл
			УникальныеЗначения.Вставить(Значение, Истина);
		КонецЦикла;

		Для Каждого Значение Из МассивИсточник Цикл
			Если УникальныеЗначения[Значение] = Неопределено Тогда
				МассивПриемник.Добавить(Значение);
				УникальныеЗначения.Вставить(Значение, Истина);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого Значение Из МассивИсточник Цикл
			МассивПриемник.Добавить(Значение);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Создает копию значения типа Массив, рекурсивно, с учетом типов значений элементов массива.
// Если элементы массива содержат значения объектных типов (СправочникОбъект, ДокументОбъект и т.п.),
// то их содержимое не копируются, а возвращаются ссылки на исходный объект.
//
// Параметры:
//  МассивИсточник - Массив - массив, копию которого необходимо получить.
//
// Возвращаемое значение:
//  Массив - копия исходного массива.
//
Функция СкопироватьМассив(МассивИсточник) Экспорт
	МассивРезультат = Новый Массив;

	Для Каждого Элемент Из МассивИсточник Цикл
		МассивРезультат.Добавить(СкопироватьРекурсивно(Элемент));
	КонецЦикла;

	Возврат МассивРезультат;
КонецФункции

// Дополняет таблицу значений-приемник данными из таблицы значений-источник.
//
// Параметры:
//  ТаблицаИсточник - ТаблицаЗначений - таблица, из которой будут браться строки для заполнения;
//  ТаблицаПриемник - ТаблицаЗначений - таблица, в которую будут добавлены строки из таблицы-источника.
//
Процедура ДополнитьТаблицу(ТаблицаИсточник, ТаблицаПриемник) Экспорт
	Для Каждого СтрокаТаблицыИсточник Из ТаблицаИсточник Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), СтрокаТаблицыИсточник);
	КонецЦикла;
КонецПроцедуры

// Создает копию значения типа СписокЗначений, рекурсивно, с учетом типов его значений.
// Если в списке значений есть значения объектных типов (СправочникОбъект, ДокументОбъект и т.п.),
// то их содержимое не копируются, а возвращаются ссылки на исходный объект.
//
// Параметры:
//  СписокИсточник - СписокЗначений - список значений, копию которого необходимо получить.
//
// Возвращаемое значение:
//  СписокЗначений - копия исходного списка значений.
//
Функция СкопироватьСписокЗначений(СписокИсточник) Экспорт
	СписокРезультат = Новый СписокЗначений;

	Для Каждого ЭлементСписка Из СписокИсточник Цикл
		СписокРезультат.Добавить(
			СкопироватьРекурсивно(ЭлементСписка.Значение),
			ЭлементСписка.Представление,
			ЭлементСписка.Пометка,
			ЭлементСписка.Картинка);
	КонецЦикла;

	Возврат СписокРезультат;
КонецФункции

// Создает полную копию структуры, соответствия, массива, списка или таблицы значений, рекурсивно,
// с учетом типов дочерних элементов. При этом содержимое значений объектных типов
// (СправочникОбъект, ДокументОбъект и т.п.) не копируются, а возвращаются ссылки на исходный объект.
//
// Параметры:
//  Источник - Структура, Соответствие, Массив, СписокЗначений, ТаблицаЗначений - объект, который необходимо
//             скопировать.
//
// Возвращаемое значение:
//  Структура, Соответствие, Массив, СписокЗначений, ТаблицаЗначений - копия объекта, переданного в параметре Источник.
//
Функция СкопироватьРекурсивно(Источник) Экспорт
	Перем Приемник;

	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("Структура") Тогда
		Приемник = СкопироватьСтруктуру(Источник);
	ИначеЕсли ТипИсточника = Тип("Соответствие") Тогда
		Приемник = СкопироватьСоответствие(Источник);
	ИначеЕсли ТипИсточника = Тип("Массив") Тогда
		Приемник = СкопироватьМассив(Источник);
	ИначеЕсли ТипИсточника = Тип("СписокЗначений") Тогда
		Приемник = СкопироватьСписокЗначений(Источник);
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	ИначеЕсли ТипИсточника = Тип("ТаблицаЗначений") Тогда
		Приемник = Источник.Скопировать();
#КонецЕсли
	Иначе
		Приемник = Источник;
	КонецЕсли;

	Возврат Приемник;
КонецФункции

// Добавляет в список ошибок новую ошибку пользователя для дальнейшей отправки с помощью
// процедуры СообщитьОшибкиПользователю().
// Предназначена для накопления списка ошибок с последующей обработкой этого списка перед тем, как вывести
// пользователю. Полученный список ошибок можно, например, отсортировать по важности, очистить от дублей,
// а также вывести пользователю в ином виде, чем выводит метод СообщитьПользователю, например, в табличный документ.
//
// Параметры:
//  Ошибки          - Неопределено - будет создан новый список,
//                  - значение, установленное при первом вызове этой процедуры со значением Неопределено.
//
//  ПолеОшибки      - Строка - значение, которое задается в свойстве Поле объекта СообщениеПользователю.
//                    Для автоподстановки номера строки должна содержать "%1".
//                    Например, "Объект.ИНН" или "Объект.Пользователи[%1].Пользователь".
//
//  ТекстДляОднойОшибки - Строка - текст ошибки для случая, когда ГруппаОшибок в коллекции только одна,
//                    например, НСтр("ru = 'Пользователь не выбран.'").
//
//  ГруппаОшибок    - Произвольный - используется для выбора либо текста для одной ошибки,
//                    либо текста для нескольких ошибок, например, имя "Объект.Пользователи".
//                    Если значение не заполнено, тогда используется текст для одной ошибки.
//
//  НомерСтроки     - Число - значение от 0 ... , определяющее номер строки, который нужно подставить
//                    в строку ПолеОшибки и в ТекстДляНесколькихОшибок (подставляется НомерСтроки + 1).
//
//  ТекстДляНесколькихОшибок - Строка - текст ошибки для случая, когда добавлено несколько ошибок с одинаковым
//                    свойством ГруппаОшибок, например, НСтр("ru = 'Пользователь в строке %1 не выбран.'").
//
//  ИндексСтроки    - Неопределено - совпадает со значением параметра НомерСтроки.
//                    Число - значение от 0 ... , определяющее номер строки, который нужно подставить
//                    в строку ПолеОшибки.
//
Процедура ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстДляОднойОшибки, ГруппаОшибок, НомерСтроки = 0, ТекстДляНесколькихОшибок = "", ИндексСтроки = Неопределено) Экспорт
	Если Ошибки = Неопределено Тогда
		Ошибки = Новый Структура;
		Ошибки.Вставить("СписокОшибок", Новый Массив);
		Ошибки.Вставить("ГруппыОшибок", Новый Соответствие);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ГруппаОшибок) Тогда
		// При незаполненной группе ошибок используется текст для одной ошибки.
	Иначе
		Если Ошибки.ГруппыОшибок[ГруппаОшибок] = Неопределено Тогда
			// Группа ошибок использовалась один раз, используется текст для одной ошибки.
			Ошибки.ГруппыОшибок.Вставить(ГруппаОшибок, Ложь);
		Иначе
			// Группа ошибок использовалась несколько раз, используется текст для нескольких ошибок.
			Ошибки.ГруппыОшибок.Вставить(ГруппаОшибок, Истина);
		КонецЕсли;
	КонецЕсли;

	Ошибка = Новый Структура;
	Ошибка.Вставить("ПолеОшибки",               ПолеОшибки);
	Ошибка.Вставить("ТекстДляОднойОшибки",      ТекстДляОднойОшибки);
	Ошибка.Вставить("ГруппаОшибок",             ГруппаОшибок);
	Ошибка.Вставить("НомерСтроки",              НомерСтроки);
	Ошибка.Вставить("ТекстДляНесколькихОшибок", ТекстДляНесколькихОшибок);
	Ошибка.Вставить("ИндексСтроки",             ИндексСтроки);

	Ошибки.СписокОшибок.Добавить(Ошибка);
КонецПроцедуры

// Выводит накопленные методом ДобавитьОшибкуПользователю ошибки, при этом использует нужные шаблоны текстов ошибок
// в зависимости от количества однотипных ошибок.
//
// Параметры:
//  Ошибки  - Неопределено, Структура - коллекция ошибок.
//  Отказ   - Булево - устанавливается Истина, если ошибки сообщались.
//
Процедура СообщитьОшибкиПользователю(Ошибки, Отказ = Ложь) Экспорт
	Если Ошибки = Неопределено Тогда
		Возврат;
	Иначе
		Отказ = Истина;
	КонецЕсли;

	Для каждого Ошибка Из Ошибки.СписокОшибок Цикл
		Если Ошибка.ИндексСтроки = Неопределено Тогда
			ИндексСтроки = Ошибка.НомерСтроки;
		Иначе
			ИндексСтроки = Ошибка.ИндексСтроки;
		КонецЕсли;

		Если Ошибки.ГруппыОшибок[Ошибка.ГруппаОшибок] <> Истина Тогда

			СообщитьПользователю(
				Ошибка.ТекстДляОднойОшибки,
				,
				СтрЗаменить(Ошибка.ПолеОшибки, "%1", Формат(ИндексСтроки, "ЧН=0; ЧГ=")));
		Иначе
			СообщитьПользователю(
				СтрЗаменить(Ошибка.ТекстДляНесколькихОшибок, "%1", Формат(Ошибка.НомерСтроки + 1, "ЧН=0; ЧГ=")),
				,
				СтрЗаменить(Ошибка.ПолеОшибки, "%1", Формат(ИндексСтроки, "ЧН=0; ЧГ=")));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СообщитьПользователю(Знач ТекстСообщенияПользователю, Знач КлючДанных = Неопределено, Знач Поле = "", Знач ПутьКДанным = "", Отказ = Ложь) Экспорт
	Сообщение		= Новый СообщениеПользователю;
	Сообщение.Текст	= ТекстСообщенияПользователю;
	Сообщение.Поле	= Поле;

	ЭтоОбъект		= Ложь;

#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда
	Если КлючДанных <> Неопределено И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой	= XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект			= СтрНайти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли

	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;

	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;

	Сообщение.Сообщить();

	Отказ = Истина;
КонецПроцедуры

// Возвращает имя COM-класса для работы с 1С:Предприятием 8 через COM-соединение.
//
// Возвращаемое значение:
//  Строка - имя COM-класса для работы с 1С:Предприятием 8 через COM-соединение.
//
Функция ИмяCOMСоединителя() Экспорт
	СистемнаяИнформация	= Новый СистемнаяИнформация;
	ПодстрокиВерсии		= СтрРазделить(СистемнаяИнформация.ВерсияПриложения, ".");
	Возврат "v" + ПодстрокиВерсии[0] + ПодстрокиВерсии[1] + ".COMConnector";
КонецФункции

// Сравнить две строки версий.
//
// Параметры:
//  СтрокаВерсии1  - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.СС.
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2);
	Версия1 = СтрРазделить(Строка1, ".");
	Если Версия1.Количество() <> 4 Тогда
		ВызватьИсключение СтрШаблон("Неправильный формат параметра СтрокаВерсии1: %1", СтрокаВерсии1);
	КонецЕсли;
	Версия2 = СтрРазделить(Строка2, ".");
	Если Версия2.Количество() <> 4 Тогда
		ВызватьИсключение СтрШаблон("Неправильный формат параметра СтрокаВерсии2: %1", СтрокаВерсии2);
	КонецЕсли;

	Результат = 0;
	Для Разряд = 0 По 3 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

// Получает номер версии конфигурации без номера сборки.
//
// Параметры:
//  Версия - Строка - версия конфигурации в формате РР.ПП.ЗЗ.СС,
//                    где СС - номер сборки, который будет удален.
//
// Возвращаемое значение:
//  Строка - номер версии конфигурации без номера сборки в формате РР.ПП.ЗЗ.
//
Функция ВерсияКонфигурацииБезНомераСборки(Знач Версия) Экспорт
	Массив = СтрРазделить(Версия, ".");

	Если Массив.Количество() < 3 Тогда
		Возврат Версия;
	КонецЕсли;

	Результат = СтрШаблон("%1.%2.%3",Массив[0], Массив[1], Массив[2]);

	Возврат Результат;
КонецФункции

// Возвращает Истина, если клиентское приложение является Веб-клиентом.
//
// Возвращаемое значение:
//  Булево - если нет клиентского приложения, возвращается Ложь.
//
Функция ЭтоВебКлиент() Экспорт
#Если ВебКлиент Тогда
	Возврат Истина;
#ИначеЕсли Клиент Или ВнешнееСоединение Тогда
	Возврат Ложь;
#Иначе
	УстановитьПривилегированныйРежим(Истина);

	ЭтоВебКлиент = БазоваяПодсистемаСервер.ПараметрыКлиентаНаСервере().Получить("ЭтоВебКлиент");

	Если ЭтоВебКлиент = Неопределено Тогда
		Возврат Ложь; // Нет клиентского приложения.
	КонецЕсли;

	Возврат ЭтоВебКлиент;
#КонецЕсли
КонецФункции

// Возвращает значение свойства структуры.
//
// Параметры:
//   Структура - Структура, ФиксированнаяСтруктура - Объект, из которого необходимо прочитать значение ключа.
//   Ключ - Строка - Имя свойства структуры, для которого необходимо прочитать значение.
//   ЗначениеПоУмолчанию - Произвольный - Необязательный. Возвращается когда в структуре нет значения по указанному
//                                        ключу.
//       Для скорости рекомендуется передавать только быстро вычисляемые значения (например примитивные типы),
//       а инициализацию более тяжелых значений выполнять после проверки полученного значения (только если это
//       требуется).
//
// Возвращаемое значение:
//   Произвольный - Значение свойства структуры. ЗначениеПоУмолчанию если в структуре нет указанного свойства.
//
Функция СвойствоСтруктуры(Структура, Ключ, ЗначениеПоУмолчанию = Неопределено) Экспорт
	Если Структура = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;

	Результат = ЗначениеПоУмолчанию;
	Если Структура.Свойство(Ключ, Результат) Тогда
		Возврат Результат;
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
КонецФункции

// Возвращает Истина, если включен режим отладки.
//
// Возвращаемое значение:
//  Булево - Истина, если включен режим отладки.
Функция РежимОтладки() Экспорт
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	ПараметрЗапускаПриложения = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
#Иначе
	ПараметрЗапускаПриложения = ПараметрЗапуска;
#КонецЕсли

	Возврат СтрНайти(ПараметрЗапускаПриложения, "РежимОтладки") > 0;
КонецФункции

// Процедура управляет состояние поля табличного документа.
//
// Параметры:
//  ПолеТабличногоДокумента - ПолеФормы - поле формы с видом ПолеТабличногоДокумента,
//                            для которого необходимо установить состояние.
//  Состояние               - Строка - задает вид состояния.
//
Процедура УстановитьСостояниеПоляТабличногоДокумента(ПолеТабличногоДокумента, Состояние = "НеИспользовать") Экспорт
	Если ТипЗнч(ПолеТабличногоДокумента) = Тип("ПолеФормы") И ПолеТабличногоДокумента.Вид = ВидПоляФормы.ПолеТабличногоДокумента Тогда
		ОтображениеСостояния = ПолеТабличногоДокумента.ОтображениеСостояния;
		Если ВРег(Состояние) = "НЕИСПОЛЬЗОВАТЬ" Тогда
			ОтображениеСостояния.Видимость                      = Ложь;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
			ОтображениеСостояния.Картинка                       = Новый Картинка;
			ОтображениеСостояния.Текст                          = "";
		ИначеЕсли ВРег(Состояние) = "НЕАКТУАЛЬНОСТЬ" Тогда
			ОтображениеСостояния.Видимость                      = Истина;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
			ОтображениеСостояния.Картинка                       = Новый Картинка;
			ОтображениеСостояния.Текст                          = "Отчет не сформирован. Нажмите ""Сформировать"" для получения отчета.";
		ИначеЕсли ВРег(Состояние) = "ФОРМИРОВАНИЕОТЧЕТА" Тогда
			ОтображениеСостояния.Видимость                      = Истина;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
			ОтображениеСостояния.Картинка                       = БиблиотекаКартинок.ДлительнаяОперация;
			ОтображениеСостояния.Текст                          = "Отчет формируется...";
		Иначе
			ВызватьИсключение("Недопустимое значение параметра (параметр номер ''2'')");
		КонецЕсли;
	Иначе
		ВызватьИсключение("Недопустимое значение параметра (параметр номер ''1'')");
	КонецЕсли;
КонецПроцедуры

// Сравнивает элементы списков значений или массивов по значениям.
//
// Параметры:
//  Список1 - Массив, СписокЗначений - сравниваемая коллекция элементов.
//  Список2 - Массив, СписокЗначений - сравниваемая коллекция элементов.
//
// Возвращаемое значение:
//  Булево - Истина, если идентичны.
//
Функция СпискиЗначенийИдентичны(Список1, Список2) Экспорт
	СпискиИдентичны = Истина;

	Для Каждого ЭлементСписка1 Из Список1 Цикл
		Если НайтиВСписке(Список2, ЭлементСписка1) = Неопределено Тогда
			СпискиИдентичны = Ложь;

			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если СпискиИдентичны Тогда
		Для Каждого ЭлементСписка2 Из Список2 Цикл
			Если НайтиВСписке(Список1, ЭлементСписка2) = Неопределено Тогда
				СпискиИдентичны = Ложь;

				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат СпискиИдентичны;
КонецФункции

// Выполняет поиск элемента в коллекции: списке значений или массиве.
//
Функция НайтиВСписке(Список, Элемент)
	Перем ЭлементВСписке;

	Если ТипЗнч(Список) = Тип("СписокЗначений") Тогда
		Если ТипЗнч(Элемент) = Тип("ЭлементСпискаЗначений") Тогда
			ЭлементВСписке = Список.НайтиПоЗначению(Элемент.Значение);
		Иначе
			ЭлементВСписке = Список.НайтиПоЗначению(Элемент);
		КонецЕсли;
	КонецЕсли;

	Если ТипЗнч(Список) = Тип("Массив") Тогда
		ЭлементВСписке = Список.Найти(Элемент);
	КонецЕсли;

	Возврат ЭлементВСписке;
КонецФункции

// Создает массив и помещает в него переданное значение.
//
// Параметры:
//  Значение - Произвольный - любое значение.
//
// Возвращаемое значение:
//  Массив - массив из одного элемента.
//
Функция ЗначениеВМассиве(Значение) Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Значение);

	Возврат Массив;
КонецФункции

// Добавить или заменить существующий элемент отбора динамического списка.
//
// Параметры:
//   ДинамическийСписок - ДинамическийСписок - Список, в котором требуется установить отбор.
//   ИмяПоля            - Строка - Поле, по которому необходимо установить отбор.
//   ПравоеЗначение     - Произвольный - Значение отбора.
//       Необязательный. Значение по умолчанию: Неопределено.
//       Внимание! Если передать Неопределено, то значение не будет изменено.
//   ВидСравнения  - ВидСравненияКомпоновкиДанных - Условие отбора.
//   Представление - Строка - Представление элемента компоновки данных.
//       Необязательный. Значение по умолчанию: Неопределено.
//       Если указано, то выводится только флажок использования с указанным представлением (значение не выводится).
//       Для очистки (чтобы значение снова выводилось) следует передать пустую строку.
//   Использование - Булево - Флажок использования этого отбора.
//       Необязательный. Значение по умолчанию: Неопределено.
//   РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - Способ отображения этого отбора
//                                                                          пользователю.
//       * РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ - В группе быстрых настроек над списком.
//       * РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный       - В настройка списка (в подменю Еще).
//       * РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный   - Запретить пользователю менять этот отбор.
//   ИдентификаторПользовательскойНастройки - Строка - Уникальный идентификатор этого отбора.
//       Используется для связи с пользовательскими настройками.
//
Процедура УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля, ПравоеЗначение = Неопределено, ВидСравнения = Неопределено, Представление = Неопределено, Использование = Неопределено, РежимОтображения = Неопределено, ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	Если РежимОтображения = Неопределено Тогда
		РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;

	Если РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		ОтборДинамическогоСписка = ДинамическийСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
	Иначе
		ОтборДинамическогоСписка = ДинамическийСписок.КомпоновщикНастроек.Настройки.Отбор;
	КонецЕсли;

	УстановитьЭлементОтбора(ОтборДинамическогоСписка, ИмяПоля, ПравоеЗначение, ВидСравнения, Представление, Использование, РежимОтображения, ИдентификаторПользовательскойНастройки);
КонецПроцедуры

// Добавить или заменить существующий элемент отбора.
//
// Параметры:
//  ОбластьПоискаДобавления - КоллекцияЭлементовОтбораКомпоновкиДанных - контейнер с элементами и группами отбора,
//                                     например, Список.Отбор или группа в отборе.
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
//  ПравоеЗначение          - произвольный - сравниваемое значение.
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
//  Представление           - Строка - представление элемента компоновки данных.
//  Использование           - Булево - использование элемента.
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки
//                                                    в синтакс-помощнике.
//
Процедура УстановитьЭлементОтбора(ОбластьПоискаДобавления, Знач ИмяПоля, Знач ПравоеЗначение = Неопределено, Знач ВидСравнения = Неопределено, Знач Представление = Неопределено, Знач Использование = Неопределено, Знач РежимОтображения = Неопределено, Знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	ЧислоИзмененных = ИзменитьЭлементыОтбора(ОбластьПоискаДобавления, ИмяПоля, Представление, ПравоеЗначение, ВидСравнения, Использование, РежимОтображения, ИдентификаторПользовательскойНастройки);

	Если ЧислоИзмененных = 0 Тогда
		Если ВидСравнения = Неопределено Тогда
			Если ТипЗнч(ПравоеЗначение) = Тип("Массив") Или ТипЗнч(ПравоеЗначение) = Тип("ФиксированныйМассив") Или ТипЗнч(ПравоеЗначение) = Тип("СписокЗначений") Тогда
				ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			Иначе
				ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
		КонецЕсли;
		Если РежимОтображения = Неопределено Тогда
			РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
		ДобавитьЭлементКомпоновки(ОбластьПоискаДобавления, ИмяПоля, ВидСравнения, ПравоеЗначение, Представление, Использование, РежимОтображения, ИдентификаторПользовательскойНастройки);
	КонецЕсли;
КонецПроцедуры

// Изменить элемент отбора с заданным именем поля или представлением.
//
// Параметры:
//  ОбластьПоиска - КоллекцияЭлементовОтбораКомпоновкиДанных - контейнер с элементами и группами отбора,
//                                                             например, Список.Отбор или группа в отборе.
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
//  Представление           - Строка - представление элемента компоновки данных.
//  ПравоеЗначение          - Произвольный - сравниваемое значение.
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
//  Использование           - Булево - использование элемента.
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки
//                                                    в синтакс-помощнике.
//
// Возвращаемое значение:
//  Число - количество измененных элементов.
//
Функция ИзменитьЭлементыОтбора(ОбластьПоиска, Знач ИмяПоля = Неопределено, Знач Представление = Неопределено, Знач ПравоеЗначение = Неопределено, Знач ВидСравнения = Неопределено, Знач Использование = Неопределено,  Знач РежимОтображения = Неопределено, Знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;

	МассивЭлементов = Новый Массив;

	НайтиРекурсивно(ОбластьПоиска.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);

	Для Каждого Элемент Из МассивЭлементов Цикл
		Если ИмяПоля <> Неопределено Тогда
			Элемент.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ИмяПоля);
		КонецЕсли;
		Если Представление <> Неопределено Тогда
			Элемент.Представление		= Представление;
		КонецЕсли;
		Если Использование <> Неопределено Тогда
			Элемент.Использование		= Использование;
		КонецЕсли;
		Если ВидСравнения <> Неопределено Тогда
			Элемент.ВидСравнения		= ВидСравнения;
		КонецЕсли;
		Если ПравоеЗначение <> Неопределено Тогда
			Элемент.ПравоеЗначение		= ПравоеЗначение;
		КонецЕсли;
		Если РежимОтображения <> Неопределено Тогда
			Элемент.РежимОтображения	= РежимОтображения;
		КонецЕсли;
		Если ИдентификаторПользовательскойНастройки <> Неопределено Тогда
			Элемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
		КонецЕсли;
	КонецЦикла;

	Возврат МассивЭлементов.Количество();
КонецФункции

// Добавить элемент компоновки в контейнер элементов компоновки.
//
// Параметры:
//  ОбластьДобавления - КоллекцияЭлементовОтбораКомпоновкиДанных - контейнер с элементами и группами отбора,
//                                                                 например, Список.Отбор или группа в отборе.
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
//  ПравоеЗначение          - Произвольный - сравниваемое значение.
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
//  Представление           - Строка - представление элемента компоновки данных.
//  Использование           - Булево - использование элемента.
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки
//                                                    в синтакс-помощнике.
// Возвращаемое значение:
//  ЭлементОтбораКомпоновкиДанных - элемент компоновки.
//
Функция ДобавитьЭлементКомпоновки(ОбластьДобавления, Знач ИмяПоля, Знач ВидСравнения, Знач ПравоеЗначение = Неопределено, Знач Представление  = Неопределено, Знач Использование  = Неопределено, Знач РежимОтображения = Неопределено, Знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	Элемент					= ОбластьДобавления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Элемент.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных(ИмяПоля);
	Элемент.ВидСравнения	= ВидСравнения;

	Если РежимОтображения = Неопределено Тогда
		Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Иначе
		Элемент.РежимОтображения = РежимОтображения;
	КонецЕсли;

	Если ПравоеЗначение <> Неопределено Тогда
		Элемент.ПравоеЗначение = ПравоеЗначение;
	КонецЕсли;

	Если Представление <> Неопределено Тогда
		Элемент.Представление = Представление;
	КонецЕсли;

	Если Использование <> Неопределено Тогда
		Элемент.Использование = Использование;
	КонецЕсли;

	// Важно: установка идентификатора должна выполняться
	// в конце настройки элемента, иначе он будет скопирован
	// в пользовательские настройки частично заполненным.
	Если ИдентификаторПользовательскойНастройки <> Неопределено Тогда
		Элемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
	ИначеЕсли Элемент.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		Элемент.ИдентификаторПользовательскойНастройки = ИмяПоля;
	КонецЕсли;

	Возврат Элемент;
КонецФункции

Процедура НайтиРекурсивно(КоллекцияЭлементов, МассивЭлементов, СпособПоиска, ЗначениеПоиска)
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если СпособПоиска = 1 Тогда
				Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			ИначеЕсли СпособПоиска = 2 Тогда
				Если ЭлементОтбора.Представление = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		Иначе
			НайтиРекурсивно(ЭлементОтбора.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);

			Если СпособПоиска = 2 И ЭлементОтбора.Представление = ЗначениеПоиска Тогда
				МассивЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция СтрЛевДоСимвола(Строка, Разделитель, Остаток = Неопределено)
	Позиция = СтрНайти(Строка, Разделитель);
	Если Позиция = 0 Тогда
		СтрокаДоТочки = Строка;
		Остаток = "";
	Иначе
		СтрокаДоТочки = Лев(Строка, Позиция - 1);
		Остаток = Сред(Строка, Позиция + 1);
	КонецЕсли;

	Возврат СтрокаДоТочки;
КонецФункции

Функция ЗначенияСписком(Значения) Экспорт
	Если ТипЗнч(Значения) = Тип("СписокЗначений") Тогда
		Возврат Значения;
	Иначе
		СписокЗначений = Новый СписокЗначений;
		Если ТипЗнч(Значения) = Тип("Массив") Тогда
			СписокЗначений.ЗагрузитьЗначения(Значения);
		ИначеЕсли Значения <> Неопределено Тогда
			СписокЗначений.Добавить(Значения);
		КонецЕсли;
		Возврат СписокЗначений;
	КонецЕсли;
КонецФункции

Функция АнализТипов(ИсходноеОписаниеТипов, ПривестиКФорме) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("СодержитТипТип",        Ложь);
	Результат.Вставить("СодержитТипДата",       Ложь);
	Результат.Вставить("СодержитТипБулево",     Ложь);
	Результат.Вставить("СодержитТипСтрока",     Ложь);
	Результат.Вставить("СодержитТипЧисло",      Ложь);
	Результат.Вставить("СодержитТипПериод",     Ложь);
	Результат.Вставить("СодержитТипУИД",        Ложь);
	Результат.Вставить("СодержитТипХранилище",  Ложь);
	Результат.Вставить("СодержитОбъектныеТипы", Ложь);
	Результат.Вставить("ОграниченнойДлины",     Истина);

	Результат.Вставить("КоличествоТипов",            0);
	Результат.Вставить("КоличествоПримитивныхТипов", 0);
	Результат.Вставить("ОбъектныеТипы", Новый Массив);

	Если ПривестиКФорме Тогда
		ДобавляемыеТипы	= Новый Массив;
		ВычитаемыеТипы	= Новый Массив;
		Результат.Вставить("ОписаниеТиповИсходное", ИсходноеОписаниеТипов);
		Результат.Вставить("ОписаниеТиповДляФормы", ИсходноеОписаниеТипов);
	КонецЕсли;

	Если ИсходноеОписаниеТипов = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	МассивТипов = ИсходноеОписаниеТипов.Типы();
	Для Каждого Тип Из МассивТипов Цикл
		Если Тип = Тип("ПолеКомпоновкиДанных") Тогда
			Если ПривестиКФорме Тогда
				ВычитаемыеТипы.Добавить(Тип);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
			МетаданныеНастройки = Метаданные.НайтиПоТипу(Тип);
			Если МетаданныеНастройки <> Неопределено И БазоваяПодсистемаСерверПовтИсп.ДоступностьОбъектовПоОпциям()[МетаданныеНастройки.ПолноеИмя()] = Ложь Тогда
				Если ПривестиКФорме Тогда
					ВычитаемыеТипы.Добавить(Тип);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		#КонецЕсли

		Результат.КоличествоТипов = Результат.КоличествоТипов + 1;

		Если Тип = Тип("Тип") Тогда
			Результат.СодержитТипТип = Истина;
		ИначеЕсли Тип = Тип("Дата") Тогда
			Результат.СодержитТипДата = Истина;
			Результат.КоличествоПримитивныхТипов = Результат.КоличествоПримитивныхТипов + 1;
		ИначеЕсли Тип = Тип("Булево") Тогда
			Результат.СодержитТипБулево = Истина;
			Результат.КоличествоПримитивныхТипов = Результат.КоличествоПримитивныхТипов + 1;
		ИначеЕсли Тип = Тип("Число") Тогда
			Результат.СодержитТипЧисло = Истина;
			Результат.КоличествоПримитивныхТипов = Результат.КоличествоПримитивныхТипов + 1;
		ИначеЕсли Тип = Тип("СтандартныйПериод") Тогда
			Результат.СодержитТипПериод = Истина;
		ИначеЕсли Тип = Тип("Строка") Тогда
			Результат.СодержитТипСтрока = Истина;
			Результат.КоличествоПримитивныхТипов = Результат.КоличествоПримитивныхТипов + 1;
			Если ИсходноеОписаниеТипов.КвалификаторыСтроки.Длина = 0 И ИсходноеОписаниеТипов.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Переменная Тогда
				Результат.ОграниченнойДлины = Ложь;
			КонецЕсли;
		ИначеЕсли Тип = Тип("УникальныйИдентификатор") Тогда
			Результат.СодержитТипУИД = Истина;
		ИначеЕсли Тип = Тип("ХранилищеЗначения") Тогда
			Результат.СодержитТипХранилище = Истина;
		Иначе
			Результат.СодержитОбъектныеТипы = Истина;
			Результат.ОбъектныеТипы.Добавить(Тип);
		КонецЕсли;
	КонецЦикла;

	Если ПривестиКФорме И (ДобавляемыеТипы.Количество() > 0 Или ВычитаемыеТипы.Количество() > 0) Тогда
		Результат.ОписаниеТиповДляФормы = Новый ОписаниеТипов(ИсходноеОписаниеТипов, ДобавляемыеТипы, ВычитаемыеТипы);
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ДобавитьУникальноеЗначениеВСписок(СписокЗначений, Значение, Представление, Использование) Экспорт
	Если Не ЗначениеЗаполнено(Значение) И Не ЗначениеЗаполнено(Представление) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЭлементСписка = СписокЗначений.НайтиПоЗначению(Значение);
	Если ЭлементСписка = Неопределено Тогда
		ЭлементСписка			= СписокЗначений.Добавить();
		ЭлементСписка.Значение	= Значение;
	КонецЕсли;
	Если ЗначениеЗаполнено(Представление) Тогда
		ЭлементСписка.Представление = Представление;
	ИначеЕсли Не ЗначениеЗаполнено(ЭлементСписка.Представление) Тогда
		ЭлементСписка.Представление = Строка(Значение);
	КонецЕсли;
	Если Использование И Не ЭлементСписка.Пометка Тогда
		ЭлементСписка.Пометка = Истина;
	КонецЕсли;

	Возврат ЭлементСписка;
КонецФункции

#КонецОбласти

#Область СтроковыеФункции

// Удаляет двойные кавычки с начала и конца строки, если они есть.
//
// Параметры:
//  Значение - Строка - входная строка.
//
// Возвращаемое значение:
//  Строка - строка без двойных кавычек.
//
Функция СократитьДвойныеКавычки(Знач Значение) Экспорт
	Пока СтрНачинаетсяС(Значение, """") Цикл
		Значение = Сред(Значение, 2);
	КонецЦикла;

	Пока СтрЗаканчиваетсяНа(Значение, """") Цикл
		Значение = Лев(Значение, СтрДлина(Значение) - 1);
	КонецЦикла;

	Возврат Значение;
КонецФункции

#КонецОбласти

#Область АдминистрированиеКластера

// Конструктор структуры, описывающей параметры подключения к администрируемому
// кластеру серверов.
//
// Возвращаемое значение:
//  Структура - структура с полями:
//    * ТипПодключения - Строка - возможные значения:
//        "COM" - при подключении к агенту сервера с использованием COM-объекта V8*.ComConnector,
//        "RAS" - при подключении к серверу администрирования (ras) с использованием консольного
//                клиента сервера администрирования (rac),
//    * АдресАгентаСервера - Строка - сетевой адрес агента сервера (только при ТипПодключения = "COM"),
//    * ПортАгентаСервера - Число - сетевой порт агента сервера (только при ТипПодключения = "COM"),
//      типичное значение - 1540,
//    * АдресСервераАдминистрирования - Строка - сетевой адрес сервера администрирования ras (только
//      при ТипПодключения = "RAS"),
//    * ПортСервераАдминистрирования - Число - сетевой порт сервера администрирования ras (только при
//      ТипПодключения = "RAS"), типичное значение - 1545,
//    * ПортКластера - Число - сетевой порт менеджера администрируемого кластера, типичное значение -1541,
//    * ИмяАдминистратораКластера - Строка - имя учетной записи администратора кластера (если для кластера
//      не задан список администраторов - используется пустая строка),
//    * ПарольАдминистратораКластера - Строка - пароль учетной записи администратора кластера (если
//      для кластера не задан список администраторов или для учетной записи не установлен пароль -
//      используется пустая строка).
//
Функция ПараметрыАдминистрированияКластера() Экспорт
	Результат = Новый Структура;

	Результат.Вставить("ТипПодключения", "COM"); // "COM" или "RAS"

	// Только для "COM"
	Результат.Вставить("АдресАгентаСервера", "");
	Результат.Вставить("ПортАгентаСервера", 1540);

	// Только для "RAS"
	Результат.Вставить("АдресСервераАдминистрирования", "");
	Результат.Вставить("ПортСервераАдминистрирования", 1545);

	Результат.Вставить("ПортКластера", 1541);
	Результат.Вставить("ИмяАдминистратораКластера", "");
	Результат.Вставить("ПарольАдминистратораКластера", "");

	Возврат Результат;
КонецФункции

// Конструктор структуры, описывающей параметры подключения к администрируемой информационной
//  базе кластера.
//
// Возвращаемое значение:
//  Структура - структура с полями:
//    * ИмяВКластере - Строка - имя администрируемой информационной базы в кластере серверов,
//    * ИмяАдминистратораИнформационнойБазы - Строка - имя пользователя информационной базы с правами
//      администратора (если для информационной базы не задан список пользователей ИБ - используется
//      пустая строка),
//    * ПарольАдминистратораИнформационнойБазы - Строка - пароль пользователя информационной базы
//      с правами администратора (если для информационной базы не задан список пользователей ИБ или
//      для пользователя ИБ не установлен пароль - используется пустая строка).
//
Функция ПараметрыАдминистрированияИнформационнойБазыКластера() Экспорт
	Результат = Новый Структура;

	Результат.Вставить("ИмяВКластере", "");
	Результат.Вставить("ИмяАдминистратораИнформационнойБазы", "");
	Результат.Вставить("ПарольАдминистратораИнформационнойБазы", "");

	Возврат Результат;
КонецФункции

#КонецОбласти