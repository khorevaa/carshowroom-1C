////////////////////////////////////////////////////////////////////////////////
// Подсистема "Варианты отчетов"
//
////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиОбновленияИнформационнойБазы

// Актуализирует кэш метаданных конфигурации: справочник ПредопределенныеВариантыОтчетов
//     и параметры вариантов отчетов в регистре.
Процедура ОперативноеОбновлениеОбщихДанныхКонфигурации(ПараметрыОбновления) Экспорт
	ОперативноеОбновлениеОбщихДанных("ОбщиеДанныеКонфигурации", ПараметрыОбновления.РазделенныеОбработчики);
КонецПроцедуры

// Заполняет ссылки предопределенных элементов справочника "Варианты отчетов".
Процедура ЗаполнитьСсылкиПредопределенных() Экспорт
	ПредставлениеПроцедуры = "Заполнить ссылки предопределенных вариантов отчетов";
	ЗаписьЖурналаРегистрации("Варианты отчетов", УровеньЖурналаРегистрации.Информация,,, СтрШаблон("Запуск процедуры ""%1"".", ПредставлениеПроцедуры));

	// Составить таблицу замен старых ключей вариантов на актуальные.
	Изменения = ИзмененияКлючей();

	// Получить ссылки вариантов отчетов для замены ключей,
	// исключив из списка замен те варианты отчетов,
	// актуальные ключи которых уже зарегистрированы,
	// или старые ключи которых уже не заняты.
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	Изменения.Отчет КАК Отчет,
	            	  |	Изменения.СтароеИмяВарианта КАК СтароеИмяВарианта,
	            	  |	Изменения.АктуальноеИмяВарианта КАК АктуальноеИмяВарианта
	            	  |ПОМЕСТИТЬ втИзменения
	            	  |ИЗ
	            	  |	&Изменения КАК Изменения
	            	  |
	            	  |ИНДЕКСИРОВАТЬ ПО
	            	  |	СтароеИмяВарианта,
	            	  |	АктуальноеИмяВарианта
	            	  |;
	            	  |
	            	  |////////////////////////////////////////////////////////////////////////////////
	            	  |ВЫБРАТЬ РАЗЛИЧНЫЕ
	            	  |	ВариантыОтчетов.Ссылка КАК ВариантОтчета,
	            	  |	ВЫРАЗИТЬ(ВариантыОтчетов.Отчет КАК Справочник.ИдентификаторыОбъектовМетаданных) КАК ОтчетДляЗаменыКлючей,
	            	  |	ЕСТЬNULL(втИзменения.АктуальноеИмяВарианта, ВариантыОтчетов.КлючВарианта) КАК АктуальныйКлючВарианта
	            	  |ПОМЕСТИТЬ втАктуальные
	            	  |ИЗ
	            	  |	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	            	  |		ЛЕВОЕ СОЕДИНЕНИЕ втИзменения КАК втИзменения
	            	  |		ПО ВариантыОтчетов.Отчет = втИзменения.Отчет
	            	  |			И ВариантыОтчетов.КлючВарианта = втИзменения.СтароеИмяВарианта
	            	  |ГДЕ
	            	  |	ВариантыОтчетов.Пользовательский = ЛОЖЬ
	            	  |	И ВариантыОтчетов.ТипОтчета = &ТипОтчета
	            	  |	И ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ
	            	  |	И ВариантыОтчетов.ПредопределенныйВариант = &ПустойПредопределенный
	            	  |
	            	  |ИНДЕКСИРОВАТЬ ПО
	            	  |	АктуальныйКлючВарианта,
	            	  |	ВариантОтчета
	            	  |;
	            	  |
	            	  |////////////////////////////////////////////////////////////////////////////////
	            	  |ВЫБРАТЬ
	            	  |	втАктуальные.ВариантОтчета КАК ВариантОтчета,
	            	  |	ПредопределенныеВариантыОтчетов.Наименование КАК Наименование,
	            	  |	ПредопределенныеВариантыОтчетов.КлючВарианта КАК КлючВарианта,
	            	  |	ЕСТЬNULL(ПредопределенныеВариантыОтчетов.Ссылка, НЕОПРЕДЕЛЕНО) КАК ПредопределенныйВариант
	            	  |ИЗ
	            	  |	втАктуальные КАК втАктуальные
	            	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов КАК ПредопределенныеВариантыОтчетов
	            	  |		ПО втАктуальные.ОтчетДляЗаменыКлючей = ПредопределенныеВариантыОтчетов.Отчет
	            	  |			И втАктуальные.АктуальныйКлючВарианта = ПредопределенныеВариантыОтчетов.КлючВарианта";

	Запрос.УстановитьПараметр("Изменения", Изменения);
	Запрос.УстановитьПараметр("ТипОтчета", Перечисления.ТипыОтчетов.Внутренний); // Поддержка расширений не требуется.
	Запрос.УстановитьПараметр("ПустойПредопределенный", Справочники.ПредопределенныеВариантыОтчетов.ПустаяСсылка());

	// Заменить имена вариантов на ссылки.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВариантОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеПредопределенных", Истина);
		ВариантОбъект.ДополнительныеСвойства.Вставить("ИндексироватьСхему", Ложь);
		Если ЗначениеЗаполнено(Выборка.ПредопределенныйВариант) Тогда
			ЗаполнитьЗначенияСвойств(ВариантОбъект, Выборка, "Наименование, КлючВарианта, ПредопределенныйВариант");
			ВариантОбъект.Описание = "";
			ОбновлениеИБСервер.ЗаписатьОбъект(ВариантОбъект);
		Иначе
			ВариантОбъект.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла;

	ЗаписьЖурналаРегистрации("Варианты отчетов", УровеньЖурналаРегистрации.Информация,,, СтрШаблон("Завершение процедуры ""%1"".", ПредставлениеПроцедуры));
КонецПроцедуры

// Актуализирует данные справочника ВариантыОтчетов в части отчетов конфигурации.
Процедура ОперативноеОбновлениеРазделенныхДанныхКонфигурации() Экспорт
	ОперативноеОбновлениеРазделенныхДанных("РазделенныеДанныеКонфигурации");
КонецПроцедуры

// Уменьшает количество быстрых настроек в пользовательских вариантах отчетов до 2 шт.
Процедура СократитьКоличествоБыстрыхНастроек(ВходящиеПараметры = Неопределено) Экспорт
	ПредставлениеПроцедуры = "Сокращение количества быстрых настроек в отчетах";
	ЗаписьЖурналаРегистрации("Варианты отчетов", УровеньЖурналаРегистрации.Информация,,, СтрШаблон("Запуск процедуры ""%1"".", ПредставлениеПроцедуры));

	// Чтение сведений от предыдущего запуска с ошибками.
	Параметры = БазоваяПодсистемаСервер.ХранилищеОбщихНастроекЗагрузить("СтандартныеПодсистемы.ВариантыОтчетов","СократитьКоличествоБыстрыхНастроек");
	Запрос = Новый Запрос;
	Если Параметры = Неопределено Тогда
		Запрос.Текст = "ВЫБРАТЬ Ссылка, Отчет ИЗ Справочник.ВариантыОтчетов ГДЕ Пользовательский И ТипОтчета <> &Внешний";
		Запрос.УстановитьПараметр("Внешний", Перечисления.ТипыОтчетов.Внешний);
		НомерПопытки = 1;
	Иначе
		Запрос.Текст = "ВЫБРАТЬ Ссылка, Отчет ИЗ Справочник.ВариантыОтчетов ГДЕ Ссылка В (&ВариантыСОшибками)";
		Запрос.УстановитьПараметр("ВариантыСОшибками", Параметры.ВариантыСОшибками);
		НомерПопытки = Параметры.НомерПопытки + 1;
	КонецЕсли;
	ТаблицаОтчетов = Запрос.Выполнить().Выгрузить();

	Записано	= 0;
	Ошибок		= 0;
	КэшОтчетов	= Новый Соответствие;
	КэшФлажка	= Неопределено;
	ВариантыСОшибками = Новый Массив;

	Для Каждого СтрокаТаблицы Из ТаблицаОтчетов Цикл
		ОтчетОбъект = КэшОтчетов.Получить(СтрокаТаблицы.Отчет); // Чтение кэша.
		Если ОтчетОбъект = Неопределено Тогда // Запись в кэш.
			Подключение = ПодключитьОтчетОбъект(СтрокаТаблицы.Отчет, Истина);
			Если Подключение.Успех Тогда
				ОтчетОбъект		= Подключение.Объект;
				ОтчетМетаданные = Подключение.Метаданные;
				Если Не ОтчетПодключенКОсновнойФорме(ОтчетМетаданные, КэшФлажка) Тогда
					// Отчет не подключен к общей форме отчета.
					// Уменьшение количества быстрых настроек должно выполняться прикладным кодом.
					ОтчетОбъект = "";
				КонецЕсли;
			Иначе // Отчет не найден.
				ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, Подключение.ТекстОшибки, СтрокаТаблицы.Ссылка);
				ОтчетОбъект = "";
			КонецЕсли;
			КэшОтчетов.Вставить(СтрокаТаблицы.Отчет, ОтчетОбъект);
		КонецЕсли;
		Если ОтчетОбъект = "" Тогда
			Продолжить;
		КонецЕсли;

		ВариантОбъект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();

		ИнформацияОбОшибке = Неопределено;
		Попытка
			ТребуетсяЗапись = УменьшитьКоличествоБыстрыхНастроек(ВариантОбъект, ОтчетОбъект);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТребуетсяЗапись = Ложь;
		КонецПопытки;
		Если ИнформацияОбОшибке <> Неопределено Тогда // Возникла проблема.
			ТекстОшибки = СтрШаблон("Вариант ""%1"" отчета ""%2"":"
				+ Символы.ПС + "При уменьшении количества быстрых настроек пользовательского возникла ошибка:"
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
				ВариантОбъект.Ссылка, ВариантОбъект.КлючВарианта, ВариантОбъект.Отчет);
			ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки);
			ВариантыСОшибками.Добавить(ВариантОбъект.Ссылка);
			Ошибок = Ошибок + 1;
		КонецЕсли;

		Если ТребуетсяЗапись Тогда
			ВариантОбъект.ДополнительныеСвойства.Вставить("ИндексироватьСхему", Ложь);
			ВариантОбъект.ДополнительныеСвойства.Вставить("ОтчетОбъект", ОтчетОбъект);
			ВариантОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеПредопределенных");
			ОбновлениеИБСервер.ЗаписатьОбъект(ВариантОбъект);
			Записано = Записано + 1;
		КонецЕсли;
	КонецЦикла;

	Если Ошибок > 0 Тогда
		// Запись сведений для следующего запуска.
		Параметры = Новый Структура;
		Параметры.Вставить("НомерПопытки", НомерПопытки);
		Параметры.Вставить("ВариантыСОшибками", ВариантыСОшибками);

		БазоваяПодсистемаСервер.ХранилищеОбщихНастроекСохранить("СтандартныеПодсистемы.ВариантыОтчетов", "СократитьКоличествоБыстрыхНастроек", Параметры);
	ИначеЕсли НомерПопытки > 1 Тогда
		// Удаление сведений от предыдущих запусков.
		БазоваяПодсистемаСервер.ХранилищеОбщихНастроекУдалить("СтандартныеПодсистемы.ВариантыОтчетов", "СократитьКоличествоБыстрыхНастроек", ИмяПользователя());
	КонецЕсли;

	Текст = "Завершение процедуры ""%1"".";
	Если Записано <> Неопределено Тогда
		Текст = Текст + " Изменено %2 объектов.";
		ЗаписьЖурналаРегистрации("Варианты отчетов", УровеньЖурналаРегистрации.Информация,,, СтрШаблон(Текст, ПредставлениеПроцедуры, Записано));
	Иначе
		ЗаписьЖурналаРегистрации("Варианты отчетов", УровеньЖурналаРегистрации.Информация,,, СтрШаблон(Текст, ПредставлениеПроцедуры));
	КонецЕсли;

	Если Ошибок > 0 И НомерПопытки <= 30 Тогда
		// Следующий запуск должен состояться.
		ТекстОшибки = ПредставлениеПроцедуры + ":" + Символы.ПС + "Не удалось уменьшить количество быстрых настроек %1 отчетов.";
		ТекстОшибки = СтрШаблон(ТекстОшибки, Ошибок);

		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
КонецПроцедуры

// Полное обновление индекса поиска предопределенных вариантов отчетов.
Процедура ОтложенноеОбновлениеОбщихДанныхКонфигурацииПолное(Параметры = Неопределено) Экспорт
	ОтложенноеОбновлениеДанных("ОбщиеДанныеКонфигурации", Истина);
КонецПроцедуры

// Полное обновление индекса поиска вариантов отчетов.
Процедура ОтложенноеОбновлениеРазделенныхДанныхКонфигурацииПолное(Параметры = Неопределено) Экспорт
	ОтложенноеОбновлениеДанных("РазделенныеДанныеКонфигурации", Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПодписокНаСобытия

// Удаление ссылок подсистем перед их удалением.
Процедура ПередУдалениемИдентификатораОбъектаМетаданных(ИдентификаторОбъектаМетаданныхОбъект, Отказ) Экспорт
	Если ИдентификаторОбъектаМетаданныхОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Подсистема = ИдентификаторОбъектаМетаданныхОбъект.Ссылка;

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ РАЗЛИЧНЫЕ
	            	  |	ВариантыОтчетов.Ссылка КАК Ссылка
	            	  |ИЗ
	            	  |	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	            	  |ГДЕ
	            	  |	ВариантыОтчетов.Размещение.Подсистема = &Подсистема";

	Запрос.УстановитьПараметр("Подсистема", Подсистема);

	ИзменяемыеВарианты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		Для Каждого СсылкаВарианта Из ИзменяемыеВарианты Цикл
			ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.ВариантыОтчетов.ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаВарианта);
		КонецЦикла;
		Блокировка.Заблокировать();

		Для Каждого СсылкаВарианта Из ИзменяемыеВарианты Цикл
			ВариантОбъект	= СсылкаВарианта.ПолучитьОбъект();

			Найденные		= ВариантОбъект.Размещение.НайтиСтроки(Новый Структура("Подсистема", Подсистема));
			Для Каждого СтрокаТаблицы Из Найденные Цикл
				ВариантОбъект.Размещение.Удалить(СтрокаТаблицы);
			КонецЦикла;

			ВариантОбъект.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

// Удаление личных вариантов отчетов при удалении пользователя.
Процедура ПриУдаленииПользователя(ПользовательОбъект, Отказ) Экспорт
	Если ПользовательОбъект.ЭтоНовый() Или ПользовательОбъект.ОбменДанными.Загрузка Или Отказ Или Не ПользовательОбъект.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;

	// Установить пометку удаления личных вариантов пользователя.
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	ВариантыОтчетов.Ссылка КАК Ссылка
	            	  |ИЗ
	            	  |	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	            	  |ГДЕ
	            	  |	ВариантыОтчетов.Автор = &ПользовательСсылка
	            	  |	И ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ
	            	  |	И ВариантыОтчетов.ТолькоДляАвтора = ИСТИНА";

	Запрос.УстановитьПараметр("ПользовательСсылка", ПользовательОбъект.Ссылка);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВариантОбъект.ДополнительныеСвойства.Вставить("ИндексироватьСхему", Ложь);
		ВариантОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

// Возвращает ссылку на вариант отчета.
//
// Параметры:
//   Отчет - СправочникСсылка.ИдентификаторыОбъектовРасширений,
//           СправочникСсылка.ИдентификаторыОбъектовМетаданных,
//           СправочникСсылка.ДополнительныеОтчетыИОбработки,
//           Строка - ссылка на отчет или полное имя внешнего отчета.
//   КлючВарианта - Строка - имя варианта отчета.
//
// Возвращаемое значение:
//   СправочникСсылка.ВариантыОтчетов, Неопределено - вариант отчета,
//           либо Неопределено, если отчет отсутствует или недоступен по правам.
//
Функция ВариантОтчета(Отчет, КлючВарианта) Экспорт
	Результат = Неопределено;

	Запрос = Новый Запрос;
	Если ТипЗнч(Отчет) = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		               |	ВариантыОтчетов.Вариант КАК ВариантОтчета
		               |ИЗ
		               |	РегистрСведений.ПредопределенныеВариантыОтчетовВерсийРасширений КАК ВариантыОтчетов
		               |ГДЕ
		               |	ВариантыОтчетов.Отчет = &Отчет
		               |	И ВариантыОтчетов.ВерсияРасширений = &ВерсияРасширений
		               |	И ВариантыОтчетов.КлючВарианта = &КлючВарианта";
		Запрос.УстановитьПараметр("ВерсияРасширений", ПараметрыСеанса.ВерсияРасширений);
	Иначе
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		               |	ВариантыОтчетов.Ссылка КАК ВариантОтчета
		               |ИЗ
		               |	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
		               |ГДЕ
		               |	ВариантыОтчетов.Отчет = &Отчет
		               |	И ВариантыОтчетов.КлючВарианта = &КлючВарианта
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ВариантыОтчетов.ПометкаУдаления";
	КонецЕсли;
	Запрос.УстановитьПараметр("Отчет", Отчет);
	Запрос.УстановитьПараметр("КлючВарианта", КлючВарианта);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.ВариантОтчета;
	КонецЕсли;

	Возврат Результат;
КонецФункции

// Глобальные настройки подсистемы.
Функция ГлобальныеНастройки() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ВыводитьОтчетыВместоВариантов", Ложь);
	Результат.Вставить("ВыводитьОписания",              Истина);
	Результат.Вставить("РазрешеноИзменятьВарианты",     Истина);

	Результат.Вставить("Поиск", Новый Структура);
	Результат.Поиск.Вставить("ПодсказкаВвода", "Наименование, поле или автор отчета");

	Результат.Вставить("ДругиеОтчеты", Новый Структура);
	Результат.ДругиеОтчеты.Вставить("ЗакрыватьПослеВыбора", Истина);
	Результат.ДругиеОтчеты.Вставить("ПоказыватьФлажок", Ложь);

	Возврат Результат;
КонецФункции

// Глобальные настройки панели отчетов.
Функция ОбщиеНастройкиПанели() Экспорт
	ОбщиеНастройки = БазоваяПодсистемаСервер.ХранилищеОбщихНастроекЗагрузить("СтандартныеПодсистемы.ВариантыОтчетов", "ПанельОтчетов");
	Если ОбщиеНастройки = Неопределено Тогда
		ОбщиеНастройки									= Новый Структура("ПоказыватьПодсказки, ИскатьВоВсехРазделах, ПоказатьОповещениеОПодсказках");
		ОбщиеНастройки.ПоказатьОповещениеОПодсказках	= Ложь;
		ОбщиеНастройки.ПоказыватьПодсказки				= ГлобальныеНастройки().ВыводитьОписания;
		ОбщиеНастройки.ИскатьВоВсехРазделах				= Ложь;
	Иначе
		// Возможность можно считать новой для пользователя только в том случае,
		// если у пользователя есть понимание что такое "старые" возможности (т.е. если он уже работал с этой формой).
		Если Не ОбщиеНастройки.Свойство("ПоказатьОповещениеОПодсказках") Тогда
			ОбщиеНастройки.Вставить("ПоказатьОповещениеОПодсказках", Истина);
		КонецЕсли;
	КонецЕсли;

	Возврат ОбщиеНастройки;
КонецФункции

// Глобальные клиентские настройки отчетов.
Функция ВыполнятьЗамеры() Экспорт
	Если БезопасныйРежим() <> Ложь Тогда
		Возврат Ложь;
	КонецЕсли;

	// зарезервировано для новых подсистем

	Возврат Ложь;
КонецФункции

Процедура ПриЗаполненииВсехПараметровРаботыРасширений() Экспорт
	Настройки = Новый Структура;
	Настройки.Вставить("Конфигурация",      Ложь);
	Настройки.Вставить("Расширения",        Истина);

	Настройки.Вставить("ОбщиеДанные",       Истина);
	Настройки.Вставить("РазделенныеДанные", Истина);
	Настройки.Вставить("Оперативное",       Истина);
	Настройки.Вставить("Отложенное",        Истина);
	Настройки.Вставить("Полное",            Истина);

	Обновить(Настройки);
КонецПроцедуры

// Актуализирует данные подсистемы с учетом режима работы программы.
//   Пример использования: после очистки хранилищ настроек.
//
// Параметры:
//   Настройки - Структура - Необязательный. Настройки обновления.
//       * Конфигурация - Булево - Необязательный. Обновлять кэши метаданных конфигурации.
//       * Расширения   - Булево - Необязательный. Обновлять кэши метаданных расширений.
//       * ОбщиеДанные       - Булево - Необязательный. Обновлять неразделенные данные.
//       * РазделенныеДанные - Булево - Необязательный. Обновлять разделенные данные.
//       * Оперативное - Булево - Необязательный. Оперативное обновление данных.
//       * Отложенное  - Булево - Необязательный. Отложенное обновление данных.
//       * Полное      - Булево - Необязательный. Не учитывать хеш-суммы при отложенном обновление данных.
//
Функция Обновить(Настройки = Неопределено) Экспорт
	Если Настройки = Неопределено Тогда
		Настройки = Новый Структура;
	КонецЕсли;

	ПоУмолчанию = Новый Структура("Конфигурация, Расширения, ОбщиеДанные, РазделенныеДанные, Оперативное, Отложенное, Полное");
	Если Настройки.Количество() < ПоУмолчанию.Количество() Тогда
		Если БазоваяПодсистемаСервер.ЭтоАвтономноеРабочееМесто() Тогда // АРМ.
			ПоУмолчанию.ОбщиеДанные       = Ложь;
			ПоУмолчанию.РазделенныеДанные = Истина;
		Иначе
			ПоУмолчанию.ОбщиеДанные       = Истина;
			ПоУмолчанию.РазделенныеДанные = Истина;
		КонецЕсли;
		ПоУмолчанию.Конфигурация = Истина;
		ПоУмолчанию.Расширения   = Истина;
		ПоУмолчанию.Оперативное  = Истина;
		ПоУмолчанию.Отложенное   = Ложь;
		ПоУмолчанию.Полное       = Ложь;
		БазоваяПодсистемаКлиентСервер.ДополнитьСтруктуру(Настройки, ПоУмолчанию, Ложь);
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("ЕстьИзменения", Ложь);

	Если Настройки.Оперативное Тогда
		Если Настройки.ОбщиеДанные Тогда
			Если Настройки.Конфигурация Тогда
				ПромежуточныйРезультат = ОперативноеОбновлениеОбщихДанных("ОбщиеДанныеКонфигурации", Неопределено);
				Результат.Вставить("Оперативное_ОбщиеДанные_Конфигурация", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;

			Если Настройки.Расширения Тогда
				ПромежуточныйРезультат = ОперативноеОбновлениеОбщихДанных("ОбщиеДанныеРасширений", Неопределено);
				Результат.Вставить("Оперативное_ОбщиеДанные_Расширения", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если Настройки.РазделенныеДанные Тогда
			Если Настройки.Конфигурация Тогда
				ПромежуточныйРезультат = ОперативноеОбновлениеРазделенныхДанных("РазделенныеДанныеКонфигурации");
				Результат.Вставить("Оперативное_РазделенныеДанные_Конфигурация", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;

			Если Настройки.Расширения Тогда
				ПромежуточныйРезультат = ОперативноеОбновлениеРазделенныхДанных("РазделенныеДанныеРасширений");
				Результат.Вставить("Оперативное_РазделенныеДанные_Расширения", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Настройки.Отложенное Тогда
		Если Настройки.ОбщиеДанные Тогда
			Если Настройки.Конфигурация Тогда
				ПромежуточныйРезультат = ОтложенноеОбновлениеДанных("ОбщиеДанныеКонфигурации", Настройки.Полное);
				Результат.Вставить("Отложенное_ОбщиеДанные_Конфигурация", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;

			Если Настройки.Расширения Тогда
				ПромежуточныйРезультат = ОтложенноеОбновлениеДанных("ОбщиеДанныеРасширений", Настройки.Полное);
				Результат.Вставить("Отложенное_ОбщиеДанные_Расширения", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если Настройки.РазделенныеДанные Тогда
			Если Настройки.Конфигурация Тогда
				ПромежуточныйРезультат = ОтложенноеОбновлениеДанных("РазделенныеДанныеКонфигурации", Настройки.Полное);
				Результат.Вставить("Отложенное_РазделенныеДанные_Конфигурация", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;

			Если Настройки.Расширения Тогда
				ПромежуточныйРезультат = ОтложенноеОбновлениеДанных("РазделенныеДанныеРасширений", Настройки.Полное);
				Результат.Вставить("Отложенное_РазделенныеДанные_Расширения", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
КонецФункции

// Актуализирует кэш метаданных конфигурации/подключенных расширений.
Функция ОперативноеОбновлениеОбщихДанных(Режим, РазделенныеОбработчики)
	////////////////////////////////////////////////////////////////////////////////
	// Выполняется только для предопределенных вариантов отчетов.
	// План обновления:

	ТаблицаЗамеров = Новый ТаблицаЗначений;
	ТаблицаЗамеров.Колонки.Добавить("СтароеИмя",				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
	ТаблицаЗамеров.Колонки.Добавить("АктуальноеИмя",			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
	ТаблицаЗамеров.Колонки.Добавить("АктуальноеНаименование",	Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));

	Кэш = Новый Структура;
	Кэш.Вставить("Режим",					Режим);
	Кэш.Вставить("ОбновлятьКонфигурацию",	Режим = "ОбщиеДанныеКонфигурации");
	Кэш.Вставить("ОбновлятьРасширения",		Режим = "ОбщиеДанныеРасширений");
	Кэш.Вставить("РазделенныеОбработчики",	РазделенныеОбработчики);
	Кэш.Вставить("ЕстьИзменения",			Ложь);
	Кэш.Вставить("ЕстьВажныеИзменения",		Ложь);
	Кэш.Вставить("ДеревоВариантов",			ДеревоПредопределенных(?(Кэш.ОбновлятьКонфигурацию, "Внутренний", "Расширение")));
	Кэш.Вставить("ОбновлятьЗамеры",			Ложь); // зарезервировано для новых подсистем
	Кэш.Вставить("ТаблицаЗамеров",			ТаблицаЗамеров);
	Кэш.Вставить("Уточнение",				?(Кэш.Режим = "ОбщиеДанныеКонфигурации", "метаданные конфигурации", "метаданные расширений"));

	// План обновления:

	////////////////////////////////////////////////////////////////////////////////
	// 1. Заменить устаревшие ключи вариантов отчетов на актуальные.
	АктуализироватьКлючиПредопределенных(Кэш);

	////////////////////////////////////////////////////////////////////////////////
	// 2. Актуализировать предопределенные варианты отчетов и перезаписать
	//    константу, в которой хранятся привязки к функциональным опциям.
	ОбновитьНастройкиПредопределенных(Кэш);

	////////////////////////////////////////////////////////////////////////////////
	// 3. Установить пометку удаления вариантов удаленных отчетов.
	ПометитьНаУдалениеВариантыУдаленныхОтчетов(Кэш);

	////////////////////////////////////////////////////////////////////////////////
	// 4. Записать параметры в регистр.
	ЗаписатьПараметрыВариантовОтчетов(Кэш);

	////////////////////////////////////////////////////////////////////////////////
	// 5. Записать срез ключей вариантов отчетов расширений в регистр.
	ЗафиксироватьТекущуюВерсиюРасширений(Кэш);

	// Для платформы (очистка коллекции вручную для освобождение памяти от цикличных ссылок).
	Кэш.ДеревоВариантов.Колонки.Очистить();
	Кэш.ДеревоВариантов.Строки.Очистить();

	Возврат Кэш;
КонецФункции

// Актуализирует данные справочника ВариантыОтчетов.
Функция ОперативноеОбновлениеРазделенныхДанных(Режим)
	Кэш = Новый Структура;
	Кэш.Вставить("Режим",               Режим);
	Кэш.Вставить("ЕстьИзменения",       Ложь);
	Кэш.Вставить("ЕстьВажныеИзменения", Ложь);
	Кэш.Вставить("Уточнение",			НРег(ВариантыОтчетовКлиентСервер.ИмяВПредставление(Режим)));

	////////////////////////////////////////////////////////////////////////////////
	// План обновления:

	////////////////////////////////////////////////////////////////////////////////
	// 1. Актуализировать разделенные варианты отчетов.
	АктуализироватьСоставОбласти(Кэш);

	////////////////////////////////////////////////////////////////////////////////
	// 2. Установить пометку удаления вариантов удаленных отчетов.
	ПометитьНаУдалениеВариантыУдаленныхОтчетов(Кэш);

	Возврат Кэш;
КонецФункции

// Обновление индекса поиска предопределенных вариантов отчетов.
Функция ОтложенноеОбновлениеДанных(Режим, Полное)
	Кэш = Новый Структура;
	Кэш.Вставить("Режим",               Режим);
	Кэш.Вставить("ЕстьИзменения",       Ложь);
	Кэш.Вставить("ЕстьВажныеИзменения", Ложь);
	Кэш.Вставить("ОбщиеДанные",			Режим = "ОбщиеДанныеКонфигурации" Или Режим = "ОбщиеДанныеРасширений");
	Кэш.Вставить("Полное",				Полное);
	Кэш.Вставить("Уточнение",			НРег(ВариантыОтчетовКлиентСервер.ИмяВПредставление(Режим)));
	Кэш.Уточнение = Кэш.Уточнение + ", " + ?(Полное, "полное", "по изменениям");

	// План обновления:

	////////////////////////////////////////////////////////////////////////////////
	// 1. Обновить индекс поиска отчетов.
	ОбновитьИндексПоиска(Кэш);

	Возврат Кэш;
КонецФункции

// Формирует дерево настроек и размещения предопределенных вариантов отчетов.
//   Только для отчетов, подключенных к подсистеме.
//
// Возвращаемое значение:
//   ДеревоЗначений - Настройки предопределенных вариантов отчетов, подключенных к подсистеме.
//
//     Реквизиты для изменения:
//       * Включен              - Булево - Если Ложь, то вариант отчета не регистрируется в подсистеме.
//       * ВидимостьПоУмолчанию - Булево - Если Ложь, то вариант отчета по умолчанию скрыт в панели отчетов.
//       * Наименование         - Строка - Наименование варианта отчета.
//       * Описание             - Строка - Информация о варианте отчета.
//       * Размещение           - Соответствие - Настройки размещения варианта отчета в разделах.
//           ** Ключ     - ОбъектМетаданных - Подсистема, в которой размещается отчет или вариант отчета.
//           ** Значение - Строка           - Настройки размещения в подсистеме (группе).
//               ""        - Вывод отчета в подсистеме без специального выделение.
//               "Важный"  - Вывод отчета в подсистеме с выделением жирным шрифтом.
//               "СмТакже" - Вывод отчета в группе "См. также".
//       * ФункциональныеОпции - Массив из Строка - Имена функциональных опций варианта отчета.
//       * НастройкиДляПоиска  - Структура - Дополнительные настройки для поиска этого варианта отчета.
//           Эти настройки необходимо задавать только если СКД не используется или используется не в полном объеме.
//           Например, СКД может использоваться только для параметризации и получения данных,
//           а вывод выполняться в фиксированный макет табличного документа.
//           ** НаименованияПолей - Строка - Имена полей варианта отчета.
//           ** НаименованияПараметровИОтборов - Строка - Имена настроек варианта отчета.
//           ** КлючевыеСлова - Строка - Дополнительная терминология (в т.ч. специализированная или устаревшая).
//           Разделитель терминов: Символы.ПС.
//           ** ИменаМакетов - Строка - Используется вместо НаименованияПолей.
//               Имена макетов табличных или текстовых документов,
//               из которых требуется извлечь информацию о наименованиях полей.
//               Имена перечисляются через запятую.
//               К сожалению, в макетах отсутствует информация о связях полей и их представлений (которая есть в СКД),
//               поэтому для более точной работы механизма поиска рекомендуется заполнять НаименованияПолей, а не
//               ИменаМакетов.
//       * ФорматНастроекСКД - Булево - Отчет использует типовой формат хранения настроек на механике СКД,
//           а его основные формы поддерживают стандартную схему взаимодействия между формами (параметры и тип
//           возвращаемого значения).
//           Если Ложь, тогда для отчета отключаются проверки консистентности и некоторые механизмы, которые
//           рассчитывают на типовой формат.
//       * ОпределитьНастройкиФормы - Булево - Отчет имеет программный интерфейс для тесной интеграции с формой отчета,
//           в том числе может переопределять некоторые настройки формы и подписываться на ее события.
//           Если Истина и отчет подключен к общей форме ФормаОтчета,
//           тогда в модуле объекта отчета следует определить процедуру по шаблону:
//
//               // Настройки общей формы отчета подсистемы "Варианты отчетов".
//               //
//               // Параметры:
//               //   Форма - УправляемаяФорма, Неопределено - Форма отчета или форма настроек отчета.
//               //       Неопределено когда вызов без контекста.
//               //   КлючВарианта - Строка, Неопределено - Имя предопределенного
//               //       или уникальный идентификатор пользовательского варианта отчета.
//               //       Неопределено когда вызов без контекста.
//               //   Настройки - Структура - см. возвращаемое значение
//               //       ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//               //
//               Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
//               	// Код процедуры.
//               КонецПроцедуры
//
//     Служебные реквизиты (только для чтения):
//       * Отчет               - <см. Справочники.ВариантыОтчетов.Реквизиты.Отчет> - Полное имя или ссылка на отчет.
//       * Метаданные          - ОбъектМетаданных: Отчет - Метаданные отчета.
//       * КлючВарианта        - Строка - Имя варианта отчета.
//       * ОписаниеПолучено    - Булево - Флажок что описание строки уже получено.
//           Описание получается методом ОписаниеВарианта().
//       * СистемнаяИнформация - Структура - Другая служебная информация.
//
Функция ДеревоПредопределенных(ФильтрПоТипуОтчетов = "Внутренний") Экспорт
	РеквизитыСправочника = Метаданные.Справочники.ВариантыОтчетов.Реквизиты;

	ДеревоВариантов = Новый ДеревоЗначений;
	ДеревоВариантов.Колонки.Добавить("Отчет",                РеквизитыСправочника.Отчет.Тип);
	ДеревоВариантов.Колонки.Добавить("Метаданные",           Новый ОписаниеТипов("ОбъектМетаданных"));
	ДеревоВариантов.Колонки.Добавить("ИспользуетСКД",        Новый ОписаниеТипов("Булево"));
	ДеревоВариантов.Колонки.Добавить("КлючВарианта",         РеквизитыСправочника.КлючВарианта.Тип);
	ДеревоВариантов.Колонки.Добавить("ОписаниеПолучено",     Новый ОписаниеТипов("Булево"));
	ДеревоВариантов.Колонки.Добавить("Включен",              Новый ОписаниеТипов("Булево"));
	ДеревоВариантов.Колонки.Добавить("ВидимостьПоУмолчанию", Новый ОписаниеТипов("Булево"));
	ДеревоВариантов.Колонки.Добавить("Наименование",         Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)));
	ДеревоВариантов.Колонки.Добавить("Описание",             Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)));
	ДеревоВариантов.Колонки.Добавить("Размещение",           Новый ОписаниеТипов("Соответствие"));
	ДеревоВариантов.Колонки.Добавить("НастройкиДляПоиска",   Новый ОписаниеТипов("Структура"));
	ДеревоВариантов.Колонки.Добавить("СистемнаяИнформация",  Новый ОписаниеТипов("Структура"));
	ДеревоВариантов.Колонки.Добавить("Тип",                  Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)));
	ДеревоВариантов.Колонки.Добавить("ЭтоВариант",           Новый ОписаниеТипов("Булево"));
	ДеревоВариантов.Колонки.Добавить("ФункциональныеОпции",  Новый ОписаниеТипов("Массив"));
	ДеревоВариантов.Колонки.Добавить("ГруппироватьПоОтчету", Новый ОписаниеТипов("Булево"));
	ДеревоВариантов.Колонки.Добавить("КлючЗамеров",          Новый ОписаниеТипов("Строка"));
	ДеревоВариантов.Колонки.Добавить("ОсновнойВариант");
	ДеревоВариантов.Колонки.Добавить("ФорматНастроекСКД",        Новый ОписаниеТипов("Булево"));
	ДеревоВариантов.Колонки.Добавить("ОпределитьНастройкиФормы", Новый ОписаниеТипов("Булево"));

	ГруппироватьПоОтчетам	= ГлобальныеНастройки().ВыводитьОтчетыВместоВариантов;
	РазрешеноИндексирование = Истина;
	// зарезервировано для новых подсистем

	ПодсистемыОтчетов		= РазмещениеОтчетовВПодсистемах();
	КэшФлажкаХранилища		= Неопределено;
	Для Каждого ОтчетМетаданные Из Метаданные.Отчеты Цикл
		Если Не ОтчетПодключенКХранилищу(ОтчетМетаданные, КэшФлажкаХранилища) Тогда
			Продолжить;
		КонецЕсли;

		ОтчетСсылка	= Справочники.ИдентификаторыОбъектовМетаданных.ИдентификаторОбъектаМетаданных(ОтчетМетаданные);
		ОтчетТип	= ВариантыОтчетовКлиентСервер.ТипОтчета(ОтчетСсылка, Истина);
		Если ФильтрПоТипуОтчетов <> Неопределено И ФильтрПоТипуОтчетов <> ОтчетТип Тогда
			Продолжить;
		КонецЕсли;

		ЕстьРеквизиты = (ОтчетМетаданные.Реквизиты.Количество() > 0);

		// Настройки.
		СтрокаОтчет							= ДеревоВариантов.Строки.Добавить();
		СтрокаОтчет.Отчет					= ОтчетСсылка;
		СтрокаОтчет.Метаданные				= ОтчетМетаданные;
		СтрокаОтчет.Включен					= Истина;
		СтрокаОтчет.ВидимостьПоУмолчанию	= Истина;
		СтрокаОтчет.Описание				= ОтчетМетаданные.Пояснение;
		СтрокаОтчет.Наименование			= ОтчетМетаданные.Представление();
		СтрокаОтчет.ОписаниеПолучено		= Истина;
		СтрокаОтчет.Тип						= ОтчетТип;
		СтрокаОтчет.ЭтоВариант				= Ложь;
		СтрокаОтчет.ГруппироватьПоОтчету	= ГруппироватьПоОтчетам;
		СтрокаОтчет.ИспользуетСКД			= (ОтчетМетаданные.ОсновнаяСхемаКомпоновкиДанных <> Неопределено);
		СтрокаОтчет.ФорматНастроекСКД		= СтрокаОтчет.ИспользуетСКД И Не ЕстьРеквизиты;

		// Подсистемы.
		Найденные = ПодсистемыОтчетов.НайтиСтроки(Новый Структура("ОтчетМетаданные", ОтчетМетаданные));
		Для Каждого СтрокаПодсистема Из Найденные Цикл
			СтрокаОтчет.Размещение.Вставить(СтрокаПодсистема.ПодсистемаМетаданные, "");
		КонецЦикла;

		// Поиск.
		СтрокаОтчет.НастройкиДляПоиска = Новый Структура("НаименованияПолей, НаименованияПараметровИОтборов, КлючевыеСлова, ИменаМакетов");

		// Предопределенные варианты.
		Если СтрокаОтчет.ИспользуетСКД Тогда
			ОтчетМенеджер		= Отчеты[ОтчетМетаданные.Имя];
			СхемаКД				= Неопределено;
			ВариантыНастроек	= Неопределено;
			Попытка
				СхемаКД = ОтчетМенеджер.ПолучитьМакет(ОтчетМетаданные.ОсновнаяСхемаКомпоновкиДанных.Имя);
			Исключение
				ТекстОшибки = "Не удалось прочитать схему отчета:";
				ТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Предупреждение, ТекстОшибки, ОтчетМетаданные);
			КонецПопытки;
			// Чтение настроек вариантов отчета из схемы.
			Если СхемаКД <> Неопределено Тогда
				Попытка
					ВариантыНастроек = СхемаКД.ВариантыНастроек;
				Исключение
					ТекстОшибки = "Не удалось прочитать список вариантов отчета:";
					ТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Предупреждение, ТекстОшибки, ОтчетМетаданные);
				КонецПопытки;
			КонецЕсли;
			// Чтение настроек вариантов отчета из модуля менеджера (если не получилось из схемы).
			Если ВариантыНастроек = Неопределено Тогда
				Попытка
					ВариантыНастроек = ОтчетМенеджер.ВариантыНастроек();
				Исключение
					ТекстОшибки = "Не удалось прочитать список вариантов отчета из модуля менеджера:";
					ТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки, ОтчетМетаданные);
				КонецПопытки;
			КонецЕсли;
			// Регистрация найденных вариантов.
			Если ВариантыНастроек <> Неопределено Тогда
				Для Каждого ВариантНастроекКД Из ВариантыНастроек Цикл
					Вариант					= СтрокаОтчет.Строки.Добавить();
					Вариант.Отчет			= СтрокаОтчет.Отчет;
					Вариант.КлючВарианта	= ВариантНастроекКД.Имя;
					Вариант.Наименование	= ВариантНастроекКД.Представление;
					Вариант.Тип				= ОтчетТип;
					Вариант.ЭтоВариант		= Истина;
					Если СтрокаОтчет.ОсновнойВариант = Неопределено Тогда
						СтрокаОтчет.ОсновнойВариант = Вариант;
					КонецЕсли;
					Если РазрешеноИндексирование И ТипЗнч(ВариантНастроекКД) = Тип("ВариантНастроекКомпоновкиДанных") Тогда
						Попытка
							Вариант.СистемнаяИнформация.Вставить("НастройкиКД", ВариантНастроекКД.Настройки);
						Исключение
							ТекстОшибки = СтрШаблон("Не удалось прочитать настройки варианта ""%1"":",
								Вариант.КлючВарианта)
								+ Символы.ПС
								+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
							ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Предупреждение, ТекстОшибки, ОтчетМетаданные);
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		// Сам отчет.
		Если СтрокаОтчет.ОсновнойВариант = Неопределено Тогда
			Вариант						= СтрокаОтчет.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(Вариант, СтрокаОтчет, "Отчет, Наименование");
			Вариант.КлючВарианта 		= "";
			Вариант.ЭтоВариант			= Истина;
			СтрокаОтчет.ОсновнойВариант = Вариант;
		КонецЕсли;

		// зарезервировано для новых подсистем
	КонецЦикла;

	// Механизмы расширения.
	Если ФильтрПоТипуОтчетов = Неопределено Или ФильтрПоТипуОтчетов = "Внутренний" Тогда
		НастройкиОтчета = ОписаниеОтчета(ДеревоВариантов, Метаданные.Отчеты.УниверсальныйОтчет);
		Отчеты[Метаданные.Отчеты.УниверсальныйОтчет.Имя].НастроитьВариантыОтчета(ДеревоВариантов, НастройкиОтчета);

		// Подключаемые обработчики подсистем БСП.
		ИнтеграцияПодсистемСервер.ПриНастройкеВариантовОтчетов(ДеревоВариантов);
	КонецЕсли;

	// Определение основных вариантов.
	Для Каждого СтрокаОтчет Из ДеревоВариантов.Строки Цикл
		Если СтрокаОтчет.ГруппироватьПоОтчету = Истина Тогда
			Если СтрокаОтчет.ОсновнойВариант = Неопределено Или Не СтрокаОтчет.ОсновнойВариант.Включен Тогда
				Для Каждого Вариант Из СтрокаОтчет.Строки Цикл
					ЗаполнитьОписаниеСтрокиВарианта(Вариант, СтрокаОтчет);
					Если Вариант.Включен Тогда
						СтрокаОтчет.ОсновнойВариант		= Вариант;
						Вариант.ВидимостьПоУмолчанию	= Истина;

						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			СтрокаОтчет.ОсновнойВариант = Неопределено;
		КонецЕсли;
	КонецЦикла;

	Возврат ДеревоВариантов;
КонецФункции

// Замена старых ключей вариантов отчетов на актуальные.
Процедура АктуализироватьКлючиПредопределенных(Кэш)
	ПредставлениеПроцедуры = СтрШаблон("Обновление ключей вариантов отчетов (%1)", Кэш.Уточнение);
	ЗаписьЖурналаРегистрации("Варианты отчетов", УровеньЖурналаРегистрации.Информация,,, СтрШаблон("Запуск процедуры ""%1"".", ПредставлениеПроцедуры));

	// Составить таблицу замен старых ключей вариантов на актуальные.
	Изменения = ИзмененияКлючей();

	// Получить ссылки вариантов отчетов для замены ключей,
	//   исключив из списка замен те варианты отчетов,
	//   актуальные ключи которых уже зарегистрированы,
	//   или старые ключи которых уже не заняты.
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	Изменения.Отчет КАК Отчет,
	            	  |	Изменения.СтароеИмяВарианта КАК СтароеИмяВарианта,
	            	  |	Изменения.АктуальноеИмяВарианта КАК АктуальноеИмяВарианта
	            	  |ПОМЕСТИТЬ втИзменения
	            	  |ИЗ
	            	  |	&Изменения КАК Изменения
	            	  |;
	            	  |
	            	  |////////////////////////////////////////////////////////////////////////////////
	            	  |ВЫБРАТЬ РАЗЛИЧНЫЕ
	            	  |	втИзменения.Отчет КАК Отчет,
	            	  |	втИзменения.АктуальноеИмяВарианта КАК АктуальноеИмяВарианта,
	            	  |	ВариантыОтчетовСтарые.Ссылка КАК Ссылка
	            	  |ИЗ
	            	  |	втИзменения КАК втИзменения
	            	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов КАК ВариантыОтчетовАктуальные
	            	  |		ПО втИзменения.Отчет = ВариантыОтчетовАктуальные.Отчет
	            	  |			И втИзменения.АктуальноеИмяВарианта = ВариантыОтчетовАктуальные.КлючВарианта
	            	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов КАК ВариантыОтчетовСтарые
	            	  |		ПО втИзменения.Отчет = ВариантыОтчетовСтарые.Отчет
	            	  |			И втИзменения.СтароеИмяВарианта = ВариантыОтчетовСтарые.КлючВарианта
	            	  |ГДЕ
	            	  |	ВариантыОтчетовАктуальные.Ссылка ЕСТЬ NULL
	            	  |	И НЕ ВариантыОтчетовСтарые.Ссылка ЕСТЬ NULL";

	Если Кэш.Режим = "ОбщиеДанныеРасширений" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ПредопределенныеВариантыОтчетов", ".ПредопределенныеВариантыОтчетовРасширений");
	КонецЕсли;

	Запрос.УстановитьПараметр("Изменения", Изменения);

	// Заменить старые имена вариантов на актуальные.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Кэш.ЕстьИзменения			= Истина;
		Кэш.ЕстьВажныеИзменения		= Истина;
		ВариантОбъект				= Выборка.Ссылка.ПолучитьОбъект();
		ВариантОбъект.КлючВарианта	= Выборка.АктуальноеИмяВарианта;
		ВариантОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеПредопределенных");
		ОбновлениеИБСервер.ЗаписатьОбъект(ВариантОбъект);
	КонецЦикла;

	ЗаписьЖурналаРегистрации("Варианты отчетов", УровеньЖурналаРегистрации.Информация,,,СтрШаблон("Завершение процедуры ""%1"".", ПредставлениеПроцедуры));
КонецПроцедуры

// Актуализация предопределенных вариантов отчетов.
Процедура ОбновитьНастройкиПредопределенных(Кэш)
	ПредставлениеПроцедуры = СтрШаблон("Обновление настроек предопределенных (%1)", Кэш.Уточнение);
	ЗаписьЖурналаРегистрации("Варианты отчетов", УровеньЖурналаРегистрации.Информация,,, СтрШаблон("Запуск процедуры ""%1"".", ПредставлениеПроцедуры));

	РеквизитыВариантов = Метаданные.Справочники.ВариантыОтчетов.Реквизиты;

	ТаблицаФункциональныхОпций = Новый ТаблицаЗначений;
	ТаблицаФункциональныхОпций.Колонки.Добавить("Отчет",                   РеквизитыВариантов.Отчет.Тип);
	ТаблицаФункциональныхОпций.Колонки.Добавить("ПредопределенныйВариант", РеквизитыВариантов.ПредопределенныйВариант.Тип);
	ТаблицаФункциональныхОпций.Колонки.Добавить("ИмяФункциональнойОпции",  Новый ОписаниеТипов("Строка"));

	Кэш.Вставить("ТаблицаФункциональныхОпций", ТаблицаФункциональныхОпций);

	ОтчетыСНастройкамиСписок = Новый СписокЗначений;
	Кэш.Вставить("ОтчетыСНастройкамиСписок", ОтчетыСНастройкамиСписок);

	Кэш.ДеревоВариантов.Колонки.Добавить("НайденВБазеДанных",	Новый ОписаниеТипов("Булево"));
	Кэш.ДеревоВариантов.Колонки.Добавить("ВариантИзБазы",		Новый ОписаниеТипов("СтрокаТаблицыЗначений"));

	Если Кэш.Режим = "ОбщиеДанныеКонфигурации" Тогда
		Кэш.ДеревоВариантов.Колонки.Добавить("ВариантРодитель", Новый ОписаниеТипов("СправочникСсылка.ПредопределенныеВариантыОтчетов"));
		ТекстЗапроса = "ВЫБРАТЬ * ИЗ Справочник.ПредопределенныеВариантыОтчетов УПОРЯДОЧИТЬ ПО ПометкаУдаления";
		ПустаяСсылка = Справочники.ПредопределенныеВариантыОтчетов.ПустаяСсылка();
	ИначеЕсли Кэш.Режим = "ОбщиеДанныеРасширений" Тогда
		Кэш.ДеревоВариантов.Колонки.Добавить("ВариантРодитель", Новый ОписаниеТипов("СправочникСсылка.ПредопределенныеВариантыОтчетовРасширений"));
		ТекстЗапроса = "ВЫБРАТЬ * ИЗ Справочник.ПредопределенныеВариантыОтчетовРасширений УПОРЯДОЧИТЬ ПО ПометкаУдаления";
		ПустаяСсылка = Справочники.ПредопределенныеВариантыОтчетовРасширений.ПустаяСсылка();
	КонецЕсли;

	// Сопоставление информации из базы и из метаданных и пометка на удаление устаревших объектов из базы.
	ПоискВарианта					= Новый Структура("Отчет, КлючВарианта, НайденВБазеДанных, ЭтоВариант");
	ПоискВарианта.НайденВБазеДанных = Ложь;
	ПоискВарианта.ЭтоВариант        = Истина;
	Запрос			= Новый Запрос;
	Запрос.Текст	= ТекстЗапроса;
	ТаблицаПредопределенные = Запрос.Выполнить().Выгрузить();
	Для Каждого ВариантИзБазы Из ТаблицаПредопределенные Цикл
		ЗаполнитьЗначенияСвойств(ПоискВарианта, ВариантИзБазы, "Отчет, КлючВарианта");
		Найденные = Кэш.ДеревоВариантов.Строки.НайтиСтроки(ПоискВарианта, Истина);
		Если Найденные.Количество() = 0 Тогда
			Если ВариантИзБазы.ПометкаУдаления И ВариантИзБазы.Родитель = ПустаяСсылка Тогда
				Продолжить; // Действие не требуется.
			КонецЕсли;
			ВариантОбъект					= ВариантИзБазы.Ссылка.ПолучитьОбъект();
			ВариантОбъект.ПометкаУдаления	= Истина;
			ВариантОбъект.Родитель			= ПустаяСсылка;
			ВариантОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеПредопределенных");
			ОбновлениеИБСервер.ЗаписатьОбъект(ВариантОбъект);
			Кэш.ЕстьИзменения				= Истина;
			Кэш.ЕстьВажныеИзменения			= Истина;
		Иначе
			ОписаниеВарианта					= Найденные[0];
			ЗаполнитьОписаниеСтрокиВарианта(ОписаниеВарианта);
			ОписаниеВарианта.НайденВБазеДанных	= Истина;
			ОписаниеВарианта.ВариантИзБазы		= ВариантИзБазы;
		КонецЕсли;
	КонецЦикла;

	// Добавление/обновление информации в базе данных.
	Для Каждого ОписаниеОтчета Из Кэш.ДеревоВариантов.Строки Цикл
		ОсновнойВариантСсылка	= ПустаяСсылка;
		ОсновнойВариант			= ОписаниеОтчета.ОсновнойВариант;
		Если ТипЗнч(ОсновнойВариант) = Тип("СтрокаДереваЗначений") Тогда
			ЗаполнитьОписаниеСтрокиВарианта(ОсновнойВариант);
			ОсновнойВариант.ВариантРодитель	= ПустаяСсылка;
			ОсновнойВариантСсылка			= ОбновитьПредопределенный(Кэш, ОсновнойВариант); // Вариант без родителя.
		КонецЕсли;
		Если ОписаниеОтчета.ОпределитьНастройкиФормы Тогда
			ОтчетыСНастройкамиСписок.Добавить(ОписаниеОтчета.Отчет);
		КонецЕсли;
		Для Каждого ОписаниеВарианта Из ОписаниеОтчета.Строки Цикл
			ЗаполнитьОписаниеСтрокиВарианта(ОписаниеВарианта);
			Если ОписаниеВарианта = ОсновнойВариант Тогда
				ВариантСсылка = ОсновнойВариантСсылка;
			Иначе
				ОписаниеВарианта.ВариантРодитель = ОсновнойВариантСсылка;
				ВариантСсылка = ОбновитьПредопределенный(Кэш, ОписаниеВарианта);
			КонецЕсли;
			Для Каждого ИмяФункциональнойОпции Из ОписаниеВарианта.ФункциональныеОпции Цикл
				СвязьСФункциональнойОпцией							= ТаблицаФункциональныхОпций.Добавить();
				СвязьСФункциональнойОпцией.Отчет					= ОписаниеВарианта.Отчет;
				СвязьСФункциональнойОпцией.ПредопределенныйВариант	= ВариантСсылка;
				СвязьСФункциональнойОпцией.ИмяФункциональнойОпции	= ИмяФункциональнойОпции;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	ЗаписьЖурналаРегистрации("Варианты отчетов", УровеньЖурналаРегистрации.Информация,,,СтрШаблон("Завершение процедуры ""%1"".", ПредставлениеПроцедуры));
КонецПроцедуры

// Установка пометки удаления вариантов удаленных отчетов.
Процедура ПометитьНаУдалениеВариантыУдаленныхОтчетов(Кэш)
	ПредставлениеПроцедуры = СтрШаблон("Удаление вариантов удаленных отчетов (%1)", Кэш.Уточнение);
	ЗаписьЖурналаРегистрации("Варианты отчетов", УровеньЖурналаРегистрации.Информация,,, СтрШаблон("Запуск процедуры ""%1"".", ПредставлениеПроцедуры));

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	ВариантыОтчетов.Ссылка КАК Ссылка
	            	  |ИЗ
	            	  |	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	            	  |ГДЕ
	            	  |	НЕ ВариантыОтчетов.ПометкаУдаления
	            	  |	И ВариантыОтчетов.ТипОтчета = &ТипОтчета
	            	  |	И ЕСТЬNULL(ВариантыОтчетов.Отчет.ПометкаУдаления, ИСТИНА)";

	Если Кэш.Режим = "ОбщиеДанныеКонфигурации" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ВариантыОтчетов", ".ПредопределенныеВариантыОтчетов");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВариантыОтчетов.ТипОтчета = &ТипОтчета", "");
	ИначеЕсли Кэш.Режим = "ОбщиеДанныеРасширений" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ВариантыОтчетов", ".ПредопределенныеВариантыОтчетовРасширений");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВариантыОтчетов.ТипОтчета = &ТипОтчета", "");
	ИначеЕсли Кэш.Режим = "РазделенныеДанныеКонфигурации" Тогда
		Запрос.УстановитьПараметр("ТипОтчета", Перечисления.ТипыОтчетов.Внутренний);
	ИначеЕсли Кэш.Режим = "РазделенныеДанныеРасширений" Тогда
		Запрос.УстановитьПараметр("ТипОтчета", Перечисления.ТипыОтчетов.Расширение);
	КонецЕсли;

	МассивСсылокВариантов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Для Каждого ВариантСсылка Из МассивСсылокВариантов Цикл
		Кэш.ЕстьИзменения				= Истина;
		Кэш.ЕстьВажныеИзменения			= Истина;
		ВариантОбъект					= ВариантСсылка.ПолучитьОбъект();
		ВариантОбъект.Заблокировать();
		ВариантОбъект.ПометкаУдаления	= Истина;
		ВариантОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеПредопределенных");
		ОбновлениеИБСервер.ЗаписатьОбъект(ВариантОбъект);
	КонецЦикла;

	ЗаписьЖурналаРегистрации("Варианты отчетов", УровеньЖурналаРегистрации.Информация,,,СтрШаблон("Завершение процедуры ""%1"".", ПредставлениеПроцедуры));
КонецПроцедуры

// Запись параметров вариантов отчетов в регистр.
//
// Значение параметра:
//   ХранилищеЗначения (Структура) - Кэшируемые параметры:
//       * ТаблицаФункциональныхОпций - ТаблицаЗначений - Имена опций и предопределенных вариантов отчетов.
//           ** Отчет - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Ссылка отчета.
//           ** ПредопределенныйВариант - СправочникСсылка.ПредопределенныеВариантыОтчетов - Ссылка варианта.
//           ** ИмяФункциональнойОпции - Строка - Имя ФО.
//       * ОтчетыСНастройками - Массив из СправочникСсылка.ИдентификаторыОбъектовМетаданных - Отчеты,
//           в модуле объекта которых размещены процедуры тесной интеграции с общей формой отчета.
//
Процедура ЗаписатьПараметрыВариантовОтчетов(Кэш)
	Если Кэш.Режим = "ОбщиеДанныеРасширений" И Не ЗначениеЗаполнено(ПараметрыСеанса.ВерсияРасширений) Тогда
		Возврат; // Обновление не требуется.
	КонецЕсли;
	ПредставлениеПроцедуры = "Запись неразделенного кэша в регистр";
	ЗаписьЖурналаРегистрации("Варианты отчетов", УровеньЖурналаРегистрации.Информация,,, СтрШаблон("Запуск процедуры ""%1"".", ПредставлениеПроцедуры));

	Кэш.ТаблицаФункциональныхОпций.Сортировать("Отчет, ПредопределенныйВариант, ИмяФункциональнойОпции");
	Кэш.ОтчетыСНастройкамиСписок.СортироватьПоЗначению();

	НовоеЗначение = Новый Структура;
	НовоеЗначение.Вставить("ТаблицаФункциональныхОпций",	Кэш.ТаблицаФункциональныхОпций);
	НовоеЗначение.Вставить("ОтчетыСНастройками",			Кэш.ОтчетыСНастройкамиСписок.ВыгрузитьЗначения());

	ПолноеИмяПодсистемы = "СтандартныеПодсистемы.ВариантыОтчетов";

	Если Кэш.Режим = "ОбщиеДанныеКонфигурации" Тогда
		СтароеЗначение = РегистрыСведений.ПараметрыРаботыПрограммы.ПараметрРаботыПрограммы(ПолноеИмяПодсистемы);
		Если БазоваяПодсистемаСервер.ЗначениеВСтрокуXML(НовоеЗначение) <> БазоваяПодсистемаСервер.ЗначениеВСтрокуXML(СтароеЗначение) Тогда
			РегистрыСведений.ПараметрыРаботыПрограммы.УстановитьПараметрРаботыПрограммы(ПолноеИмяПодсистемы, НовоеЗначение);
		КонецЕсли;
	ИначеЕсли Кэш.Режим = "ОбщиеДанныеРасширений" Тогда
		РегистрыСведений.ПараметрыРаботыВерсийРасширений.УстановитьПараметрРаботыРасширения(ПолноеИмяПодсистемы, НовоеЗначение, Ложь);
	КонецЕсли;

	ЗаписьЖурналаРегистрации("Варианты отчетов", УровеньЖурналаРегистрации.Информация,,,СтрШаблон("Завершение процедуры ""%1"".", ПредставлениеПроцедуры));
КонецПроцедуры

// Запись регистра ПредопределенныеВариантыОтчетовВерсийРасширений.
//
// Сохраняемое значение:
//   ХранилищеЗначения (Структура) - Кэшируемые параметры:
//       * ТаблицаФункциональныхОпций - ТаблицаЗначений - Имена опций и предопределенных вариантов отчетов.
//           ** Отчет - СправочникСсылка.ИдентификаторыОбъектовРасширений - Ссылка отчета.
//           ** ПредопределенныйВариант - СправочникСсылка.ПредопределенныеВариантыОтчетовРасширений - Ссылка варианта.
//           ** ИмяФункциональнойОпции - Строка - Имя ФО.
//       * ОтчетыСНастройками - Массив из СправочникСсылка.ИдентификаторыОбъектовРасширений - Отчеты,
//           в модуле объекта которых размещены процедуры тесной интеграции с общей формой отчета.
//
Процедура ЗафиксироватьТекущуюВерсиюРасширений(Кэш)
	Если Не ЗначениеЗаполнено(ПараметрыСеанса.ВерсияРасширений) Тогда
		Возврат; // Обновление не требуется.
	КонецЕсли;

	ПредставлениеПроцедуры = "Запись регистра версий расширений";
	ЗаписьЖурналаРегистрации("Варианты отчетов", УровеньЖурналаРегистрации.Информация,,, СтрШаблон("Запуск процедуры ""%1"".", ПредставлениеПроцедуры));

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	ПредопределенныеРасширений.Ссылка КАК Вариант,
	            	  |	ПредопределенныеРасширений.Отчет КАК Отчет,
	            	  |	ПредопределенныеРасширений.КлючВарианта КАК КлючВарианта
	            	  |ИЗ
	            	  |	Справочник.ПредопределенныеВариантыОтчетовРасширений КАК ПредопределенныеРасширений
	            	  |ГДЕ
	            	  |	ПредопределенныеРасширений.ПометкаУдаления = ЛОЖЬ";

	Таблица		= Запрос.Выполнить().Выгрузить();
	Измерения	= Новый Структура("ВерсияРасширений", ПараметрыСеанса.ВерсияРасширений);
	Ресурсы		= Новый Структура;
	Набор		= РегистрыСведений.ПредопределенныеВариантыОтчетовВерсийРасширений.Набор(Таблица, Измерения, Ресурсы, Истина);
	ОбновлениеИБСервер.ЗаписатьНаборЗаписей(Набор, Истина);

	ЗаписьЖурналаРегистрации("Варианты отчетов", УровеньЖурналаРегистрации.Информация,,,СтрШаблон("Завершение процедуры ""%1"".", ПредставлениеПроцедуры));
КонецПроцедуры

// Приводит разделенные данные в соответствие с неразделенными данными.
Процедура АктуализироватьСоставОбласти(Кэш)
	ПредставлениеПроцедуры = СтрШаблон("Обновление вариантов отчетов (%1)", Кэш.Уточнение);
	ЗаписьЖурналаРегистрации("Варианты отчетов", УровеньЖурналаРегистрации.Информация,,, СтрШаблон("Запуск процедуры ""%1"".", ПредставлениеПроцедуры));

	// Обновление сведений предопределенных вариантов.
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	ПредопределенныеКонфигурации.Ссылка КАК ПредопределенныйВариант,
	            	  |	ПредопределенныеКонфигурации.Наименование КАК Наименование,
	            	  |	ПредопределенныеКонфигурации.Отчет КАК Отчет,
	            	  |	ПредопределенныеКонфигурации.ГруппироватьПоОтчету КАК ГруппироватьПоОтчету,
	            	  |	ПредопределенныеКонфигурации.КлючВарианта КАК КлючВарианта,
	            	  |	ПредопределенныеКонфигурации.ВидимостьПоУмолчанию КАК ВидимостьПоУмолчанию,
	            	  |	ПредопределенныеКонфигурации.Родитель КАК Родитель
	            	  |ПОМЕСТИТЬ втПредопределенные
	            	  |ИЗ
	            	  |	Справочник.ПредопределенныеВариантыОтчетов КАК ПредопределенныеКонфигурации
	            	  |ГДЕ
	            	  |	ПредопределенныеКонфигурации.ПометкаУдаления = ЛОЖЬ
	            	  |;
	            	  |
	            	  |////////////////////////////////////////////////////////////////////////////////
	            	  |ВЫБРАТЬ
	            	  |	ВариантыОтчетов.Ссылка КАК Ссылка,
	            	  |	ВариантыОтчетов.ПометкаУдаления КАК ПометкаУдаления,
	            	  |	ВариантыОтчетов.Отчет КАК Отчет,
	            	  |	ВариантыОтчетов.ТипОтчета КАК ТипОтчета,
	            	  |	ВариантыОтчетов.КлючВарианта КАК КлючВарианта,
	            	  |	ВариантыОтчетов.Наименование КАК Наименование,
	            	  |	ВариантыОтчетов.ПредопределенныйВариант КАК ПредопределенныйВариант,
	            	  |	ВариантыОтчетов.ВидимостьПоУмолчанию КАК ВидимостьПоУмолчанию,
	            	  |	ВариантыОтчетов.Родитель КАК Родитель,
	            	  |	ВариантыОтчетов.ВидимостьПоУмолчаниюПереопределена КАК ВидимостьПоУмолчаниюПереопределена
	            	  |ПОМЕСТИТЬ втВариантыОтчетов
	            	  |ИЗ
	            	  |	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	            	  |ГДЕ
	            	  |	(ВариантыОтчетов.ТипОтчета = &ТипОтчета
	            	  |			ИЛИ ТИПЗНАЧЕНИЯ(ВариантыОтчетов.Отчет) = &ТипРеквизитаОтчет)
	            	  |	И ВариантыОтчетов.Пользовательский = ЛОЖЬ
	            	  |;
	            	  |
	            	  |////////////////////////////////////////////////////////////////////////////////
	            	  |ВЫБРАТЬ
	            	  |	ВЫБОР
	            	  |		КОГДА втПредопределенные.ПредопределенныйВариант ЕСТЬ NULL
	            	  |			ТОГДА ИСТИНА
	            	  |		ИНАЧЕ ЛОЖЬ
	            	  |	КОНЕЦ КАК УстановитьПометкуУдаления,
	            	  |	ВЫБОР
	            	  |		КОГДА втВариантыОтчетов.Ссылка ЕСТЬ NULL
	            	  |			ТОГДА ИСТИНА
	            	  |		ИНАЧЕ ЛОЖЬ
	            	  |	КОНЕЦ КАК СоздатьНовый,
	            	  |	втПредопределенные.ПредопределенныйВариант КАК ПредопределенныйВариант,
	            	  |	втПредопределенные.Наименование КАК Наименование,
	            	  |	втПредопределенные.Отчет КАК Отчет,
	            	  |	втПредопределенные.КлючВарианта КАК КлючВарианта,
	            	  |	втПредопределенные.ГруппироватьПоОтчету КАК ГруппироватьПоОтчету,
	            	  |	ВЫБОР
	            	  |		КОГДА втПредопределенные.Родитель = &ПустаяСсылкаВарианта
	            	  |			ТОГДА НЕОПРЕДЕЛЕНО
	            	  |		ИНАЧЕ втПредопределенные.Родитель
	            	  |	КОНЕЦ КАК ПредопределенныйВариантРодитель,
	            	  |	ВЫБОР
	            	  |		КОГДА втВариантыОтчетов.ВидимостьПоУмолчаниюПереопределена
	            	  |			ТОГДА втВариантыОтчетов.ВидимостьПоУмолчанию
	            	  |		ИНАЧЕ втВариантыОтчетов.ВидимостьПоУмолчанию
	            	  |	КОНЕЦ КАК ВидимостьПоУмолчанию,
	            	  |	втВариантыОтчетов.Ссылка КАК РеквизитСсылка,
	            	  |	втВариантыОтчетов.Родитель КАК РеквизитРодитель,
	            	  |	втВариантыОтчетов.Отчет КАК РеквизитОтчет,
	            	  |	втВариантыОтчетов.КлючВарианта КАК РеквизитКлючВарианта,
	            	  |	втВариантыОтчетов.Наименование КАК РеквизитНаименование,
	            	  |	втВариантыОтчетов.ПредопределенныйВариант КАК РеквизитПредопределенныйВариант,
	            	  |	втВариантыОтчетов.ПометкаУдаления КАК РеквизитПометкаУдаления,
	            	  |	втВариантыОтчетов.ВидимостьПоУмолчанию КАК РеквизитВидимостьПоУмолчанию
	            	  |ИЗ
	            	  |	втВариантыОтчетов КАК втВариантыОтчетов
	            	  |		ПОЛНОЕ СОЕДИНЕНИЕ втПредопределенные КАК втПредопределенные
	            	  |		ПО втВариантыОтчетов.ПредопределенныйВариант = втПредопределенные.ПредопределенныйВариант";

	Если Кэш.Режим = "РазделенныеДанныеКонфигурации" Тогда
		Запрос.УстановитьПараметр("ТипОтчета",				Перечисления.ТипыОтчетов.Внутренний);
		Запрос.УстановитьПараметр("ТипРеквизитаОтчет",		Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
		Запрос.УстановитьПараметр("ПустаяСсылкаВарианта",	Справочники.ПредопределенныеВариантыОтчетов.ПустаяСсылка());
	ИначеЕсли Кэш.Режим = "РазделенныеДанныеРасширений" Тогда
		Запрос.УстановитьПараметр("ТипОтчета",				Перечисления.ТипыОтчетов.Расширение);
		Запрос.УстановитьПараметр("ТипРеквизитаОтчет",		Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений"));
		Запрос.УстановитьПараметр("ПустаяСсылкаВарианта",	Справочники.ПредопределенныеВариантыОтчетовРасширений.ПустаяСсылка());
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ПредопределенныеВариантыОтчетов", ".ПредопределенныеВариантыОтчетовРасширений");
	КонецЕсли;

	Кэш.Вставить("ПустаяСсылка",					Справочники.ВариантыОтчетов.ПустаяСсылка());
	Кэш.Вставить("ПоискРодителей",					Новый Соответствие);
	Кэш.Вставить("ОбработанныеПредопределенные",	Новый Массив);
	Кэш.Вставить("ОсновныеВарианты",				Новый ТаблицаЗначений);
	Кэш.ОсновныеВарианты.Колонки.Добавить("Отчет",		Метаданные.Справочники.ВариантыОтчетов.Реквизиты.Отчет.Тип);
	Кэш.ОсновныеВарианты.Колонки.Добавить("Вариант",	Новый ОписаниеТипов("СправочникСсылка.ВариантыОтчетов"));

	Шаблоны = Новый Структура;
	Шаблоны.Вставить("УстановкаПометкиУдаления", Новый Структура);
	Шаблоны.УстановкаПометкиУдаления.Вставить("Родитель", Кэш.ПустаяСсылка);
	Шаблоны.УстановкаПометкиУдаления.Вставить("ПометкаУдаления", Истина);
	Шаблоны.Вставить("НовыеДанные", Новый Структура("ПометкаУдаления, Родитель, Наименование, Отчет, КлючВарианта, ПредопределенныйВариант, ВидимостьПоУмолчанию"));

	СводнаяТаблицаПредопределенных = Запрос.Выполнить().Выгрузить();
	СводнаяТаблицаПредопределенных.Колонки.Добавить("Обработана",	Новый ОписаниеТипов("Булево"));
	СводнаяТаблицаПредопределенных.Колонки.Добавить("Родитель",		Новый ОписаниеТипов("СправочникСсылка.ВариантыОтчетов"));

	// Обновление основных предопределенных вариантов (без родителя).
	Поиск		= Новый Структура("ПредопределенныйВариантРодитель, УстановитьПометкуУдаления", Неопределено, Ложь);
	Найденные	= СводнаяТаблицаПредопределенных.НайтиСтроки(Поиск);
	Для Каждого СтрокаТаблицы Из Найденные Цикл
		Если СтрокаТаблицы.Обработана Тогда
			Продолжить;
		КонецЕсли;
		Если Кэш.ОбработанныеПредопределенные.Найти(СтрокаТаблицы.ПредопределенныйВариант) <> Неопределено Тогда
			СтрокаТаблицы.УстановитьПометкуУдаления = Истина;
		КонецЕсли;

		СтрокаТаблицы.Родитель = Кэш.ПустаяСсылка;
		ОбновитьРазделенныйПредопределенный(Кэш, Шаблоны, СтрокаТаблицы);

		Если Не СтрокаТаблицы.УстановитьПометкуУдаления И СтрокаТаблицы.ГруппироватьПоОтчету И Кэш.ПоискРодителей.Получить(СтрокаТаблицы.Отчет) = Неопределено Тогда
			Кэш.ПоискРодителей.Вставить(СтрокаТаблицы.Отчет, СтрокаТаблицы.РеквизитСсылка);
			ОсновнойВариант			= Кэш.ОсновныеВарианты.Добавить();
			ОсновнойВариант.Отчет   = СтрокаТаблицы.Отчет;
			ОсновнойВариант.Вариант = СтрокаТаблицы.РеквизитСсылка;
		КонецЕсли;
	КонецЦикла;

	// Обновление всех оставшихся предопределенных вариантов (подчиненных).
	СводнаяТаблицаПредопределенных.Сортировать("УстановитьПометкуУдаления Возр");
	Для Каждого СтрокаТаблицы Из СводнаяТаблицаПредопределенных Цикл
		Если СтрокаТаблицы.Обработана Тогда
			Продолжить;
		КонецЕсли;
		Если Кэш.ОбработанныеПредопределенные.Найти(СтрокаТаблицы.ПредопределенныйВариант) <> Неопределено Тогда
			СтрокаТаблицы.УстановитьПометкуУдаления = Истина;
		КонецЕсли;
		Если СтрокаТаблицы.УстановитьПометкуУдаления Тогда
			РодительСсылка = Кэш.ПустаяСсылка;
		Иначе
			РодительСсылка = Кэш.ПоискРодителей.Получить(СтрокаТаблицы.Отчет);
		КонецЕсли;

		СтрокаТаблицы.Родитель = РодительСсылка;
		ОбновитьРазделенныйПредопределенный(Кэш, Шаблоны, СтрокаТаблицы);
	КонецЦикла;

	// Обновление родителей пользовательских вариантов.
	Запрос			= Новый Запрос;
	Запрос.Текст	= 	"ВЫБРАТЬ
	            	  	|	ОсновныеВариантыОтчетов.Отчет КАК Отчет,
	            	  	|	ОсновныеВариантыОтчетов.Вариант КАК Вариант
	            	  	|ПОМЕСТИТЬ втОсновные
	            	  	|ИЗ
	            	  	|	&ОсновныеВариантыОтчетов КАК ОсновныеВариантыОтчетов
	            	  	|;
	            	  	|
	            	  	|////////////////////////////////////////////////////////////////////////////////
	            	  	|ВЫБРАТЬ
	            	  	|	ВариантыОтчетов.Ссылка КАК Ссылка,
	            	  	|	втОсновные.Вариант КАК Родитель
	            	  	|ИЗ
	            	  	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	            	  	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОсновные КАК втОсновные
	            	  	|		ПО ВариантыОтчетов.Отчет = втОсновные.Отчет
	            	  	|			И ВариантыОтчетов.Родитель <> втОсновные.Вариант
	            	  	|			И ВариантыОтчетов.Родитель.Родитель <> втОсновные.Вариант
	            	  	|			И ВариантыОтчетов.Ссылка <> втОсновные.Вариант
	            	  	|ГДЕ
	            	  	|	(ВариантыОтчетов.Пользовательский
	            	  	|			ИЛИ НЕ ВариантыОтчетов.ПометкаУдаления)";

	Запрос.УстановитьПараметр("ОсновныеВариантыОтчетов", Кэш.ОсновныеВарианты);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Кэш.ЕстьИзменения		= Истина;
		ВариантОбъект			= Выборка.Ссылка.ПолучитьОбъект();
		ВариантОбъект.Родитель	= Выборка.Родитель;
		ВариантОбъект.Заблокировать();
		ОбновлениеИБСервер.ЗаписатьОбъект(ВариантОбъект);
	КонецЦикла;

	ЗаписьЖурналаРегистрации("Варианты отчетов", УровеньЖурналаРегистрации.Информация,,,СтрШаблон("Завершение процедуры ""%1"".", ПредставлениеПроцедуры));
КонецПроцедуры

// Обновление индекса поиска отчетов.
Процедура ОбновитьИндексПоиска(Кэш)
	ПредставлениеПроцедуры = СтрШаблон("Обновление индекса поиска (%1)", Кэш.Уточнение);
	ЗаписьЖурналаРегистрации("Варианты отчетов", УровеньЖурналаРегистрации.Информация,,, СтрШаблон("Запуск процедуры ""%1"".", ПредставлениеПроцедуры));

	Запрос = Новый Запрос;
	Если Кэш.ОбщиеДанные Тогда
		Поиск = Новый Структура("Отчет, КлючВарианта, ЭтоВариант", , , Истина);
		Если Кэш.Режим = "ОбщиеДанныеКонфигурации" Тогда
			ДеревоВариантов = ДеревоПредопределенных("Внутренний");
			Запрос.Текст = "ВЫБРАТЬ
			               |	ПредопределенныеВариантыОтчетов.Ссылка КАК Ссылка,
			               |	ПредопределенныеВариантыОтчетов.Отчет КАК Отчет
			               |ИЗ
			               |	Справочник.ПредопределенныеВариантыОтчетов КАК ПредопределенныеВариантыОтчетов
			               |ГДЕ
			               |	ПредопределенныеВариантыОтчетов.ПометкаУдаления = ЛОЖЬ";
		ИначеЕсли Кэш.Режим = "ОбщиеДанныеРасширений" Тогда
			ДеревоВариантов = ДеревоПредопределенных("Расширение");
			Запрос.Текст = "ВЫБРАТЬ
			               |	ПредопределенныеВариантыОтчетовВерсийРасширений.Вариант КАК Ссылка,
			               |	ПредопределенныеВариантыОтчетовВерсийРасширений.Отчет КАК Отчет
			               |ИЗ
			               |	РегистрСведений.ПредопределенныеВариантыОтчетовВерсийРасширений КАК ПредопределенныеВариантыОтчетовВерсийРасширений
			               |ГДЕ
			               |	ПредопределенныеВариантыОтчетовВерсийРасширений.ВерсияРасширений = &ВерсияРасширений
			               |	И ПредопределенныеВариантыОтчетовВерсийРасширений.Вариант <> &ПустаяСсылка";
			Запрос.УстановитьПараметр("ВерсияРасширений", ПараметрыСеанса.ВерсияРасширений);
			Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.ПредопределенныеВариантыОтчетовРасширений.ПустаяСсылка());
		КонецЕсли;
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВариантыОтчетов.Ссылка КАК Ссылка,
		               |	ВариантыОтчетов.Отчет КАК Отчет
		               |ИЗ
		               |	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
		               |ГДЕ
		               |	ВариантыОтчетов.Пользовательский
		               |	И ВариантыОтчетов.ТипОтчета = &ТипОтчета
		               |	И ВариантыОтчетов.Отчет В(&ДоступныеОтчеты)";
		Запрос.УстановитьПараметр("ДоступныеОтчеты", ВариантыОтчетовСерверПовтИсп.ДоступныеОтчеты(Ложь));
		Если Кэш.Режим = "РазделенныеДанныеКонфигурации" Тогда
			Запрос.УстановитьПараметр("ТипОтчета", Перечисления.ТипыОтчетов.Внутренний);
		ИначеЕсли Кэш.Режим = "РазделенныеДанныеРасширений" Тогда
			Запрос.УстановитьПараметр("ТипОтчета", Перечисления.ТипыОтчетов.Расширение);
		КонецЕсли;
	КонецЕсли;

	КэшОтчетов = Новый Соответствие;
	СтарыеСведения = Новый Структура("ХешНастроек, НаименованияПолей, НаименованияПараметровИОтборов, КлючевыеСлова");

	СписокОшибок	= Новый Массив;
	Выборка			= Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОтчетОбъект = КэшОтчетов.Получить(Выборка.Отчет); // Чтение кэша.
		Если ОтчетОбъект = "" Тогда
			Продолжить; // Отчет не подключен, ошибка зарегистрирована ранее.
		КонецЕсли;

		ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();

		Если Кэш.ОбщиеДанные Тогда
			ЗаполнитьЗначенияСвойств(Поиск, ВариантОбъект, "Отчет, КлючВарианта");
			Найденные = ДеревоВариантов.Строки.НайтиСтроки(Поиск, Истина);
			Если Найденные.Количество() = 0 Тогда
				ТекстОшибки = СтрШаблон("Вариант ""%1"" не найден для отчета ""%2""",  ВариантОбъект.КлючВарианта, ВариантОбъект.Отчет);
				ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки, ВариантОбъект.Ссылка);

				Продолжить; // Возникла проблема.
			КонецЕсли;

			ОписаниеВарианта = Найденные[0];
			СтрокаОтчет = ОписаниеВарианта.Родитель;
			ЗаполнитьОписаниеСтрокиВарианта(ОписаниеВарианта, СтрокаОтчет);

			// Если вариант отключен, то и в поиске он не участвует.
			Если Не ОписаниеВарианта.Включен Тогда
				Продолжить; // Заполнение не требуется.
			КонецЕсли;

			НастройкиКД = БазоваяПодсистемаКлиентСервер.СвойствоСтруктуры(ОписаниеВарианта.СистемнаяИнформация, "НастройкиКД");
			ВариантОбъект.ДополнительныеСвойства.Вставить("НастройкиКД", НастройкиКД);
			ВариантОбъект.ДополнительныеСвойства.Вставить("НастройкиДляПоиска", ОписаниеВарианта.НастройкиДляПоиска);
		КонецЕсли;

		ВариантОбъект.ДополнительныеСвойства.Вставить("ОтчетОбъект", ОтчетОбъект);

		ЗаполнитьЗначенияСвойств(СтарыеСведения, ВариантОбъект);
		ВариантОбъект.НаименованияПолей					= "";
		ВариантОбъект.НаименованияПараметровИОтборов	= "";
		ВариантОбъект.КлючевыеСлова						= "";
		Если Кэш.Полное Тогда // Переиндексировать принудительно, без проверки хеш-суммы.
			ВариантОбъект.ДополнительныеСвойства.Вставить("ИндексироватьСхему", Истина);
		КонецЕсли;

		Попытка
			СхемаПроиндексирована = ПроиндексироватьСодержимоеСхемы(ВариантОбъект);
		Исключение
			ТекстОшибки	= СтрШаблон("Не удалось перестроить индекс поиска для варианта ""%1"" отчета ""%2"". Возможно, отчет неисправен.", ВариантОбъект.КлючВарианта, ВариантОбъект.Отчет);
			ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ВариантОбъект.Ссылка);
			СписокОшибок.Добавить(ТекстОшибки);

			Продолжить;
		КонецПопытки;

		Если СхемаПроиндексирована И ИзменилисьНастройкиПоиска(ВариантОбъект, СтарыеСведения) Тогда
			Если Кэш.ОбщиеДанные Тогда
				ВариантОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеПредопределенных");
				ОбновлениеИБСервер.ЗаписатьОбъект(ВариантОбъект);
			Иначе
				ОбновлениеИБСервер.ЗаписатьОбъект(ВариантОбъект);
			КонецЕсли;
			Кэш.ЕстьИзменения = Истина;
		КонецЕсли;

		// Сохранение инициализированного объекта в кэш.
		Если ОтчетОбъект = Неопределено Тогда
			ОтчетОбъект = ВариантОбъект.ДополнительныеСвойства.ОтчетОбъект;
			Если ОтчетОбъект = Неопределено Тогда
				ОтчетОбъект = ""; // Отчет не был подключен, регистрация пустой строки для пропуска других вариантов.
			КонецЕсли;
			КэшОтчетов.Вставить(Выборка.Отчет, ОтчетОбъект);
		КонецЕсли;
	КонецЦикла;

	// Для платформы (очистка коллекции вручную для освобождение памяти от цикличных ссылок).
	Если Кэш.ОбщиеДанные Тогда
		ДеревоВариантов.Колонки.Очистить();
		ДеревоВариантов.Строки.Очистить();
	КонецЕсли;

	ЗаписьЖурналаРегистрации("Варианты отчетов", УровеньЖурналаРегистрации.Информация,,,СтрШаблон("Завершение процедуры ""%1"".", ПредставлениеПроцедуры));
КонецПроцедуры

// Формирует таблицу размещения отчетов по подсистемам конфигурации.
//
// Параметры:
//   Результат          - Неопределено - Используется для рекурсии.
//   ПодсистемаРодитель - Неопределено - Используется для рекурсии.
//
// Возвращаемое значение:
//   Результат - ТаблицаЗначений - Настройки размещения отчетов по подсистемам.
//       * ОтчетМетаданные      - ОбъектМетаданных: Отчет.
//       * ОтчетПолноеИмя       - Строка.
//       * ПодсистемаМетаданные - ОбъектМетаданных: Подсистема.
//       * ПодсистемаПолноеИмя  - Строка.
//
Функция РазмещениеОтчетовВПодсистемах(Результат = Неопределено, ПодсистемаРодитель = Неопределено)
	Если Результат = Неопределено Тогда
		ПолноеИмяОписаниеТипов = Метаданные.Справочники.ИдентификаторыОбъектовМетаданных.Реквизиты.ПолноеИмя.Тип;

		Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("ОтчетМетаданные",      Новый ОписаниеТипов("ОбъектМетаданных"));
		Результат.Колонки.Добавить("ОтчетПолноеИмя",       ПолноеИмяОписаниеТипов);
		Результат.Колонки.Добавить("ПодсистемаМетаданные", Новый ОписаниеТипов("ОбъектМетаданных"));
		Результат.Колонки.Добавить("ПодсистемаПолноеИмя",  ПолноеИмяОписаниеТипов);

		Результат.Индексы.Добавить("ОтчетПолноеИмя");

		ПодсистемаРодитель = Метаданные;
	КонецЕсли;

	// Перебор вложенных подсистем родителя.
	Для Каждого ПодсистемаМетаданные Из ПодсистемаРодитель.Подсистемы Цикл
		Если Не ПодсистемаМетаданные.ВключатьВКомандныйИнтерфейс Тогда
			Продолжить;
		КонецЕсли;

		// Состав подсистемы
		Для Каждого ОтчетМетаданные Из ПодсистемаМетаданные.Состав Цикл
			Если Не Метаданные.Отчеты.Содержит(ОтчетМетаданные) Тогда
				Продолжить;
			КонецЕсли;

			СтрокаТаблицы						= Результат.Добавить();
			СтрокаТаблицы.ОтчетМетаданные		= ОтчетМетаданные;
			СтрокаТаблицы.ОтчетПолноеИмя		= ОтчетМетаданные.ПолноеИмя();
			СтрокаТаблицы.ПодсистемаМетаданные	= ПодсистемаМетаданные;
			СтрокаТаблицы.ПодсистемаПолноеИмя	= ПодсистемаМетаданные.ПолноеИмя();
		КонецЦикла;

		РазмещениеОтчетовВПодсистемах(Результат, ПодсистемаМетаданные);
	КонецЦикла;

	Возврат Результат;
КонецФункции

// Определяет подключен-ли отчет к хранилищу вариантов отчетов.
Функция ОтчетПодключенКХранилищу(ОтчетМетаданные, ПоУмолчаниюВсеПодключены = Неопределено) Экспорт
	ХранилищеМетаданные = ОтчетМетаданные.ХранилищеВариантов;
	Если ХранилищеМетаданные = Неопределено Тогда
		Если ПоУмолчаниюВсеПодключены = Неопределено Тогда
			ПоУмолчаниюВсеПодключены = (Метаданные.ХранилищеВариантовОтчетов <> Неопределено И Метаданные.ХранилищеВариантовОтчетов.Имя = "ХранилищеВариантовОтчетов");
		КонецЕсли;

		ОтчетПодключен = ПоУмолчаниюВсеПодключены;
	Иначе
		ОтчетПодключен = (ХранилищеМетаданные = Метаданные.ХранилищаНастроек.ХранилищеВариантовОтчетов);
	КонецЕсли;

	Возврат ОтчетПодключен;
КонецФункции

// Запись в журнал регистрации.
Процедура ЗаписатьВЖурнал(Уровень, Сообщение, ВариантОтчета = Неопределено) Экспорт
	Если ТипЗнч(ВариантОтчета) = Тип("ОбъектМетаданных") Тогда
		ОбъектМетаданных = ВариантОтчета;
		Данные = ОбъектМетаданных.Представление();
	Иначе
		ОбъектМетаданных = Метаданные.Справочники.ВариантыОтчетов;
		Данные = ВариантОтчета;
	КонецЕсли;
	ЗаписьЖурналаРегистрации("Варианты отчетов", Уровень, ОбъектМетаданных, Данные, Сообщение);
КонецПроцедуры

// Заполняет описание настроек для строки варианта отчета если оно еще не заполнено.
//
// Параметры:
//   СтрокаВариант - СтрокаДерева - Описание настроек варианта отчета.
//   СтрокаОтчет   - СтрокаДерева - Необязательный. Описание настроек отчета.
//
Процедура ЗаполнитьОписаниеСтрокиВарианта(СтрокаВариант, СтрокаОтчет = Неопределено) Экспорт
	Если СтрокаВариант.ОписаниеПолучено Тогда
		Возврат;
	КонецЕсли;

	Если СтрокаОтчет = Неопределено Тогда
		СтрокаОтчет = СтрокаВариант.Родитель;
	КонецЕсли;

	// Флажок изменения настроек
	СтрокаВариант.ОписаниеПолучено = Истина;

	// Копирование настроек отчета.
	ЗаполнитьЗначенияСвойств(СтрокаВариант, СтрокаОтчет, "Включен, ВидимостьПоУмолчанию, ГруппироватьПоОтчету");

	Если СтрокаВариант = СтрокаОтчет.ОсновнойВариант Тогда
		// Вариант "по умолчанию".
		СтрокаВариант.Описание				= СтрокаОтчет.Описание;
		СтрокаВариант.ВидимостьПоУмолчанию	= Истина;
	Иначе
		// Предопределенный вариант.
		Если СтрокаВариант.ГруппироватьПоОтчету Тогда
			СтрокаВариант.ВидимостьПоУмолчанию = Ложь;
		КонецЕсли;
	КонецЕсли;

	СтрокаВариант.Размещение			= БазоваяПодсистемаКлиентСервер.СкопироватьСоответствие(СтрокаОтчет.Размещение);
	СтрокаВариант.ФункциональныеОпции	= БазоваяПодсистемаКлиентСервер.СкопироватьМассив(СтрокаОтчет.ФункциональныеОпции);
	СтрокаВариант.НастройкиДляПоиска	= БазоваяПодсистемаКлиентСервер.СкопироватьСтруктуру(СтрокаОтчет.НастройкиДляПоиска);
	СтрокаВариант.КлючЗамеров			= БазоваяПодсистемаСервер.СократитьСтрокуКонтрольнойСуммой("Отчет." + СтрокаОтчет.Метаданные.Имя  + "." + СтрокаВариант.КлючВарианта, 135);
КонецПроцедуры

// Возвращает настройки указанного отчета. Используется для настройки размещения и общих параметров отчета
// в ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//
// Параметры:
//   Настройки - Коллекция - используется для описания настроек отчетов и вариантов.
//                           Передается "как есть" из процедуры НастроитьВариантыОтчета.
//   Отчет - ОбъектМетаданных, СправочникСсылка.ИдентификаторыОбъектовМетаданных - метаданные или ссылка отчета.
//
// Возвращаемое значение:
//   СтрокаДереваЗначений - настройки отчета и настройки "по умолчанию" для вариантов этого отчета.
//     Полученное значение можно использовать в функции ОписаниеВарианта для получения настроек варианта.
//     Реквизиты для изменения:
//       * Включен              - Булево - Если Ложь, то вариант отчета не регистрируется в подсистеме.
//       * ВидимостьПоУмолчанию - Булево - Если Ложь, то вариант отчета по умолчанию скрыт в панели отчетов.
//       * Размещение           - Соответствие - Настройки размещения варианта отчета в разделах.
//           ** Ключ     - ОбъектМетаданных - Подсистема, в которой размещается отчет или вариант отчета.
//           ** Значение - Строка           - Настройки размещения в подсистеме (группе).
//               *** ""        - Вывод отчета в подсистеме без специального выделение.
//               *** "Важный"  - Вывод отчета в подсистеме с выделением жирным шрифтом.
//               *** "СмТакже" - Вывод отчета в группе "См. также".
//       * ФункциональныеОпции - Массив из Строка - Имена функциональных опций варианта отчета.
//       * НастройкиДляПоиска  - Структура - Дополнительные настройки для поиска этого варианта отчета.
//           Эти настройки необходимо задавать только если СКД не используется или используется не в полном объеме.
//           Например, СКД может использоваться только для параметризации и получения данных,
//           а вывод выполняться в фиксированный макет табличного документа.
//           ** НаименованияПолей - Строка - Имена полей варианта отчета.
//           ** НаименованияПараметровИОтборов - Строка - Имена настроек варианта отчета.
//           ** КлючевыеСлова - Строка - Дополнительная терминология (в т.ч. специализированная или устаревшая).
//           Разделитель терминов: Символы.ПС.
//           ** ИменаМакетов - Строка - Используется вместо НаименованияПолей.
//               Имена макетов табличных или текстовых документов,
//               из которых требуется извлечь информацию о наименованиях полей.
//               Имена перечисляются через запятую.
//               К сожалению, в макетах отсутствует информация о связях полей и их представлений (которая есть в СКД),
//               поэтому для более точной работы механизма поиска рекомендуется заполнять НаименованияПолей, а не
//               ИменаМакетов.
//       * ФорматНастроекСКД - Булево - Отчет использует типовой формат хранения настроек на механике СКД,
//           а его основные формы поддерживают стандартную схему взаимодействия между формами (параметры и тип
//           возвращаемого значения).
//           Если Ложь, тогда для отчета отключаются проверки консистентности и некоторые механизмы, которые
//           рассчитывают на типовой формат.
//       * ОпределитьНастройкиФормы - Булево - Отчет имеет программный интерфейс для тесной интеграции с формой отчета,
//           в том числе может переопределять некоторые настройки формы и подписываться на ее события.
//           Если Истина и отчет подключен к общей форме ФормаОтчета,
//           тогда в модуле объекта отчета следует определить процедуру по шаблону:
//
//               // Настройки общей формы отчета подсистемы "Варианты отчетов".
//               //
//               // Параметры:
//               //   Форма - УправляемаяФорма, Неопределено - Форма отчета или форма настроек отчета.
//               //       Неопределено когда вызов без контекста.
//               //   КлючВарианта - Строка, Неопределено - Имя предопределенного
//               //       или уникальный идентификатор пользовательского варианта отчета.
//               //       Неопределено когда вызов без контекста.
//               //   Настройки - Структура - см. возвращаемое значение
//               //       ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//               //
//               Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
//               	// Код процедуры.
//               КонецПроцедуры
//
//     Служебные реквизиты (только для чтения):
//       * Отчет               - <см. Справочники.ВариантыОтчетов.Реквизиты.Отчет> - Полное имя или ссылка на отчет.
//       * Метаданные          - ОбъектМетаданных: Отчет - Метаданные отчета.
//       * КлючВарианта        - Строка - Имя варианта отчета.
//       * ОписаниеПолучено    - Булево - Флажок что описание строки уже получено.
//           Описание получается методом ОписаниеВарианта().
//       * СистемнаяИнформация - Структура - Другая служебная информация.
//
Функция ОписаниеОтчета(Настройки, Отчет) Экспорт
	ЭтоМетаданные = (ТипЗнч(Отчет) = Тип("ОбъектМетаданных"));
	Если ЭтоМетаданные Тогда
		СтрокаОтчет = Настройки.Строки.Найти(Отчет, "Метаданные", Ложь);
	Иначе
		СтрокаОтчет = Настройки.Строки.Найти(Отчет, "Отчет", Ложь);
	КонецЕсли;

	Если СтрокаОтчет = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Ошибка получения описания отчета ""%1"": он не подключен к подсистеме ""%2"".
			|Проверьте свойство ""Хранилище вариантов"" в свойствах отчета.",
			Строка(Отчет),
			"Варианты отчетов");
	КонецЕсли;

	Возврат СтрокаОтчет;
КонецФункции

// Формирует таблицу замен старых ключей вариантов на актуальные.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица изменений имен вариантов. Колонки:
//       * ОтчетМетаданные - ОбъектМетаданных: Отчет - Метаданные отчета, в схеме которого изменилось имя варианта.
//       * СтароеИмяВарианта - Строка - Старое имя варианта, до изменения.
//       * АктуальноеИмяВарианта - Строка - Текущее (последнее актуальное) имя варианта.
//       * Отчет - СправочникСсылка.ИдентификаторыОбъектовМетаданных, Строка - Ссылка или имя отчета,
//
Функция ИзмененияКлючей()
	РеквизитыВариантов = Метаданные.Справочники.ВариантыОтчетов.Реквизиты;

	Изменения = Новый ТаблицаЗначений;
	Изменения.Колонки.Добавить("Отчет",                 Новый ОписаниеТипов("ОбъектМетаданных"));
	Изменения.Колонки.Добавить("СтароеИмяВарианта",     РеквизитыВариантов.КлючВарианта.Тип);
	Изменения.Колонки.Добавить("АктуальноеИмяВарианта", РеквизитыВариантов.КлючВарианта.Тип);

	Изменения.Колонки.Отчет.Имя = "ОтчетМетаданные";
	Изменения.Колонки.Добавить("Отчет", РеквизитыВариантов.Отчет.Тип);

	// Проверить корректность замен.
	Для Каждого Изменение Из Изменения Цикл
		Изменение.Отчет	= Справочники.ИдентификаторыОбъектовМетаданных.ИдентификаторОбъектаМетаданных(Изменение.ОтчетМетаданные);
		Найденные		= Изменения.НайтиСтроки(Новый Структура("ОтчетМетаданные, СтароеИмяВарианта", Изменение.ОтчетМетаданные, Изменение.АктуальноеИмяВарианта));
		Если Найденные.Количество() > 0 Тогда
			Конфликт = Найденные[0];
			ВызватьИсключение СтрШаблон("Ошибка регистрации изменений имени варианта отчета ""%1"":
				|Актуальное имя варианта ""%2"" (старое имя ""%3"")
				|также числится как старое имя ""%4"" (актуальное имя ""%5"").",
				Строка(Изменение.Отчет),
				Изменение.АктуальноеИмяВарианта,
				Изменение.СтароеИмяВарианта,
				Конфликт.СтароеИмяВарианта,
				Конфликт.АктуальноеИмяВарианта);
		КонецЕсли;
		Найденные = Изменения.НайтиСтроки(Новый Структура("ОтчетМетаданные, СтароеИмяВарианта", Изменение.ОтчетМетаданные, Изменение.СтароеИмяВарианта));
		Если Найденные.Количество() > 2 Тогда
			Конфликт = Найденные[1];
			ВызватьИсключение СтрШаблон("Ошибка регистрации изменений имени варианта отчета ""%1"":
				|Старое имя варианта ""%2"" (актуальное имя ""%3"")
				|также числится как старое имя
				|варианта отчета ""%4"" (актуальное имя ""%5"").",
				Строка(Изменение.Отчет),
				Изменение.СтароеИмяВарианта,
				Изменение.АктуальноеИмяВарианта,
				Строка(Конфликт.ОтчетМетаданные.Представление()),
				Конфликт.АктуальноеИмяВарианта);
		КонецЕсли;
	КонецЦикла;

	Возврат Изменения;
КонецФункции

// Записывает настройки варианта в данные справочника.
Функция ОбновитьПредопределенный(Кэш, ОписаниеВарианта)
	ВариантИзБазы = ОписаниеВарианта.ВариантИзБазы;
	Если Кэш.ОбновлятьЗамеры Тогда
		// зарезервировано для новых подсистем
	КонецЕсли;
	Если ОписаниеВарианта.НайденВБазеДанных Тогда
		Если ИзменилисьКлючевыеНастройкиПредопределенного(ОписаниеВарианта, ВариантИзБазы) Тогда
			Кэш.ЕстьВажныеИзменения = Истина; // Перезапись ключевых настроек (потребуется обновление разделенных данных).
		ИначеЕсли ИзменилисьВторостепенныеНастройкиПредопределенного(ОписаниеВарианта, ВариантИзБазы) Тогда
			// Перезапись без обновления разделенных данных.
		Иначе
			Возврат ВариантИзБазы.Ссылка;
		КонецЕсли;

		ВариантОбъект = ОписаниеВарианта.ВариантИзБазы.Ссылка.ПолучитьОбъект();
		ВариантОбъект.Размещение.Очистить();
		Если ВариантОбъект.ПометкаУдаления Тогда
			ВариантОбъект.ПометкаУдаления = Ложь;
		КонецЕсли;
	Иначе
		Кэш.ЕстьВажныеИзменения = Истина; // Регистрация нового (потребуется обновление разделенных данных).
		Если Кэш.Режим = "ОбщиеДанныеКонфигурации" Тогда
			ВариантОбъект = Справочники.ПредопределенныеВариантыОтчетов.СоздатьЭлемент();
		ИначеЕсли Кэш.Режим = "ОбщиеДанныеРасширений" Тогда
			ВариантОбъект = Справочники.ПредопределенныеВариантыОтчетовРасширений.СоздатьЭлемент();
		КонецЕсли;
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(ВариантОбъект, ОписаниеВарианта, "Отчет, КлючВарианта, Наименование, Включен, ВидимостьПоУмолчанию, Описание, ГруппироватьПоОтчету");

	ВариантОбъект.Родитель = ОписаниеВарианта.ВариантРодитель;

	Для Каждого КлючИЗначение Из ОписаниеВарианта.Размещение Цикл
		СсылкаПодсистемы = Справочники.ИдентификаторыОбъектовМетаданных.ИдентификаторОбъектаМетаданных(КлючИЗначение.Ключ);
		Если ТипЗнч(СсылкаПодсистемы) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		СтрокаРазмещения			= ВариантОбъект.Размещение.Добавить();
		СтрокаРазмещения.Подсистема	= СсылкаПодсистемы;
		СтрокаРазмещения.Важный		= (НРег(КлючИЗначение.Значение) = НРег("Важный"));
		СтрокаРазмещения.СмТакже	= (НРег(КлючИЗначение.Значение) = НРег("СмТакже"));
	КонецЦикла;

	Если Кэш.ОбновлятьЗамеры Тогда
		ВариантОбъект.КлючЗамеров = ОписаниеВарианта.КлючЗамеров;
	КонецЕсли;

	Кэш.ЕстьИзменения = Истина;
	ВариантОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеПредопределенных");
	ОбновлениеИБСервер.ЗаписатьОбъект(ВариантОбъект);

	Возврат ВариантОбъект.Ссылка;
КонецФункции

// Обновляет предопределенные данные в разделенном режиме.
Процедура ОбновитьРазделенныйПредопределенный(Кэш, Шаблоны, СтрокаТаблицы)
	Если СтрокаТаблицы.Обработана Тогда
		Возврат;
	КонецЕсли;

	СтрокаТаблицы.Обработана = Истина;

	Если СтрокаТаблицы.УстановитьПометкуУдаления Тогда // Пометить к удалению.
		Если СовпадаютЗначенияСвойств(Шаблоны.УстановкаПометкиУдаления, СтрокаТаблицы, "Реквизит") Тогда
			Возврат; // Уже помечен.
		КонецЕсли;
		ВариантОбъект = СтрокаТаблицы.РеквизитСсылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ВариантОбъект, Шаблоны.УстановкаПометкиУдаления);
	Иначе
		Если СтрокаТаблицы.ГруппироватьПоОтчету И Не ЗначениеЗаполнено(СтрокаТаблицы.ПредопределенныйВариантРодитель) Тогда
			СтрокаТаблицы.Родитель = Кэш.ПустаяСсылка;
		КонецЕсли;
		Кэш.ОбработанныеПредопределенные.Добавить(СтрокаТаблицы.ПредопределенныйВариант);
		ЗаполнитьЗначенияСвойств(Шаблоны.НовыеДанные, СтрокаТаблицы);
		Шаблоны.НовыеДанные.ПометкаУдаления = Ложь;
		Если СтрокаТаблицы.СоздатьНовый Тогда // Добавить.
			ВариантОбъект							= Справочники.ВариантыОтчетов.СоздатьЭлемент();
			ВариантОбъект.ПредопределенныйВариант	= СтрокаТаблицы.ПредопределенныйВариант;
			ВариантОбъект.Пользовательский			= Ложь;
		Иначе // Обновить (если есть изменения).
			Если СовпадаютЗначенияСвойств(Шаблоны.НовыеДанные, СтрокаТаблицы, "Реквизит") Тогда
				Возврат; // Изменений нет.
			КонецЕсли;
			// Перенос пользовательских настроек.
			ЗаменитьКлючиПользовательскихНастроек(Шаблоны.НовыеДанные, СтрокаТаблицы);
			ВариантОбъект = СтрокаТаблицы.РеквизитСсылка.ПолучитьОбъект();
		КонецЕсли;
		Если ВариантОбъект.ВидимостьПоУмолчаниюПереопределена Тогда
			ИсключаяСвойства = "ВидимостьПоУмолчанию";
		Иначе
			ИсключаяСвойства = Неопределено;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ВариантОбъект, Шаблоны.НовыеДанные, , ИсключаяСвойства);
		ТипОтчетаСтрокой = ВариантыОтчетовКлиентСервер.ТипОтчетаСтрокой(Неопределено, ВариантОбъект.Отчет);
		ВариантОбъект.ТипОтчета = Перечисления.ТипыОтчетов[ТипОтчетаСтрокой];
	КонецЕсли;

	Кэш.ЕстьИзменения = Истина;
	ВариантОбъект.Заблокировать();
	ОбновлениеИБСервер.ЗаписатьОбъект(ВариантОбъект);

	СтрокаТаблицы.РеквизитСсылка = ВариантОбъект.Ссылка;
КонецПроцедуры

Функция ПроиндексироватьСодержимоеСхемы(ВариантОбъект) Экспорт
	ДополнительныеСвойства	= ВариантОбъект.ДополнительныеСвойства;
	ТребуетсяЗапись			= Ложь;

	// В некоторых случаях заранее известно что настройки уже проиндексированы.
	ИндексироватьСхему		= БазоваяПодсистемаКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "ИндексироватьСхему");
	Если ИндексироватьСхему = Ложь Тогда
		Возврат ТребуетсяЗапись; // Заполнение не требуется.
	КонецЕсли;
	ПроверятьХеш = Истина;
	Если ИндексироватьСхему = Истина Тогда
		ПроверятьХеш = Ложь;
	КонецЕсли;

	// Механика ручного индексирования из данных варианта.
	ЗаполнитьПоля		= Лев(ВариантОбъект.НаименованияПолей, 1) <> "#";
	ЗаполнитьФильтры	= Лев(ВариантОбъект.НаименованияПараметровИОтборов, 1) <> "#";
	Если Не ЗаполнитьПоля И Не ЗаполнитьФильтры Тогда
		Возврат ТребуетсяЗапись; // Заполнение не требуется.
	КонецЕсли;

	// Получение объекта отчета, настроек СКД и варианта.
	ЭтоПредопределенный = (ТипЗнч(ВариантОбъект) = Тип("СправочникОбъект.ПредопределенныеВариантыОтчетов")) Или ТипЗнч(ВариантОбъект) = Тип("СправочникОбъект.ПредопределенныеВариантыОтчетовРасширений") Или Не ВариантОбъект.Пользовательский;

	// Предустановленные настройки поиска.
	НастройкиДляПоиска = БазоваяПодсистемаКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "НастройкиДляПоиска");
	Если НастройкиДляПоиска <> Неопределено Тогда
		Если ЗаполнитьПоля И ЗначениеЗаполнено(НастройкиДляПоиска.НаименованияПолей) Тогда
			ВариантОбъект.НаименованияПолей	= "#" + СокрЛП(НастройкиДляПоиска.НаименованияПолей);
			ЗаполнитьПоля					= Ложь;
			ТребуетсяЗапись					= Истина;
		КонецЕсли;
		Если ЗаполнитьФильтры И ЗначениеЗаполнено(НастройкиДляПоиска.НаименованияПараметровИОтборов) Тогда
			ВариантОбъект.НаименованияПараметровИОтборов	= "#" + СокрЛП(НастройкиДляПоиска.НаименованияПараметровИОтборов);
			ЗаполнитьФильтры								= Ложь;
			ТребуетсяЗапись									= Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(НастройкиДляПоиска.КлючевыеСлова) Тогда
			ВариантОбъект.КлючевыеСлова	= "#" + СокрЛП(НастройкиДляПоиска.КлючевыеСлова);
			ТребуетсяЗапись				= Истина;
		КонецЕсли;
		Если Не ЗаполнитьПоля И Не ЗаполнитьФильтры Тогда
			Возврат ТребуетсяЗапись; // Заполнение выполнено - объект надо записать.
		КонецЕсли;
	КонецЕсли;

	// В некоторых сценариях объект может быть уже закэширован в дополнительных свойствах.
	ОтчетОбъект = БазоваяПодсистемаКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "ОтчетОбъект");

	// Когда объект отчета не закэширован - подключение отчета штатным способом.
	Если ОтчетОбъект = Неопределено Тогда
		Подключение = ПодключитьОтчетОбъект(ВариантОбъект.Отчет, Ложь);
		Если Подключение.Успех Тогда
			ОтчетОбъект = Подключение.Объект;
		Иначе
			ОтчетОбъект = "";
			ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, Подключение.ТекстОшибки, ВариантОбъект.Ссылка);
		КонецЕсли;
		ДополнительныеСвойства.Вставить("ОтчетОбъект", ОтчетОбъект);
	КонецЕсли;
	Если ОтчетОбъект = "" Тогда
		Возврат ТребуетсяЗапись; // Возникла проблема при подключении отчета.
	КонецЕсли;

	// Извлечение текстов макетов возможно только после получения объекта отчета.
	Если ЗаполнитьПоля И НастройкиДляПоиска <> Неопределено И ЗначениеЗаполнено(НастройкиДляПоиска.ИменаМакетов) Тогда
		ВариантОбъект.НаименованияПолей	= "#" + ИзвлечьТекстМакета(ОтчетОбъект, НастройкиДляПоиска.ИменаМакетов);
		ТребуетсяЗапись					= истина;
		ЗаполнитьПоля					= Ложь;
		Если Не ЗаполнитьПоля И Не ЗаполнитьФильтры Тогда
			Возврат ТребуетсяЗапись; // Заполнение выполнено - объект надо записать.
		КонецЕсли;
	КонецЕсли;

	// Схема компоновки, на основании которой будет выполняться отчет.
	СхемаКД = ОтчетОбъект.СхемаКомпоновкиДанных;

	// Если отчет не на СКД, следовательно представления не заполняются или заполняются прикладными механизмами.
	Если СхемаКД = Неопределено Тогда
		ТекстОшибки = СтрШаблон("Для варианта ""%1"" отчета ""%2"" не заполнены настройки поиска:
			|Наименования полей или Наименования параметров и отборов.",
			ВариантОбъект.КлючВарианта,
			ВариантОбъект.Отчет);
		Если ЭтоПредопределенный Тогда
			ТекстОшибки = ТекстОшибки;
			Уровень = ?(ВариантОбъект.Размещение.Количество() > 0, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
			ЗаписатьВЖурнал(Уровень, ТекстОшибки, ВариантОбъект.Ссылка);
		Иначе
			ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Информация, ТекстОшибки, ВариантОбъект.Ссылка);
		КонецЕсли;
		Возврат ТребуетсяЗапись; // Возникла проблема.
	КонецЕсли;

	// Чтение настроек из переданных параметров.
	НастройкиКД = БазоваяПодсистемаКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "НастройкиКД");

	// Чтение настроек из схемы.
	Если ТипЗнч(НастройкиКД) <> Тип("НастройкиКомпоновкиДанных") Тогда
		ВариантНастроекКД = СхемаКД.ВариантыНастроек.Найти(ВариантОбъект.КлючВарианта);
		Если ВариантНастроекКД <> Неопределено Тогда
			НастройкиКД = ВариантНастроекКД.Настройки;
		КонецЕсли;
	КонецЕсли;

	// Чтение настроек из данных варианта.
	Если ТипЗнч(НастройкиКД) <> Тип("НастройкиКомпоновкиДанных")
		И ТипЗнч(ВариантОбъект) = Тип("СправочникОбъект.ВариантыОтчетов") Тогда
		Попытка
			НастройкиКД = ВариантОбъект.Настройки.Получить();
		Исключение
			ШаблонСообщения = "Не удалось прочитать настройки пользовательского варианта отчета:
				|%1";
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстСообщения, ВариантОбъект.Ссылка);

			Возврат ТребуетсяЗапись; // Возникла проблема.
		КонецПопытки;
	КонецЕсли;

	// Последняя проверка.
	Если ТипЗнч(НастройкиКД) <> Тип("НастройкиКомпоновкиДанных") Тогда
		Если ТипЗнч(ВариантОбъект) = Тип("СправочникОбъект.ПредопределенныеВариантыОтчетов") Или ТипЗнч(ВариантОбъект) = Тип("СправочникОбъект.ПредопределенныеВариантыОтчетовРасширений") Тогда
			ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, СтрШаблон("Не удалось прочитать настройки предопределенного варианта отчета ""%1"".", ВариантОбъект.КлючЗамеров), ВариантОбъект.Ссылка);
		КонецЕсли;
		Возврат ТребуетсяЗапись; // Возникла проблема.
	КонецЕсли;

	ХешЭтихНастроек = БазоваяПодсистемаСервер.КонтрольнаяСуммаСтрокой(БазоваяПодсистемаСервер.ЗначениеВСтрокуXML(НастройкиКД));
	Если ПроверятьХеш И ВариантОбъект.ХешНастроек = ХешЭтихНастроек Тогда
		Возврат ТребуетсяЗапись; // Настройки не изменились.
	КонецЕсли;
	ТребуетсяЗапись				= истина;
	ВариантОбъект.ХешНастроек	= ХешЭтихНастроек;

	// Описывает связь настроек компоновки данных и схемы компоновки данных.
	КомпоновщикНастроекКД = ОтчетОбъект.КомпоновщикНастроек;

	// Выполняет инициализацию компоновщика и его настроек (Настройки) источником доступных настроек.
	КомпоновщикНастроекКД.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКД));

	// Загружает настройки в компоновщик и сбрасывает пользовательские настройки.
	ВариантыОтчетовКлиентСервер.ЗагрузитьНастройки(КомпоновщикНастроекКД, НастройкиКД);

	Если ЗаполнитьПоля Тогда
		// Преобразование всех настроек автоматической группировки в наборы полей.
		//   См. "АвтоВыбранноеПолеКомпоновкиДанных", "АвтоПолеГруппировкиКомпоновкиДанных",
		//   "АвтоЭлементПорядкаКомпоновкиДанных" в синтакс-помощнике.
		КомпоновщикНастроекКД.РазвернутьАвтоПоля();

		ВариантОбъект.НаименованияПолей = СформироватьПредставленияПолей(КомпоновщикНастроекКД);
	КонецЕсли;

	Если ЗаполнитьФильтры Тогда
		ВариантОбъект.НаименованияПараметровИОтборов = СформироватьПредставленияПараметровИОтборов(КомпоновщикНастроекКД);
	КонецЕсли;

	Возврат ТребуетсяЗапись;
КонецФункции

// Определяет изменились ли настройки поиска предопределенного варианта отчета.
Функция ИзменилисьНастройкиПоиска(ВариантИзБазы, СтарыеСведения)
	Если ВариантИзБазы.ХешНастроек <> СтарыеСведения.ХешНастроек
		Или ВариантИзБазы.НаименованияПолей <> СтарыеСведения.НаименованияПолей
		Или ВариантИзБазы.НаименованияПараметровИОтборов <> СтарыеСведения.НаименованияПараметровИОтборов
		Или ВариантИзБазы.КлючевыеСлова <> СтарыеСведения.КлючевыеСлова Тогда

		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

// Определяет изменились ли ключевые настройки предопределенного варианта отчета.
Функция ИзменилисьКлючевыеНастройкиПредопределенного(ОписаниеВарианта, ВариантИзБазы)
	Если ВариантИзБазы.ПометкаУдаления = Истина // Описание получено => требуется снять пометку удаления.
		Или ВариантИзБазы.Наименование <> ОписаниеВарианта.Наименование
		Или ВариантИзБазы.Родитель <> ОписаниеВарианта.ВариантРодитель
		Или ВариантИзБазы.ВидимостьПоУмолчанию <> ОписаниеВарианта.ВидимостьПоУмолчанию Тогда

		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

// Определяет изменились ли второстепенные настройки предопределенного варианта отчета.
Функция ИзменилисьВторостепенныеНастройкиПредопределенного(ОписаниеВарианта, ВариантИзБазы)
	// Шапка
	Если ВариантИзБазы.Включен <> ОписаниеВарианта.Включен
		Или ВариантИзБазы.Описание <> ОписаниеВарианта.Описание
		Или ВариантИзБазы.КлючЗамеров <> ОписаниеВарианта.КлючЗамеров
		Или ВариантИзБазы.ГруппироватьПоОтчету <> ОписаниеВарианта.ГруппироватьПоОтчету Тогда

		Возврат Истина;
	КонецЕсли;

	// Таблица "Размещение"
	ТаблицаРазмещения = ВариантИзБазы.Размещение;
	Если ТаблицаРазмещения.Количество() <> ОписаниеВарианта.Размещение.Количество() Тогда
		Возврат Истина;
	КонецЕсли;

	Для Каждого КлючИЗначение Из ОписаниеВарианта.Размещение Цикл
		Подсистема = Справочники.ИдентификаторыОбъектовМетаданных.ИдентификаторОбъектаМетаданных(КлючИЗначение.Ключ);
		Если ТипЗнч(Подсистема) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		СтрокаРазмещения = ТаблицаРазмещения.Найти(Подсистема, "Подсистема");
		Если СтрокаРазмещения = Неопределено
			Или СтрокаРазмещения.Важный <> (НРег(КлючИЗначение.Значение) = НРег("Важный"))
			Или СтрокаРазмещения.СмТакже <> (НРег(КлючИЗначение.Значение) = НРег("СмТакже")) Тогда

			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
КонецФункции

// Возвращает Истина если совпадают значения свойств Структуры и Коллекции с Префиксом.
Функция СовпадаютЗначенияСвойств(Структура, Коллекция, ПрефиксВКоллекции = "")
	Для Каждого КлючИЗначение Из Структура Цикл
		Если Коллекция[ПрефиксВКоллекции + КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;
КонецФункции

// Перенос пользовательских настроек варианта из соответствующего хранилища.
Процедура ЗаменитьКлючиПользовательскихНастроек(СтарыйВариант, АктуальныйВариант)
	Если СтарыйВариант.КлючВарианта = АктуальныйВариант.КлючВарианта
		Или Не ЗначениеЗаполнено(СтарыйВариант.КлючВарианта)
		Или Не ЗначениеЗаполнено(АктуальныйВариант.КлючВарианта)
		Или ТипЗнч(АктуальныйВариант.Отчет) <> Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда

		Возврат;
	КонецЕсли;

	ОтчетПолноеИмя		= АктуальныйВариант.Отчет.ПолноеИмя;
	СтарыйКлючОбъекта	= ОтчетПолноеИмя +"/"+ СтарыйВариант.КлючВарианта;
	НовыйКлючОбъекта	= ОтчетПолноеИмя +"/"+ АктуальныйВариант.КлючВарианта;

	Отбор				= Новый Структура("КлючОбъекта", СтарыйКлючОбъекта);
	ВыборкаХранилища	= ХранилищеПользовательскихНастроекОтчетов.Выбрать(Отбор);
	ОшибокЧтенияПодряд	= 0;
	Пока Истина Цикл
		// Чтение настроек из хранилища по старому ключу.
		Попытка
			ЭлементВыборкиПолучен	= ВыборкаХранилища.Следующий();
			ОшибокЧтенияПодряд		= 0;
		Исключение
			ЭлементВыборкиПолучен	= Неопределено;
			ОшибокЧтенияПодряд		= ОшибокЧтенияПодряд + 1;
			ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка,
				"В процессе выборки вариантов отчетов из стандартного хранилища возникла ошибка:"
					+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				СтарыйВариант.Ссылка);
		КонецПопытки;

		Если ЭлементВыборкиПолучен = Ложь Тогда
			Прервать;
		ИначеЕсли ЭлементВыборкиПолучен = Неопределено Тогда
			Если ОшибокЧтенияПодряд > 100 Тогда
				Прервать;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		// Чтение описания настроек.
		ОписаниеНастроек = ХранилищеПользовательскихНастроекОтчетов.ПолучитьОписание(ВыборкаХранилища.КлючОбъекта, ВыборкаХранилища.КлючНастроек, ВыборкаХранилища.Пользователь);

		// Запись настроек в хранилище по новому ключу.
		ХранилищеПользовательскихНастроекОтчетов.Сохранить(НовыйКлючОбъекта, ВыборкаХранилища.КлючНастроек, ВыборкаХранилища.Настройки, ОписаниеНастроек, ВыборкаХранилища.Пользователь);
	КонецЦикла;

	// Очистка старых настроек хранилища.
	ХранилищеПользовательскихНастроекОтчетов.Удалить(СтарыйКлючОбъекта, Неопределено, Неопределено);
КонецПроцедуры

// Получает объект отчета по ссылке варианта отчета.
//
// Параметры:
//   СсылкаОтчета -
//     - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Ссылка отчета конфигурации.
//     - СправочникСсылка.ИдентификаторыОбъектовРасширений - Ссылка отчета расширения.
//     - Произвольный - Ссылка дополнительного или внешнего отчета.
//
// Возвращаемое значение:
//   Структура - Параметры отчета, в том числе Объект отчета.
//       * Объект      - ОтчетОбъект.<Имя отчета>, ВнешнийОтчет - Объект отчета.
//       * Имя         - Строка           - Имя объекта отчета.
//       * ПолноеИмя   - Строка           - Полное имя объекта отчета.
//       * Метаданные  - ОбъектМетаданных - Объект метаданных отчета.
//       * Ссылка      - Произвольный     - Ссылка отчета.
//       * Успех       - Булево           - Истина если удалось подключить отчет.
//       * ТекстОшибки - Строка           - Текст ошибки.
//
// Места использования:
//   РассылкаОтчетов.ИнициализироватьОтчет().
//
Функция ПодключитьОтчетОбъект(СсылкаОтчета, ПолучатьМетаданные)
	Результат = Новый Структура("Объект, Имя, ПолноеИмя, Метаданные, Ссылка, ТекстОшибки");
	Результат.Вставить("Успех", Ложь);

	Если СсылкаОтчета = Неопределено Тогда
		Результат.ТекстОшибки = СтрШаблон("В методе ""%1"" не указан параметр ""%2"".", "ПодключитьОтчетОбъект", "СсылкаОтчета");

		Возврат Результат;
	Иначе
		Результат.Ссылка = СсылкаОтчета;
	КонецЕсли;

	Если ТипЗнч(Результат.Ссылка) = Тип("Строка") Тогда
		Результат.ТекстОшибки = СтрШаблон("Отчет ""%1"" записан как внешний и не может быть подключен из программы", Результат.Ссылка);

		Возврат Результат;
	КонецЕсли;

	Если ТипЗнч(Результат.Ссылка) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных")
	 Или ТипЗнч(Результат.Ссылка) = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
		Идентификаторы	= Новый Массив;
		Идентификаторы.Добавить(Результат.Ссылка);

		ОбъектыМетаданных		= Справочники.ИдентификаторыОбъектовМетаданных.ОбъектыМетаданныхПоИдентификаторамСПопыткойПовтора(Идентификаторы, Истина);
		Результат.Метаданные	= ОбъектыМетаданных.Получить(Результат.Ссылка);

		Если ТипЗнч(Результат.Метаданные) <> Тип("ОбъектМетаданных") Тогда
			Результат.ТекстОшибки = СтрШаблон("Отчет ""%1"" не найден в программе", Результат.Имя);

			Возврат Результат;
		КонецЕсли;
		Результат.Имя		= Результат.Метаданные.Имя;
		Попытка
			Результат.Объект	= Отчеты[Результат.Имя].Создать();
			Результат.Успех		= Истина;
		Исключение
			ТекстОшибки			= СтрШаблон("Не удалось подключить отчет %1:", Результат.Метаданные);
			ТекстОшибки			= ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки, Результат.Метаданные);
		КонецПопытки;
	Иначе
		// Зарезервировано для новых подсистем
	КонецЕсли;

	Если Результат.Успех И ПолучатьМетаданные Тогда
		Результат.ПолноеИмя = Результат.Метаданные.ПолноеИмя();
	КонецЕсли;

	Возврат Результат;
КонецФункции

// Извлекает текстовую информацию из макета.
Функция ИзвлечьТекстМакета(ОтчетОбъект, ИменаМакетов)
	ИзвлеченныйТекст = "";
	Если ТипЗнч(ИменаМакетов) = Тип("Строка") Тогда
		ИменаМакетов = СтрРазделить(ИменаМакетов, ",", Ложь);
	КонецЕсли;
	Для Каждого ИмяМакета Из ИменаМакетов Цикл
		Макет = ОтчетОбъект.ПолучитьМакет(СокрЛП(ИмяМакета));
		Если ТипЗнч(Макет) = Тип("ТабличныйДокумент") Тогда
			Низ					= Макет.ВысотаТаблицы;
			Право				= Макет.ШиринаТаблицы;
			ПроверенныеЯчейки	= Новый Соответствие;
			Для НомерКолонки = 1 По Право Цикл
				Для НомерСтроки = 1 По Низ Цикл
					Ячейка = Макет.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
					Если ПроверенныеЯчейки.Получить(Ячейка.Имя) = Неопределено Тогда
						ПроверенныеЯчейки.Вставить(Ячейка.Имя, Истина);
						Если ТипЗнч(Ячейка) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
							ТекстОбласти = СокрЛП(Ячейка.Текст);
							Если ТекстОбласти <> "" Тогда
								ИзвлеченныйТекст = ИзвлеченныйТекст + Символы.ПС + ТекстОбласти;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		ИначеЕсли ТипЗнч(Макет) = Тип("ТекстовыйДокумент") Тогда
			ИзвлеченныйТекст = ИзвлеченныйТекст + Символы.ПС + СокрЛП(Макет.ПолучитьТекст());
		КонецЕсли;
	КонецЦикла;
	ИзвлеченныйТекст = СокрЛ(ИзвлеченныйТекст);

	Возврат ИзвлеченныйТекст;
КонецФункции

// Представления группировок и полей из СКД.
Функция СформироватьПредставленияПолей(КомпоновщикНастроекКД)
	Результат = Новый Массив;

	ДополнитьМассивИзСтрокиСРазделителями(Результат, Строка(КомпоновщикНастроекКД.Настройки.Выбор));

	МассивКоллекций = Новый Массив;
	МассивКоллекций.Добавить(КомпоновщикНастроекКД.Настройки.Структура);
	Пока МассивКоллекций.Количество() > 0 Цикл
		Коллекция = МассивКоллекций[0];
		МассивКоллекций.Удалить(0);

		Для Каждого Настройка Из Коллекция Цикл
			Если ТипЗнч(Настройка) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
				Если Не Настройка.Использование Тогда
					Продолжить;
				КонецЕсли;
				Настройка = Настройка.Настройки;
			КонецЕсли;

			ДополнитьМассивИзСтрокиСРазделителями(Результат, Строка(Настройка.Выбор));

			Если ТипЗнч(Настройка) = Тип("НастройкиКомпоновкиДанных") Тогда
				МассивКоллекций.Добавить(Настройка.Структура);
			ИначеЕсли ТипЗнч(Настройка) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				Если Не Настройка.Использование Тогда
					Продолжить;
				КонецЕсли;
				МассивКоллекций.Добавить(Настройка.Структура);
			ИначеЕсли ТипЗнч(Настройка) = Тип("ТаблицаКомпоновкиДанных") Тогда
				Если Не Настройка.Использование Тогда
					Продолжить;
				КонецЕсли;
				МассивКоллекций.Добавить(Настройка.Строки);
			ИначеЕсли ТипЗнч(Настройка) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
				Если Не Настройка.Использование Тогда
					Продолжить;
				КонецЕсли;
				МассивКоллекций.Добавить(Настройка.Структура);
			ИначеЕсли ТипЗнч(Настройка) = Тип("ДиаграммаКомпоновкиДанных") Тогда
				Если Не Настройка.Использование Тогда
					Продолжить;
				КонецЕсли;
				МассивКоллекций.Добавить(Настройка.Серии);
				МассивКоллекций.Добавить(Настройка.Точки);
			ИначеЕсли ТипЗнч(Настройка) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
				Если Не Настройка.Использование Тогда
					Продолжить;
				КонецЕсли;
				МассивКоллекций.Добавить(Настройка.Структура);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат СтрСоединить(Результат, Символы.ПС);
КонецФункции

// Представления параметров и отборов из СКД.
Функция СформироватьПредставленияПараметровИОтборов(КомпоновщикНастроекКД)
	Результат = Новый Массив;

	НастройкиКД = КомпоновщикНастроекКД.Настройки;

	Режимы = РежимОтображенияЭлементаНастройкиКомпоновкиДанных;

	Для Каждого ПользовательскаяНастройка Из КомпоновщикНастроекКД.ПользовательскиеНастройки.Элементы Цикл
		ТипНастройки = ТипЗнч(ПользовательскаяНастройка);
		Если ТипНастройки = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			ЭтоОтбор = Ложь;
		ИначеЕсли ТипНастройки = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЭтоОтбор = Истина;
		Иначе
			Продолжить;
		КонецЕсли;

		Если ПользовательскаяНастройка.РежимОтображения = Режимы.Недоступный Тогда
			Продолжить;
		КонецЕсли;

		Идентификатор = ПользовательскаяНастройка.ИдентификаторПользовательскойНастройки;

		ОбщаяНастройка = ВариантыОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(НастройкиКД, Идентификатор);
		Если ОбщаяНастройка = Неопределено Тогда
			Продолжить;
		ИначеЕсли ПользовательскаяНастройка.РежимОтображения = Режимы.Авто И ОбщаяНастройка.РежимОтображения <> Режимы.БыстрыйДоступ Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПредставлений = Новый Структура("Представление, ПредставлениеПользовательскойНастройки", "", "");
		ЗаполнитьЗначенияСвойств(СтруктураПредставлений, ОбщаяНастройка);
		Если ЗначениеЗаполнено(СтруктураПредставлений.ПредставлениеПользовательскойНастройки) Тогда
			ЭлементЗаголовок = СтруктураПредставлений.ПредставлениеПользовательскойНастройки;
		ИначеЕсли ЗначениеЗаполнено(СтруктураПредставлений.Представление) Тогда
			ЭлементЗаголовок = СтруктураПредставлений.Представление;
		Иначе
			ДоступнаяНастройка = ВариантыОтчетовКлиентСервер.НайтиДоступнуюНастройку(НастройкиКД, ОбщаяНастройка);
			Если ДоступнаяНастройка <> Неопределено И ЗначениеЗаполнено(ДоступнаяНастройка.Заголовок) Тогда
				ЭлементЗаголовок = ДоступнаяНастройка.Заголовок;
			Иначе
				ЭлементЗаголовок = Строка(?(ЭтоОтбор, ОбщаяНастройка.ЛевоеЗначение, ОбщаяНастройка.Параметр));
			КонецЕсли;
		КонецЕсли;

		ЭлементЗаголовок = СокрЛП(ЭлементЗаголовок);
		Если ЭлементЗаголовок <> "" И Результат.Найти(ЭлементЗаголовок) = Неопределено Тогда
			Результат.Добавить(ЭлементЗаголовок);
		КонецЕсли;
	КонецЦикла;

	Возврат СтрСоединить(Результат, Символы.ПС);
КонецФункции

// Добавляет в Массив элементы из СтрокаСРазделителями, если их там нет.
Процедура ДополнитьМассивИзСтрокиСРазделителями(Массив, СтрокаСРазделителями)
	СтрокаСРазделителями = СокрЛП(СтрокаСРазделителями);
	Если СтрокаСРазделителями = "" Тогда
		Возврат;
	КонецЕсли;
	Позиция = СтрНайти(СтрокаСРазделителями, ",");
	Пока Позиция > 0 Цикл
		Подстрока = СокрП(Лев(СтрокаСРазделителями, Позиция - 1));
		Если Подстрока <> "" И Массив.Найти(Подстрока) = Неопределено Тогда
			Массив.Добавить(Подстрока);
		КонецЕсли;
		СтрокаСРазделителями = СокрЛ(Сред(СтрокаСРазделителями, Позиция + 1));
		Позиция = СтрНайти(СтрокаСРазделителями, ",");
	КонецЦикла;
	Если СтрокаСРазделителями <> "" И Массив.Найти(СтрокаСРазделителями) = Неопределено Тогда
		Массив.Добавить(СтрокаСРазделителями);
	КонецЕсли;
КонецПроцедуры

// Определяет подключен-ли отчет к общей форме отчета.
Функция ОтчетПодключенКОсновнойФорме(ОтчетМетаданные, ПоУмолчаниюВсеПодключены = Неопределено) Экспорт
	ФормаМетаданные = ОтчетМетаданные.ОсновнаяФорма;
	Если ФормаМетаданные = Неопределено Тогда
		Если ПоУмолчаниюВсеПодключены = Неопределено Тогда
			ПоУмолчаниюВсеПодключены = Истина;
		КонецЕсли;
		ОтчетПодключен = ПоУмолчаниюВсеПодключены;
	Иначе
		ОтчетПодключен = (ФормаМетаданные = Метаданные.ОбщиеФормы.ФормаОтчета);
	КонецЕсли;

	Возврат ОтчетПодключен;
КонецФункции

Функция УменьшитьКоличествоБыстрыхНастроек(ВариантОбъект, ОтчетОбъект)
	Если ВариантОбъект = Неопределено Тогда
		Возврат Ложь; // Варианта нет в базе. Заполнение не требуется.
	КонецЕсли;

	// Схема компоновки, на основании которой будет выполняться отчет.
	СхемаКД = ОтчетОбъект.СхемаКомпоновкиДанных;
	Если СхемаКД = Неопределено Тогда
		Возврат Ложь; // Отчет не на СКД. Заполнение не требуется.
	КонецЕсли;

	// Чтение настроек из данных варианта.
	НастройкиКД = ВариантОбъект.Настройки.Получить();
	Если ТипЗнч(НастройкиКД) <> Тип("НастройкиКомпоновкиДанных") Тогда
		ТекстОшибки = СтрШаблон("Обнаружены пустые настройки пользовательского варианта ""%1"" отчета ""%2"".",  ВариантОбъект.КлючВарианта, ВариантОбъект.Отчет);
		ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки, ВариантОбъект.Ссылка);
		Возврат Ложь; // Возникла проблема.
	КонецЕсли;

	// Описывает связь настроек компоновки данных и схемы компоновки данных.
	КомпоновщикНастроекКД = ОтчетОбъект.КомпоновщикНастроек;

	// Выполняет инициализацию компоновщика и его настроек (Настройки) источником доступных настроек.
	КомпоновщикНастроекКД.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКД));

	// Загружает настройки в компоновщик и сбрасывает пользовательские настройки.
	ВариантыОтчетовКлиентСервер.ЗагрузитьНастройки(КомпоновщикНастроекКД, НастройкиКД);

	УсловияВывода = Новый Структура;
	УсловияВывода.Вставить("ТолькоПользовательские", Истина);
	УсловияВывода.Вставить("ТолькоБыстрые",          Истина);
	УсловияВывода.Вставить("ИдентификаторТекущегоУзлаКД", Неопределено);

	НастройкиОтчета = НастройкиФормыОтчета(ВариантОбъект.Отчет, ВариантОбъект.КлючВарианта, ОтчетОбъект);

	Информация			= РасширеннаяИнформацияОНастройках(КомпоновщикНастроекКД, НастройкиОтчета, ОтчетОбъект, УсловияВывода);
	БыстрыеНастройки	= Информация.ПользовательскиеНастройки.Скопировать(Новый Структура("ВыводРазрешен, Быстрая", Истина, Истина));
	Если БыстрыеНастройки.Количество() <= 2 Тогда
		Возврат Ложь; // Уменьшение количества не требуется.
	КонецЕсли;

	Исключаемые = БыстрыеНастройки.НайтиСтроки(Новый Структура("ТипЭлементов", "СтандартныйПериод"));
	Для Каждого СтрокаТаблицы Из Исключаемые Цикл
		БыстрыеНастройки.Удалить(СтрокаТаблицы);
	КонецЦикла;

	Потрачено = Исключаемые.Количество();
	Для Каждого СтрокаТаблицы Из БыстрыеНастройки Цикл
		Если Потрачено < 2 Тогда
			Потрачено = Потрачено + 1;
			Продолжить;
		КонецЕсли;
		СтрокаТаблицы.НастройкаВариантаКД.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	КонецЦикла;

	ВариантОбъект.Настройки = Новый ХранилищеЗначения(КомпоновщикНастроекКД.Настройки);

	Возврат Истина;
КонецФункции

Функция НастройкиФормыОтчета(ОтчетСсылка, КлючВарианта, ОтчетОбъект) Экспорт
	НастройкиОтчета		= ВариантыОтчетовКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию();
	ОтчетыСНастройками	= ВариантыОтчетовСерверПовтИсп.Параметры().ОтчетыСНастройками;
	Если ОтчетыСНастройками.Найти(ОтчетСсылка) = Неопределено Тогда
		Возврат НастройкиОтчета;
	КонецЕсли;
	Если ОтчетОбъект = Неопределено Тогда
		Подключение = ПодключитьОтчетОбъект(ОтчетСсылка, Ложь);
		Если Подключение.Успех Тогда
			ОтчетОбъект = Подключение.Объект;
		Иначе
			Текст = СтрШаблон("Не удалось получить настройки отчета ""%1"":" + Символы.ПС + Подключение.ТекстОшибки, ОтчетСсылка);
			ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Информация, Текст, ОтчетСсылка);

			Возврат НастройкиОтчета;
		КонецЕсли;
	КонецЕсли;

	ОтчетОбъект.ОпределитьНастройкиФормы(Неопределено, КлючВарианта, НастройкиОтчета);
	Если Не ГлобальныеНастройки().РазрешеноИзменятьВарианты Тогда
		НастройкиОтчета.РазрешеноИзменятьВарианты = Ложь;
	КонецЕсли;

	Возврат НастройкиОтчета;
КонецФункции

// Устанавливает режим вывода Отчетов и Вариантов в панелях отчетов.
// Для вызова из процедуры ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов переопределяемого модуля
// и из процедуры НастроитьВариантыОтчета модуля объекта отчета.
//
// Параметры:
//   Настройки - Коллекция - Передается "как есть" из соответствующего параметра
//       процедур НастроитьВариантыОтчетов и НастроитьВариантыОтчета.
//   ОтчетИлиПодсистема - СтрокаДереваЗначений, ОбъектМетаданных: Отчет, ОбъектМетаданных: Подсистема -
//       Описание отчета или подсистемы, для которой устанавливается режим вывода.
//       Когда передана подсистема режим устанавливается рекурсивно для всех отчетов из ее состава.
//   ГруппироватьПоОтчетам - Булево, Строка - Режим вывода гиперссылок этого отчета в панели отчетов:
//       - Истина, "ПоОтчетам" - Варианты группируются по отчету.
//           По умолчанию в панелях отчетов выводится только основной вариант отчета,
//           а все прочие варианты этого отчета выводятся "под" основным и по умолчанию скрыты
//           (но могут быть найдены поиском или включены при помощи флажков в режиме настройки).
//           Основным вариантом считается первый предопределенный вариант в схеме отчета.
//           Этот режим появился в версии 2.2.2 и позволяет уменьшить количество гиперссылок, выводимых в панелях отчетов.
//       - Ложь, "ПоВариантам" - Все варианты отчета считаются самостоятельными,
//           по умолчанию видны и выводятся независимо в панелях отчетов.
//           Этот режим использовался в версии 2.2.1 и ранее.
//
Процедура УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОтчетИлиПодсистема, ГруппироватьПоОтчетам) Экспорт
	Если ТипЗнч(ГруппироватьПоОтчетам) <> Тип("Булево") Тогда
		ГруппироватьПоОтчетам = (ГруппироватьПоОтчетам = ВРег("ПоОтчетам"));
	КонецЕсли;
	Если ТипЗнч(ОтчетИлиПодсистема) = Тип("СтрокаДереваЗначений") Или Метаданные.Отчеты.Содержит(ОтчетИлиПодсистема) Тогда
		УстановитьРежимВыводаОтчетаВПанеляхОтчетов(Настройки, ОтчетИлиПодсистема, ГруппироватьПоОтчетам);
	Иначе
		Подсистемы = Новый Массив;
		Подсистемы.Добавить(ОтчетИлиПодсистема);
		Количество			= 1;
		ОбработанныеОбъекты	= Новый Массив;
		Пока Количество > 0 Цикл
			Количество = Количество - 1;
			Подсистема = Подсистемы[0];
			Подсистемы.Удалить(0);
			Для Каждого ВложеннаяПодсистема Из Подсистема.Подсистемы Цикл
				Количество = Количество + 1;
				Подсистемы.Добавить(ВложеннаяПодсистема);
			КонецЦикла;
			Для Каждого ОбъектМетаданных Из ОтчетИлиПодсистема.Состав Цикл
				Если ОбработанныеОбъекты.Найти(ОбъектМетаданных) = Неопределено Тогда
					ОбработанныеОбъекты.Добавить(ОбъектМетаданных);
					Если Метаданные.Отчеты.Содержит(ОбъектМетаданных) Тогда
						УстановитьРежимВыводаОтчетаВПанеляхОтчетов(Настройки, ОбъектМетаданных, ГруппироватьПоОтчетам);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Устанавливает режим вывода вариантов отчета в панелях отчетов.
//
// Параметры:
//   ДеревоВариантов - ДеревоЗначений - Передается "как есть" из процедуры НастроитьВариантыОтчетов.
//   Отчет - СтрокаДереваЗначений, ОбъектМетаданных: Отчет - Описание настроек или метаданные отчета.
//   ГруппироватьПоОтчетам - Булево - Режим вывода в панели отчетов:
//       - Истина - По отчетам (варианты скрыты, а отчет включен и видим).
//       - Ложь - По вариантам (варианты видимы, а отчет отключен).
//
Процедура УстановитьРежимВыводаОтчетаВПанеляхОтчетов(ДеревоВариантов, Отчет, ГруппироватьПоОтчетам)
	Если ТипЗнч(Отчет) = Тип("СтрокаДереваЗначений") Тогда
		СтрокаОтчет = Отчет;
	Иначе
		СтрокаОтчет = ДеревоВариантов.Строки.Найти(Отчет, "Метаданные", Ложь);
		Если СтрокаОтчет = Неопределено Тогда
			ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Предупреждение, СтрШаблон("Отчет ""%1"" не подключен к подсистеме.", Отчет.Имя));

			Возврат;
		КонецЕсли;
	КонецЕсли;
	СтрокаОтчет.ГруппироватьПоОтчету = ГруппироватьПоОтчетам;
КонецПроцедуры

// Находит настройки варианта отчета. Используется для настройки размещения.
//
// Параметры:
//   Настройки - Коллекция - Используется для описания настроек отчетов и вариантов.
//       Передается "как есть" из процедур НастроитьВариантыОтчетов и НастроитьВариантыОтчета.
//   Отчет - СтрокаДерева, ОбъектМетаданных - Описание настроек, метаданные или ссылка отчета.
//   КлючВарианта - Строка - Имя варианта отчета как оно задано в схеме компоновки данных.
//
// Возвращаемое значение:
//   СтрокаДереваЗначений - Настройки варианта отчета.
//     Реквизиты для изменения:
//       * Включен              - Булево - Если Ложь, то вариант отчета не регистрируется в подсистеме.
//       * ВидимостьПоУмолчанию - Булево - Если Ложь, то вариант отчета по умолчанию скрыт в панели отчетов.
//       * Наименование         - Строка - Наименование варианта отчета.
//       * Описание             - Строка - Подсказка к варианту отчета.
//       * Размещение           - Соответствие - Настройки размещения варианта отчета в разделах.
//           ** Ключ     - ОбъектМетаданных - Подсистема, в которой размещается отчет или вариант отчета.
//           ** Значение - Строка           - Настройки размещения в подсистеме (группе).
//               *** ""        - Вывод варианта в подсистеме без специального выделение.
//               *** "Важный"  - Вывод варианта в подсистеме с выделением жирным шрифтом.
//               *** "СмТакже" - Вывод варианта в группе "См. также".
//       * ФункциональныеОпции - Массив из Строка - Имена функциональных опций варианта отчета.
//       * НастройкиДляПоиска  - Структура - Дополнительные настройки для поиска этого варианта отчета.
//           Эти настройки необходимо задавать только если СКД не используется или используется не в полном объеме.
//           Например, СКД может использоваться только для параметризации и получения данных,
//           а вывод выполняться в фиксированный макет табличного документа.
//           ** НаименованияПолей - Строка - Имена полей варианта отчета.
//           ** НаименованияПараметровИОтборов - Строка - Имена настроек варианта отчета.
//           ** КлючевыеСлова - Строка - Дополнительная терминология (в т.ч. специализированная или устаревшая).
//           Разделитель терминов: Символы.ПС.
//           ** ИменаМакетов - Строка - Используется вместо НаименованияПолей.
//               Имена макетов табличных или текстовых документов,
//               из которых требуется извлечь информацию о наименованиях полей.
//               Имена перечисляются через запятую.
//               К сожалению, в макетах отсутствует информация о связях полей и их представлений (которая есть в СКД),
//               поэтому для более точной работы механизма поиска рекомендуется заполнять НаименованияПолей, а не
//               ИменаМакетов.
//       * ФорматНастроекСКД - Булево - Отчет использует типовой формат хранения настроек на механике СКД,
//           а его основные формы поддерживают стандартную схему взаимодействия между формами (параметры и тип
//           возвращаемого значения).
//       * ОпределитьНастройкиФормы - Булево - Отчет имеет программный интерфейс для тесной интеграции с формой отчета,
//           в том числе может переопределять некоторые настройки формы и подписываться на ее события.
//
//     Служебные реквизиты (только для чтения):
//       * Отчет               - <см. Справочники.ВариантыОтчетов.Реквизиты.Отчет> - Полное имя или ссылка на отчет.
//       * Метаданные          - ОбъектМетаданных: Отчет - Метаданные отчета.
//       * КлючВарианта        - Строка - Имя варианта отчета.
//       * ОписаниеПолучено    - Булево - Флажок что описание строки уже получено.
//           Описание получается методом ОписаниеВарианта().
//       * СистемнаяИнформация - Структура - Другая служебная информация.
//
Функция ОписаниеВарианта(Настройки, Отчет, КлючВарианта) Экспорт
	Если ТипЗнч(Отчет) = Тип("СтрокаДереваЗначений") Тогда
		СтрокаОтчет = Отчет;
	Иначе
		СтрокаОтчет = ОписаниеОтчета(Настройки, Отчет);
	КонецЕсли;

	Если КлючВарианта = "" Тогда
		СтрокаВариант = СтрокаОтчет.ОсновнойВариант;
	Иначе
		СтрокаВариант = СтрокаОтчет.Строки.Найти(КлючВарианта, "КлючВарианта", Ложь);
	КонецЕсли;

	Если СтрокаВариант = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Вариант ""%1"" не найден для отчета ""%2"".", КлючВарианта, СтрокаОтчет.Метаданные.Имя);
	КонецЕсли;

	ЗаполнитьОписаниеСтрокиВарианта(СтрокаВариант, СтрокаОтчет);

	Возврат СтрокаВариант;
КонецФункции

// Формирует ссылку и тип отчета по полному имени.
//
// Параметры:
//   ОтчетПолноеИмя - Строка - Полное имя отчета в формате
//       "Отчет.<ИмяОтчета>" или "ВнешнийОтчет.<ИмяОтчета>".
//
// Возвращаемое значение:
//   Результат - Структура -
//       * Отчет
//       * ТипОтчета
//       * ОтчетИмя
//       * ОтчетМетаданные
//       * ТекстОшибки - Строка, Неопределено - Текст ошибки.
//
Функция СформироватьИнформациюОбОтчетеПоПолномуИмени(ОтчетПолноеИмя) Экспорт
	Результат				= Новый Структура("Отчет, ТипОтчета, ОтчетПолноеИмя, ОтчетИмя, ОтчетМетаданные, ТекстОшибки");
	Результат.Отчет          = ОтчетПолноеИмя;
	Результат.ОтчетПолноеИмя = ОтчетПолноеИмя;

	ПозицияТочки = СтрНайти(ОтчетПолноеИмя, ".");
	Если ПозицияТочки = 0 Тогда
		Префикс				= "";
		Результат.ОтчетИмя	= ОтчетПолноеИмя;
	Иначе
		Префикс				= Лев(ОтчетПолноеИмя, ПозицияТочки - 1);
		Результат.ОтчетИмя	= Сред(ОтчетПолноеИмя, ПозицияТочки + 1);
	КонецЕсли;

	Если ВРег(Префикс) = "ОТЧЕТ" Тогда
		Результат.ОтчетМетаданные = Метаданные.Отчеты.Найти(Результат.ОтчетИмя);
		Если Результат.ОтчетМетаданные = Неопределено Тогда
			Результат.ОтчетПолноеИмя = "ВнешнийОтчет." + Результат.ОтчетИмя;
			ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Предупреждение, СтрШаблон("Отчет ""%1"" не найден в программе, он будет значиться как внешний.", ОтчетПолноеИмя));
		ИначеЕсли Не ПравоДоступа("Просмотр", Результат.ОтчетМетаданные) Тогда
			Результат.ТекстОшибки = СтрШаблон("Недостаточно прав доступа к отчету ""%1"".", ОтчетПолноеИмя);
		КонецЕсли;
	ИначеЕсли ВРег(Префикс) = "ВНЕШНИЙОТЧЕТ" Тогда
		// Получение метаданных и проверок не требуется.
	Иначе
		Результат.ТекстОшибки = СтрШаблон("Для отчета ""%1"" невозможно определить тип (не установлен префикс).", ОтчетПолноеИмя);

		Возврат Результат;
	КонецЕсли;

	Если Результат.ОтчетМетаданные = Неопределено Тогда
		Результат.Отчет		= Результат.ОтчетПолноеИмя;
		Результат.ТипОтчета = Перечисления.ТипыОтчетов.Внешний;

		// Зарезервировано для новых подсистем
	Иначе
		Результат.Отчет		= Справочники.ИдентификаторыОбъектовМетаданных.ИдентификаторОбъектаМетаданных(Результат.ОтчетМетаданные);
		Результат.ТипОтчета = ВариантыОтчетовКлиентСервер.ТипОтчета(Результат.Отчет);
	КонецЕсли;

	Возврат Результат;
КонецФункции

// Проверяет свободно ли наименование варианта отчета.
Функция НаименованиеЗанято(Отчет, Ссылка, Наименование) Экспорт
	Если Наименование = БазоваяПодсистемаСервер.ЗначениеРеквизитаОбъекта(Ссылка, "Наименование") Тогда
		Возврат Ложь; // Проверка отключается т.к. наименование не изменилось.
	КонецЕсли;

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ ПЕРВЫЕ 1
	            	  |	1 КАК НаименованиеЗанято
	            	  |ИЗ
	            	  |	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	            	  |ГДЕ
	            	  |	ВариантыОтчетов.Отчет = &Отчет
	            	  |	И ВариантыОтчетов.Ссылка <> &Ссылка
	            	  |	И ВариантыОтчетов.Наименование = &Наименование
	            	  |	И ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ
	            	  |	И НЕ ВариантыОтчетов.ПредопределенныйВариант В (&ОтключенныеВариантыПрограммы)";
	Запрос.УстановитьПараметр("Отчет",        Отчет);
	Запрос.УстановитьПараметр("Ссылка",       Ссылка);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("ОтключенныеВариантыПрограммы", ВариантыОтчетовСерверПовтИсп.ОтключенныеВариантыПрограммы());

	УстановитьПривилегированныйРежим(Истина);
	Результат = Не Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);

	Возврат Результат;
КонецФункции

// Проверяет свободен ли ключ варианта отчета.
Функция КлючВариантаЗанят(Отчет, Ссылка, КлючВарианта) Экспорт
	Запрос			= Новый Запрос;
	Запрос.Текст	=  "ВЫБРАТЬ ПЕРВЫЕ 1
	            	   |	1 КАК КлючВариантаЗанят
	            	   |ИЗ
	            	   |	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	            	   |ГДЕ
	            	   |	ВариантыОтчетов.Отчет = &Отчет
	            	   |	И ВариантыОтчетов.Ссылка <> &Ссылка
	            	   |	И ВариантыОтчетов.КлючВарианта = &КлючВарианта
	            	   |	И ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Отчет",        Отчет);
	Запрос.УстановитьПараметр("Ссылка",       Ссылка);
	Запрос.УстановитьПараметр("КлючВарианта", КлючВарианта);

	УстановитьПривилегированныйРежим(Истина);
	Результат = Не Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);

	Возврат Результат;
КонецФункции

// Добавляет элементы условного оформления дерева подсистем.
Процедура УстановитьУсловноеОформлениеДереваПодсистем(Форма) Экспорт
	Форма.Элементы.ДеревоПодсистемВажность.СписокВыбора.Добавить("Важный");
	Форма.Элементы.ДеревоПодсистемВажность.СписокВыбора.Добавить("См. также");

	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента		= Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле	= Новый ПолеКомпоновкиДанных(Форма.Элементы.ДеревоПодсистем.Имя);

	ОтборЭлемента					= Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ДеревоПодсистем.Приоритет");
	ОтборЭлемента.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение	= "";

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента		= Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле	= Новый ПолеКомпоновкиДанных(Форма.Элементы.ДеревоПодсистемИспользование.Имя);
	ПолеЭлемента		= Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле	= Новый ПолеКомпоновкиДанных(Форма.Элементы.ДеревоПодсистемВажность.Имя);

	ОтборЭлемента					= Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ДеревоПодсистем.Приоритет");
	ОтборЭлемента.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение	= "";

	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
КонецПроцедуры

// Формирует дерево подсистем по данным варианта-основания.
Функция ДеревоПодсистемСформировать(Форма, ВариантОснование) Экспорт
	// Пустое дерево без настроек.
	Прототип		= Форма.РеквизитФормыВЗначение("ДеревоПодсистем", Тип("ДеревоЗначений"));
	ДеревоПодсистем = ВариантыОтчетовСерверПовтИсп.ПодсистемыТекущегоПользователя().Скопировать();
	Для Каждого КолонкаПрототипа Из Прототип.Колонки Цикл
		Если ДеревоПодсистем.Колонки.Найти(КолонкаПрототипа.Имя) = Неопределено Тогда
			ДеревоПодсистем.Колонки.Добавить(КолонкаПрототипа.Имя, КолонкаПрототипа.ТипЗначения);
		КонецЕсли;
	КонецЦикла;

	// Параметры.
	Контекст					= Новый Структура("ДеревоПодсистем");
	Контекст.ДеревоПодсистем	= ДеревоПодсистем;

	// Размещение, настроенное администратором.
	Подсистемы = Новый Массив;
	Для Каждого СтрокаРазмещения Из ВариантОснование.Размещение Цикл
		Подсистемы.Добавить(СтрокаРазмещения.Подсистема);
		ДеревоПодсистемЗарегистрироватьНастройкиПодсистемы(Контекст, СтрокаРазмещения, СтрокаРазмещения.Использование);
	КонецЦикла;

	// Размещение, предопределенное разработчиком.
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	Размещение.Ссылка КАК Ссылка,
	            	  |	Размещение.НомерСтроки КАК НомерСтроки,
	            	  |	Размещение.Подсистема КАК Подсистема,
	            	  |	Размещение.Важный КАК Важный,
	            	  |	Размещение.СмТакже КАК СмТакже
	            	  |ИЗ
	            	  |	Справочник.ПредопределенныеВариантыОтчетов.Размещение КАК Размещение
	            	  |ГДЕ
	            	  |	Размещение.Ссылка = &Ссылка
	            	  |	И НЕ Размещение.Подсистема В (&Подсистемы)";
	Запрос.УстановитьПараметр("Ссылка", ВариантОснование.ПредопределенныйВариант);
	// Не зачитывать настройки подсистем, переопределенные администратором.
	Запрос.УстановитьПараметр("Подсистемы", Подсистемы);

	Если ТипЗнч(ВариантОснование.ПредопределенныйВариант) = Тип("СправочникСсылка.ПредопределенныеВариантыОтчетовРасширений") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПредопределенныеВариантыОтчетов", "ПредопределенныеВариантыОтчетовРасширений");
	КонецЕсли;

	РазмещениеПредопределенного = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаРазмещения Из РазмещениеПредопределенного Цикл
		ДеревоПодсистемЗарегистрироватьНастройкиПодсистемы(Контекст, СтрокаРазмещения, Истина);
	КонецЦикла;

	Возврат Контекст.ДеревоПодсистем;
КонецФункции

// Сохраняет настройки размещения, измененные пользователем в табличную часть варианта отчета.
//
// Параметры:
//   ВариантОбъект - СправочникОбъект.ВариантыОтчетов, ДанныеФормыСтруктура - Объект варианта отчета.
//   ИзмененныеПодсистемы - Массив - Массив из строк дерева значений, содержащий измененные настройки размещения.
//
Процедура ДеревоПодсистемЗаписать(ВариантОбъект, ИзмененныеПодсистемы) Экспорт
	Для Каждого Подсистема Из ИзмененныеПодсистемы Цикл
		СтрокаТабличнойЧасти = ВариантОбъект.Размещение.Найти(Подсистема.Ссылка, "Подсистема");
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			// Необходимо зарегистрировать настройку размещения варианта безусловно (даже флажок Использование отключен)
			// - только тогда эта настройка заменит предопределенную (из неразделенного справочника).
			СтрокаТабличнойЧасти			= ВариантОбъект.Размещение.Добавить();
			СтрокаТабличнойЧасти.Подсистема = Подсистема.Ссылка;
		КонецЕсли;

		Если Подсистема.Использование = 0 Тогда
			СтрокаТабличнойЧасти.Использование = Ложь;
		ИначеЕсли Подсистема.Использование = 1 Тогда
			СтрокаТабличнойЧасти.Использование = Истина;
		Иначе
			// Оставить как есть
		КонецЕсли;

		Если Подсистема.Важность = "Важный" Тогда
			СтрокаТабличнойЧасти.Важный  = Истина;
			СтрокаТабличнойЧасти.СмТакже = Ложь;
		ИначеЕсли Подсистема.Важность = "См. также" Тогда
			СтрокаТабличнойЧасти.Важный  = Ложь;
			СтрокаТабличнойЧасти.СмТакже = Истина;
		Иначе
			СтрокаТабличнойЧасти.Важный  = Ложь;
			СтрокаТабличнойЧасти.СмТакже = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Добавляет подсистему в дерево.
Процедура ДеревоПодсистемЗарегистрироватьНастройкиПодсистемы(Контекст, СтрокаРазмещения, Использование)
	Найденные = Контекст.ДеревоПодсистем.Строки.НайтиСтроки(Новый Структура("Ссылка", СтрокаРазмещения.Подсистема), Истина);
	Если Найденные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СтрокаДерева = Найденные[0];

	Если СтрокаРазмещения.Важный Тогда
		СтрокаДерева.Важность = "Важный";
	ИначеЕсли СтрокаРазмещения.СмТакже Тогда
		СтрокаДерева.Важность = "См. также";
	Иначе
		СтрокаДерева.Важность = "";
	КонецЕсли;
	СтрокаДерева.Использование = Использование;
КонецПроцедуры

// Формирует список разделов, в которых размещены команды вызова панели отчетов.
//
// Возвращаемое значение:
//   СписокЗначений - См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ОпределитьРазделыСВариантамиОтчетов().
//
Функция СписокРазделов() Экспорт
	СписокРазделов = Новый СписокЗначений;

	// Зарезервировано для новых подсистем

	Возврат СписокРазделов;
КонецФункции

// Сбрасывает пользовательские настройки указанных отчетов.
//
// Параметры:
//   Ключ - ОбъектМетаданных: Отчет - Метаданные отчета, для которого требуется сбросить настройки.
//       - СправочникСсылка.ВариантыОтчетов - Вариант отчета, для которого требуется сбросить настройки.
//       - Строка - Полное имя варианта отчета, для которого требуется сбросить настройки.
//                  Заполняется в формате "<ИмяОтчета>/<ИмяВарианта>".
//                  Если передать "*", то будут сброшены настройки всех отчетов конфигурации.
//   ТипыНастроек - Структура - Необязательный. Типы пользовательских настроек, которые требуется сбросить.
//       Ключи структуры тоже являются необязательными. Значение по умолчанию указано в скобках.
//       * ЭлементОтбора              - Булево - (Ложь) Сбрасывать настройку "ЭлементОтбораКомпоновкиДанных".
//       * ЗначениеПараметраНастроек  - Булево - (Ложь) Сбрасывать настройку "ЗначениеПараметраНастроекКомпоновкиДанных".
//       * ВыбранныеПоля              - Булево - (берется из ключа Прочие) Сбрасывать настройку "ВыбранныеПоляКомпоновкиДанных".
//       * Порядок                    - Булево - (берется из ключа Прочие) Сбрасывать настройку "ПорядокКомпоновкиДанных".
//       * ЭлементУсловногоОформления - Булево - (берется из ключа Прочие) Сбрасывать настройку "ЭлементУсловногоОформленияКомпоновкиДанных".
//       * Прочие                     - Булево - (Истина) Сбрасывать прочие настройки, не описанные в структуре явно.
//
Процедура СброситьПользовательскиеНастройки(Ключ, ТипыНастроек = Неопределено) Экспорт
	БазоваяПодсистемаКлиентСервер.ПроверитьПараметр("ВариантыОтчетов.СброситьПользовательскиеНастройки", "Ключ", Ключ, Новый ОписаниеТипов("Строка, ОбъектМетаданных, СправочникСсылка.ВариантыОтчетов"));

	КлючиВариантов = Новый Массив; // Итоговый список очищаемых ключей.

	// Список ключей может быть заполнен из запроса или извне можно передать один конкретный ключ.
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	   |	ЕСТЬNULL(ВариантыОтчетов.Отчет.Имя, ВариантыОтчетов.Отчет.ИмяОбъекта) КАК ИмяОтчета,
	            	   |	ВариантыОтчетов.КлючВарианта
	            	   |ИЗ
	            	   |	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	            	   |ГДЕ
	            	   |	&Условие";
	Если Ключ = "*" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "ТипОтчета = ЗНАЧЕНИЕ(Перечисление.ТипыОтчетов.Внутренний)");
	ИначеЕсли ТипЗнч(Ключ) = Тип("ОбъектМетаданных") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "Отчет = &Отчет");
		Запрос.УстановитьПараметр("Отчет", Справочники.ИдентификаторыОбъектовМетаданных.ИдентификаторОбъектаМетаданных(Ключ));
	ИначеЕсли ТипЗнч(Ключ) = Тип("СправочникСсылка.ВариантыОтчетов") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Ключ);
	ИначеЕсли ТипЗнч(Ключ) = Тип("Строка") Тогда
		КлючиВариантов.Добавить(Ключ);
	Иначе
		ВызватьИсключение "Некорректный тип параметра ""Отчет""";
	КонецЕсли;

	Если Не ПустаяСтрока(Запрос.Текст) Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			КлючиВариантов.Добавить(Выборка.ИмяОтчета +"/"+ Выборка.КлючВарианта);
		КонецЦикла;
	КонецЕсли;

	Если ТипыНастроек = Неопределено Тогда
		ТипыНастроек = Новый Структура;
	КонецЕсли;
	БазоваяПодсистемаКлиентСервер.ДополнитьСтруктуруКлючом(ТипыНастроек, "ЭлементОтбора", Истина);
	БазоваяПодсистемаКлиентСервер.ДополнитьСтруктуруКлючом(ТипыНастроек, "ЗначениеПараметраНастроек", Истина);
	СбрасыватьПрочие = БазоваяПодсистемаКлиентСервер.СвойствоСтруктуры(ТипыНастроек, "Прочие", Истина);

	УстановитьПривилегированныйРежим(Истина);

	Для Каждого ПолноеИмяВарианта Из КлючиВариантов Цикл
		КлючОбъекта			= "Отчет." + ПолноеИмяВарианта + "/ТекущиеПользовательскиеНастройки";
		ВыборкаХранилища	= ХранилищеСистемныхНастроек.Выбрать(Новый Структура("КлючОбъекта", КлючОбъекта));
		ОшибокЧтенияПодряд	= 0;
		Пока Истина Цикл
			Попытка
				ЭлементВыборкиПолучен	= ВыборкаХранилища.Следующий();
				ОшибокЧтенияПодряд		= 0;
			Исключение
				ЭлементВыборкиПолучен	= Неопределено;
				ОшибокЧтенияПодряд		= ОшибокЧтенияПодряд + 1;
				ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка,
					"В процессе выборки пользовательских настроек отчетов из системного хранилища возникла ошибка:"
					+ Символы.ПС
					+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;

			Если ЭлементВыборкиПолучен = Ложь Тогда
				Прервать;
			ИначеЕсли ЭлементВыборкиПолучен = Неопределено Тогда
				Если ОшибокЧтенияПодряд > 100 Тогда
					Прервать;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			ПользовательскиеНастройкиКД = ВыборкаХранилища.Настройки;
			Если ТипЗнч(ПользовательскиеНастройкиКД) <> Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			ЕстьИзменения	= Ложь;
			Количество		= ПользовательскиеНастройкиКД.Элементы.Количество();
			Для Номер = 1 По Количество Цикл
				ОбратныйИндекс				= Количество - Номер;
				ПользовательскаяНастройкаКД	= ПользовательскиеНастройкиКД.Элементы[ОбратныйИндекс];
				Тип							= ВариантыОтчетовКлиентСервер.ТипНастройкиСтрокой(ТипЗнч(ПользовательскаяНастройкаКД));
				Сбрасывать					= БазоваяПодсистемаКлиентСервер.СвойствоСтруктуры(ТипыНастроек, Тип, СбрасыватьПрочие);
				Если Сбрасывать Тогда
					ПользовательскиеНастройкиКД.Элементы.Удалить(ОбратныйИндекс);
					ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЦикла;
			Если ЕстьИзменения Тогда
				БазоваяПодсистемаСервер.ХранилищеСистемныхНастроекСохранить(ВыборкаХранилища.КлючОбъекта, ВыборкаХранилища.КлючНастроек, ПользовательскиеНастройкиКД, , ВыборкаХранилища.Пользователь);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Подключение дополнительных отчетов.
Процедура ПриПодключенииОтчета(ПараметрыОткрытия) Экспорт
	ПараметрыОткрытия.Вставить("Подключен", Ложь);

	Если ПараметрыОткрытия.ТипОтчета = "Внутренний" Или ПараметрыОткрытия.ТипОтчета = "Расширение" Тогда
		Идентификаторы = Новый Массив;
		Идентификаторы.Добавить(ПараметрыОткрытия.Отчет);

		ОбъектыМетаданных	= Справочники.ИдентификаторыОбъектовМетаданных.ОбъектыМетаданныхПоИдентификаторамСПопыткойПовтора(Идентификаторы, Истина);
		МетаданныеОтчета	= ОбъектыМетаданных.Получить(ПараметрыОткрытия.Отчет);

		Если ТипЗнч(МетаданныеОтчета) <> Тип("ОбъектМетаданных") Тогда
			ВызватьИсключение СтрШаблон("Не удалось открыть отчет ""%1"".
					|Возможно, было отключено расширение конфигурации с этим отчетом.",
				ПараметрыОткрытия.Отчет);
		КонецЕсли;
		ПараметрыОткрытия.ИмяОтчета = МетаданныеОтчета.Имя;
		ПараметрыОткрытия.Подключен = Истина; // Отчеты конфигурации всегда подключены.

	ИначеЕсли ПараметрыОткрытия.ТипОтчета = "Расширение" Тогда
		Если Метаданные.Отчеты.Найти(ПараметрыОткрытия.ИмяОтчета) = Неопределено Тогда
			ВызватьИсключение СтрШаблон("Не удалось открыть отчет ""%1"".
					|Возможно, было отключено расширение конфигурации с этим отчетом.",
				ПараметрыОткрытия.ИмяОтчета);
		КонецЕсли;
		ПараметрыОткрытия.Подключен = Истина;
	ИначеЕсли ПараметрыОткрытия.ТипОтчета = "Дополнительный" Тогда
		// Зарезервировано для новых подсистем
	КонецЕсли;
КонецПроцедуры

// Устанавливает отборы по расширенной информации из структуры.
Процедура ДополнитьОтборыИзСтруктуры(Отбор, Структура, РежимОтображения = Неопределено) Экспорт
	Если РежимОтображения = Неопределено Тогда
		РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	Для Каждого КлючИЗначение Из Структура Цикл
		ИмяПоля		= КлючИЗначение.Ключ;
		ОтборПоля	= КлючИЗначение.Значение;
		Тип			= ТипЗнч(ОтборПоля);
		Если Тип = Тип("Структура") Тогда
			Условие		= ВидСравненияКомпоновкиДанных[ОтборПоля.Вид];
			Значение	= ОтборПоля.Значение;
		ИначеЕсли Тип = Тип("Массив") Тогда
			Условие		= ВидСравненияКомпоновкиДанных.ВСписке;
			Значение	= ОтборПоля;
		ИначеЕсли Тип = Тип("СписокЗначений") Тогда
			Условие		= ВидСравненияКомпоновкиДанных.ВСписке;
			Значение	= ОтборПоля.ВыгрузитьЗначения();
		ИначеЕсли Тип = Тип("ВидСравненияКомпоновкиДанных") Тогда
			Условие		= ОтборПоля;
			Значение	= Неопределено;
		Иначе
			Условие		= ВидСравненияКомпоновкиДанных.Равно;
			Значение	= ОтборПоля;
		КонецЕсли;
		БазоваяПодсистемаСервер.УстановитьЭлементОтбора(Отбор, ИмяПоля, Значение, Условие, , Истина, РежимОтображения);
	КонецЦикла;
КонецПроцедуры

// Находит ссылки по параметрам поиска.
//   Подсвечивает найденные места.
//
// Параметры:
//   ПараметрыПоиска - Структура - Условия поиска.
//       * СтрокаПоиска - Строка - Необязательный.
//       * Автор - СправочникСсылка.Пользователи - Необязательный.
//       * Подсистемы - Массив из СправочникСсылка.ИдентификаторыОбъектовМетаданных - Необязательный.
//
// Возвращаемое значение:
//   Структура - Когда выполняется поиск по строке.
//       * Ссылки - Массив из СправочникСсылка.ВариантыОтчетов -
//           Заполняется вариантами отчетов, в данных которых найдены все искомые слова.
//       * ПодсветкаВариантов - Соответствие - Подсветка найденных слов (если задана СтрокаПоиска).
//           ** Ключ - СправочникСсылка.ВариантыОтчетов.
//           ** Значение - Структура.
//               *** Ссылка - СправочникСсылка.ВариантыОтчетов.
//               *** НаименованияПолей                    - Строка.
//               *** НаименованияПараметровИОтборов       - Строка.
//               *** КлючевыеСлова                        - Строка.
//               *** Описание                             - Строка.
//               *** НаименованияПользовательскихНастроек - Строка.
//               *** ГдеНайдены                           - Структура.
//                   **** НаименованияПолей                    - Число.
//                   **** НаименованияПараметровИОтборов       - Число.
//                   **** КлючевыеСлова                        - Число.
//                   **** Описание                             - Число.
//                   **** НаименованияПользовательскихНастроек - Число.
//       * Подсистемы - Массив из СправочникСсылка.ИдентификаторыОбъектовМетаданных -
//           Заполняется подсистемами, в наименованиях которых найдены все искомые слова.
//           Для таких подсистем должны выводиться все вложенные варианты отчетов.
//       * ПодсветкаПодсистем - Соответствие - Подсветка найденных слов (если задана СтрокаПоиска).
//           ** Ключ - СправочникСсылка.ВариантыОтчетов.
//           ** Значение - Структура.
//               *** Ссылка - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//               *** НаименованиеПодсистемы - Строка.
//               *** ВсеСловаНайдены - Булево.
//               *** НайденныеСлова - Массив.
//       * ВариантыСвязанныеСПодсистемами - Соответствие - Варианты отчетов и их подсистемы.
//           Заполняется когда часть слов найдена в данных варианта, а другая часть - в наименованиях его подсистем.
//           В этом случае вариант должен выводиться только в найденных подсистемах (а в других - не должен выводиться).
//           Применяется в панели отчетов.
//           ** Ключ - СправочникСсылка.ВариантыОтчетов - Вариант.
//           ** Значение - Массив Из СправочникСсылка.ИдентификаторыОбъектовМетаданных - Подсистемы.
//
Функция НайтиСсылки(ПараметрыПоиска) Экспорт
	ПараметрыПоиска.Вставить("ОтчетыПользователя",				ОтчетыТекущегоПользователя());
	ПараметрыПоиска.Вставить("ОтключенныеВариантыПрограммы",	ВариантыОтчетовСерверПовтИсп.ОтключенныеВариантыПрограммы());

	Если ПараметрыПоиска.Свойство("СтрокаПоиска") И ЗначениеЗаполнено(ПараметрыПоиска.СтрокаПоиска) Тогда
		ЕстьСтрокаПоиска = Истина;
	Иначе
		ЕстьСтрокаПоиска = Ложь;
	КонецЕсли;

	Если ПараметрыПоиска.Свойство("Отчеты") И ЗначениеЗаполнено(ПараметрыПоиска.Отчеты) Тогда
		ЕстьОтборПоОтчетам = Истина;
	Иначе
		ЕстьОтборПоОтчетам = Ложь;
	КонецЕсли;

	Если ПараметрыПоиска.Свойство("Подсистемы") И ЗначениеЗаполнено(ПараметрыПоиска.Подсистемы) Тогда
		ЕстьОтборПоПодсистемам = Истина;
	Иначе
		ЕстьОтборПоПодсистемам = Ложь;
	КонецЕсли;

	ЖесткийОтборПоПодсистемам = ЕстьОтборПоПодсистемам И БазоваяПодсистемаКлиентСервер.СвойствоСтруктуры(ПараметрыПоиска, "ЖесткийОтборПоПодсистемам", Истина);

	Если ПараметрыПоиска.Свойство("ТипыОтчетов") И ЗначениеЗаполнено(ПараметрыПоиска.ТипыОтчетов) Тогда
		ЕстьОтборПоТипамОтчетов = Истина;
	Иначе
		ЕстьОтборПоТипамОтчетов = Ложь;
	КонецЕсли;

	Если ПараметрыПоиска.Свойство("ТолькоВидимыеВПанелиОтчетов") И ПараметрыПоиска.ТолькоВидимыеВПанелиОтчетов = Истина Тогда
		ЕстьОтборПоВидимости = ЕстьОтборПоПодсистемам; // Поддерживается только когда задан отбор по подсистемам.
	Иначе
		ЕстьОтборПоВидимости = Ложь;
	КонецЕсли;

	Если ПараметрыПоиска.Свойство("ПолучатьИтоговуюТаблицу") И ПараметрыПоиска.ПолучатьИтоговуюТаблицу = Истина Тогда
		ПолучатьИтоговуюТаблицу = Истина;
	Иначе
		ПолучатьИтоговуюТаблицу = Ложь;
	КонецЕсли;

	Если ПараметрыПоиска.Свойство("ПометкаУдаления") Тогда
		ЕстьОтборПоПометкеУдаления = ПараметрыПоиска.ПометкаУдаления;
	Иначе
		ЕстьОтборПоПометкеУдаления = Истина;
	КонецЕсли;

	Если Не ЕстьОтборПоПодсистемам И Не ЕстьСтрокаПоиска И Не ЕстьОтборПоТипамОтчетов И Не ЕстьОтборПоОтчетам Тогда
		Возврат Неопределено;
	КонецЕсли;

	Запрос = Новый Запрос;

	ПравоЧтенияАвторов = ПравоДоступа("Чтение", Метаданные.Справочники.Пользователи);

	ТекущийПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();

	Если ЕстьОтборПоОтчетам Тогда
		ОтборПоОтчетам = Новый Массив;
		Для Каждого ОтчетСсылка Из ПараметрыПоиска.Отчеты Цикл
			Если ПараметрыПоиска.ОтчетыПользователя.Найти(ОтчетСсылка) <> Неопределено Тогда
				ОтборПоОтчетам.Добавить(ОтчетСсылка);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОтборПоОтчетам = ПараметрыПоиска.ОтчетыПользователя;
	КонецЕсли;

	Запрос.УстановитьПараметр("ТекущийПользователь",			ТекущийПользователь);
	Запрос.УстановитьПараметр("ОтчетыПользователя",				ОтборПоОтчетам);
	Запрос.УстановитьПараметр("ОтключенныеВариантыПрограммы",	ПараметрыПоиска.ОтключенныеВариантыПрограммы);
	Запрос.УстановитьПараметр("ВерсияРасширений",				ПараметрыСеанса.ВерсияРасширений);
	Запрос.УстановитьПараметр("ТипОтчетаРасширение",			Перечисления.ТипыОтчетов.Расширение);
	Запрос.УстановитьПараметр("НетОтбораПоПометкеУдаления",		НЕ ЕстьОтборПоПометкеУдаления);

	Если ЕстьОтборПоПодсистемам Или ЕстьСтрокаПоиска Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВариантыОтчетов.Ссылка КАК Ссылка,
		               |	ВариантыОтчетов.Родитель КАК Родитель,
		               |	ВариантыОтчетов.Наименование КАК НаименованиеВарианта,
		               |	ВариантыОтчетов.Автор КАК Автор,
		               |	ВариантыОтчетов.ТолькоДляАвтора КАК ТолькоДляАвтора,
		               |	ВЫРАЗИТЬ(ВариантыОтчетов.Автор.Наименование КАК СТРОКА(1000)) КАК АвторПредставление,
		               |	ВариантыОтчетов.Отчет КАК Отчет,
		               |	ВариантыОтчетов.КлючВарианта КАК КлючВарианта,
		               |	ВариантыОтчетов.ТипОтчета КАК ТипОтчета,
		               |	ВариантыОтчетов.Пользовательский КАК Пользовательский,
		               |	ВариантыОтчетов.ПредопределенныйВариант КАК ПредопределенныйВариант,
		               |	ВЫБОР
		               |		КОГДА ПОДСТРОКА(ВариантыОтчетов.НаименованияПолей, 1, 1) = """"
		               |			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ВариантыКонфигурации.НаименованияПолей, ВариантыРасширений.НаименованияПолей) КАК СТРОКА(1000))
		               |		ИНАЧЕ ВЫРАЗИТЬ(ВариантыОтчетов.НаименованияПолей КАК СТРОКА(1000))
		               |	КОНЕЦ КАК НаименованияПолей,
		               |	ВЫБОР
		               |		КОГДА ПОДСТРОКА(ВариантыОтчетов.НаименованияПараметровИОтборов, 1, 1) = """"
		               |			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ВариантыКонфигурации.НаименованияПараметровИОтборов, ВариантыРасширений.НаименованияПараметровИОтборов) КАК СТРОКА(1000))
		               |		ИНАЧЕ ВЫРАЗИТЬ(ВариантыОтчетов.НаименованияПараметровИОтборов КАК СТРОКА(1000))
		               |	КОНЕЦ КАК НаименованияПараметровИОтборов,
		               |	ВЫБОР
		               |		КОГДА ПОДСТРОКА(ВариантыОтчетов.КлючевыеСлова, 1, 1) = """"
		               |			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ВариантыКонфигурации.КлючевыеСлова, ВариантыРасширений.КлючевыеСлова) КАК СТРОКА(1000))
		               |		ИНАЧЕ ВЫРАЗИТЬ(ВариантыОтчетов.КлючевыеСлова КАК СТРОКА(1000))
		               |	КОНЕЦ КАК КлючевыеСлова,
		               |	ВЫБОР
		               |		КОГДА ПОДСТРОКА(ВариантыОтчетов.Описание, 1, 1) = """"
		               |			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ВариантыКонфигурации.Описание, ВариантыРасширений.Описание) КАК СТРОКА(1000))
		               |		ИНАЧЕ ВЫРАЗИТЬ(ВариантыОтчетов.Описание КАК СТРОКА(1000))
		               |	КОНЕЦ КАК Описание,
		               |	ВЫБОР
		               |		КОГДА ВариантыОтчетов.Пользовательский
		               |			ТОГДА ВариантыОтчетов.ИнтерактивнаяПометкаУдаления
		               |		КОГДА ВариантыОтчетов.ТипОтчета = &ТипОтчетаРасширение
		               |			ТОГДА ДоступныеВариантыРасширений.Вариант ЕСТЬ NULL
		               |		ИНАЧЕ ЕСТЬNULL(ВариантыКонфигурации.ПометкаУдаления, ВариантыОтчетов.ПометкаУдаления)
		               |	КОНЕЦ КАК ПометкаУдаления,
		               |	ВариантыОтчетов.ВидимостьПоУмолчанию КАК ВидимостьПоУмолчанию
		               |ПОМЕСТИТЬ Варианты
		               |ИЗ
		               |	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов КАК ВариантыКонфигурации
		               |		ПО ВариантыОтчетов.ПредопределенныйВариант = ВариантыКонфигурации.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетовРасширений КАК ВариантыРасширений
		               |		ПО ВариантыОтчетов.ПредопределенныйВариант = ВариантыРасширений.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредопределенныеВариантыОтчетовВерсийРасширений КАК ДоступныеВариантыРасширений
		               |		ПО ВариантыОтчетов.ПредопределенныйВариант = ДоступныеВариантыРасширений.Вариант
		               |			И (ДоступныеВариантыРасширений.ВерсияРасширений = &ВерсияРасширений)
		               |ГДЕ
		               |	ВариантыОтчетов.ТипОтчета В(&ТипыОтчетов)
		               |	И ВариантыОтчетов.Отчет В(&ОтчетыПользователя)
		               |	И НЕ ВариантыОтчетов.ПредопределенныйВариант В (&ОтключенныеВариантыПрограммы)
					   |	И &ПоказыватьЛичныеВариантыОтчетовДругихАвторов
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЕСТЬNULL(РазмещениеВариантов.Ссылка, РазмещениеПредопределенных.Ссылка) КАК Ссылка,
		               |	ЕСТЬNULL(РазмещениеВариантов.Подсистема, РазмещениеПредопределенных.Подсистема) КАК Подсистема,
		               |	ЕСТЬNULL(РазмещениеВариантов.НаименованиеПодсистемы, РазмещениеПредопределенных.НаименованиеПодсистемы) КАК НаименованиеПодсистемы,
		               |	ЕСТЬNULL(РазмещениеВариантов.Использование, ИСТИНА) КАК Использование,
		               |	ВЫБОР
		               |		КОГДА РазмещениеВариантов.Ссылка ЕСТЬ NULL
		               |			ТОГДА ИСТИНА
		               |		ИНАЧЕ ЛОЖЬ
		               |	КОНЕЦ КАК ЭтоНастройкаРазработчика
		               |ПОМЕСТИТЬ РазмещениеВсех
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ВариантыОтчетов.Ссылка КАК Ссылка,
		               |		ВариантыРазмещение.Использование КАК Использование,
		               |		ВариантыРазмещение.Подсистема КАК Подсистема,
		               |		ВЫБОР
		               |			КОГДА ВариантыРазмещение.Подсистема.ПолноеИмя = ""Подсистемы""
		               |				ТОГДА &НаименованиеРабочегоСтола
		               |			ИНАЧЕ ВариантыРазмещение.Подсистема.Синоним
		               |		КОНЕЦ КАК НаименованиеПодсистемы
		               |	ИЗ
		               |		Варианты КАК ВариантыОтчетов
		               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыОтчетов.Размещение КАК ВариантыРазмещение
		               |			ПО (ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ ИЛИ &НетОтбораПоПометкеУдаления)
		               |				И ВариантыОтчетов.Ссылка = ВариантыРазмещение.Ссылка
		               |				И (ВариантыРазмещение.Подсистема В (&МассивПодсистем))) КАК РазмещениеВариантов
		               |		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			ВариантыОтчетов.Ссылка КАК Ссылка,
		               |			РазмещениеКонфигурации.Подсистема КАК Подсистема,
		               |			ВЫБОР
		               |				КОГДА РазмещениеКонфигурации.Подсистема.ПолноеИмя = ""Подсистемы""
		               |					ТОГДА &НаименованиеРабочегоСтола
		               |				ИНАЧЕ РазмещениеКонфигурации.Подсистема.Синоним
		               |			КОНЕЦ КАК НаименованиеПодсистемы
		               |		ИЗ
		               |			Варианты КАК ВариантыОтчетов
		               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов.Размещение КАК РазмещениеКонфигурации
		               |				ПО (ВариантыОтчетов.Пользовательский = ЛОЖЬ)
					   |					И &ПоказыватьЛичныеВариантыОтчетовДругихАвторов
		               |					И (ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ ИЛИ &НетОтбораПоПометкеУдаления)
		               |					И ВариантыОтчетов.ПредопределенныйВариант = РазмещениеКонфигурации.Ссылка
		               |					И (РазмещениеКонфигурации.Подсистема В (&МассивПодсистем))
		               |
		               |		ОБЪЕДИНИТЬ ВСЕ
		               |
		               |		ВЫБРАТЬ
		               |			ВариантыОтчетов.Ссылка,
		               |			РазмещениеРасширений.Подсистема,
		               |			ВЫБОР
		               |				КОГДА РазмещениеРасширений.Подсистема.ПолноеИмя = ""Подсистемы""
		               |					ТОГДА &НаименованиеРабочегоСтола
		               |				ИНАЧЕ РазмещениеРасширений.Подсистема.Синоним
		               |			КОНЕЦ
		               |		ИЗ
		               |			Варианты КАК ВариантыОтчетов
		               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетовРасширений.Размещение КАК РазмещениеРасширений
		               |				ПО (ВариантыОтчетов.Пользовательский = ЛОЖЬ)
		               |					И ВариантыОтчетов.ПредопределенныйВариант = РазмещениеРасширений.Ссылка
		               |					И (РазмещениеРасширений.Подсистема В (&МассивПодсистем))) КАК РазмещениеПредопределенных
		               |		ПО РазмещениеВариантов.Ссылка = РазмещениеПредопределенных.Ссылка
		               |			И РазмещениеВариантов.Подсистема = РазмещениеПредопределенных.Подсистема
		               |ГДЕ
		               |	ЕСТЬNULL(РазмещениеВариантов.Использование, ИСТИНА)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	РазмещениеВсех.Ссылка КАК Ссылка,
		               |	РазмещениеВсех.Подсистема КАК Подсистема,
		               |	РазмещениеВсех.НаименованиеПодсистемы КАК НаименованиеПодсистемы
		               |ПОМЕСТИТЬ РазмещениеВидимых
		               |ИЗ
		               |	РазмещениеВсех КАК РазмещениеВсех
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВариантовОтчетов КАК ЛичныеНастройки
		               |		ПО РазмещениеВсех.Подсистема = ЛичныеНастройки.Подсистема
		               |			И РазмещениеВсех.Ссылка = ЛичныеНастройки.Вариант
		               |			И (ЛичныеНастройки.Пользователь = &ТекущийПользователь)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Варианты КАК Варианты
		               |		ПО РазмещениеВсех.Ссылка = Варианты.Ссылка
		               |ГДЕ
		               |	И (Варианты.ПометкаУдаления = ЛОЖЬ ИЛИ &НетОтбораПоПометкеУдаления)
		               |	И Варианты.ПометкаУдаления = ЛОЖЬ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВариантыОтчетов.Ссылка КАК Ссылка,
		               |	ВариантыОтчетов.Родитель КАК Родитель,
		               |	ВариантыОтчетов.НаименованиеВарианта КАК НаименованиеВарианта,
		               |	ВариантыОтчетов.ТолькоДляАвтора КАК ТолькоДляАвтора,
		               |	ВариантыОтчетов.Автор КАК Автор,
		               |	ВариантыОтчетов.АвторПредставление КАК АвторПредставление,
		               |	ВариантыОтчетов.Отчет КАК Отчет,
		               |	ВариантыОтчетов.Отчет.Имя КАК ИмяОтчета,
		               |	ВариантыОтчетов.КлючВарианта КАК КлючВарианта,
		               |	ВариантыОтчетов.ТипОтчета КАК ТипОтчета,
		               |	ВариантыОтчетов.Пользовательский КАК Пользовательский,
		               |	ВариантыОтчетов.ПредопределенныйВариант КАК ПредопределенныйВариант,
		               |	ВариантыОтчетов.НаименованияПараметровИОтборов КАК НаименованияПараметровИОтборов,
		               |	ВариантыОтчетов.НаименованияПолей КАК НаименованияПолей,
		               |	ВариантыОтчетов.КлючевыеСлова КАК КлючевыеСлова,
		               |	ВариантыОтчетов.Описание КАК Описание,
		               |	Размещение.Подсистема КАК Подсистема,
		               |	Размещение.НаименованиеПодсистемы КАК НаименованиеПодсистемы,
		               |	НЕОПРЕДЕЛЕНО КАК КлючПользовательскойНастройки,
		               |	НЕОПРЕДЕЛЕНО КАК ПредставлениеПользовательскойНастройки
		               |ИЗ
		               |	Варианты КАК ВариантыОтчетов
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РазмещениеВидимых КАК Размещение
		               |		ПО ВариантыОтчетов.Ссылка = Размещение.Ссылка
		               |ГДЕ
		               |	(ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ ИЛИ &НетОтбораПоПометкеУдаления)
		               |	И &ПоискВариантовИПодсистем
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	Пользовательские.Вариант,
		               |	Варианты.Родитель,
		               |	НЕОПРЕДЕЛЕНО,
		               |	НЕОПРЕДЕЛЕНО,
		               |	НЕОПРЕДЕЛЕНО,
		               |	НЕОПРЕДЕЛЕНО,
		               |	НЕОПРЕДЕЛЕНО,
		               |	НЕОПРЕДЕЛЕНО,
		               |	НЕОПРЕДЕЛЕНО,
		               |	НЕОПРЕДЕЛЕНО,
		               |	НЕОПРЕДЕЛЕНО,
		               |	НЕОПРЕДЕЛЕНО,
		               |	НЕОПРЕДЕЛЕНО,
		               |	НЕОПРЕДЕЛЕНО,
		               |	НЕОПРЕДЕЛЕНО,
		               |	НЕОПРЕДЕЛЕНО,
		               |	НЕОПРЕДЕЛЕНО,
		               |	НЕОПРЕДЕЛЕНО,
		               |	Пользовательские.КлючПользовательскойНастройки,
		               |	Пользовательские.Наименование
		               |ИЗ
		               |	Варианты КАК Варианты
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПользовательскиеНастройкиОтчетов КАК Пользовательские
		               |		ПО Варианты.Ссылка = Пользовательские.Вариант
		               |ГДЕ
		               |	Пользовательские.Пользователь = &ТекущийПользователь
		               |	И &ПоискПользовательскихНастроек
		               |	И (Пользовательские.ПометкаУдаления = ЛОЖЬ ИЛИ &НетОтбораПоПометкеУдаления)
		               |	И (Варианты.ПометкаУдаления = ЛОЖЬ ИЛИ &НетОтбораПоПометкеУдаления)";

		Если Не ПравоЧтенияАвторов Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВариантыОтчетов.Автор КАК Автор", "НЕОПРЕДЕЛЕНО КАК Автор");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫРАЗИТЬ(ВариантыОтчетов.Автор.Наименование КАК СТРОКА(1000)) КАК АвторПредставление", "НЕОПРЕДЕЛЕНО КАК АвторПредставление");
		КонецЕсли;

		Если ЕстьОтборПоВидимости Тогда
			// Действие не требуется.
		Иначе
			// Удаление временной таблицы для фильтра по видимости.
			УдалитьВременнуюТаблицу(Запрос.Текст, "РазмещениеВидимых");
			// Подмена имени временной таблицы, из которой нужно делать выборку.
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "РазмещениеВидимых", "РазмещениеВсех");
		КонецЕсли;

		Если ЕстьОтборПоТипамОтчетов Тогда
			Запрос.УстановитьПараметр("ТипыОтчетов", ПараметрыПоиска.ТипыОтчетов);
		Иначе
			// Удаление отбора по типу отчета.
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"ВариантыОтчетов.ТипОтчета В(&ТипыОтчетов)
				|	И ",
				"");
		КонецЕсли;

		Если ЕстьОтборПоПодсистемам Тогда
			Если ТипЗнч(ПараметрыПоиска.Подсистемы) = Тип("Массив") Тогда
				Запрос.УстановитьПараметр("МассивПодсистем", ПараметрыПоиска.Подсистемы);
			Иначе
				МассивПодсистем = Новый Массив;
				МассивПодсистем.Добавить(ПараметрыПоиска.Подсистемы);
				Запрос.УстановитьПараметр("МассивПодсистем", МассивПодсистем);
			КонецЕсли;
		Иначе
			// Удаление отбора по подсистемам.
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (ВариантыРазмещение.Подсистема В (&МассивПодсистем))", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (РазмещениеКонфигурации.Подсистема В (&МассивПодсистем))", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (РазмещениеРасширений.Подсистема В (&МассивПодсистем))", "");
		КонецЕсли;

		Если ЕстьСтрокаПоиска И Не ЖесткийОтборПоПодсистемам Тогда
			// Для поиска информация о размещении является дополнительной, а не ключевой.
			Если ЕстьОтборПоВидимости Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст,
					"ВНУТРЕННЕЕ СОЕДИНЕНИЕ РазмещениеВидимых КАК Размещение",
					"ЛЕВОЕ СОЕДИНЕНИЕ РазмещениеВидимых КАК Размещение");
			Иначе
				Запрос.Текст = Запрос.Текст(Запрос.Текст,
					"ВНУТРЕННЕЕ СОЕДИНЕНИЕ РазмещениеВсех КАК Размещение",
					"ЛЕВОЕ СОЕДИНЕНИЕ РазмещениеВсех КАК Размещение");
			КонецЕсли;
		КонецЕсли;

		Если ЕстьСтрокаПоиска Тогда
			СтрокаПоиска	= ВРег(СокрЛП(ПараметрыПоиска.СтрокаПоиска));
			ШаблонПоиска	= "";
			МассивСлов		= ВариантыОтчетовКлиентСервер.РазложитьСтрокуПоискаВМассивСлов(СтрокаПоиска);
			Для НомерСлова = 1 По МассивСлов.Количество() Цикл
				Слово		= МассивСлов[НомерСлова-1];
				ИмяСлова	= "Слово" + Формат(НомерСлова, "ЧГ=");
				Запрос.УстановитьПараметр(ИмяСлова, "%" + Слово + "%");
				Шаблон		= "<ИмяТаблицы.ИмяПоля> ПОДОБНО &" + ИмяСлова;
				Если НомерСлова = 1 Тогда
					ШаблонПоиска = Шаблон;
				Иначе
					ШаблонПоиска = ШаблонПоиска + Символы.ПС + "				Или " + Шаблон;
				КонецЕсли;
			КонецЦикла;

			// Условие для поиска вариантов.
			ПоискВариантовИПодсистем = "("
				+ СтрЗаменить(ШаблонПоиска, "<ИмяТаблицы.ИмяПоля>", "ВариантыОтчетов.НаименованиеВарианта")
				+ Символы.ПС
				+ "				Или "
				+ СтрЗаменить(ШаблонПоиска, "<ИмяТаблицы.ИмяПоля>", "Размещение.НаименованиеПодсистемы")
				+ Символы.ПС
				+ "				Или "
				+ СтрЗаменить(ШаблонПоиска, "<ИмяТаблицы.ИмяПоля>", "ВариантыОтчетов.НаименованияПолей")
				+ Символы.ПС
				+ "				Или "
				+ СтрЗаменить(ШаблонПоиска, "<ИмяТаблицы.ИмяПоля>", "ВариантыОтчетов.НаименованияПараметровИОтборов")
				+ Символы.ПС
				+ "				Или "
				+ СтрЗаменить(ШаблонПоиска, "<ИмяТаблицы.ИмяПоля>", "ВариантыОтчетов.Описание")
				+ Символы.ПС
				+ "				Или "
				+ СтрЗаменить(ШаблонПоиска, "<ИмяТаблицы.ИмяПоля>", "ВариантыОтчетов.КлючевыеСлова");
			Если ПравоЧтенияАвторов Тогда
				ПоискВариантовИПодсистем = ПоискВариантовИПодсистем
				+ Символы.ПС
				+ "				Или "
				+ СтрЗаменить(ШаблонПоиска, "<ИмяТаблицы.ИмяПоля>", "ВариантыОтчетов.АвторПредставление");
			КонецЕсли;
			ПоискВариантовИПодсистем = ПоискВариантовИПодсистем + ")";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоискВариантовИПодсистем", ПоискВариантовИПодсистем);

			ПоискПользовательскихНастроек = (
				"("
				+ СтрЗаменить(ШаблонПоиска, "<ИмяТаблицы.ИмяПоля>", "Пользовательские.Наименование")
				+ ")");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоискПользовательскихНастроек", ПоискПользовательскихНастроек);
		Иначе
			// Удаление отбора для поиска в данных вариантов и подсистем.
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ПоискВариантовИПодсистем", "");
			// Удаление таблицы для поиска среди пользовательских настроек.
			НачалоВыборкиИзТаблицы = (
				"ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Пользовательские.Вариант,");
			Запрос.Текст = СокрП(Лев(Запрос.Текст, СтрНайти(Запрос.Текст, НачалоВыборкиИзТаблицы) - 1));
		КонецЕсли;

		// Удаление лишних полей когда они не нужны ни для поиска ни для итоговой таблицы.
		Если Не ЕстьСтрокаПоиска И Не ПолучатьИтоговуюТаблицу Тогда
			// НаименованиеВарианта
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВариантыОтчетов.Наименование КАК", "НЕОПРЕДЕЛЕНО КАК");
			// НаименованияПолей
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"ВЫБОР
				|		КОГДА ПОДСТРОКА(ВариантыОтчетов.НаименованияПолей, 1, 1) = """"
				|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ВариантыКонфигурации.НаименованияПолей, ВариантыРасширений.НаименованияПолей) КАК СТРОКА(1000))
				|		ИНАЧЕ ВЫРАЗИТЬ(ВариантыОтчетов.НаименованияПолей КАК СТРОКА(1000))
				|	КОНЕЦ КАК",
				"НЕОПРЕДЕЛЕНО КАК");
			// НаименованияПараметровИОтборов
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"ВЫБОР
				|		КОГДА ПОДСТРОКА(ВариантыОтчетов.НаименованияПараметровИОтборов, 1, 1) = """"
				|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ВариантыКонфигурации.НаименованияПараметровИОтборов, ВариантыРасширений.НаименованияПараметровИОтборов) КАК СТРОКА(1000))
				|		ИНАЧЕ ВЫРАЗИТЬ(ВариантыОтчетов.НаименованияПараметровИОтборов КАК СТРОКА(1000))
				|	КОНЕЦ КАК",
				"НЕОПРЕДЕЛЕНО КАК");
			// КлючевыеСлова
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"ВЫБОР
				|		КОГДА ПОДСТРОКА(ВариантыОтчетов.КлючевыеСлова, 1, 1) = """"
				|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ВариантыКонфигурации.КлючевыеСлова, ВариантыРасширений.КлючевыеСлова) КАК СТРОКА(1000))
				|		ИНАЧЕ ВЫРАЗИТЬ(ВариантыОтчетов.КлючевыеСлова КАК СТРОКА(1000))
				|	КОНЕЦ КАК",
				"НЕОПРЕДЕЛЕНО КАК");
			// Описание
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"ВЫБОР
				|		КОГДА ПОДСТРОКА(ВариантыОтчетов.Описание, 1, 1) = """"
				|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ВариантыКонфигурации.Описание, ВариантыРасширений.Описание) КАК СТРОКА(1000))
				|		ИНАЧЕ ВЫРАЗИТЬ(ВариантыОтчетов.Описание КАК СТРОКА(1000))
				|	КОНЕЦ КАК",
				"НЕОПРЕДЕЛЕНО КАК");
			// НаименованиеПодсистемы
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"ВЫБОР
				|			КОГДА ВариантыРазмещение.Подсистема.ПолноеИмя = ""Подсистемы""
				|				ТОГДА &НаименованиеРабочегоСтола
				|			ИНАЧЕ ВариантыРазмещение.Подсистема.Синоним
				|		КОНЕЦ КАК",
				"НЕОПРЕДЕЛЕНО");
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"ВЫБОР
				|				КОГДА РазмещениеКонфигурации.Подсистема.ПолноеИмя = ""Подсистемы""
				|					ТОГДА &НаименованиеРабочегоСтола
				|				ИНАЧЕ РазмещениеКонфигурации.Подсистема.Синоним
				|			КОНЕЦ",
				"НЕОПРЕДЕЛЕНО");
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"ВЫБОР
				|				КОГДА РазмещениеРасширений.Подсистема.ПолноеИмя = ""Подсистемы""
				|					ТОГДА &НаименованиеРабочегоСтола
				|				ИНАЧЕ РазмещениеРасширений.Подсистема.Синоним
				|			КОНЕЦ",
				"НЕОПРЕДЕЛЕНО");
		Иначе
			Запрос.УстановитьПараметр("НаименованиеРабочегоСтола", "Начальная страница");
		КонецЕсли;

		// Удаление лишних полей когда они не нужны для итоговой таблицы.
		Если Не ПолучатьИтоговуюТаблицу Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВариантыОтчетов.Автор КАК", "НЕОПРЕДЕЛЕНО КАК");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВариантыОтчетов.Отчет КАК", "НЕОПРЕДЕЛЕНО КАК");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВариантыОтчетов.Отчет.Имя КАК", "НЕОПРЕДЕЛЕНО КАК");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВариантыОтчетов.КлючВарианта КАК", "НЕОПРЕДЕЛЕНО КАК");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВариантыОтчетов.ТипОтчета КАК", "НЕОПРЕДЕЛЕНО КАК");
		КонецЕсли;
	Иначе
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВариантыОтчетов.Ссылка КАК Ссылка,
		               |	ВариантыОтчетов.КлючВарианта КАК КлючВарианта,
		               |	ВариантыОтчетов.Родитель КАК Родитель,
		               |	ВариантыОтчетов.Наименование КАК Наименование,
		               |	ВариантыОтчетов.Описание КАК Описание,
		               |	ВариантыОтчетов.ТолькоДляАвтора КАК ТолькоДляАвтора,
		               |	ВариантыОтчетов.Автор КАК Автор
		               |ИЗ
		               |	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
		               |ГДЕ
		               |	ВариантыОтчетов.ТипОтчета В(&ТипыОтчетов)
		               |	И ВариантыОтчетов.Отчет В(&ОтчетыПользователя)
		               |	И НЕ ВариантыОтчетов.ПредопределенныйВариант В (&ОтключенныеВариантыПрограммы)
		               |	И (НЕ ВариантыОтчетов.Пользовательский
		               |			ИЛИ НЕ ВариантыОтчетов.ИнтерактивнаяПометкаУдаления)
		               |	И (ВариантыОтчетов.Пользовательский
		               |			ИЛИ НЕ ВариантыОтчетов.ПометкаУдаления)
		               |	И &ПоказыватьЛичныеВариантыОтчетовДругихАвторов";

		Если ЕстьОтборПоТипамОтчетов Тогда
			Запрос.УстановитьПараметр("ТипыОтчетов", ПараметрыПоиска.ТипыОтчетов);
		Иначе
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"ВариантыОтчетов.ТипОтчета В(&ТипыОтчетов)
				|	И ",
				"");
		КонецЕсли;
	КонецЕсли;

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоказыватьЛичныеВариантыОтчетовДругихАвторов",
		?(ПользователиСервер.ЭтоПолноправныйПользователь(), "Истина", "(ВариантыОтчетов.ТолькоДляАвтора = ЛОЖЬ
			|	ИЛИ ВариантыОтчетов.Автор = &ТекущийПользователь)"));

	Результат = Новый Структура;
	Результат.Вставить("Ссылки",							Новый Массив);
	Результат.Вставить("ПодсветкаВариантов",				Новый Соответствие);
	Результат.Вставить("Подсистемы",						Новый Массив);
	Результат.Вставить("ПодсветкаПодсистем",				Новый Соответствие);
	Результат.Вставить("ВариантыСвязанныеСПодсистемами",	Новый Соответствие);
	Результат.Вставить("РодителиСвязанныеСВариантами",		Новый Массив);

	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	Если ПолучатьИтоговуюТаблицу Тогда
		Результат.Вставить("ТаблицаЗначений", ТаблицаЗначений);
	КонецЕсли;

	Если ТаблицаЗначений.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;

	Если Не ЕстьСтрокаПоиска Тогда
		ТаблицаВариантов = ТаблицаЗначений.Скопировать(, "Ссылка, Родитель");
		ТаблицаВариантов.Свернуть("Ссылка, Родитель");
		Для Каждого СтрокаТаблицы Из ТаблицаВариантов Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.Ссылка) И Результат.Ссылки.Найти(СтрокаТаблицы.Ссылка) = Неопределено Тогда
				Результат.Ссылки.Добавить(СтрокаТаблицы.Ссылка);
				Если ЗначениеЗаполнено(СтрокаТаблицы.Родитель) И Результат.Ссылки.Найти(СтрокаТаблицы.Родитель) = Неопределено Тогда
					Результат.Ссылки.Добавить(СтрокаТаблицы.Родитель);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Возврат Результат;
	КонецЕсли;

	ТаблицаЗначений.Сортировать("Ссылка");

	ШаблонОбластиПоиска = Новый ФиксированнаяСтруктура("Значение, КоличествоНайденныхСлов, ПодсветкаСлов", "", 0, Новый СписокЗначений);

	СтрокаТаблицы = ТаблицаЗначений[0];
	Вариант = Новый Структура;
	Вариант.Вставить("Ссылка",									СтрокаТаблицы.Ссылка);
	Вариант.Вставить("Родитель",								СтрокаТаблицы.Родитель);
	Вариант.Вставить("НаименованиеВарианта",					Новый Структура(ШаблонОбластиПоиска));
	Вариант.Вставить("Описание",								Новый Структура(ШаблонОбластиПоиска));
	Вариант.Вставить("НаименованияПолей",						Новый Структура(ШаблонОбластиПоиска));
	Вариант.Вставить("НаименованияПараметровИОтборов",			Новый Структура(ШаблонОбластиПоиска));
	Вариант.Вставить("КлючевыеСлова",							Новый Структура(ШаблонОбластиПоиска));
	Вариант.Вставить("НаименованияПользовательскихНастроек",	Новый Структура(ШаблонОбластиПоиска));
	Вариант.Вставить("НаименованияПодсистем",					Новый Структура(ШаблонОбластиПоиска));
	Вариант.Вставить("Подсистемы",								Новый Массив);
	Вариант.Вставить("ПредставлениеАвтора",						Новый Структура(ШаблонОбластиПоиска));

	РазделительПредставления	= ", ";

	Количество = ТаблицаЗначений.Количество();
	Для Индекс = 1 По Количество Цикл
		// Заполнение переменных.
		Если Не ЗначениеЗаполнено(Вариант.НаименованиеВарианта.Значение) И ЗначениеЗаполнено(СтрокаТаблицы.НаименованиеВарианта) Тогда
			Вариант.НаименованиеВарианта.Значение = СтрокаТаблицы.НаименованиеВарианта;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Вариант.Описание.Значение) И ЗначениеЗаполнено(СтрокаТаблицы.Описание) Тогда
			Вариант.Описание.Значение = СтрокаТаблицы.Описание;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Вариант.НаименованияПолей.Значение) И ЗначениеЗаполнено(СтрокаТаблицы.НаименованияПолей) Тогда
			Вариант.НаименованияПолей.Значение = СтрокаТаблицы.НаименованияПолей;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Вариант.НаименованияПараметровИОтборов.Значение) И ЗначениеЗаполнено(СтрокаТаблицы.НаименованияПараметровИОтборов) Тогда
			Вариант.НаименованияПараметровИОтборов.Значение = СтрокаТаблицы.НаименованияПараметровИОтборов;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Вариант.КлючевыеСлова.Значение) И ЗначениеЗаполнено(СтрокаТаблицы.КлючевыеСлова) Тогда
			Вариант.КлючевыеСлова.Значение = СтрокаТаблицы.КлючевыеСлова;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Вариант.ПредставлениеАвтора.Значение) И ЗначениеЗаполнено(СтрокаТаблицы.АвторПредставление) Тогда
			Вариант.ПредставлениеАвтора.Значение = СтрокаТаблицы.АвторПредставление;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПредставлениеПользовательскойНастройки) Тогда
			Если Вариант.НаименованияПользовательскихНастроек.Значение = "" Тогда
				Вариант.НаименованияПользовательскихНастроек.Значение = СтрокаТаблицы.ПредставлениеПользовательскойНастройки;
			Иначе
				Вариант.НаименованияПользовательскихНастроек.Значение = Вариант.НаименованияПользовательскихНастроек.Значение
					+ РазделительПредставления
					+ СтрокаТаблицы.ПредставлениеПользовательскойНастройки;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.НаименованиеПодсистемы)
			И Вариант.Подсистемы.Найти(СтрокаТаблицы.Подсистема) = Неопределено Тогда
			Вариант.Подсистемы.Добавить(СтрокаТаблицы.Подсистема);
			Подсистема = Результат.ПодсветкаПодсистем.Получить(СтрокаТаблицы.Подсистема);
			Если Подсистема = Неопределено Тогда
				Подсистема = Новый Структура;
				Подсистема.Вставить("Ссылка",					СтрокаТаблицы.Подсистема);
				Подсистема.Вставить("НаименованиеПодсистемы",	Новый Структура(ШаблонОбластиПоиска));
				Подсистема.НаименованиеПодсистемы.Значение = СтрокаТаблицы.НаименованиеПодсистемы;
				Подсистема.Вставить("ВсеСловаНайдены",			Истина);
				Подсистема.Вставить("НайденныеСлова",			Новый Массив);
				Для Каждого Слово Из МассивСлов Цикл
					Если ОтметитьСлово(Подсистема.НаименованиеПодсистемы, Слово) Тогда
						Подсистема.НайденныеСлова.Добавить(Слово);
					Иначе
						Подсистема.ВсеСловаНайдены = Ложь;
					КонецЕсли;
				КонецЦикла;
				Если Подсистема.ВсеСловаНайдены Тогда
					Результат.Подсистемы.Добавить(Подсистема.Ссылка);
				КонецЕсли;
				Результат.ПодсветкаПодсистем.Вставить(Подсистема.Ссылка, Подсистема);
			КонецЕсли;
			Если Вариант.НаименованияПодсистем.Значение = "" Тогда
				Вариант.НаименованияПодсистем.Значение = СтрокаТаблицы.НаименованиеПодсистемы;
			Иначе
				Вариант.НаименованияПодсистем.Значение = Вариант.НаименованияПодсистем.Значение + РазделительПредставления + СтрокаТаблицы.НаименованиеПодсистемы;
			КонецЕсли;
		КонецЕсли;

		Если Индекс < Количество Тогда
			СтрокаТаблицы = ТаблицаЗначений[Индекс];
		КонецЕсли;

		Если Индекс = Количество Или СтрокаТаблицы.Ссылка <> Вариант.Ссылка Тогда
			// Анализ собранной информации о варианте.
			ВсеСловаНайдены = Истина;
			СвязанныеПодсистемы = Новый Массив;
			Для Каждого Слово Из МассивСлов Цикл
				СловоНайдено = Ложь;

				Если ОтметитьСлово(Вариант.НаименованиеВарианта, Слово) Тогда
					СловоНайдено = Истина;
				КонецЕсли;

				Если ОтметитьСлово(Вариант.Описание, Слово) Тогда
					СловоНайдено = Истина;
				КонецЕсли;

				Если ОтметитьСлово(Вариант.НаименованияПолей, Слово, Истина) Тогда
					СловоНайдено = Истина;
				КонецЕсли;

				Если ОтметитьСлово(Вариант.ПредставлениеАвтора, Слово, Истина) Тогда
					СловоНайдено = Истина;
				КонецЕсли;

				Если ОтметитьСлово(Вариант.НаименованияПараметровИОтборов, Слово, Истина) Тогда
					СловоНайдено = Истина;
				КонецЕсли;

				Если ОтметитьСлово(Вариант.КлючевыеСлова, Слово, Истина) Тогда
					СловоНайдено = Истина;
				КонецЕсли;

				Если ОтметитьСлово(Вариант.НаименованияПользовательскихНастроек, Слово, Истина) Тогда
					СловоНайдено = Истина;
				КонецЕсли;

				Если Не СловоНайдено Тогда
					Для Каждого ПодсистемаСсылка Из Вариант.Подсистемы Цикл
						Подсистема = Результат.ПодсветкаПодсистем.Получить(ПодсистемаСсылка);
						Если Подсистема.НайденныеСлова.Найти(Слово) <> Неопределено Тогда
							СловоНайдено = Истина;
							СвязанныеПодсистемы.Добавить(ПодсистемаСсылка);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;

				Если Не СловоНайдено Тогда
					ВсеСловаНайдены = Ложь;

					Прервать;
				КонецЕсли;
			КонецЦикла;

			Если ВсеСловаНайдены Тогда // Регистрация результата.
				Результат.Ссылки.Добавить(Вариант.Ссылка);
				Результат.ПодсветкаВариантов.Вставить(Вариант.Ссылка, Вариант);
				Если СвязанныеПодсистемы.Количество() > 0 Тогда
					Результат.ВариантыСвязанныеСПодсистемами.Вставить(Вариант.Ссылка, СвязанныеПодсистемы);
				КонецЕсли;
				// Удаление связи "от подчиненного", если родитель найден самостоятельно.
				ИндексРодителя = Результат.РодителиСвязанныеСВариантами.Найти(Вариант.Ссылка);
				Если ИндексРодителя <> Неопределено Тогда
					Результат.РодителиСвязанныеСВариантами.Удалить(ИндексРодителя);
				КонецЕсли;
				Если ЗначениеЗаполнено(Вариант.Родитель) И Результат.Ссылки.Найти(Вариант.Родитель) = Неопределено Тогда
					Результат.Ссылки.Добавить(Вариант.Родитель);
					Результат.РодителиСвязанныеСВариантами.Добавить(Вариант.Родитель);
				КонецЕсли;
			КонецЕсли;

			Если Индекс = Количество Тогда
				Прервать;
			КонецЕсли;

			// Обнуление переменных.
			Вариант = Новый Структура;
			Вариант.Вставить("Ссылка",									СтрокаТаблицы.Ссылка);
			Вариант.Вставить("Родитель",								СтрокаТаблицы.Родитель);
			Вариант.Вставить("НаименованиеВарианта",					Новый Структура(ШаблонОбластиПоиска));
			Вариант.Вставить("Описание",								Новый Структура(ШаблонОбластиПоиска));
			Вариант.Вставить("НаименованияПолей",						Новый Структура(ШаблонОбластиПоиска));
			Вариант.Вставить("НаименованияПараметровИОтборов",			Новый Структура(ШаблонОбластиПоиска));
			Вариант.Вставить("КлючевыеСлова",							Новый Структура(ШаблонОбластиПоиска));
			Вариант.Вставить("НаименованияПользовательскихНастроек",	Новый Структура(ШаблонОбластиПоиска));
			Вариант.Вставить("НаименованияПодсистем",					Новый Структура(ШаблонОбластиПоиска));
			Вариант.Вставить("Подсистемы",								Новый Массив);
			Вариант.Вставить("ПредставлениеАвтора",						Новый Структура(ШаблонОбластиПоиска));
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

// Возвращает отчеты (СправочникСсылка.ВариантыОтчетов), доступные текущему пользователю.
// Их следует использовать во всех запросах к таблице
// справочника "ВариантыОтчетов" как отбор по реквизиту "Отчет",
// кроме случаев выборки вариантов из внешних отчетов.
//
// Возвращаемое значение:
//   Массив - отчеты, доступные текущему пользователю (СправочникСсылка.ИдентификаторыОбъектовРасширений,
//            Строка, СправочникСсылка.ДополнительныеОтчетыИОбработки,
//            СправочникСсылка.ИдентификаторыОбъектовМетаданных).
//            Тип элементов совпадает с типом реквизита Справочники.ВариантыОтчетов.Реквизиты.Отчет.
//
Функция ОтчетыТекущегоПользователя() Экспорт
	ДоступныеОтчеты = Новый Массив(ВариантыОтчетовСерверПовтИсп.ДоступныеОтчеты());

	// Зарезервировано для новых подсистем

	Возврат ДоступныеОтчеты;
КонецФункции

// Находит слово и отмечает место, где оно найдено. Возвращает Истина если слово найдено.
Функция ОтметитьСлово(СтруктураГде, Слово, ИспользоватьРазделитель = Ложь) Экспорт
	Если СтрНачинаетсяС(СтруктураГде.Значение, "#") Тогда
		СтруктураГде.Значение = Сред(СтруктураГде.Значение, 2);
	КонецЕсли;
	ОстатокВРег	= ВРег(СтруктураГде.Значение);
	Позиция		= СтрНайти(ОстатокВРег, Слово);
	Если Позиция = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	Если СтруктураГде.КоличествоНайденныхСлов = 0 Тогда
		// Инициализация переменной, содержащей директивы для подсветки слов.
		СтруктураГде.ПодсветкаСлов = Новый СписокЗначений;
		// Прокрутка фокуса до значащего слова (обнаруженной информации).
		Если ИспользоватьРазделитель Тогда
			РазделительХранения			= Символы.ПС;
			РазделительПредставления	= ", ";
			ДлинаРазделителя = СтрДлина(РазделительХранения);
			Пока Позиция > 10 Цикл
				ПозицияРазделителя = СтрНайти(ОстатокВРег, РазделительХранения);
				Если ПозицияРазделителя = 0 Тогда
					Прервать;
				КонецЕсли;
				Если ПозицияРазделителя < Позиция Тогда
					// Перенос фрагмента до разделителя в конец области.
					СтруктураГде.Значение = (
						Сред(СтруктураГде.Значение, ПозицияРазделителя + ДлинаРазделителя)
						+ РазделительХранения
						+ Лев(СтруктураГде.Значение, ПозицияРазделителя - 1));
					ОстатокВРег = (
						Сред(ОстатокВРег, ПозицияРазделителя + ДлинаРазделителя)
						+ РазделительХранения
						+ Лев(ОстатокВРег, ПозицияРазделителя - 1));
					// Обновление информации о расположении слова.
					Позиция = Позиция - ПозицияРазделителя - ДлинаРазделителя + 1;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			СтруктураГде.Значение	= СтрЗаменить(СтруктураГде.Значение, РазделительХранения, РазделительПредставления);
			ОстатокВРег				= СтрЗаменить(ОстатокВРег, РазделительХранения, РазделительПредставления);
			Позиция					= СтрНайти(ОстатокВРег, Слово);
		КонецЕсли;
	КонецЕсли;
	// Регистрация найденного слова.
	СтруктураГде.КоличествоНайденныхСлов = СтруктураГде.КоличествоНайденныхСлов + 1;
	// Отметка слов.
	ДлинаЛевойЧасти = 0;
	ДлинаСлова = СтрДлина(Слово);
	Пока Позиция > 0 Цикл
		СтруктураГде.ПодсветкаСлов.Добавить(ДлинаЛевойЧасти + Позиция, "+");
		СтруктураГде.ПодсветкаСлов.Добавить(ДлинаЛевойЧасти + Позиция + ДлинаСлова, "-");
		ОстатокВРег		= Сред(ОстатокВРег, Позиция + ДлинаСлова);
		ДлинаЛевойЧасти = ДлинаЛевойЧасти + Позиция + ДлинаСлова - 1;
		Позиция			= СтрНайти(ОстатокВРег, Слово);
	КонецЦикла;

	Возврат Истина;
КонецФункции

// Удаляет временную таблицу из текста запроса.
Процедура УдалитьВременнуюТаблицу(ТекстЗапроса, ИмяВременнойТаблицы)
	ПозицияВременнойТаблицы	= СтрНайти(ТекстЗапроса, "ПОМЕСТИТЬ " + ИмяВременнойТаблицы);
	ЛеваяЧасть				= "";
	ПраваяЧасть				= ТекстЗапроса;
	Пока Истина Цикл
		ПозицияТочкиСЗапятой = СтрНайти(ПраваяЧасть, Символы.ПС + ";");
		Если ПозицияТочкиСЗапятой = 0 Тогда
			Прервать;
		ИначеЕсли ПозицияТочкиСЗапятой > ПозицияВременнойТаблицы Тогда
			ПраваяЧасть				= Сред(ПраваяЧасть, ПозицияТочкиСЗапятой + 2);

			Прервать;
		Иначе
			ЛеваяЧасть				= ЛеваяЧасть + Лев(ПраваяЧасть, ПозицияТочкиСЗапятой + 1);
			ПраваяЧасть				= Сред(ПраваяЧасть, ПозицияТочкиСЗапятой + 2);
			ПозицияВременнойТаблицы = ПозицияВременнойТаблицы - ПозицияТочкиСЗапятой - 1;
		КонецЕсли;
	КонецЦикла;
	ТекстЗапроса			= ЛеваяЧасть + ПраваяЧасть;
КонецПроцедуры

// Сброс настроек предопределенного элемента справочника "Варианты отчетов",
//   связанного с элементом справочника "Варианты отчетов".
//
// Параметры:
//   ВариантОбъект - СправочникОбъект.ВариантыОтчетов, ДанныеФормыСтруктура - Вариант отчета.
//
Функция СброситьНастройкиВариантаОтчета(ВариантОбъект) Экспорт
	Если ВариантОбъект.Пользовательский
		Или (ВариантОбъект.ТипОтчета <> Перечисления.ТипыОтчетов.Внутренний И ВариантОбъект.ТипОтчета <> Перечисления.ТипыОтчетов.Расширение)
		Или Не ЗначениеЗаполнено(ВариантОбъект.ПредопределенныйВариант) Тогда

		Возврат Ложь;
	КонецЕсли;

	ВариантОбъект.Автор									= Неопределено;
	ВариантОбъект.ТолькоДляАвтора						= Ложь;
	ВариантОбъект.Описание								= "";
	ВариантОбъект.Размещение.Очистить();
	ВариантОбъект.ВидимостьПоУмолчаниюПереопределена	= Ложь;
	Предопределенный									= БазоваяПодсистемаСервер.ЗначенияРеквизитовОбъекта(ВариантОбъект.ПредопределенныйВариант, "Наименование, ВидимостьПоУмолчанию");
	ЗаполнитьЗначенияСвойств(ВариантОбъект, Предопределенный);

	Возврат Истина;
КонецФункции

// Извлекает информация о таблицах, используемых в схеме или запросе.
//   Обработка исключений (например, в случае передачи некорректного текста запроса) выполняется вызывающим кодом.
//
// Параметры:
//   Объект - СхемаКомпоновкиДанных, Строка - Схема отчета или текст запроса.
//
// Возвращаемое значение:
//   Массив - Имена таблиц, используемые в схеме или запросе.
Функция ИспользуемыеТаблицы(Объект) Экспорт
	Таблицы = Новый Массив;
	Если ТипЗнч(Объект) = Тип("СхемаКомпоновкиДанных") Тогда
		ЗарегистрироватьТаблицыНаборовДанных(Таблицы, Объект.НаборыДанных);
	ИначеЕсли ТипЗнч(Объект) = Тип("Строка") Тогда
		ЗарегистрироватьТаблицыЗапроса(Таблицы, Объект);
	КонецЕсли;
	Возврат Таблицы;
КонецФункции

// Проверяет что таблицы, используемые в схеме или запросе, еще обновляются, и сообщает об этом пользователю.
//   Проверка выполняется методом ОбновлениеИнформационнойБазы.ОбъектОбработан().
//   Обработка исключений (например, в случае передачи некорректного текста запроса) выполняется вызывающим кодом.
//
// Параметры:
//   Объект - СхемаКомпоновкиДанных - Схема отчета.
//       - Строка - Текст запроса.
//       - Массив - Имена таблиц, используемые отчетом.
//           * Строка - Имя таблицы.
//   Сообщать - Булево - Когда Истина и таблицы, используемые отчетом, еще не обновлены,
//       то будет выведено сообщение вида "Отчет может содержать некорректные данные".
//       Необязательный. По умолчанию Истина.
//
// Возвращаемое значение:
//   Булево - Истина когда в списке таблиц есть таблицы, которые еще не обновлены.
//
Функция ПроверитьИспользуемыеТаблицы(Объект, Сообщать = Истина) Экспорт
	Если ТипЗнч(Объект) = Тип("Массив") Тогда
		ИспользуемыеТаблицы = Объект;
	Иначе
		ИспользуемыеТаблицы = ИспользуемыеТаблицы(Объект);
	КонецЕсли;
	Для Каждого ПолноеИмя Из ИспользуемыеТаблицы Цикл
		Если Не ОбновлениеИБСервер.ОбъектОбработан(ПолноеИмя).Обработан Тогда
			Если Сообщать Тогда
				БазоваяПодсистемаКлиентСервер.СообщитьПользователю("Отчет может содержать некорректные данные, так как не завершен переход на новую версию программы. Если отчет долгое время недоступен, необходимо обратиться к администратору.");
			КонецЕсли;

			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
КонецФункции

// Регистрирует в массиве таблицы, используемые в наборах данных.
Процедура ЗарегистрироватьТаблицыНаборовДанных(Таблицы, НаборыДанных)
	Для Каждого Набор Из НаборыДанных Цикл
		Если ТипЗнч(Набор) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			ЗарегистрироватьТаблицыЗапроса(Таблицы, Набор.Запрос);
		ИначеЕсли ТипЗнч(Набор) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			ЗарегистрироватьТаблицыНаборовДанных(Таблицы, Набор.Элементы);
		ИначеЕсли ТипЗнч(Набор) = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") Тогда
			// Нечего регистрировать.
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Регистрирует в массиве таблицы, используемые в запросе.
Процедура ЗарегистрироватьТаблицыЗапроса(Таблицы, ТекстЗапроса)
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли;
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	Для Каждого Запрос Из СхемаЗапроса.ПакетЗапросов Цикл
		Если ТипЗнч(Запрос) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			ЗарегистрироватьТаблицыОператоровЗапроса(Таблицы, Запрос.Операторы);
		ИначеЕсли ТипЗнч(Запрос) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			// Нечего регистрировать.
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗарегистрироватьТаблицыОператоровЗапроса(Таблицы, Операторы)
	Для Каждого Оператор Из Операторы Цикл
		Для Каждого Источник Из Оператор.Источники Цикл
			Источник = Источник.Источник;
			Если ТипЗнч(Источник) = Тип("ТаблицаСхемыЗапроса") Тогда
				Если Таблицы.Найти(Источник.ИмяТаблицы) = Неопределено Тогда
					Таблицы.Добавить(Источник.ИмяТаблицы);
				КонецЕсли;
			ИначеЕсли ТипЗнч(Источник) = Тип("ВложенныйЗапросСхемыЗапроса") Тогда
				ЗарегистрироватьТаблицыОператоровЗапроса(Таблицы, Источник.Запрос.Операторы);
			ИначеЕсли ТипЗнч(Источник) = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
				// Нечего регистрировать.
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Формирует отчет с указанными настройками, используется в фоновых заданиях.
Процедура СформироватьОтчетВФоне(Параметры, АдресХранилища) Экспорт
	Формирование = СформироватьОтчет(Параметры, Ложь, Ложь);

	Результат = Новый Структура("ТабличныйДокумент, Расшифровка, Успех, ТекстОшибки, ДанныеЕщеОбновляются, ВариантМодифицирован, ПользовательскиеНастройкиМодифицированы");
	ЗаполнитьЗначенияСвойств(Результат, Формирование);

	Если Результат.ВариантМодифицирован Тогда
		Результат.Вставить("НастройкиКД", Формирование.НастройкиКД);
	КонецЕсли;
	Если Результат.ПользовательскиеНастройкиМодифицированы Тогда
		Результат.Вставить("ПользовательскиеНастройкиКД", Формирование.ПользовательскиеНастройкиКД);
	КонецЕсли;

	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
КонецПроцедуры

// Формирует отчет с указанными параметрами.
//
// Параметры:
//   Параметры - Структура - Параметры подключения и формирования отчета.
//       * СсылкаВарианта - СправочникСсылка.ВариантыОтчетов - Ссылка варианта отчета.
//       * СсылкаОтчета   - Произвольный - Ссылка отчета.
//       * КлючВарианта   - Строка - Имя предопределенного или идентификатор пользовательского варианта отчета.
//       * ИдентификаторФормы - Неопределено, УникальныйИдентификатор - Идентификатор формы, из которой подключается отчет.
//   ПроверятьЗаполнение - Булево - Если Истина то перед формированием будет проведена проверка заполнения.
//   ПолучатьФлажокПустой - Булево - Если Истина то после формирования будет проведен анализ заполненности.
//
// Возвращаемое значение:
//   Структура - Результат формирования.
//
Функция СформироватьОтчет(Знач Параметры, Знач ПроверятьЗаполнение, Знач ПолучатьФлажокПустой) Экспорт
	Результат = Новый Структура("ТабличныйДокумент, Расшифровка,
		|СсылкаВарианта, СсылкаОтчета, КлючВарианта,
		|Объект, Метаданные, ПолноеИмя,
		|СхемаКД, АдресСхемы, СхемаМодифицирована, НастройкиФормы,
		|НастройкиКД, ВариантМодифицирован,
		|ПользовательскиеНастройкиКД, ПользовательскиеНастройкиМодифицированы,
		|ТекстОшибки, Успех, ДанныеЕщеОбновляются");

	Результат.Успех										= Ложь;
	Результат.ТабличныйДокумент							= Новый ТабличныйДокумент;
	Результат.ВариантМодифицирован						= Ложь;
	Результат.ПользовательскиеНастройкиМодифицированы	= Ложь;
	Результат.ДанныеЕщеОбновляются						= Ложь;
	Если ПолучатьФлажокПустой Тогда
		Результат.Вставить("Пустой", Ложь);
	КонецЕсли;

	Если Параметры.Свойство("Подключение") Тогда
		Подключение = Параметры.Подключение;
	Иначе
		Подключение = ПодключитьОтчетИЗагрузитьНастройки(Параметры);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Результат, Подключение); // , "Объект, Метаданные, ПолноеИмя, КлючВарианта, СхемаКД, АдресСхемы, СхемаМодифицирована, НастройкиФормы"
	Если Не Подключение.Успех Тогда
		Результат.ТекстОшибки = "Не удалось сформировать отчет:" + Символы.ПС + Подключение.ТекстОшибки;

		Возврат Результат;
	КонецЕсли;

	ОтчетОбъект				= Результат.Объект;
	КомпоновщикНастроекКД	= ОтчетОбъект.КомпоновщикНастроек;

	ДопСвойства = КомпоновщикНастроекКД.ПользовательскиеНастройки.ДополнительныеСвойства;
	ДопСвойства.Вставить("КлючВарианта", Результат.КлючВарианта);

	// Проверка корректности данных, по которым формируется отчет.
	Если ПроверятьЗаполнение Тогда
		ИсходныеСообщенияПользователю	= ПолучитьСообщенияПользователю(Истина);
		ПроверкаПройдена				= ОтчетОбъект.ПроверитьЗаполнение();
		СообщенияПользователю			= ПолучитьСообщенияПользователю(Истина);
		Для Каждого Сообщение Из ИсходныеСообщенияПользователю Цикл
			Сообщение.Сообщить();
		КонецЦикла;
		Если Не ПроверкаПройдена Тогда
			Результат.ТекстОшибки = "Отчет не прошел проверку заполнения:";
			Для Каждого Сообщение Из СообщенияПользователю Цикл
				Результат.ТекстОшибки = Результат.ТекстОшибки + Символы.ПС + Сообщение.Текст;
			КонецЦикла;

			Возврат Результат;
		КонецЕсли;
	КонецЕсли;

	Попытка
		ИспользуемыеТаблицы = ИспользуемыеТаблицы(Результат.СхемаКД);
		ИспользуемыеТаблицы.Добавить(Результат.ПолноеИмя);
		Если Результат.НастройкиФормы.События.ПриОпределенииИспользуемыхТаблиц Тогда
			ОтчетОбъект.ПриОпределенииИспользуемыхТаблиц(Результат.КлючВарианта, ИспользуемыеТаблицы);
		КонецЕсли;
		Результат.ДанныеЕщеОбновляются = ПроверитьИспользуемыеТаблицы(ИспользуемыеТаблицы, Ложь);
	Исключение
		ТекстОшибки = "Не удалось определить используемые таблицы:";
		ТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки, Результат.СсылкаВарианта);
	КонецПопытки;

	// Формирование и оценка скорости.

	ИмяКлючевойОперации	= БазоваяПодсистемаКлиентСервер.СвойствоСтруктуры(Параметры, "ИмяКлючевойОперации");
	ВыполнятьЗамеры		= ТипЗнч(ИмяКлючевойОперации) = Тип("Строка") И Не ПустаяСтрока(ИмяКлючевойОперации) И ВыполнятьЗамеры();
	Если ВыполнятьЗамеры Тогда
		// Зарезервировано для новых подсистем
	КонецЕсли;

	ОтчетОбъект.СкомпоноватьРезультат(Результат.ТабличныйДокумент, Результат.Расшифровка);

	Если ВыполнятьЗамеры Тогда
		// Зарезервировано для новых подсистем;
	КонецЕсли;

	// Регистрация результата.
	Если ДопСвойства <> КомпоновщикНастроекКД.ПользовательскиеНастройки.ДополнительныеСвойства Тогда
		НовыеДопСвойства	= КомпоновщикНастроекКД.ПользовательскиеНастройки.ДополнительныеСвойства;
		БазоваяПодсистемаКлиентСервер.ДополнитьСтруктуру(НовыеДопСвойства, ДопСвойства, Ложь);
		ДопСвойства			= НовыеДопСвойства;
	КонецЕсли;

	Модифицирован = БазоваяПодсистемаКлиентСервер.СвойствоСтруктуры(ДопСвойства, "ВариантМодифицирован");
	Если Модифицирован = Истина Тогда
		Результат.ВариантМодифицирован	= Истина;
		Результат.НастройкиКД			= КомпоновщикНастроекКД.Настройки;
	КонецЕсли;

	Модифицированы = БазоваяПодсистемаКлиентСервер.СвойствоСтруктуры(ДопСвойства, "ПользовательскиеНастройкиМодифицированы");
	Если Результат.ВариантМодифицирован Или Модифицированы = Истина Тогда
		Результат.ПользовательскиеНастройкиМодифицированы	= Истина;
		Результат.ПользовательскиеНастройкиКД				= КомпоновщикНастроекКД.ПользовательскиеНастройки;
	КонецЕсли;

	Если ПолучатьФлажокПустой Тогда
		Если ДопСвойства.Свойство("ОтчетПустой") Тогда
			Пустой = ДопСвойства.ОтчетПустой;
		Иначе
			Пустой = ОтчетПустой(ОтчетОбъект);
		КонецЕсли;
		Результат.Вставить("Пустой", Пустой);
	КонецЕсли;

	НастройкиПечати = Результат.НастройкиФормы.Печать;
	НастройкиПечати.Вставить("КлючПараметровПечати", ВариантыОтчетовКлиентСервер.КлючУникальности(Результат.ПолноеИмя, Результат.КлючВарианта));
	ЗаполнитьЗначенияСвойств(Результат.ТабличныйДокумент, НастройкиПечати);

	Результат.Успех = Истина;

	// Чистка мусора.

	ДопСвойства.Удалить("ВариантМодифицирован");
	ДопСвойства.Удалить("ПользовательскиеНастройкиМодифицированы");
	ДопСвойства.Удалить("КлючВарианта");
	ДопСвойства.Удалить("ОтчетПустой");

	Возврат Результат;
КонецФункции

// Получает объект отчета по ссылке варианта отчета.
//
// Параметры:
//   Параметры - Структура - Параметры подключения и формирования отчета.
//       * СсылкаВарианта - СправочникСсылка.ВариантыОтчетов - Ссылка варианта отчета.
//       * СсылкаОтчета   - Произвольный - Ссылка отчета.
//       * КлючВарианта   - Строка - Имя предопределенного или идентификатор пользовательского варианта отчета.
//       * ИдентификаторФормы - Неопределено, УникальныйИдентификатор - Идентификатор формы, из которой подключается отчет.
//
// Возвращаемое значение:
//   Структура - Параметры отчета, в том числе Объект отчета.
//       * СсылкаОтчета - Произвольный     - Ссылка отчета.
//       * ПолноеИмя    - Строка           - Полное имя отчета.
//       * Метаданные   - ОбъектМетаданных - Метаданные отчета.
//       * Объект       - ОтчетОбъект.<Имя отчета>, ВнешнийОтчет - Объект отчета.
//           ** КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Настройки отчета.
//           ** СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема отчета.
//       * КлючВарианта - Строка           - Имя предопределенного или идентификатор пользовательского варианта отчета.
//       * АдресСхемы   - Строка           - Адрес временного хранилища по которому размещена схема отчета.
//       * Успех        - Булево           - Истина если удалось подключить отчет.
//       * ТекстОшибки  - Строка           - Текст ошибки.
//
Функция ПодключитьОтчетИЗагрузитьНастройки(Параметры) Экспорт
	Результат = Новый Структура("СсылкаВарианта, СсылкаОтчета, КлючВарианта, НастройкиФормы,
		|Объект, Метаданные, ПолноеИмя,
		|СхемаКД, АдресСхемы, СхемаМодифицирована, НастройкиКД, ПользовательскиеНастройкиКД,
		|ТекстОшибки, Успех");
	ЗаполнитьЗначенияСвойств(Результат, Параметры);
	Результат.Успех					= Ложь;
	Результат.СхемаМодифицирована	= Ложь;

	// Поддержка возможности прямого выбора ссылок дополнительных отчетов в рассылках отчетов.
	Если ТипЗнч(Результат.НастройкиКД) <> Тип("НастройкиКомпоновкиДанных") И Результат.КлючВарианта = Неопределено И Результат.Объект = Неопределено И ТипЗнч(Результат.СсылкаВарианта) = ВариантыОтчетовКлиентСервер.ТипСсылкиДополнительногоОтчета() Тогда
		// Автоопределение ключа и ссылки варианта если передана только ссылка доп. отчета.
		Результат.СсылкаОтчета		= Результат.СсылкаВарианта;
		Результат.СсылкаВарианта	= Неопределено;
		ПодключениеОтчета			= ПодключитьОтчетОбъект(Результат.СсылкаОтчета, Истина);
		Если Не ПодключениеОтчета.Успех Тогда
			Результат.ТекстОшибки = ПодключениеОтчета.ТекстОшибки;

			Возврат Результат;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Результат, ПодключениеОтчета, "Объект, Метаданные, ПолноеИмя");
		ПодключениеОтчета.Очистить();
		Если Результат.Объект.СхемаКомпоновкиДанных = Неопределено Тогда
			Результат.Успех = Истина;

			Возврат Результат;
		КонецЕсли;
		ВариантНастроекКД			= Результат.Объект.СхемаКомпоновкиДанных.ВариантыНастроек.Получить(0);
		Результат.КлючВарианта		= ВариантНастроекКД.Имя;
		Результат.НастройкиКД		= ВариантНастроекКД.Настройки;
		Результат.СсылкаВарианта	= ВариантОтчета(Результат.СсылкаОтчета, Результат.КлючВарианта);
	КонецЕсли;

	НадоПрочитатьСсылкуОтчета	= (Результат.Объект = Неопределено И Результат.СсылкаОтчета = Неопределено);
	НадоПрочитатьНастройки		= (ТипЗнч(Результат.НастройкиКД) <> Тип("НастройкиКомпоновкиДанных"));
	Если НадоПрочитатьСсылкуОтчета Или НадоПрочитатьНастройки Тогда
		Если ТипЗнч(Результат.СсылкаВарианта) <> Тип("СправочникСсылка.ВариантыОтчетов") Или Не ЗначениеЗаполнено(Результат.СсылкаВарианта) Тогда
			Если Не НадоПрочитатьСсылкуОтчета И Результат.КлючВарианта <> Неопределено Тогда
				Результат.СсылкаВарианта = ВариантОтчета(Результат.СсылкаОтчета, Результат.КлючВарианта);
			КонецЕсли;
			Если Результат.СсылкаВарианта = Неопределено Тогда
				Результат.ТекстОшибки = СтрШаблон("В методе ""%1"" не указаны параметры ""%2"".", "ПодключитьОтчетИЗагрузитьНастройки", "СсылкаВарианта, СсылкаОтчета, КлючВарианта");
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		ИменаСвойств			= "КлючВарианта" + ?(НадоПрочитатьСсылкуОтчета, ", Отчет", "") + ?(НадоПрочитатьНастройки, ", Настройки", "");
		СвойстваВарианта		= БазоваяПодсистемаСервер.ЗначенияРеквизитовОбъекта(Результат.СсылкаВарианта, ИменаСвойств);
		Результат.КлючВарианта	= СвойстваВарианта.КлючВарианта;
		Если НадоПрочитатьСсылкуОтчета Тогда
			Результат.СсылкаОтчета = СвойстваВарианта.Отчет;
		КонецЕсли;
		Если НадоПрочитатьНастройки Тогда
			Результат.НастройкиКД	= СвойстваВарианта.Настройки.Получить();
			НадоПрочитатьНастройки	= (ТипЗнч(Результат.НастройкиКД) <> Тип("НастройкиКомпоновкиДанных"));
		КонецЕсли;
	КонецЕсли;

	Если Результат.Объект = Неопределено Тогда
		ПодключениеОтчета = ПодключитьОтчетОбъект(Результат.СсылкаОтчета, Истина);
		Если Не ПодключениеОтчета.Успех Тогда
			Результат.ТекстОшибки = ПодключениеОтчета.ТекстОшибки;
			Возврат Результат;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Результат, ПодключениеОтчета, "Объект, Метаданные, ПолноеИмя");
		ПодключениеОтчета.Очистить();
		ПодключениеОтчета = Неопределено;
	ИначеЕсли Результат.ПолноеИмя = Неопределено Тогда
		Результат.Метаданные	= Результат.Объект.Метаданные();
		Результат.ПолноеИмя		= Результат.Метаданные.ПолноеИмя();
	КонецЕсли;

	ОтчетОбъект					= Результат.Объект;
	КомпоновщикНастроекКД		= ОтчетОбъект.КомпоновщикНастроек;

	Результат.НастройкиФормы	= НастройкиФормыОтчета(Результат.СсылкаОтчета, Результат.КлючВарианта, ОтчетОбъект);

	Если ОтчетОбъект.СхемаКомпоновкиДанных = Неопределено Тогда
		Результат.Успех = Истина;

		Возврат Результат;
	КонецЕсли;

	// Чтение настроек.
	Если НадоПрочитатьНастройки Тогда
		ВариантыНастроекКД	= ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек;
		ВариантНастроекКД	= ВариантыНастроекКД.Найти(Результат.КлючВарианта);
		Если ВариантНастроекКД = Неопределено Тогда
			Результат.ТекстОшибки = СтрШаблон("Вариант ""%1"" (ключ ""%2"") не найден в схеме отчета ""%3"".",
				Строка(Результат.СсылкаВарианта),
				Результат.КлючВарианта,
				Строка(Результат.СсылкаОтчета));
			Возврат Результат;
		КонецЕсли;
		Результат.НастройкиКД = ВариантНастроекКД.Настройки;
	КонецЕсли;

	// Инициализация схемы.
	АдресСхемыЗаполнен = (ТипЗнч(Результат.АдресСхемы) = Тип("Строка") И ЭтоАдресВременногоХранилища(Результат.АдресСхемы));
	Если АдресСхемыЗаполнен И ТипЗнч(Результат.СхемаКД) <> Тип("СхемаКомпоновкиДанных") Тогда
		Результат.СхемаКД = ПолучитьИзВременногоХранилища(Результат.АдресСхемы);
	КонецЕсли;

	Результат.СхемаМодифицирована = (ТипЗнч(Результат.СхемаКД) = Тип("СхемаКомпоновкиДанных"));
	Если Результат.СхемаМодифицирована Тогда
		ОтчетОбъект.СхемаКомпоновкиДанных = Результат.СхемаКД;
	КонецЕсли;

	Если Не АдресСхемыЗаполнен И ТипЗнч(ОтчетОбъект.СхемаКомпоновкиДанных) = Тип("СхемаКомпоновкиДанных") Тогда
		ИдентификаторФормы = БазоваяПодсистемаКлиентСервер.СвойствоСтруктуры(Параметры, "ИдентификаторФормы");
		Если ТипЗнч(ИдентификаторФормы) = Тип("УникальныйИдентификатор") Тогда
			АдресСхемыЗаполнен		= Истина;
			Результат.АдресСхемы	= ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, ИдентификаторФормы);
		ИначеЕсли Результат.СхемаМодифицирована Тогда
			АдресСхемыЗаполнен		= Истина;
			Результат.АдресСхемы	= ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных);
		КонецЕсли;
	КонецЕсли;

	Если АдресСхемыЗаполнен Тогда
		КомпоновщикНастроекКД.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Результат.АдресСхемы));
	КонецЕсли;

	Если Результат.НастройкиФормы.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		КлючСхемы = БазоваяПодсистемаКлиентСервер.СвойствоСтруктуры(Параметры, "КлючСхемы");
		ОтчетОбъект.ПередЗагрузкойНастроекВКомпоновщик(Результат, КлючСхемы, Результат.КлючВарианта, Результат.НастройкиКД, Результат.ПользовательскиеНастройкиКД);
	КонецЕсли;

	ФиксированныеНастройкиКД = БазоваяПодсистемаКлиентСервер.СвойствоСтруктуры(Параметры, "ФиксированныеНастройкиКД");
	Если ТипЗнч(ФиксированныеНастройкиКД) = Тип("НастройкиКомпоновкиДанных") И КомпоновщикНастроекКД.ФиксированныеНастройки <> ФиксированныеНастройкиКД Тогда
		КомпоновщикНастроекКД.ЗагрузитьФиксированныеНастройки(ФиксированныеНастройкиКД);
	КонецЕсли;

	ВариантыОтчетовКлиентСервер.ЗагрузитьНастройки(КомпоновщикНастроекКД, Результат.НастройкиКД, Результат.ПользовательскиеНастройкиКД);

	Результат.Успех = Истина;

	Возврат Результат;
КонецФункции

// Обновляет состав справочника ПользовательскиеНастройкиОтчетов после сохранения новой настройки.
//   Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   Настройки - ОбъектМетаданных - Передается "как есть" из процедуры ПриСохраненииПользовательскихНастроекНаСервере.
//
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Форма, Настройки) Экспорт
	РеквизитыФормы = Новый Структура("КлючОбъекта, ВариантСсылка");
	ЗаполнитьЗначенияСвойств(РеквизитыФормы, Форма);
	Если Не ЗначениеЗаполнено(РеквизитыФормы.КлючОбъекта) Или Не ЗначениеЗаполнено(РеквизитыФормы.ВариантСсылка) Тогда
		ОтчетОбъект		= Форма.РеквизитФормыВЗначение("Отчет");
		ОтчетМетаданные = ОтчетОбъект.Метаданные();
		Если Не ЗначениеЗаполнено(РеквизитыФормы.КлючОбъекта) Тогда
			РеквизитыФормы.КлючОбъекта = ОтчетМетаданные.ПолноеИмя();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(РеквизитыФормы.ВариантСсылка) Тогда
			ОтчетИнформация = СформироватьИнформациюОбОтчетеПоПолномуИмени(РеквизитыФормы.КлючОбъекта);
			Если НЕ ЗначениеЗаполнено(ОтчетИнформация.ТекстОшибки) Тогда
				ОтчетСсылка = ОтчетИнформация.Отчет;
			Иначе
				ОтчетСсылка = РеквизитыФормы.КлючОбъекта;
			КонецЕсли;
			РеквизитыФормы.ВариантСсылка = ВариантОтчета(ОтчетСсылка, Форма.КлючТекущегоВарианта);
		КонецЕсли;
	КонецЕсли;

	КлючНастроек		= РеквизитыФормы.КлючОбъекта + "/" + Форма.КлючТекущегоВарианта;
	СписокНастроек		= ХранилищеПользовательскихНастроекОтчетов.ПолучитьСписок(КлючНастроек);
	КоличествоНастроек	= СписокНастроек.Количество();
	ПользовательСсылка	= ПользователиКлиентСервер.АвторизованныйПользователь();

	Запрос				= Новый Запрос;
	Запрос.Текст		= "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	            		  |	ПользовательскиеНастройкиОтчетов.Ссылка КАК Ссылка,
	            		  |	ПользовательскиеНастройкиОтчетов.ВерсияДанных КАК ВерсияДанных,
	            		  |	ПользовательскиеНастройкиОтчетов.ПометкаУдаления КАК ПометкаУдаления,
	            		  |	ПользовательскиеНастройкиОтчетов.Наименование КАК Наименование,
	            		  |	ПользовательскиеНастройкиОтчетов.Вариант КАК Вариант,
	            		  |	ПользовательскиеНастройкиОтчетов.Пользователь КАК Пользователь,
	            		  |	ПользовательскиеНастройкиОтчетов.КлючПользовательскойНастройки КАК КлючПользовательскойНастройки,
	            		  |	ПользовательскиеНастройкиОтчетов.Предопределенный КАК Предопределенный,
	            		  |	ПользовательскиеНастройкиОтчетов.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	            		  |ИЗ
	            		  |	Справочник.ПользовательскиеНастройкиОтчетов КАК ПользовательскиеНастройкиОтчетов
	            		  |ГДЕ
	            		  |	ПользовательскиеНастройкиОтчетов.Вариант = &ВариантСсылка
	            		  |	И ПользовательскиеНастройкиОтчетов.Пользователь = &ПользовательСсылка
	            		  |
	            		  |УПОРЯДОЧИТЬ ПО
	            		  |	ПользовательскиеНастройкиОтчетов.ПометкаУдаления";
	Запрос.УстановитьПараметр("ВариантСсылка",		РеквизитыФормы.ВариантСсылка);
	Запрос.УстановитьПараметр("ПользовательСсылка", ПользовательСсылка);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЭлементСписка = СписокНастроек.НайтиПоЗначению(Выборка.КлючПользовательскойНастройки);

		ПометкаУдаления = (ЭлементСписка = Неопределено);
		Если ПометкаУдаления <> Выборка.ПометкаУдаления Тогда
			НастройкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			НастройкаОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
		КонецЕсли;
		Если ПометкаУдаления Тогда
			Если КоличествоНастроек = 0 Тогда
				Прервать;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если Выборка.Наименование <> ЭлементСписка.Представление Тогда
			НастройкаОбъект					= Выборка.Ссылка.ПолучитьОбъект();
			НастройкаОбъект.Наименование	= ЭлементСписка.Представление;
			// Блокировка не устанавливается, т.к. пользовательские настройки разрезаются по пользователям,
			// поэтому конкурентной работы не ожидается.
			НастройкаОбъект.Записать();
		КонецЕсли;

		СписокНастроек.Удалить(ЭлементСписка);
		КоличествоНастроек = КоличествоНастроек - 1;
	КонецЦикла;

	Для Каждого ЭлементСписка Из СписокНастроек Цикл
		НастройкаОбъект									= Справочники.ПользовательскиеНастройкиОтчетов.СоздатьЭлемент();
		НастройкаОбъект.Наименование					= ЭлементСписка.Представление;
		НастройкаОбъект.КлючПользовательскойНастройки	= ЭлементСписка.Значение;
		НастройкаОбъект.Вариант							= РеквизитыФормы.ВариантСсылка;
		НастройкаОбъект.Пользователь					= ПользовательСсылка;
		// Блокировка не устанавливается, т.к. пользовательские настройки разрезаются по пользователям,
		// поэтому конкурентной работы не ожидается.
		НастройкаОбъект.Записать();
	КонецЦикла;
КонецПроцедуры


#Область Отчеты

// Инициализирует компоновщик на основании схемы и загружает новые настройки.
// Для вызова из обработчика события ПередЗагрузкойНастроекВКомпоновщик формы отчета, расположенного в модуле
// объекта отчета.
//
// Параметры:
//   ОтчетОбъект - ОтчетОбъект, ВнешнийОтчетОбъект - отчет, для которого необходимо подключить схему.
//   Контекст    - Произвольный          - передается "как есть" из одноименного параметра события
//                                         ПередЗагрузкойНастроекВКомпоновщик.
//   СхемаКД     - СхемаКомпоновкиДанных - схема, которую необходимо подключить.
//   КлючСхемы   - Строка                - идентификатор новой схемы, который будет записан в дополнительные свойства
//                                         пользовательских настроек.
//
Процедура ПодключитьСхему(ОтчетОбъект, Контекст, СхемаКД, КлючСхемы) Экспорт
	СобытиеИзФормыОтчета = (ТипЗнч(Контекст) = Тип("УправляемаяФорма"));

	ОтчетОбъект.СхемаКомпоновкиДанных = СхемаКД;
	Если СобытиеИзФормыОтчета Тогда
		НастройкиОтчета	= Контекст.НастройкиОтчета;
		АдресСхемы		= НастройкиОтчета.АдресСхемы;
		НастройкиОтчета.Вставить("СхемаМодифицирована", Истина);
	Иначе
		АдресСхемыЗаполнен = (ТипЗнч(Контекст.АдресСхемы) = Тип("Строка") И ЭтоАдресВременногоХранилища(Контекст.АдресСхемы));
		Если Не АдресСхемыЗаполнен Тогда
			ИдентификаторФормы = БазоваяПодсистемаКлиентСервер.СвойствоСтруктуры(Контекст, "ИдентификаторФормы");
			Если ТипЗнч(ИдентификаторФормы) = Тип("УникальныйИдентификатор") Тогда
				АдресСхемыЗаполнен	= Истина;
				Контекст.АдресСхемы	= ПоместитьВоВременноеХранилище(СхемаКД, ИдентификаторФормы);
			КонецЕсли;
		КонецЕсли;
		Если АдресСхемыЗаполнен Тогда
			АдресСхемы = Контекст.АдресСхемы;
		Иначе
			АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКД);
		КонецЕсли;
		Контекст.СхемаМодифицирована = Истина;
	КонецЕсли;
	ПоместитьВоВременноеХранилище(СхемаКД, АдресСхемы);

	ОтчетОбъект.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));

	Если СобытиеИзФормыОтчета Тогда
		ЗначениеВДанныеФормы(ОтчетОбъект, Контекст.Отчет);
	КонецЕсли;
КонецПроцедуры

Функция РасширеннаяИнформацияОНастройках(КомпоновщикНастроекКД, НастройкиОтчета, ОтчетОбъектИлиПолноеИмя, УсловияВывода = Неопределено) Экспорт
	НастройкиКД					= КомпоновщикНастроекКД.Настройки;
	ПользовательскиеНастройкиКД = КомпоновщикНастроекКД.ПользовательскиеНастройки;

	ДополнительныеНастройкиЭлементов = БазоваяПодсистемаКлиентСервер.СвойствоСтруктуры(ПользовательскиеНастройкиКД.ДополнительныеСвойства, "ЭлементыФормы");
	Если ДополнительныеНастройкиЭлементов = Неопределено Тогда
		ДополнительныеНастройкиЭлементов = Новый Соответствие;
	КонецЕсли;

	Информация = Новый Структура;
	Информация.Вставить("ТолькоПользовательские", Ложь);
	Информация.Вставить("ТолькоБыстрые", Ложь);
	Информация.Вставить("ИдентификаторТекущегоУзлаКД", Неопределено);
	Если УсловияВывода <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Информация, УсловияВывода);
	КонецЕсли;

	Информация.Вставить("НастройкиКД", НастройкиКД);

	Информация.Вставить("НастройкиОтчета",           НастройкиОтчета);
	Информация.Вставить("ОтчетОбъектИлиПолноеИмя",   ОтчетОбъектИлиПолноеИмя);
	Информация.Вставить("ДеревоВарианта",            ДеревоВарианта());
	Информация.Вставить("НастройкиВарианта",         ТаблицаНастроекВарианта());
	Информация.Вставить("ПользовательскиеНастройки", ТаблицаПользовательскихНастроек());

	Информация.Вставить("ОтключаемыеСвязи", Новый Массив);
	Информация.Вставить("Связи", Новый Структура);
	Информация.Связи.Вставить("ПоТипу",             ТаблицаСвязейПоТипу());
	Информация.Связи.Вставить("ПараметровВыбора",   ТаблицаСвязейПараметровВыбора());
	Информация.Связи.Вставить("ОбъектовМетаданных", ТаблицаСвязейОбъектовМетаданных(НастройкиОтчета, Информация.ОтчетОбъектИлиПолноеИмя));

	Информация.Вставить("ДополнительныеНастройкиЭлементов",   ДополнительныеНастройкиЭлементов);
	Информация.Вставить("СоответствиеИменОбъектовМетаданных", Новый Соответствие);
	Информация.Вставить("Поиск", Новый Структура);
	Информация.Поиск.Вставить("НастройкиВариантаПоПолюКД", Новый Соответствие);
	Информация.Поиск.Вставить("ПользовательскиеНастройки", Новый Соответствие);
	Информация.Вставить("ЕстьБыстрыеНастройки", Ложь);
	Информация.Вставить("ЕстьОбычныеНастройки", Ложь);
	Информация.Вставить("ЕстьНесуществующиеПоля", Ложь);

	Информация.Вставить("ЕстьВложенныеОтчеты", Ложь);
	Информация.Вставить("ЕстьВложенныеОтборы", Ложь);
	Информация.Вставить("ЕстьВложенноеОформление", Ложь);
	Информация.Вставить("ЕстьВложенныеПоля", Ложь);
	Информация.Вставить("ЕстьВложенныеСортировки", Ложь);

	Для Каждого ПользовательскаяНастройкаКД Из ПользовательскиеНастройкиКД.Элементы Цикл
		СвойстваНастройки								= Информация.ПользовательскиеНастройки.Добавить();
		СвойстваНастройки.ПользовательскаяНастройкаКД	= ПользовательскаяНастройкаКД;
		СвойстваНастройки.Идентификатор					= ПользовательскаяНастройкаКД.ИдентификаторПользовательскойНастройки;
		СвойстваНастройки.ИндексВКоллекции				= ПользовательскиеНастройкиКД.Элементы.Индекс(ПользовательскаяНастройкаКД);
		СвойстваНастройки.ИдентификаторКД				= ПользовательскиеНастройкиКД.ПолучитьИдентификаторПоОбъекту(ПользовательскаяНастройкаКД);
		СвойстваНастройки.Тип							= ВариантыОтчетовКлиентСервер.ТипНастройкиСтрокой(ТипЗнч(ПользовательскаяНастройкаКД));
		Информация.Поиск.ПользовательскиеНастройки.Вставить(СвойстваНастройки.Идентификатор, СвойстваНастройки);
	КонецЦикла;

	СтрокаДерева			= ЗарегистрироватьУзелДереваВарианта(Информация, НастройкиКД, НастройкиКД, Информация.ДеревоВарианта.Строки, "Отчет");
	СтрокаДерева.Глобальная = Истина;
	Информация.Вставить("ДеревоВариантаКорневаяСтрока", СтрокаДерева);
	Если Информация.ИдентификаторТекущегоУзлаКД = Неопределено Тогда
		Информация.ИдентификаторТекущегоУзлаКД = СтрокаДерева.ИдентификаторКД;
		Если Не Информация.ТолькоПользовательские Тогда
			СтрокаДерева.ВыводРазрешен = Истина;
		КонецЕсли;
	КонецЕсли;

	ЗарегистрироватьНастройкиВарианта(НастройкиКД, Информация);

	ЗарегистрироватьСвязиОтВедущих(Информация);

	Возврат Информация;
КонецФункции

Функция ДеревоВарианта()
	Результат = Новый ДеревоЗначений;

	// Узлы СКД.
	Результат.Колонки.Добавить("УзелКД");
	Результат.Колонки.Добавить("ДоступнаяНастройкаКД");
	Результат.Колонки.Добавить("ПользовательскаяНастройкаКД");

	// Прикладная структура.
	Результат.Колонки.Добавить("ПользовательскаяНастройка");

	// Поиск этой настройки в узле.
	Результат.Колонки.Добавить("ИдентификаторКД");

	// Связь с узлами СКД.
	Результат.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

	// Тип настройки.
	Результат.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Подтип", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Состояние", Новый ОписаниеТипов("Строка"));

	Результат.Колонки.Добавить("ЕстьСтруктура", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ЕстьПоляИОформление", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Глобальная", Новый ОписаниеТипов("Булево"));

	// Содержимое настройки.
	Результат.Колонки.Добавить("СодержитОтборы", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("СодержитПоля", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("СодержитСортировки", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("СодержитУсловноеОформление", Новый ОписаниеТипов("Булево"));

	// Вывод.
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПредставлениеПоУмолчанию", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Заголовок", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ВыводРазрешен", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ВыводитьТолькоФлажок", Новый ОписаниеТипов("Булево"));

	Возврат Результат;
КонецФункции

Функция ТаблицаНастроекВарианта()
	Результат = Новый ДеревоЗначений;

	// Узлы СКД.
	Результат.Колонки.Добавить("ЭлементКД");
	Результат.Колонки.Добавить("ДоступнаяНастройкаКД");
	Результат.Колонки.Добавить("ПользовательскаяНастройкаКД");

	// Прикладная структура.
	Результат.Колонки.Добавить("СтрокаДерева");
	Результат.Колонки.Добавить("ПользовательскаяНастройка");
	Результат.Колонки.Добавить("Владелец");
	Результат.Колонки.Добавить("Глобальная", Новый ОписаниеТипов("Булево"));

	// Поиск этой настройки в узле.
	Результат.Колонки.Добавить("ИмяКоллекции", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИдентификаторКД");

	// Связь с узлами СКД.
	Результат.Колонки.Добавить("Идентификатор",			Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИдентификаторЭлемента",	Новый ОписаниеТипов("Строка"));

	// Описание настройки.
	Результат.Колонки.Добавить("Тип",		Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Подтип",	Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Состояние",	Новый ОписаниеТипов("Строка"));

	Результат.Колонки.Добавить("ПолеКД");
	Результат.Колонки.Добавить("Значение");
	Результат.Колонки.Добавить("ВидСравнения");
	Результат.Колонки.Добавить("ВводСписком", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ИнформацияОТипах");
	Результат.Колонки.Добавить("ФормаВыбора", Новый ОписаниеТипов("Строка"));

	Результат.Колонки.Добавить("ОтмеченныеЗначения");
	Результат.Колонки.Добавить("ПараметрыВыбора");

	Результат.Колонки.Добавить("СвязьПоТипу");
	Результат.Колонки.Добавить("СвязиПараметровВыбора");
	Результат.Колонки.Добавить("СвязиПоМетаданным");
	Результат.Колонки.Добавить("ОграничениеТипа");

	// API
	Результат.Колонки.Добавить("ОписаниеТипов");
	Результат.Колонки.Добавить("ЗначенияДляВыбора");
	Результат.Колонки.Добавить("ЗапросЗначенийВыбора");
	Результат.Колонки.Добавить("СписокЗначенийПереопределен",           Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("БыстрыйВыбор",                          Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ОграничиватьВыборУказаннымиЗначениями", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("СобытиеПриИзменении",					Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Ширина",								Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ВыводитьВГруппеОсновныхНастроек",		Новый ОписаниеТипов("Булево"));

	// Вывод.
	Результат.Колонки.Добавить("ПредставлениеПоУмолчанию",	Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Представление",				Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ВыводРазрешен",				Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ВыводитьФлажок",			Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ВыборГруппИЭлементов");
	Результат.Колонки.Добавить("ВыводитьТолькоФлажок",		Новый ОписаниеТипов("Булево"));

	Возврат Результат;
КонецФункции

Функция ТаблицаПользовательскихНастроек()
	Результат = Новый ТаблицаЗначений;

	// Узлы СКД.
	Результат.Колонки.Добавить("УзелКД");
	Результат.Колонки.Добавить("НастройкаВариантаКД");
	Результат.Колонки.Добавить("ПользовательскаяНастройкаКД");
	Результат.Колонки.Добавить("ДоступнаяНастройкаКД");

	// Прикладная структура.
	Результат.Колонки.Добавить("СтрокаДерева");
	Результат.Колонки.Добавить("НастройкаВарианта");

	// Поиск этой настройки в узле.
	Результат.Колонки.Добавить("ИдентификаторКД");
	Результат.Колонки.Добавить("ИндексВКоллекции", Новый ОписаниеТипов("Число"));

	// Связь с узлами СКД.
	Результат.Колонки.Добавить("Идентификатор",			Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИдентификаторЭлемента",	Новый ОписаниеТипов("Строка"));

	// Описание настройки.
	Результат.Колонки.Добавить("Тип",		Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Подтип",	Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Состояние",	Новый ОписаниеТипов("Строка"));

	Результат.Колонки.Добавить("ПолеКД");
	Результат.Колонки.Добавить("Значение");
	Результат.Колонки.Добавить("ВидСравнения");
	Результат.Колонки.Добавить("ВводСписком", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ИнформацияОТипах");

	Результат.Колонки.Добавить("ОтмеченныеЗначения");
	Результат.Колонки.Добавить("ПараметрыВыбора");

	// API
	Результат.Колонки.Добавить("ОписаниеТипов");
	Результат.Колонки.Добавить("ЗначенияДляВыбора");
	Результат.Колонки.Добавить("ЗапросЗначенийВыбора");
	Результат.Колонки.Добавить("БыстрыйВыбор",                          Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ОграничиватьВыборУказаннымиЗначениями", Новый ОписаниеТипов("Булево"));

	// Вывод.
	Результат.Колонки.Добавить("ПредставлениеПоУмолчанию",	Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Представление",				Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Быстрая",					Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Обычная",					Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ВыводРазрешен",				Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ВыводитьФлажок",			Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ВыводитьТолькоФлажок",		Новый ОписаниеТипов("Булево"));

	Результат.Колонки.Добавить("ТипЭлементов", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ВыборГруппИЭлементов");

	// Дополнительные свойства.
	Результат.Колонки.Добавить("Дополнительно", Новый ОписаниеТипов("Структура"));

	Возврат Результат;
КонецФункции

Функция ТаблицаСвязейПоТипу()
	// Связи из СКД.
	ТаблицаСвязейПоТипу = Новый ТаблицаЗначений;
	ТаблицаСвязейПоТипу.Колонки.Добавить("Ведущий");
	ТаблицаСвязейПоТипу.Колонки.Добавить("ВедущийПолеКД");
	ТаблицаСвязейПоТипу.Колонки.Добавить("Подчиненный");
	ТаблицаСвязейПоТипу.Колонки.Добавить("ПодчиненныйИмяПараметра");

	Возврат ТаблицаСвязейПоТипу;
КонецФункции

Функция ТаблицаСвязейПараметровВыбора()
	ТаблицаСвязейПараметровВыбора = Новый ТаблицаЗначений;
	ТаблицаСвязейПараметровВыбора.Колонки.Добавить("Ведущий");
	ТаблицаСвязейПараметровВыбора.Колонки.Добавить("ВедущийПолеКД");
	ТаблицаСвязейПараметровВыбора.Колонки.Добавить("Подчиненный");
	ТаблицаСвязейПараметровВыбора.Колонки.Добавить("ПодчиненныйИмяПараметра");
	ТаблицаСвязейПараметровВыбора.Колонки.Добавить("Действие");

	Возврат ТаблицаСвязейПараметровВыбора;
КонецФункции

Функция ТаблицаСвязейОбъектовМетаданных(НастройкиОтчета, ОтчетОбъектИлиПолноеИмя)
	// Связи из метаданных.
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ВедущийТип",          Новый ОписаниеТипов("Тип"));
	Результат.Колонки.Добавить("ПодчиненныйТип",      Новый ОписаниеТипов("Тип"));
	Результат.Колонки.Добавить("ПодчиненныйРеквизит", Новый ОписаниеТипов("Строка"));

	// Механизмы расширения.
	Если НастройкиОтчета.События.ДополнитьСвязиОбъектовМетаданных Тогда // ... можно переопределить локально для отчета.
		ОтчетОбъект(ОтчетОбъектИлиПолноеИмя).ДополнитьСвязиОбъектовМетаданных(Результат);
	КонецЕсли;

	Результат.Колонки.Добавить("ЕстьВедущие",			Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ЕстьПодчиненные",		Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Ведущие",				Новый ОписаниеТипов("Массив"));
	Результат.Колонки.Добавить("Подчиненные",			Новый ОписаниеТипов("Массив"));
	Результат.Колонки.Добавить("ВедущийПолноеИмя",		Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПодчиненныйПолноеИмя",	Новый ОписаниеТипов("Строка"));

	Возврат Результат;
КонецФункции

Функция ЗарегистрироватьУзелДереваВарианта(Информация, НастройкиКД, УзелКД, НаборСтрокДерева, Подтип = "")
	СтрокаДерева		= НаборСтрокДерева.Добавить();
	СтрокаДерева.УзелКД = УзелКД;
	СтрокаДерева.Тип	= ВариантыОтчетовКлиентСервер.ТипНастройкиСтрокой(ТипЗнч(УзелКД));
	СтрокаДерева.Подтип = Подтип;
	Если СтрокаДерева.Тип <> "Настройки" Тогда
		СтрокаДерева.Идентификатор = УзелКД.ИдентификаторПользовательскойНастройки;
	КонецЕсли;

	СтрокаДерева.ИдентификаторКД = НастройкиКД.ПолучитьИдентификаторПоОбъекту(УзелКД);
	СтрокаДерева.Глобальная = (Подтип = "Отчет");

	Если СтрокаДерева.Тип = "Настройки" Тогда
		СтрокаДерева.ЕстьСтруктура			= Истина;
		СтрокаДерева.ЕстьПоляИОформление	= Истина;
	ИначеЕсли СтрокаДерева.Тип = "Группировка" Или СтрокаДерева.Тип = "ГруппировкаДиаграммы" Или СтрокаДерева.Тип = "ГруппировкаТаблицы" Тогда
		СтрокаДерева.ЕстьСтруктура			= Истина;
		СтрокаДерева.ЕстьПоляИОформление	= Истина;
	ИначеЕсли СтрокаДерева.Тип = "Таблица" Тогда
		СтрокаДерева.ЕстьПоляИОформление	= Истина;
	ИначеЕсли СтрокаДерева.Тип = "Диаграмма" Тогда
		СтрокаДерева.ЕстьПоляИОформление	= Истина;
	ИначеЕсли СтрокаДерева.Тип = "НастройкиВложенногоОбъекта" Тогда
		СтрокаДерева.ДоступнаяНастройкаКД	= НастройкиКД.ДоступныеОбъекты.Элементы.Найти(УзелКД.ИдентификаторОбъекта);
	ИначеЕсли СтрокаДерева.Тип = "КоллекцияЭлементовСтруктурыТаблицы" Или СтрокаДерева.Тип = "КоллекцияЭлементовСтруктурыДиаграммы" Тогда
		// см. далее.
	Иначе
		Возврат СтрокаДерева;
	КонецЕсли;

	ЗаполнитьПредставлениеИСостояниеНастройки(СтрокаДерева, СтрокаДерева.УзелКД, Неопределено, СтрокаДерева.ДоступнаяНастройкаКД);

	Если СтрокаДерева.ЕстьПоляИОформление Тогда
		СтрокаДерева.Заголовок					= ЗаголовокИзПараметровВывода(УзелКД.ПараметрыВывода);
		СтрокаДерева.СодержитПоля               = НастройкиКД.НаличиеВыбораУЭлемента(УзелКД);
		СтрокаДерева.СодержитУсловноеОформление = НастройкиКД.НаличиеУсловногоОформленияУЭлемента(УзелКД);
	КонецЕсли;

	Если Не Информация.ТолькоБыстрые Тогда
		СтрокаДерева.ВыводРазрешен = (СтрокаДерева.ИдентификаторКД = Информация.ИдентификаторТекущегоУзлаКД);
	КонецЕсли;

	Если ТипЗнч(СтрокаДерева.Идентификатор) = Тип("Строка") И Не ПустаяСтрока(СтрокаДерева.Идентификатор) Тогда
		СвойстваНастройки = Информация.Поиск.ПользовательскиеНастройки.Получить(СтрокаДерева.Идентификатор);
		Если СвойстваНастройки <> Неопределено Тогда
			СтрокаДерева.ПользовательскаяНастройка   = СвойстваНастройки;
			СтрокаДерева.ПользовательскаяНастройкаКД = СвойстваНастройки.ПользовательскаяНастройкаКД;
			ЗарегистрироватьПользовательскуюНастройку(Информация, СвойстваНастройки, СтрокаДерева, Неопределено);
			Если ЗначениеЗаполнено(СтрокаДерева.Заголовок) Тогда
				СвойстваНастройки.Представление = СтрокаДерева.Заголовок;
			КонецЕсли;
			Если Информация.ТолькоПользовательские Тогда
				СтрокаДерева.ВыводРазрешен	= СвойстваНастройки.ВыводРазрешен;
				СтрокаДерева.Состояние		= СвойстваНастройки.Состояние;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если СтрокаДерева.ЕстьСтруктура Тогда
		Для Каждого ВложенныйЭлемент Из УзелКД.Структура Цикл
			ЗарегистрироватьУзелДереваВарианта(Информация, НастройкиКД, ВложенныйЭлемент, СтрокаДерева.Строки);
		КонецЦикла;
		СтрокаДерева.СодержитОтборы     = НастройкиКД.НаличиеОтбораУЭлемента(УзелКД);
		СтрокаДерева.СодержитСортировки = НастройкиКД.НаличиеПорядкаУЭлемента(УзелКД);
	КонецЕсли;

	Если СтрокаДерева.Тип = "Таблица" Тогда
		ЗарегистрироватьУзелДереваВарианта(Информация, НастройкиКД, УзелКД.Строки, СтрокаДерева.Строки, "ТаблицаСтроки");
		ЗарегистрироватьУзелДереваВарианта(Информация, НастройкиКД, УзелКД.Колонки, СтрокаДерева.Строки, "ТаблицаКолонки");
	ИначеЕсли СтрокаДерева.Тип = "Диаграмма" Тогда
		ЗарегистрироватьУзелДереваВарианта(Информация, НастройкиКД, УзелКД.Точки, СтрокаДерева.Строки, "ДиаграммаТочки");
		ЗарегистрироватьУзелДереваВарианта(Информация, НастройкиКД, УзелКД.Серии, СтрокаДерева.Строки, "ДиаграммаСерии");
	ИначеЕсли СтрокаДерева.Тип = "КоллекцияЭлементовСтруктурыТаблицы"
		Или СтрокаДерева.Тип = "КоллекцияЭлементовСтруктурыДиаграммы" Тогда
		Для Каждого ВложенныйЭлемент Из УзелКД Цикл
			ЗарегистрироватьУзелДереваВарианта(Информация, НастройкиКД, ВложенныйЭлемент, СтрокаДерева.Строки);
		КонецЦикла;
	ИначеЕсли СтрокаДерева.Тип = "НастройкиВложенногоОбъекта" Тогда
		Информация.ЕстьВложенныеОтчеты = Истина;
		ЗарегистрироватьУзелДереваВарианта(Информация, НастройкиКД, УзелКД.Настройки, СтрокаДерева.Строки);
	КонецЕсли;

	Если Не СтрокаДерева.Глобальная Тогда
		Если СтрокаДерева.СодержитПоля Тогда
			Информация.ЕстьВложенныеПоля = Истина;
		КонецЕсли;
		Если СтрокаДерева.СодержитУсловноеОформление Тогда
			Информация.ЕстьВложенноеОформление = Истина;
		КонецЕсли;
		Если СтрокаДерева.СодержитОтборы Тогда
			Информация.ЕстьВложенныеОтборы = Истина;
		КонецЕсли;
		Если СтрокаДерева.СодержитСортировки Тогда
			Информация.ЕстьВложенныеСортировки = Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат СтрокаДерева;
КонецФункции

Процедура ЗарегистрироватьНастройкиВарианта(НастройкиКД, Информация)
	ДеревоВарианта		= Информация.ДеревоВарианта;

	Найденные = ДеревоВарианта.Строки.НайтиСтроки(Новый Структура("ЕстьСтруктура", Истина), Истина);
	Для Каждого СтрокаДерева Из Найденные Цикл
		ЗарегистрироватьУзелНастроек(НастройкиКД, Информация, СтрокаДерева, "Отбор");
		ЗарегистрироватьУзелНастроек(НастройкиКД, Информация, СтрокаДерева, "Порядок");
		ЗарегистрироватьУзелНастроек(НастройкиКД, Информация, СтрокаДерева, "Структура");
	КонецЦикла;

	Найденные = ДеревоВарианта.Строки.НайтиСтроки(Новый Структура("ЕстьПоляИОформление", Истина), Истина);
	Для Каждого СтрокаДерева Из Найденные Цикл
		ЗарегистрироватьУзелНастроек(НастройкиКД, Информация, СтрокаДерева, "Выбор");
		ЗарегистрироватьУзелНастроек(НастройкиКД, Информация, СтрокаДерева, "УсловноеОформление");
		ЗарегистрироватьУзелНастроек(НастройкиКД, Информация, СтрокаДерева, "ПараметрыВывода");
	КонецЦикла;
	
	Найденные = ДеревоВарианта.Строки.НайтиСтроки(Новый Структура("Тип", "Настройки"), Истина);
	Для Каждого СтрокаДерева Из Найденные Цикл
		ЗарегистрироватьУзелНастроек(НастройкиКД, Информация, СтрокаДерева, "ПараметрыДанных");
	КонецЦикла;
КонецПроцедуры

Процедура ЗарегистрироватьСвязиОтВедущих(Информация)
	Связи = Информация.Связи;

	// Регистрация связи параметров выбора (динамическая связь, отключаемая флажком Использование).
	Найденные = Связи.ОбъектовМетаданных.НайтиСтроки(Новый Структура("ЕстьПодчиненные, ЕстьВедущие", Истина, Истина));
	Для Каждого СвязьПоМетаданным Из Найденные Цикл
		Для Каждого Ведущий Из СвязьПоМетаданным.Ведущие Цикл
			Для Каждого Подчиненный Из СвязьПоМетаданным.Подчиненные Цикл
				Если Ведущий.ВыводРазрешен Тогда // Отключаемая связь.
					ОписаниеСвязи = Новый Структура;
					ОписаниеСвязи.Вставить("ТипСвязи",                "ПоМетаданным");
					ОписаниеСвязи.Вставить("Ведущий",                 Ведущий);
					ОписаниеСвязи.Вставить("Подчиненный",             Подчиненный);
					ОписаниеСвязи.Вставить("ВедущийТип",              СвязьПоМетаданным.ВедущийТип);
					ОписаниеСвязи.Вставить("ПодчиненныйТип",          СвязьПоМетаданным.ПодчиненныйТип);
					ОписаниеСвязи.Вставить("ПодчиненныйИмяПараметра", СвязьПоМетаданным.ПодчиненныйРеквизит);
					Информация.ОтключаемыеСвязи.Добавить(ОписаниеСвязи);
					Подчиненный.СвязиПоМетаданным.Добавить(ОписаниеСвязи);
				Иначе // Фиксированный параметр выбора.
					Подчиненный.ПараметрыВыбора.Добавить(Новый ПараметрВыбора(СвязьПоМетаданным.ПодчиненныйРеквизит, Ведущий.Значение));
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	// Связи по типу.
	Для Каждого СвязьПоТипу Из Связи.ПоТипу Цикл
		Ведущий = Информация.Поиск.НастройкиВариантаПоПолюКД.Получить(СвязьПоТипу.ВедущийПолеКД);
		Если Ведущий = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Подчиненный = СвязьПоТипу.Подчиненный;
		Если Ведущий.ВыводРазрешен Тогда // Отключаемая связь.
			ОписаниеСвязи = Новый Структура;
			ОписаниеСвязи.Вставить("ТипСвязи",                "ПоТипу");
			ОписаниеСвязи.Вставить("Ведущий",                 Ведущий);
			ОписаниеСвязи.Вставить("Подчиненный",             Подчиненный);
			ОписаниеСвязи.Вставить("ПодчиненныйИмяПараметра", СвязьПоТипу.ПодчиненныйИмяПараметра);
			Информация.ОтключаемыеСвязи.Добавить(ОписаниеСвязи);
			Подчиненный.СвязьПоТипу = ОписаниеСвязи;
		Иначе // Фиксированное ограничения типа.
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(Ведущий.Значение));
			Подчиненный.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
		КонецЕсли;
	КонецЦикла;

	// Связи параметров выбора.
	Для Каждого СвязьПараметровВыбора Из Связи.ПараметровВыбора Цикл
		Ведущий     = СвязьПараметровВыбора.Ведущий;
		Подчиненный = СвязьПараметровВыбора.Подчиненный;
		Если Ведущий = Неопределено Тогда
			ЛучшийВариант = 99;
			Найденные = Информация.НастройкиВарианта.Строки.НайтиСтроки(Новый Структура("ПолеКД", СвязьПараметровВыбора.ВедущийПолеКД), Истина);
			Для Каждого ПотенциальныйРодитель Из Найденные Цикл
				Если ПотенциальныйРодитель.Тип <> "ЭлементОтбора" И ПотенциальныйРодитель.Тип <> "ЗначениеПараметраНастроек" Тогда
					Продолжить;
				КонецЕсли;
				Если ПотенциальныйРодитель.Родитель = Подчиненный.Родитель Тогда // Элементы в одной группе.
					Если Не ПустаяСтрока(ПотенциальныйРодитель.ИдентификаторЭлемента) Тогда // Ведущий выведен в пользовательские.
						Ведущий			= ПотенциальныйРодитель;
						ЛучшийВариант	= 0;
						Прервать; // Самый лучший вариант.
					Иначе
						Ведущий			= ПотенциальныйРодитель;
						ЛучшийВариант	= 1;
					КонецЕсли;
				ИначеЕсли ЛучшийВариант > 2 И ПотенциальныйРодитель.Владелец = Подчиненный.Владелец Тогда // Элементы в одной коллекции.
					Если Не ПустаяСтрока(ПотенциальныйРодитель.ИдентификаторЭлемента) Тогда // Ведущий выведен в пользовательские.
						Если ЛучшийВариант > 2 Тогда
							Ведущий			= ПотенциальныйРодитель;
							ЛучшийВариант	= 2;
						КонецЕсли;
					Иначе
						Если ЛучшийВариант > 3 Тогда
							Ведущий			= ПотенциальныйРодитель;
							ЛучшийВариант	= 3;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ЛучшийВариант > 4 И ПотенциальныйРодитель.СтрокаДерева = Подчиненный.СтрокаДерева Тогда // Элементы в одном узле.
					Если Не ПустаяСтрока(ПотенциальныйРодитель.ИдентификаторЭлемента) Тогда // Ведущий выведен в пользовательские.
						Если ЛучшийВариант > 4 Тогда
							Ведущий			= ПотенциальныйРодитель;
							ЛучшийВариант	= 4;
						КонецЕсли;
					Иначе
						Если ЛучшийВариант > 5 Тогда
							Ведущий			= ПотенциальныйРодитель;
							ЛучшийВариант	= 5;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ЛучшийВариант > 6 Тогда
					Ведущий			= ПотенциальныйРодитель;
					ЛучшийВариант	= 6;
				КонецЕсли;
			КонецЦикла;
			Если Ведущий = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если Ведущий.ВыводРазрешен Тогда // Отключаемая связь.
			ОписаниеСвязи = Новый Структура;
			ОписаниеСвязи.Вставить("ТипСвязи",      			"ПараметровВыбора");
			ОписаниеСвязи.Вставить("Ведущий",       			Ведущий);
			ОписаниеСвязи.Вставить("Подчиненный",				Подчиненный);
			ОписаниеСвязи.Вставить("ПодчиненныйИмяПараметра",	СвязьПараметровВыбора.ПодчиненныйИмяПараметра);
			ОписаниеСвязи.Вставить("ПодчиненныйДействие",		СвязьПараметровВыбора.Действие);
			Информация.ОтключаемыеСвязи.Добавить(ОписаниеСвязи);
			Подчиненный.СвязиПараметровВыбора.Добавить(ОписаниеСвязи);
		Иначе // Фиксированный параметр выбора.
			Если ТипЗнч(Ведущий.Значение) = Тип("ПолеКомпоновкиДанных") Тогда
				Продолжить; // Расширенная работа с отборами по полю компоновки данных не поддерживается.
			КонецЕсли;
			Попытка
				ЗначениеЗаполнено = ЗначениеЗаполнено(Ведущий.Значение);
			Исключение
				ЗначениеЗаполнено = Истина;
			КонецПопытки;
			Если Не ЗначениеЗаполнено Тогда
				Продолжить;
			КонецЕсли;
			Подчиненный.ПараметрыВыбора.Добавить(Новый ПараметрВыбора(СвязьПараметровВыбора.ПодчиненныйИмяПараметра, Ведущий.Значение));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗарегистрироватьУзелНастроек(НастройкиКД, Информация, СтрокаДерева, ИмяКоллекции, НаборЭлементов = Неопределено, Родитель = Неопределено, Владелец = Неопределено)
	УзелКД = СтрокаДерева.УзелКД[ИмяКоллекции];

	Владелец				= Информация.НастройкиВарианта.Строки.Добавить();
	Владелец.СтрокаДерева	= СтрокаДерева;
	Если ИмяКоллекции <> "ПараметрыДанных" И ИмяКоллекции <> "ПараметрыВывода" Тогда
		Владелец.Идентификатор = УзелКД.ИдентификаторПользовательскойНастройки;
	КонецЕсли;
	Владелец.Тип           = ВариантыОтчетовКлиентСервер.ТипНастройкиСтрокой(ТипЗнч(УзелКД));
	Владелец.ИмяКоллекции  = ИмяКоллекции;
	Владелец.Глобальная    = СтрокаДерева.Глобальная;
	Владелец.ЭлементКД     = УзелКД;
	Владелец.ВыводРазрешен = Не Информация.ТолькоБыстрые И СтрокаДерева.ВыводРазрешен;

	Если ТипЗнч(Владелец.Идентификатор) = Тип("Строка") И Не ПустаяСтрока(Владелец.Идентификатор) Тогда
		СвойстваНастройки = Информация.Поиск.ПользовательскиеНастройки.Получить(Владелец.Идентификатор);
		Если СвойстваНастройки <> Неопределено Тогда
			Владелец.ПользовательскаяНастройка = СвойстваНастройки;
			ЗарегистрироватьПользовательскуюНастройку(Информация, СвойстваНастройки, Неопределено, Владелец);
			СвойстваНастройки.ПараметрыВыбора = Новый Массив;
			Владелец.ПараметрыВыбора          = Новый Массив;
			Владелец.СвязиПараметровВыбора    = Новый Массив;
			Владелец.СвязиПоМетаданным        = Новый Массив;
			Если Информация.ТолькоПользовательские Тогда
				Владелец.ВыводРазрешен = СвойстваНастройки.ВыводРазрешен;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Владелец.ВыводРазрешен Тогда
		Если Владелец.ПользовательскаяНастройка = Неопределено Тогда
			ЗаполнитьПредставлениеИСостояниеНастройки(Владелец, Владелец.ЭлементКД, Неопределено, Неопределено);
		Иначе
			ЗаполнитьЗначенияСвойств(Владелец, Владелец.ПользовательскаяНастройка, "Представление, ВыводитьТолькоФлажок");
		КонецЕсли;
	КонецЕсли;

	Если ИмяКоллекции = "Отбор" Или ИмяКоллекции = "ПараметрыДанных" Или ИмяКоллекции = "ПараметрыВывода" Или ИмяКоллекции = "УсловноеОформление" Тогда
		ЗарегистрироватьЭлементыНастроек(Информация, УзелКД, УзелКД.Элементы, Владелец, Владелец);
	ИначеЕсли Не Информация.ТолькоБыстрые И (ИмяКоллекции = "Порядок" Или ИмяКоллекции = "Выбор") Тогда
		ЗарегистрироватьЭлементыНастроек(Информация, УзелКД, УзелКД.Элементы, Владелец, Владелец);
	КонецЕсли;
КонецПроцедуры

Процедура ЗарегистрироватьЭлементыНастроек(Информация, УзелКД, НаборЭлементов, Владелец, Родитель)
	ЕстьНеПомеченные	= Ложь;
	ЕстьПомеченные		= Ложь;

	Для Каждого ЭлементКД Из НаборЭлементов Цикл
		НастройкаВарианта					= Родитель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НастройкаВарианта, Владелец, "СтрокаДерева, ИмяКоллекции, Глобальная");
		НастройкаВарианта.Тип				= ВариантыОтчетовКлиентСервер.ТипНастройкиСтрокой(ТипЗнч(ЭлементКД));
		НастройкаВарианта.ИдентификаторКД	= УзелКД.ПолучитьИдентификаторПоОбъекту(ЭлементКД);
		НастройкаВарианта.Владелец			= Владелец;
		НастройкаВарианта.ЭлементКД			= ЭлементКД;
		НастройкаВарианта.ВыводРазрешен		= Не Информация.ТолькоБыстрые И Владелец.ВыводРазрешен;
		НастройкаВарианта.ВыводитьФлажок	= Истина;

		Если НастройкаВарианта.Тип = "АвтоЭлементПорядка"
			Или НастройкаВарианта.Тип = "АвтоВыбранноеПоле"
			Или НастройкаВарианта.Тип = "ГруппаВыбранныхПолей" Тогда

			// Действие не требуется.
		ИначеЕсли НастройкаВарианта.Тип = "ЭлементПорядка" Тогда
			НастройкаВарианта.Значение				= ЭлементКД.ТипУпорядочивания;
			НастройкаВарианта.ПолеКД				= ЭлементКД.Поле;
			НастройкаВарианта.ДоступнаяНастройкаКД	= УзелКД.ДоступныеПоляПорядка.НайтиПоле(ЭлементКД.Поле);
			Если НастройкаВарианта.ДоступнаяНастройкаКД = Неопределено Тогда
				НастройкаВарианта.Состояние = "ПометкаУдаления";
			КонецЕсли;
		ИначеЕсли НастройкаВарианта.Тип = "ВыбранноеПоле" Тогда
			НастройкаВарианта.ПолеКД				= ЭлементКД.Поле;
			НастройкаВарианта.ДоступнаяНастройкаКД	= УзелКД.ДоступныеПоляВыбора.НайтиПоле(ЭлементКД.Поле);
			Если НастройкаВарианта.ДоступнаяНастройкаКД = Неопределено Тогда
				НастройкаВарианта.Состояние = "ПометкаУдаления";
			КонецЕсли;
		Иначе
			НастройкаВарианта.Идентификатор			= ЭлементКД.ИдентификаторПользовательскойНастройки;
		КонецЕсли;

		Если НастройкаВарианта.Тип = "ВыбранныеПоля"
			Или НастройкаВарианта.Тип = "Порядок"
			Или НастройкаВарианта.Тип = "КоллекцияЭлементовСтруктурыТаблицы"
			Или НастройкаВарианта.Тип = "КоллекцияЭлементовСтруктурыДиаграммы"
			Или НастройкаВарианта.Тип = "Отбор"
			Или НастройкаВарианта.Тип = "УсловноеОформление"
			Или НастройкаВарианта.Тип = "СтруктураНастроек" Тогда

			НастройкаВарианта.ВыводитьФлажок = Ложь;
		КонецЕсли;

		Если НастройкаВарианта.Тип = "ЭлементОтбора" Или НастройкаВарианта.Тип = "ЗначениеПараметраНастроек" Тогда
			ЗарегистрироватьПоле(Информация, УзелКД, ЭлементКД, НастройкаВарианта);
			ЗарегистрироватьТипыИСвязи(Информация, НастройкаВарианта);
		КонецЕсли;

		СвойстваНастройки = Неопределено;
		Если ТипЗнч(НастройкаВарианта.Идентификатор) = Тип("Строка") И Не ПустаяСтрока(НастройкаВарианта.Идентификатор) Тогда
			СвойстваНастройки = Информация.Поиск.ПользовательскиеНастройки.Получить(НастройкаВарианта.Идентификатор);
		КонецЕсли;
		Если СвойстваНастройки <> Неопределено Тогда
			НастройкаВарианта.ПользовательскаяНастройка = СвойстваНастройки;
			ЗарегистрироватьПользовательскуюНастройку(Информация, СвойстваНастройки, Неопределено, НастройкаВарианта);
			Если Информация.ТолькоПользовательские Тогда
				НастройкаВарианта.ВыводРазрешен = СвойстваНастройки.ВыводРазрешен;
				НастройкаВарианта.Значение      = СвойстваНастройки.Значение;
				НастройкаВарианта.ВидСравнения  = СвойстваНастройки.ВидСравнения;
			КонецЕсли;
		КонецЕсли;

		Если НастройкаВарианта.ВыводРазрешен Тогда
			ЗаполнитьПредставлениеИСостояниеНастройки(НастройкаВарианта, НастройкаВарианта.ЭлементКД, Неопределено, НастройкаВарианта.ДоступнаяНастройкаКД);
			Если НастройкаВарианта.Состояние = "ПометкаУдаления" Тогда
				Информация.ЕстьНесуществующиеПоля = Истина;
				НастройкаВарианта.ВыводРазрешен = Ложь;
			ИначеЕсли НастройкаВарианта.Тип = "ЭлементОтбора" Или НастройкаВарианта.Тип = "ЗначениеПараметраНастроек" Тогда
				ПриОпределенииПараметровВыбора(Информация, НастройкаВарианта);
			КонецЕсли;
		КонецЕсли;

		Если НастройкаВарианта.Тип = "ГруппаЭлементовОтбора" Тогда
			НастройкаВарианта.Значение = ЭлементКД.ТипГруппы;
			ЗарегистрироватьЭлементыНастроек(Информация, УзелКД, ЭлементКД.Элементы, Владелец, НастройкаВарианта);
		ИначеЕсли НастройкаВарианта.Тип = "ГруппаВыбранныхПолей" Тогда
			НастройкаВарианта.Значение = ЭлементКД.Расположение;
			ЗарегистрироватьЭлементыНастроек(Информация, УзелКД, ЭлементКД.Элементы, Владелец, НастройкаВарианта);
		ИначеЕсли НастройкаВарианта.Тип = "ЗначениеПараметраНастроек" Тогда
			ЗарегистрироватьЭлементыНастроек(Информация, УзелКД, ЭлементКД.ЗначенияВложенныхПараметров, Владелец, НастройкаВарианта);
		КонецЕсли;

		Если СвойстваНастройки <> Неопределено Тогда
			СвойстваНастройки.ЗначенияДляВыбора = НастройкаВарианта.ЗначенияДляВыбора;
			СвойстваНастройки.ПараметрыВыбора   = НастройкаВарианта.ПараметрыВыбора;
			СвойстваНастройки.БыстрыйВыбор      = НастройкаВарианта.БыстрыйВыбор;
			СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями = НастройкаВарианта.ОграничиватьВыборУказаннымиЗначениями;
		КонецЕсли;

		Если НастройкаВарианта.Состояние = "ПометкаУдаления" Тогда
			Информация.ЕстьНесуществующиеПоля = Истина;
			ЕстьПомеченные = Истина;
		Иначе
			ЕстьНеПомеченные = Истина;
		КонецЕсли;
	КонецЦикла;

	Если ЕстьПомеченные И Не ЕстьНеПомеченные И Родитель <> Владелец Тогда
		Родитель.Состояние = "ПометкаУдаления";
	КонецЕсли;
КонецПроцедуры

Функция ЗарегистрироватьПользовательскуюНастройку(Информация, СвойстваНастройки, СтрокаДерева, НастройкаВарианта)
	ПользовательскаяНастройкаКД = СвойстваНастройки.ПользовательскаяНастройкаКД;

	РежимОтображения = ПользовательскаяНастройкаКД.РежимОтображения;
	Если РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		Возврат СвойстваНастройки;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СвойстваНастройки.Идентификатор) Тогда
		Возврат СвойстваНастройки;
	КонецЕсли;
	СвойстваНастройки.ИдентификаторЭлемента = СтрЗаменить(СтрЗаменить(Строка(СвойстваНастройки.Идентификатор), "-", ""), ".", "_");

	Если НастройкаВарианта <> Неопределено Тогда
		Если НастройкаВарианта.Владелец <> Неопределено Тогда
			СвойстваНастройки.УзелКД = НастройкаВарианта.Владелец.ЭлементКД;
		КонецЕсли;
		СвойстваНастройки.СтрокаДерева         = НастройкаВарианта.СтрокаДерева;
		СвойстваНастройки.НастройкаВариантаКД  = НастройкаВарианта.ЭлементКД;
		СвойстваНастройки.НастройкаВарианта    = НастройкаВарианта;
		СвойстваНастройки.Подтип               = НастройкаВарианта.Подтип;
		СвойстваНастройки.ПолеКД               = НастройкаВарианта.ПолеКД;
		СвойстваНастройки.ДоступнаяНастройкаКД = НастройкаВарианта.ДоступнаяНастройкаКД;
		СвойстваНастройки.ИнформацияОТипах     = НастройкаВарианта.ИнформацияОТипах;
		СвойстваНастройки.ОписаниеТипов        = НастройкаВарианта.ОписаниеТипов;
		Если РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто Тогда
			РежимОтображения = СвойстваНастройки.НастройкаВариантаКД.РежимОтображения;
		КонецЕсли;
	Иначе
		СвойстваНастройки.УзелКД              = СтрокаДерева.УзелКД;
		СвойстваНастройки.СтрокаДерева        = СтрокаДерева;
		СвойстваНастройки.Тип                 = СтрокаДерева.Тип;
		СвойстваНастройки.Подтип              = СтрокаДерева.Подтип;
		СвойстваНастройки.НастройкаВариантаКД = СвойстваНастройки.УзелКД;
		Если РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто Тогда
			РежимОтображения = СвойстваНастройки.УзелКД.РежимОтображения;
		КонецЕсли;
	КонецЕсли;

	Если РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ Тогда
		СвойстваНастройки.Быстрая = Истина;
		Информация.ЕстьБыстрыеНастройки = Истина;
	ИначеЕсли РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный Тогда
		СвойстваНастройки.Обычная = Истина;
		Информация.ЕстьОбычныеНастройки = Истина;
	ИначеЕсли Информация.ТолькоПользовательские Тогда
		Возврат СвойстваНастройки;
	КонецЕсли;

	// Определение доступной настройки.
	Если СвойстваНастройки.Тип = "НастройкиВложенногоОбъекта" Тогда
		СвойстваНастройки.ДоступнаяНастройкаКД = Информация.НастройкиКД.ДоступныеОбъекты.Элементы.Найти(СвойстваНастройки.СтрокаДерева.УзелКД.ИдентификаторОбъекта);
	КонецЕсли;

	Если Информация.ТолькоПользовательские Тогда
		Если Информация.ТолькоБыстрые Тогда
			СвойстваНастройки.ВыводРазрешен = СвойстваНастройки.Быстрая;
		Иначе
			СвойстваНастройки.ВыводРазрешен = Истина;
		КонецЕсли;
	КонецЕсли;

	СвойстваНастройки.ВыводитьФлажок = Истина;
	СвойстваНастройки.ВыводитьТолькоФлажок = Ложь;

	ЗаполнитьПредставлениеИСостояниеНастройки(СвойстваНастройки, СвойстваНастройки.НастройкаВариантаКД, СвойстваНастройки.ПользовательскаяНастройкаКД, СвойстваНастройки.ДоступнаяНастройкаКД);

	Если СвойстваНастройки.Состояние = "ПометкаУдаления" Тогда
		Информация.ЕстьНесуществующиеПоля = Истина;
		СвойстваНастройки.ВыводРазрешен = Ложь;
	КонецЕсли;

	Если СвойстваНастройки.Тип = "ГруппаЭлементовОтбора"
		Или СвойстваНастройки.Тип = "НастройкиВложенногоОбъекта"
		Или СвойстваНастройки.Тип = "Группировка"
		Или СвойстваНастройки.Тип = "Таблица"
		Или СвойстваНастройки.Тип = "ГруппировкаТаблицы"
		Или СвойстваНастройки.Тип = "Диаграмма"
		Или СвойстваНастройки.Тип = "ГруппировкаДиаграммы"
		Или СвойстваНастройки.Тип = "ЭлементУсловногоОформления" Тогда

		СвойстваНастройки.ВыводитьТолькоФлажок = Истина;
	ИначеЕсли СвойстваНастройки.Тип = "ЗначениеПараметраНастроек" Или СвойстваНастройки.Тип = "ЭлементОтбора" Тогда
		Если СвойстваНастройки.Тип = "ЗначениеПараметраНастроек" Тогда
			СвойстваНастройки.Значение = ПользовательскаяНастройкаКД.Значение;
		Иначе
			СвойстваНастройки.Значение = ПользовательскаяНастройкаКД.ПравоеЗначение;
		КонецЕсли;

		// Определение типа значения настройки.
		Если СвойстваНастройки.Тип = "ЗначениеПараметраНастроек" Тогда
			Если СвойстваНастройки.ДоступнаяНастройкаКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда Тогда
				СвойстваНастройки.ВыводитьФлажок			= Ложь;
				ПользовательскаяНастройкаКД.Использование	= Истина;
			КонецЕсли;
			Если СвойстваНастройки.ДоступнаяНастройкаКД.ДоступенСписокЗначений Тогда
				СвойстваНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			Иначе
				СвойстваНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
		ИначеЕсли СвойстваНастройки.Тип = "ЭлементОтбора" Тогда
			СвойстваНастройки.ВидСравнения = ПользовательскаяНастройкаКД.ВидСравнения;
		КонецЕсли;

		Если СвойстваНастройки.ИнформацияОТипах.СодержитТипПериод И СвойстваНастройки.ИнформацияОТипах.КоличествоТипов = 1 Тогда
			СвойстваНастройки.ТипЭлементов = "СтандартныйПериод";
		ИначеЕсли Не СвойстваНастройки.ВыводитьФлажок
			И СвойстваНастройки.ИнформацияОТипах.СодержитТипБулево
			И СвойстваНастройки.ИнформацияОТипах.КоличествоТипов = 1 Тогда

			СвойстваНастройки.ТипЭлементов = "ТолькоФлажокЗначения";

		ИначеЕсли СвойстваНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено
			Или СвойстваНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда

			СвойстваНастройки.ТипЭлементов = "УсловиеВРежимеПросмотра";
		ИначеЕсли СвойстваНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
			Или СвойстваНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
			Или СвойстваНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке
			Или СвойстваНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда

			СвойстваНастройки.ВводСписком			= Истина;
			СвойстваНастройки.ТипЭлементов			= "СписокСПодбором";
			СвойстваНастройки.ВыборГруппИЭлементов	= ГруппыИЭлементы.ГруппыИЭлементы;
		Иначе
			СвойстваНастройки.ТипЭлементов = "СвязьСКомпоновщиком";
			Если СвойстваНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии
				Или СвойстваНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда

				СвойстваНастройки.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
			КонецЕсли;
		КонецЕсли;

		Если СвойстваНастройки.ВыборГруппИЭлементов = Неопределено Тогда
			СвойстваНастройки.ВыборГруппИЭлементов = НастройкаВарианта.ВыборГруппИЭлементов;
		КонецЕсли;
	ИначеЕсли СвойстваНастройки.Тип = "ВыбранныеПоля"
		Или СвойстваНастройки.Тип = "Порядок"
		Или СвойстваНастройки.Тип = "КоллекцияЭлементовСтруктурыТаблицы"
		Или СвойстваНастройки.Тип = "КоллекцияЭлементовСтруктурыДиаграммы"
		Или СвойстваНастройки.Тип = "Отбор"
		Или СвойстваНастройки.Тип = "УсловноеОформление"
		Или СвойстваНастройки.Тип = "СтруктураНастроек" Тогда

		СвойстваНастройки.ТипЭлементов = "СвязьСКомпоновщиком";
		СвойстваНастройки.ВыводитьФлажок = Ложь;
	Иначе
		СвойстваНастройки.ТипЭлементов = "СвязьСКомпоновщиком";
	КонецЕсли;

	Если СвойстваНастройки.ВыводитьТолькоФлажок Тогда
		СвойстваНастройки.ТипЭлементов = "";
	ИначеЕсли СвойстваНастройки.Быстрая И СвойстваНастройки.ТипЭлементов = "СписокСПодбором" Тогда
		СвойстваНастройки.ТипЭлементов = "СвязьСКомпоновщиком";
	КонецЕсли;

	Возврат СвойстваНастройки;
КонецФункции

Процедура ЗарегистрироватьПоле(Информация, УзелКД, ЭлементКД, НастройкаВарианта)
	Если ПустаяСтрока(НастройкаВарианта.Идентификатор) Тогда
		Идентификатор = Строка(НастройкаВарианта.СтрокаДерева.ИдентификаторКД);
		Если Не ПустаяСтрока(Идентификатор) Тогда
			Идентификатор = Идентификатор + "_";
		КонецЕсли;
		НастройкаВарианта.Идентификатор = Идентификатор + НастройкаВарианта.ИмяКоллекции + "_" + Строка(НастройкаВарианта.ИдентификаторКД);
	КонецЕсли;
	НастройкаВарианта.ИдентификаторЭлемента = СтрЗаменить(СтрЗаменить(Строка(НастройкаВарианта.Идентификатор), "-", ""), ".", "_");

	Если НастройкаВарианта.Тип = "ЗначениеПараметраНастроек" Тогда
		НастройкаВарианта.ПолеКД = Новый ПолеКомпоновкиДанных("ПараметрыДанных." + Строка(ЭлементКД.Параметр));
		ДоступныеПараметры = УзелКД.ДоступныеПараметры;
		Если ДоступныеПараметры = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ДоступнаяНастройкаКД = ДоступныеПараметры.НайтиПараметр(ЭлементКД.Параметр);
		Если ДоступнаяНастройкаКД = Неопределено Тогда
			Возврат;
		КонецЕсли;
		// ДоступнаяНастройкаКД имеет тип ДоступныйПараметрКомпоновкиДанных:
		//   Видимость - Булево - Видимость параметра при редактировании значений.
		//   Параметр - ПараметрКомпоновкиДанных - Имя параметра.
		//   Значение - Произвольный - Начальное значение.
		//   ДоступенСписокЗначений - Булево - Можно ли указывать несколько значений.
		//   ДоступныеЗначения - СписокЗначений, Неопределено - Значения, доступные для выбора.
		//   БыстрыйВыбор, ВыборГруппИЭлементов, ЗапрещатьНезаполненныеЗначения,
		//   Использование, Маска, СвязьПоТипу, ФормаВыбора, ФорматРедактирования.
		Если Не ДоступнаяНастройкаКД.Видимость Тогда
			НастройкаВарианта.ВыводРазрешен = Ложь;
		КонецЕсли;
		НастройкаВарианта.ДоступнаяНастройкаКД	= ДоступнаяНастройкаКД;
		НастройкаВарианта.Значение				= ЭлементКД.Значение;
		Если ДоступнаяНастройкаКД.ДоступенСписокЗначений Тогда
			НастройкаВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			НастройкаВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		Если ДоступнаяНастройкаКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда Тогда
			НастройкаВарианта.ВыводитьФлажок = Ложь;
		КонецЕсли;
	Иначе
		НастройкаВарианта.ПолеКД       = ЭлементКД.ЛевоеЗначение;
		НастройкаВарианта.Значение     = ЭлементКД.ПравоеЗначение;
		НастройкаВарианта.ВидСравнения = ЭлементКД.ВидСравнения;
		ДоступныеПоляОтбора = УзелКД.ДоступныеПоляОтбора;
		Если ДоступныеПоляОтбора = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ДоступнаяНастройкаКД = ДоступныеПоляОтбора.НайтиПоле(ЭлементКД.ЛевоеЗначение);
		Если ДоступнаяНастройкаКД = Неопределено Тогда
			Возврат;
		КонецЕсли;
		// ДоступнаяНастройкаКД имеет тип ДоступноеПолеОтбораКомпоновкиДанных.
		НастройкаВарианта.ДоступнаяНастройкаКД = ДоступнаяНастройкаКД;
	КонецЕсли;

	Если НастройкаВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
		Или НастройкаВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
		Или НастройкаВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке
		Или НастройкаВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда

		НастройкаВарианта.ВводСписком			= Истина;
		НастройкаВарианта.ВыборГруппИЭлементов	= ГруппыИЭлементы.ГруппыИЭлементы;
	ИначеЕсли НастройкаВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Или НастройкаВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		НастройкаВарианта.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	Иначе
		НастройкаВарианта.ВыборГруппИЭлементов = ВариантыОтчетовКлиентСервер.ПривестиЗначениеКТипуГруппыИЭлементы(ДоступнаяНастройкаКД.ВыборГруппИЭлементов);
	КонецЕсли;

	НастройкаВарианта.ОписаниеТипов = ДоступнаяНастройкаКД.ТипЗначения;
	НастройкаВарианта.ФормаВыбора   = ДоступнаяНастройкаКД.ФормаВыбора;
	НастройкаВарианта.БыстрыйВыбор  = ДоступнаяНастройкаКД.БыстрыйВыбор;

	Если Информация.Поиск.НастройкиВариантаПоПолюКД.Получить(НастройкаВарианта.ПолеКД) = Неопределено Тогда
		Информация.Поиск.НастройкиВариантаПоПолюКД.Вставить(НастройкаВарианта.ПолеКД, НастройкаВарианта);
	КонецЕсли;
КонецПроцедуры

Процедура ЗарегистрироватьТипыИСвязи(Информация, НастройкаВарианта)
	НастройкаВарианта.СвязиПоМетаданным     = Новый Массив;
	НастройкаВарианта.СвязиПараметровВыбора = Новый Массив;
	НастройкаВарианта.ПараметрыВыбора       = Новый Массив;

	Если НастройкаВарианта.ВводСписком Тогда
		НастройкаВарианта.ОтмеченныеЗначения = БазоваяПодсистемаКлиентСервер.ЗначенияСписком(НастройкаВарианта.Значение);
	КонецЕсли;
	НастройкаВарианта.ЗапросЗначенийВыбора	= Новый Запрос;
	НастройкаВарианта.ЗначенияДляВыбора		= Новый СписокЗначений;

	ИнформацияОТипах		= ВариантыОтчетовКлиентСервер.АнализТипов(НастройкаВарианта.ОписаниеТипов, Истина);
	ИнформацияОТипах.Вставить("СодержитСсылочныеТипы", Ложь);
	ИнформацияОТипах.Вставить("КоличествоСБыстрымВыбором", 0);
	ВсеТипыСБыстрымВыбором	= ИнформацияОТипах.КоличествоТипов < 10 И (ИнформацияОТипах.КоличествоТипов = ИнформацияОТипах.ОбъектныеТипы.Количество());

	Для Каждого Тип Из ИнформацияОТипах.ОбъектныеТипы Цикл
		ОбъектМетаданных	= Метаданные.НайтиПоТипу(Тип);
		ПолноеИмя			= Информация.СоответствиеИменОбъектовМетаданных.Получить(Тип);
		Если ПолноеИмя = Неопределено Тогда // Регистрация имени объекта метаданных.
			Если ОбъектМетаданных = Неопределено Тогда
				ПолноеИмя = -1;
			Иначе
				ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
			КонецЕсли;
			Информация.СоответствиеИменОбъектовМетаданных.Вставить(Тип, ПолноеИмя);
		КонецЕсли;
		Если ПолноеИмя = -1 Тогда
			ВсеТипыСБыстрымВыбором = Ложь;

			Продолжить;
		КонецЕсли;

		ИнформацияОТипах.СодержитСсылочныеТипы = Истина;

		Если ВсеТипыСБыстрымВыбором Тогда
			Вид = ВРег(СтрРазделить(ПолноеИмя, ".")[0]);
			Если Вид <> "ПЕРЕЧИСЛЕНИЕ" Тогда
				Если Вид = "СПРАВОЧНИК" Или Вид = "ПЛАНВИДОВРАСЧЕТА" Или Вид = "ПЛАНВИДОВХАРАКТЕРИСТИК" Или Вид = "ПЛАНОБМЕНА" Или Вид = "ПЛАНСЧЕТОВ" Тогда
					Если ОбъектМетаданных.СпособВыбора <> Метаданные.СвойстваОбъектов.СпособВыбора.БыстрыйВыбор Тогда
						ВсеТипыСБыстрымВыбором = Ложь;
					КонецЕсли;
				Иначе
					ВсеТипыСБыстрымВыбором = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// Поиск типа в глобальных связях среди подчиненных.
		Найденные = Информация.Связи.ОбъектовМетаданных.НайтиСтроки(Новый Структура("ПодчиненныйТип", Тип));
		Для Каждого СвязьПоМетаданным Из Найденные Цикл // Регистрация настройки как подчиненной.
			СвязьПоМетаданным.ЕстьПодчиненные = Истина;
			СвязьПоМетаданным.Подчиненные.Добавить(НастройкаВарианта);
		КонецЦикла;

		// Поиск типа в глобальных связях среди ведущих.
		Если НастройкаВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			// Поле может быть ведущим если имеет вид сравнения "Равно".
			Найденные = Информация.Связи.ОбъектовМетаданных.НайтиСтроки(Новый Структура("ВедущийТип", Тип));
			Для Каждого СвязьПоМетаданным Из Найденные Цикл // Регистрация настройки как ведущей.
				СвязьПоМетаданным.ЕстьВедущие = Истина;
				СвязьПоМетаданным.Ведущие.Добавить(НастройкаВарианта);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	// Только перечисления или типы с быстрым выбором.
	Если ВсеТипыСБыстрымВыбором И ИнформацияОТипах.ОбъектныеТипы.Количество() = ИнформацияОТипах.КоличествоТипов Тогда
		НастройкаВарианта.БыстрыйВыбор = Истина;
	КонецЕсли;

	НастройкаВарианта.ИнформацияОТипах	= ИнформацияОТипах;
	НастройкаВарианта.ОписаниеТипов		= ИнформацияОТипах.ОписаниеТиповДляФормы;

	///////////////////////////////////////////////////////////////////
	// Информация о связях и параметрах выбора.

	ДоступнаяНастройкаКД = НастройкаВарианта.ДоступнаяНастройкаКД;
	Если ДоступнаяНастройкаКД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДоступнаяНастройкаКД.СвязьПоТипу) Тогда
		СтрокаСвязи							= Информация.Связи.ПоТипу.Добавить();
		СтрокаСвязи.Подчиненный				= НастройкаВарианта;
		СтрокаСвязи.ВедущийПолеКД			= ДоступнаяНастройкаКД.СвязьПоТипу.Поле;
		СтрокаСвязи.ПодчиненныйИмяПараметра = ДоступнаяНастройкаКД.СвязьПоТипу.ЭлементСвязи;
	КонецЕсли;

	Для Каждого СтрокаСвязи Из ДоступнаяНастройкаКД.ПолучитьСвязиПараметровВыбора() Цикл
		Если ПустаяСтрока(Строка(СтрокаСвязи.Поле)) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаСвязиПараметров							= Информация.Связи.ПараметровВыбора.Добавить();
		СтрокаСвязиПараметров.Подчиненный				= НастройкаВарианта;
		СтрокаСвязиПараметров.ПодчиненныйИмяПараметра	= СтрокаСвязи.Имя;
		СтрокаСвязиПараметров.ВедущийПолеКД				= СтрокаСвязи.Поле;
		СтрокаСвязиПараметров.Действие					= СтрокаСвязи.ИзменениеЗначения;
	КонецЦикла;

	Для Каждого ПараметрВыбораКД Из ДоступнаяНастройкаКД.ПолучитьПараметрыВыбора() Цикл
		НастройкаВарианта.ПараметрыВыбора.Добавить(Новый ПараметрВыбора(ПараметрВыбораКД.Имя, ПараметрВыбораКД.Значение));
	КонецЦикла;

	///////////////////////////////////////////////////////////////////
	// Список значений.

	Если ТипЗнч(ДоступнаяНастройкаКД.ДоступныеЗначения) = Тип("СписокЗначений") Тогда
		НастройкаВарианта.ЗначенияДляВыбора						= ДоступнаяНастройкаКД.ДоступныеЗначения;
		НастройкаВарианта.ОграничиватьВыборУказаннымиЗначениями = НастройкаВарианта.ЗначенияДляВыбора.Количество() > 0;
	Иначе
		НастройкиСохраненныеРанее	= Информация.ДополнительныеНастройкиЭлементов[НастройкаВарианта.ИдентификаторЭлемента];
		Ограничивать				= БазоваяПодсистемаКлиентСервер.СвойствоСтруктуры(НастройкиСохраненныеРанее, "ОграничиватьВыборУказаннымиЗначениями");
		Если НастройкиСохраненныеРанее <> Неопределено И Ограничивать = Ложь Тогда
			СтарыеЗначенияДляВыбора = БазоваяПодсистемаКлиентСервер.СвойствоСтруктуры(НастройкиСохраненныеРанее, "ЗначенияДляВыбора");
			Если ТипЗнч(СтарыеЗначенияДляВыбора) = Тип("СписокЗначений") Тогда
				НастройкаВарианта.ЗначенияДляВыбора.ТипЗначения = НастройкаВарианта.ОписаниеТипов;
				Для Каждого СтарыйЭлементСписка Из СтарыеЗначенияДляВыбора Цикл
					Если Не НастройкаВарианта.ОписаниеТипов.СодержитТип(ТипЗнч(СтарыйЭлементСписка.Значение)) Тогда
						Продолжить;
					КонецЕсли;
					Если НастройкаВарианта.ЗначенияДляВыбора.НайтиПоЗначению(СтарыйЭлементСписка.Значение) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ЭлементПриемник				= НастройкаВарианта.ЗначенияДляВыбора.Добавить();
					ЭлементПриемник.Значение	= СтарыйЭлементСписка.Значение;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПредставлениеИСостояниеНастройки(СвойстваНастройки, НастройкаВариантаКД, ПользовательскаяНастройкаКД, ДоступнаяНастройкаКД)
	Если ПользовательскаяНастройкаКД = Неопределено Тогда
		ПользовательскаяНастройкаКД = НастройкаВариантаКД;
	КонецЕсли;

	СтруктураПредставлений = Новый Структура("Представление, ПредставлениеПользовательскойНастройки", "", "");
	ЗаполнитьЗначенияСвойств(СтруктураПредставлений, НастройкаВариантаКД);

	СвойстваНастройки.ВыводитьТолькоФлажок = ЗначениеЗаполнено(СтруктураПредставлений.Представление);

	Если ЗначениеЗаполнено(СтруктураПредставлений.ПредставлениеПользовательскойНастройки) Тогда
		Представление = СтруктураПредставлений.ПредставлениеПользовательскойНастройки;
	ИначеЕсли ЗначениеЗаполнено(СтруктураПредставлений.Представление) И СтруктураПредставлений.Представление <> "1" Тогда
		Представление = СтруктураПредставлений.Представление;
	Иначе
		Представление = "";
	КонецЕсли;
	СвойстваНастройки.Представление = СокрЛП(Представление);

	// Представление "По умолчанию".
	Если ДоступнаяНастройкаКД <> Неопределено И ЗначениеЗаполнено(ДоступнаяНастройкаКД.Заголовок) Тогда
		ПредставлениеПоУмолчанию = ДоступнаяНастройкаКД.Заголовок;
	ИначеЕсли ЗначениеЗаполнено(СвойстваНастройки.Подтип) Тогда
		Если СвойстваНастройки.Подтип = "ДиаграммаСерии" Тогда
			ПредставлениеПоУмолчанию = "Серии";
		ИначеЕсли СвойстваНастройки.Подтип = "ДиаграммаТочки" Тогда
			ПредставлениеПоУмолчанию = "Точки";
		ИначеЕсли СвойстваНастройки.Подтип = "ТаблицаСтроки" Тогда
			ПредставлениеПоУмолчанию = "Строки";
		ИначеЕсли СвойстваНастройки.Подтип = "ТаблицаКолонки" Тогда
			ПредставлениеПоУмолчанию = "Колонки";
		ИначеЕсли СвойстваНастройки.Подтип = "Отчет" Тогда
			ПредставлениеПоУмолчанию = "Отчет";
		Иначе
			ПредставлениеПоУмолчанию = Строка(СвойстваНастройки.Подтип);
		КонецЕсли;

	// Параметры и отборы.
	ИначеЕсли СвойстваНастройки.Тип = "Отбор" Тогда
		ПредставлениеПоУмолчанию = "Отбор";
	ИначеЕсли СвойстваНастройки.Тип = "ГруппаЭлементовОтбора" Тогда
		ПредставлениеПоУмолчанию = Строка(НастройкаВариантаКД.ТипГруппы);
	ИначеЕсли СвойстваНастройки.Тип = "ЭлементОтбора" Тогда
		ПредставлениеПоУмолчанию = Строка(НастройкаВариантаКД.ЛевоеЗначение);
	ИначеЕсли СвойстваНастройки.Тип = "ЗначениеПараметраНастроек" Тогда
		ПредставлениеПоУмолчанию = Строка(НастройкаВариантаКД.Параметр);

	// Сортировки.
	ИначеЕсли СвойстваНастройки.Тип = "Порядок" Тогда
		ПредставлениеПоУмолчанию = "Сортировка";
	ИначеЕсли СвойстваНастройки.Тип = "АвтоЭлементПорядка" Тогда
		ПредставлениеПоУмолчанию = "Авто (сортировки родителя)";
	ИначеЕсли СвойстваНастройки.Тип = "ЭлементПорядка" Тогда
		ПредставлениеПоУмолчанию = Строка(НастройкаВариантаКД.Поле);

	// Выбранные поля.
	ИначеЕсли СвойстваНастройки.Тип = "ВыбранныеПоля" Тогда
		ПредставлениеПоУмолчанию = "Поля";
	ИначеЕсли СвойстваНастройки.Тип = "ВыбранноеПоле" Тогда
		ПредставлениеПоУмолчанию = Строка(НастройкаВариантаКД.Поле);
	ИначеЕсли СвойстваНастройки.Тип = "АвтоВыбранноеПоле" Тогда
		ПредставлениеПоУмолчанию = "Авто (поля родителя)";
	ИначеЕсли СвойстваНастройки.Тип = "ГруппаВыбранныхПолей" Тогда
		ПредставлениеПоУмолчанию = НастройкаВариантаКД.Заголовок;
		Если НастройкаВариантаКД.Расположение <> РасположениеПоляКомпоновкиДанных.Авто Тогда
			ПредставлениеПоУмолчанию = ПредставлениеПоУмолчанию + " (" + Строка(НастройкаВариантаКД.Расположение) + ")";
		КонецЕсли;

	// Оформление.
	ИначеЕсли СвойстваНастройки.Тип = "УсловноеОформление" Тогда
		ПредставлениеПоУмолчанию = "Оформление";
	ИначеЕсли СвойстваНастройки.Тип = "ЭлементУсловногоОформления" Тогда
		ПредставлениеПоУмолчанию = БазоваяПодсистемаКлиентСервер.ПредставлениеЭлементаУсловногоОформления(ПользовательскаяНастройкаКД, НастройкаВариантаКД, СвойстваНастройки.Состояние);

	// Структура.
	ИначеЕсли СвойстваНастройки.Тип = "Группировка"
		Или СвойстваНастройки.Тип = "ГруппировкаТаблицы"
		Или СвойстваНастройки.Тип = "ГруппировкаДиаграммы" Тогда
		ПредставлениеПоУмолчанию = СокрЛП(Строка(НастройкаВариантаКД.ПоляГруппировки));
		Если ПустаяСтрока(ПредставлениеПоУмолчанию) Тогда
			ПредставлениеПоУмолчанию = НСтр("ru = '<Детальные записи>'");
		Иначе
			ДоступныеПоляКД = НастройкаВариантаКД.ПоляГруппировки.ДоступныеПоляПолейГруппировок;
			Для Каждого ПолеГруппировкиКД Из НастройкаВариантаКД.ПоляГруппировки.Элементы Цикл
				Если ТипЗнч(ПолеГруппировкиКД) = Тип("ПолеГруппировкиКомпоновкиДанных")
					И ДоступныеПоляКД.НайтиПоле(ПолеГруппировкиКД.Поле) = Неопределено Тогда
					СвойстваНастройки.Состояние = "ПометкаУдаления";
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли СвойстваНастройки.Тип = "Таблица" Тогда
		ПредставлениеПоУмолчанию = НСтр("ru = 'Таблица'");
	ИначеЕсли СвойстваНастройки.Тип = "Диаграмма" Тогда
		ПредставлениеПоУмолчанию = НСтр("ru = 'Диаграмма'");
	ИначеЕсли СвойстваНастройки.Тип = "НастройкиВложенногоОбъекта" Тогда
		ПредставлениеПоУмолчанию = Строка(ПользовательскаяНастройкаКД);
		Если ПустаяСтрока(ПредставлениеПоУмолчанию) Тогда
			ПредставлениеПоУмолчанию = НСтр("ru = 'Вложенная группировка'");
		КонецЕсли;
	ИначеЕсли СвойстваНастройки.Тип = "СтруктураНастроек" Тогда
		ПредставлениеПоУмолчанию = НСтр("ru = 'Структура'");
	Иначе
		ПредставлениеПоУмолчанию = Строка(СвойстваНастройки.Тип);
	КонецЕсли;
	СвойстваНастройки.ПредставлениеПоУмолчанию = СокрЛП(ПредставлениеПоУмолчанию);

	Если СвойстваНастройки.ДоступнаяНастройкаКД = Неопределено
		И (СвойстваНастройки.Тип = "ЭлементОтбора"
			Или СвойстваНастройки.Тип = "ЗначениеПараметраНастроек"
			Или СвойстваНастройки.Тип = "ЭлементПорядка"
			Или СвойстваНастройки.Тип = "ВыбранноеПоле")Тогда
		СвойстваНастройки.Состояние = "ПометкаУдаления";
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СвойстваНастройки.Представление) Тогда
		СвойстваНастройки.Представление = СвойстваНастройки.ПредставлениеПоУмолчанию;
	КонецЕсли;
КонецПроцедуры

Функция ЗаголовокИзПараметровВывода(ПараметрыВывода)
	ВыводитьЗаголовокКД = ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьЗаголовок"));
	Если ВыводитьЗаголовокКД = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	Если ВыводитьЗаголовокКД.Использование = Истина
		И ВыводитьЗаголовокКД.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить Тогда
		Возврат "";
	КонецЕсли;
	// В значении Авто считается что заголовок выводится.
	// Когда параметр ВыводитьЗаголовок отключен это эквивалент значения Авто.
	ЗаголовокКД = ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок"));
	Если ЗаголовокКД = Неопределено Тогда
		Возврат "";
	КонецЕсли;

	Возврат ЗаголовокКД.Значение;
КонецФункции

Процедура ПриОпределенииПараметровВыбора(Информация, НастройкаВарианта)
	ПредставлениеДо	= Строка(НастройкаВарианта.ЗначенияДляВыбора);
	КоличествоДо	= НастройкаВарианта.ЗначенияДляВыбора.Количество();

	// Механизмы расширения.
	// Локальное переопределение для отчета.
	Если Информация.НастройкиОтчета.События.ПриОпределенииПараметровВыбора Тогда
		ОтчетОбъект(Информация.ОтчетОбъектИлиПолноеИмя).ПриОпределенииПараметровВыбора(Неопределено, НастройкаВарианта);
	КонецЕсли;

	// Автоматическое заполнение.
	Если НастройкаВарианта.ЗапросЗначенийВыбора.Текст <> "" Тогда
		ДобавляемыеЗначения = НастройкаВарианта.ЗапросЗначенийВыбора.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
		Для Каждого ЗначениеВФорме Из ДобавляемыеЗначения Цикл
			БазоваяПодсистемаКлиентСервер.ДобавитьУникальноеЗначениеВСписок(НастройкаВарианта.ЗначенияДляВыбора, ЗначениеВФорме, Неопределено, Ложь);
		КонецЦикла;
		НастройкаВарианта.ЗначенияДляВыбора.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	КонецЕсли;

	// Удаление значений, выбор которых запрещен.
	Если НастройкаВарианта.ВводСписком
		И НастройкаВарианта.ОграничиватьВыборУказаннымиЗначениями
		И ТипЗнч(НастройкаВарианта.Значение) = Тип("СписокЗначений")
		И ТипЗнч(НастройкаВарианта.ЗначенияДляВыбора) = Тип("СписокЗначений") Тогда
		Список = НастройкаВарианта.Значение;
		Количество = Список.Количество();
		Для Номер = 1 По Количество Цикл
			ОбратныйИндекс	= Количество - Номер;
			Значение		= Список[ОбратныйИндекс].Значение;
			Если НастройкаВарианта.ЗначенияДляВыбора.НайтиПоЗначению(Значение) = Неопределено Тогда
				Список.Удалить(ОбратныйИндекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если КоличествоДо <> НастройкаВарианта.ЗначенияДляВыбора.Количество() Или ПредставлениеДо <> Строка(НастройкаВарианта.ЗначенияДляВыбора) Тогда
		НастройкаВарианта.СписокЗначенийПереопределен = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ОтчетОбъект(ОтчетОбъектИлиПолноеИмя) Экспорт
	Если ТипЗнч(ОтчетОбъектИлиПолноеИмя) = Тип("Строка") Тогда
		ОтчетОбъектИлиПолноеИмя = БазоваяПодсистемаСервер.ОбъектПоПолномуИмени(ОтчетОбъектИлиПолноеИмя);
	КонецЕсли;

	Возврат ОтчетОбъектИлиПолноеИмя;
КонецФункции

Функция ЗапомнитьВыделенныеСтроки(Форма, ИмяТаблицы, КлючевыеКолонки) Экспорт
	ТаблицаРеквизит	= Форма[ИмяТаблицы];
	ТаблицаЭлемент	= Форма.Элементы[ИмяТаблицы];

	Результат = Новый Структура;
	Результат.Вставить("Выделенные", Новый Массив);
	Результат.Вставить("Текущая", Неопределено);

	ТекущаяИдентификатор = ТаблицаЭлемент.ТекущаяСтрока;
	Если ТекущаяИдентификатор <> Неопределено Тогда
		СтрокаТаблицы = ТаблицаРеквизит.НайтиПоИдентификатору(ТекущаяИдентификатор);
		Если СтрокаТаблицы <> Неопределено Тогда
			ДанныеСтроки		= Новый Структура(КлючевыеКолонки);
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТаблицы);
			Результат.Текущая	= ДанныеСтроки;
		КонецЕсли;
	КонецЕсли;

	ВыделенныеСтроки = ТаблицаЭлемент.ВыделенныеСтроки;
	Если ВыделенныеСтроки <> Неопределено Тогда
		Для Каждого ВыделеннаяИдентификатор Из ВыделенныеСтроки Цикл
			Если ВыделеннаяИдентификатор = ТекущаяИдентификатор Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы = ТаблицаРеквизит.НайтиПоИдентификатору(ВыделеннаяИдентификатор);
			Если СтрокаТаблицы <> Неопределено Тогда
				ДанныеСтроки = Новый Структура(КлючевыеКолонки);
				ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТаблицы);
				Результат.Выделенные.Добавить(ДанныеСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Процедура ВосстановитьВыделенныеСтроки(Форма, ИмяТаблицы, СтрокиТаблицы) Экспорт
	ТаблицаРеквизит	= Форма[ИмяТаблицы];
	ТаблицаЭлемент	= Форма.Элементы[ИмяТаблицы];

	ТаблицаЭлемент.ВыделенныеСтроки.Очистить();

	Если СтрокиТаблицы.Текущая <> Неопределено Тогда
		Найденные = ВариантыОтчетовКлиентСервер.НайтиСтрокиТаблицы(ТаблицаРеквизит, СтрокиТаблицы.Текущая);
		Если Найденные <> Неопределено И Найденные.Количество() > 0 Тогда
			Для Каждого СтрокаТаблицы Из Найденные Цикл
				Если СтрокаТаблицы <> Неопределено Тогда
					Идентификатор					= СтрокаТаблицы.ПолучитьИдентификатор();
					ТаблицаЭлемент.ТекущаяСтрока	= Идентификатор;

					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Для Каждого ДанныеСтроки Из СтрокиТаблицы.Выделенные Цикл
		Найденные = ВариантыОтчетовКлиентСервер.НайтиСтрокиТаблицы(ТаблицаРеквизит, ДанныеСтроки);
		Если Найденные <> Неопределено И Найденные.Количество() > 0 Тогда
			Для Каждого СтрокаТаблицы Из Найденные Цикл
				Если СтрокаТаблицы <> Неопределено Тогда
					ТаблицаЭлемент.ВыделенныеСтроки.Добавить(СтрокаТаблицы.ПолучитьИдентификатор());
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьФиксированныеОтборы(СтруктураОтборов, НастройкиКД, НастройкиОтчета) Экспорт
	Если ТипЗнч(НастройкиКД) <> Тип("НастройкиКомпоновкиДанных") Или СтруктураОтборов = Неопределено Или СтруктураОтборов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ПараметрыКД	= НастройкиКД.ПараметрыДанных;
	ОтборыКД	= НастройкиКД.Отбор;
	Недоступный = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Для Каждого КлючИЗначение Из СтруктураОтборов Цикл
		Имя			= КлючИЗначение.Ключ;
		Значение	= КлючИЗначение.Значение;
		Если ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
			Значение = Новый Массив(Значение);
		КонецЕсли;
		Если ТипЗнч(Значение) = Тип("Массив") Тогда
			Список		= Новый СписокЗначений;
			Список.ЗагрузитьЗначения(Значение);
			Значение	= Список;
		КонецЕсли;
		ПараметрКД	= ПараметрыКД.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(Имя));
		Если ТипЗнч(ПараметрКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			ПараметрКД.ИдентификаторПользовательскойНастройки	= "";
			ПараметрКД.Использование							= Истина;
			ПараметрКД.РежимОтображения							= Недоступный;
			ПараметрКД.Значение									= Значение;

			Продолжить;
		КонецЕсли;
		Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
			ВидСравненияКД	= ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			ВидСравненияКД	= ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		БазоваяПодсистемаКлиентСервер.УстановитьЭлементОтбора(ОтборыКД, Имя, Значение, ВидСравненияКД, , Истина, Недоступный, "");
	КонецЦикла;
КонецПроцедуры

Процедура ВывестиЭлементыНастройки(Форма, Элементы, СвойстваНастройки, ГруппаВывода, Прочее) Экспорт
	ЭлементВывода = Новый Структура("Размер, ИмяЭлемента1, ИмяЭлемента2");
	ЭлементВывода.Размер = 1;

	ШаблонИмениЭлемента = СвойстваНастройки.Тип + "_%1_" + СвойстваНастройки.ИдентификаторЭлемента;

	// Группа требуется для вывода некоторых типов полей.
	Если СвойстваНастройки.ТипЭлементов = "СтандартныйПериод" Или СвойстваНастройки.ТипЭлементов = "СписокСПодбором" Тогда
		ГруппаИмя					= СтрШаблон(ШаблонИмениЭлемента, "Группа");

		Группа						= Элементы.Добавить(ГруппаИмя, Тип("ГруппаФормы"), Элементы.НеОтсортированное);
		Группа.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
		Группа.Отображение			= ОтображениеОбычнойГруппы.Нет;
		Группа.Заголовок			= СвойстваНастройки.Представление;
		Группа.ОтображатьЗаголовок	= Ложь;
	КонецЕсли;

	// Условие.
	ВыводитьУсловие = (СвойстваНастройки.Тип = "ЭлементОтбора" И СвойстваНастройки.ТипЭлементов <> "СтандартныйПериод" И СвойстваНастройки.ТипЭлементов <> "ТолькоФлажокЗначения" И Не СвойстваНастройки.ВыводитьТолькоФлажок);

	Если ВыводитьУсловие Тогда
		Прочее.ЕстьОтборыСУсловиями		= Истина;

		КомандаВидСравненияИмя			= СтрШаблон(ШаблонИмениЭлемента, "ВидСравнения");
		КомандаВидСравнения				= Форма.Команды.Добавить(КомандаВидСравненияИмя);
		КомандаВидСравнения.Действие    = "Подключаемый_ИзменитьВидСравнения";
		КомандаВидСравнения.Заголовок   = НСтр("ru = 'Изменить условие отбора...'");
		КомандаВидСравнения.Подсказка   = КомандаВидСравнения.Заголовок; // Для платформы.
		КомандаВидСравнения.Отображение = ОтображениеКнопки.Текст;
		КомандаВидСравнения.Картинка    = БиблиотекаКартинок.ВидСравнения;
	КонецЕсли;

	// Флажок использования.
	Если СвойстваНастройки.ВыводитьФлажок Тогда
		ФлажокИмя = СтрШаблон(ШаблонИмениЭлемента, "Использование");

		Если СвойстваНастройки.ТипЭлементов = "СписокСПодбором" Тогда
			ГруппаДляФлажка				= Группа;
			ЭлементВывода.ИмяЭлемента1	= ГруппаИмя;
		Иначе
			ГруппаДляФлажка				= Элементы.НеОтсортированное;
			ЭлементВывода.ИмяЭлемента1	= ФлажокИмя;
		КонецЕсли;

		ЗаголовокФлажка = СвойстваНастройки.Представление;
		Если ВыводитьУсловие И СвойстваНастройки.ВидСравнения <> ВидСравненияКомпоновкиДанных.Равно И СвойстваНастройки.ВидСравнения <> ВидСравненияКомпоновкиДанных.ВСписке И СвойстваНастройки.ВидСравнения <> ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии И СвойстваНастройки.ВидСравнения <> ВидСравненияКомпоновкиДанных.Содержит И СвойстваНастройки.ТипЭлементов <> "УсловиеВРежимеПросмотра" Тогда
			ЗаголовокФлажка = ЗаголовокФлажка + " (" + НРег(Строка(СвойстваНастройки.ВидСравнения)) + ")";
		КонецЕсли;
		Если Не СвойстваНастройки.ВыводитьТолькоФлажок Тогда
			ЗаголовокФлажка = ЗаголовокФлажка + ":";
		КонецЕсли;

		Флажок				= Элементы.Добавить(ФлажокИмя, Тип("ПолеФормы"), ГруппаДляФлажка);
		Флажок.Вид			= ВидПоляФормы.ПолеФлажка;
		Флажок.Заголовок	= ЗаголовокФлажка;
		Если СтрДлина(ЗаголовокФлажка) > 40 Тогда // Если заголовок существенно длиннее остальных заголовков, переносим его.
			Флажок.ВысотаЗаголовка = 2;
		КонецЕсли;
		Флажок.ПутьКДанным			= Прочее.ПутьККомпоновщику + ".ПользовательскиеНастройки[" + СвойстваНастройки.ИндексВКоллекции + "].Использование";
		Флажок.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Право;
		Флажок.УстановитьДействие("ПриИзменении", "Подключаемый_ФлажокИспользование_ПриИзменении");

		Если ВыводитьУсловие Тогда
			КнопкаИмя						= СтрШаблон(ШаблонИмениЭлемента, "ВидСравнения_Использование");
			КнопкаВидСравнения				= Элементы.Добавить(КнопкаИмя, Тип("КнопкаФормы"), Флажок.КонтекстноеМеню);
			КнопкаВидСравнения.ИмяКоманды	= КомандаВидСравненияИмя;
		КонецЕсли;
	КонецЕсли;

	Если СвойстваНастройки.Тип = "ЗначениеПараметраНастроек"
		Или СвойстваНастройки.Тип = "ЭлементОтбора" Тогда

		Если СвойстваНастройки.ВводСписком Тогда
			СвойстваНастройки.ОтмеченныеЗначения = БазоваяПодсистемаКлиентСервер.ЗначенияСписком(СвойстваНастройки.Значение);
		КонецЕсли;

		// Сохранение параметров выбора настройки в дополнительных свойствах пользовательских настроек.
		НастройкиЭлемента = Новый Структура("Представление, ВыводитьФлажок,
		|ВводСписком, ОписаниеТипов, ПараметрыВыбора, ЗначенияДляВыбора, ЗначенияДляВыбораЗаполнены,
		|БыстрыйВыбор, ОграничиватьВыборУказаннымиЗначениями, ВыборГруппИЭлементов, ФормаВыбора");
		НастройкиЭлемента.ФормаВыбора					= СвойстваНастройки.ДоступнаяНастройкаКД.ФормаВыбора;
		НастройкиЭлемента.ЗначенияДляВыбораЗаполнены	= Ложь;
		ЗаполнитьЗначенияСвойств(НастройкиЭлемента, СвойстваНастройки);
		Прочее.ДополнительныеНастройкиЭлементов.Вставить(СвойстваНастройки.ИдентификаторЭлемента, НастройкиЭлемента);
	КонецЕсли;

	// Поля для значений.
	Если СвойстваНастройки.ТипЭлементов <> "" Тогда
		ИнформацияОТипах = СвойстваНастройки.ИнформацияОТипах;

		////////////////////////////////////////////////////////////////////////////////
		// ВЫВОД.

		ЗначениеИмя = СтрШаблон(ШаблонИмениЭлемента, "Значение");

		Если СвойстваНастройки.ТипЭлементов = "ТолькоФлажокЗначения" Тогда
			БыстрыеНастройкиДобавитьРеквизит(Прочее.ПараметрыЗаполнения, ЗначениеИмя, СвойстваНастройки.ОписаниеТипов);

			ЭлементВывода.ИмяЭлемента1		= ЗначениеИмя;

			ПолеФлажка						= Элементы.Добавить(ЗначениеИмя, Тип("ПолеФормы"), Группа);
			ПолеФлажка.Вид					= ВидПоляФормы.ПолеФлажка;
			ПолеФлажка.Заголовок			= СвойстваНастройки.Представление;
			Если СтрДлина(СвойстваНастройки.Представление) > 40 Тогда // Если заголовок существенно длиннее остальных заголовков, переносим его.
				ПолеФлажка.ВысотаЗаголовка = 2;
			КонецЕсли;
			ПолеФлажка.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Право;
			ПолеФлажка.УстановитьДействие("ПриИзменении", "Подключаемый_ФлажокЗначения_ПриИзменении");

			Если ВыводитьУсловие Тогда
				КнопкаВидСравнения				= Элементы.Добавить(КомандаВидСравненияИмя, Тип("КнопкаФормы"), ПолеФлажка.КонтекстноеМеню);
				КнопкаВидСравнения.ИмяКоманды	= КомандаВидСравненияИмя;
			КонецЕсли;

			Прочее.ДобавленныеПоляВвода.Вставить(ЗначениеИмя, СвойстваНастройки.Значение);
		ИначеЕсли СвойстваНастройки.ТипЭлементов = "УсловиеВРежимеПросмотра" Тогда
			ЭлементВывода.ИмяЭлемента2 = ЗначениеИмя;

			ПолеВвода						= Элементы.Добавить(ЗначениеИмя, Тип("ПолеФормы"), Группа);
			ПолеВвода.Вид					= ВидПоляФормы.ПолеВвода;
			ПолеВвода.Заголовок				= СвойстваНастройки.Представление;
			ПолеВвода.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеВвода.ТолькоПросмотр		= Истина;
			ПолеВвода.ПутьКДанным			= Прочее.ПутьККомпоновщику + ".ПользовательскиеНастройки[" + СвойстваНастройки.ИндексВКоллекции + "].ВидСравнения";
			ПолеВвода.УстановитьДействие("НачалоВыбора", "Подключаемый_ВидСравнения_НачалоВыбора");

			Если ВыводитьУсловие Тогда
				КнопкаВидСравнения				= Элементы.Добавить(КомандаВидСравненияИмя, Тип("КнопкаФормы"), ПолеВвода.КонтекстноеМеню);
				КнопкаВидСравнения.ИмяКоманды	= КомандаВидСравненияИмя;
			КонецЕсли;
		ИначеЕсли СвойстваНастройки.ТипЭлементов = "СвязьСКомпоновщиком" Тогда
			Прочее.ИменаОсновныхРеквизитовФормы.Вставить(СвойстваНастройки.ИдентификаторЭлемента, ЗначениеИмя);
			Прочее.ИменаЭлементовДляУстановкиСвязей.Вставить(СвойстваНастройки.ИдентификаторЭлемента, ЗначениеИмя);

			ЭлементВывода.ИмяЭлемента2 = ЗначениеИмя;

			ПолеВвода						= Элементы.Добавить(ЗначениеИмя, Тип("ПолеФормы"), Группа);
			ПолеВвода.Вид					= ВидПоляФормы.ПолеВвода;
			ПолеВвода.Заголовок				= СвойстваНастройки.Представление;
			ПолеВвода.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
			Если СтрДлина(СвойстваНастройки.Представление) > 40 Тогда // Если заголовок существенно длиннее остальных заголовков, переносим его.
				ПолеВвода.ВысотаЗаголовка = 2;
			КонецЕсли;

			// Связь с СКД.
			ПолеВвода.ПутьКДанным = Прочее.ПутьККомпоновщику + ".ПользовательскиеНастройки[" + СвойстваНастройки.ИндексВКоллекции + "].Значение";

			Если СвойстваНастройки.Тип = "ЗначениеПараметраНастроек" Или СвойстваНастройки.Тип = "ЭлементОтбора" Тогда
				ПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_ПолеВвода_ПриИзменении");

				Если СвойстваНастройки.ВводСписком Тогда
					ПолеВвода.УстановитьДействие("НачалоВыбора", "Подключаемый_СписокКомпоновщика_НачалоВыбора");
				КонецЕсли;

				ПолеВвода.БыстрыйВыбор = СвойстваНастройки.БыстрыйВыбор;
				ЗаполнитьЗначенияСвойств(ПолеВвода, СвойстваНастройки.ДоступнаяНастройкаКД, "Маска, ФормаВыбора, ФорматРедактирования");

				ВывозитьКнопкуОчистки = Истина;
				Если СвойстваНастройки.Тип = "ЗначениеПараметраНастроек" Тогда
					ПолеВвода.АвтоОтметкаНезаполненного	= СвойстваНастройки.ДоступнаяНастройкаКД.ЗапрещатьНезаполненныеЗначения;
					ВывозитьКнопкуОчистки				= СвойстваНастройки.ДоступнаяНастройкаКД.Использование <> ИспользованиеПараметраКомпоновкиДанных.Всегда;
				КонецЕсли;

				ПолеВвода.ВыборГруппИЭлементов = СвойстваНастройки.ВыборГруппИЭлементов;

				// Поля ввода следующих типов не растягиваются по горизонтали и не имеют кнопки очистки:
				//     Дата, Булево, Число, Тип.
				ПолеВвода.КнопкаОткрытия           = Ложь;
				ПолеВвода.КнопкаРегулирования      = Ложь;
				ПолеВвода.КнопкаОчистки            = ИнформацияОТипах.СодержитОбъектныеТипы И ВывозитьКнопкуОчистки;
				ПолеВвода.РастягиватьПоГоризонтали = ИнформацияОТипах.СодержитОбъектныеТипы;

				Если Не СвойстваНастройки.ВводСписком Тогда
					Если СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями И СвойстваНастройки.ЗначенияДляВыбора.Количество() > 0 Тогда
						Для Каждого ЭлементСпискаВФорме Из СвойстваНастройки.ЗначенияДляВыбора Цикл
							ЗаполнитьЗначенияСвойств(ПолеВвода.СписокВыбора.Добавить(), ЭлементСпискаВФорме);
						КонецЦикла;
						ПолеВвода.РежимВыбораИзСписка      = Истина;
						ПолеВвода.КнопкаСоздания           = Ложь;
						ПолеВвода.КнопкаВыбора             = Ложь;
						ПолеВвода.КнопкаВыпадающегоСписка  = Истина;
						ПолеВвода.РастягиватьПоГоризонтали = Истина;
					ИначеЕсли СвойстваНастройки.НастройкаВарианта.СвязиПараметровВыбора.Количество() > 0 Или СвойстваНастройки.НастройкаВарианта.СвязиПоМетаданным.Количество() > 0 Тогда
						// Когда есть отключаемые связи "ПоМетаданным" или "ПараметровВыбора" от подчиненного,
						// тогда для выбора используется прикладная логика.
						ПолеВвода.УстановитьДействие("НачалоВыбора", "Подключаемый_ЗначениеКомпоновщика_НачалоВыбора");
					КонецЕсли;
					// Для платформы (переопределение доступных значений на клиенте).
					Если СвойстваНастройки.НастройкаВарианта.СписокЗначенийПереопределен Тогда
						РезультатКлиента = Прочее.ПараметрыЗаполнения.Результат;
						СвоиСпискиВыбора = БазоваяПодсистемаКлиентСервер.СвойствоСтруктуры(РезультатКлиента, "СвоиСпискиВыбора");
						Если СвоиСпискиВыбора = Неопределено Тогда
							СвоиСпискиВыбора = Новый Массив;
							РезультатКлиента.Вставить("СвоиСпискиВыбора", СвоиСпискиВыбора);
						КонецЕсли;
						Если СвоиСпискиВыбора.Найти(СвойстваНастройки.ИдентификаторЭлемента) = Неопределено Тогда
							СвоиСпискиВыбора.Добавить(СвойстваНастройки.ИдентификаторЭлемента);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				// Увеличение размера поля типа 'Дата' чтобы вмещались варианты выбора 'СтандартнаяДатаНачала'.
				Если ПолеВвода.РастягиватьПоГоризонтали = Ложь И ИнформацияОТипах.СодержитТипДата И ИнформацияОТипах.КоличествоТипов = 1 Тогда
					ПолеВвода.РастягиватьПоГоризонтали = Истина;
					ПолеВвода.АвтоМаксимальнаяШирина   = Ложь;
					ПолеВвода.МаксимальнаяШирина       = 25;
				КонецЕсли;

				// Условие.
				Если ВыводитьУсловие Тогда
					КнопкаВидСравнения				= Элементы.Добавить(КомандаВидСравненияИмя, Тип("КнопкаФормы"), ПолеВвода.КонтекстноеМеню);
					КнопкаВидСравнения.ИмяКоманды	= КомандаВидСравненияИмя;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СвойстваНастройки.ТипЭлементов = "СтандартныйПериод" Тогда
			Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;

			ЭлементВывода.Размер = 1;
			ЭлементВывода.ИмяЭлемента2 = ГруппаИмя;

			ПериодНачалоИмя    = СтрШаблон(ШаблонИмениЭлемента, "Начало");
			ПериодОкончаниеИмя = СтрШаблон(ШаблонИмениЭлемента, "Окончание");
			ТиреИмя            = СтрШаблон(ШаблонИмениЭлемента, "Тире");
			КнопкаВыбораИмя    = СтрШаблон(ШаблонИмениЭлемента, "КнопкаВыбора");

			// Реквизиты.
			БыстрыеНастройкиДобавитьРеквизит(Прочее.ПараметрыЗаполнения, ЗначениеИмя, "СтандартныйПериод");

			// Начало произвольного периода.
			ПериодНачало							= Элементы.Добавить(ПериодНачалоИмя, Тип("ПолеФормы"), Группа);
			ПериодНачало.Вид						= ВидПоляФормы.ПолеВвода;
			ПериодНачало.Ширина						= 9;
			ПериодНачало.РастягиватьПоГоризонтали	= Ложь;
			ПериодНачало.КнопкаВыбора				= Истина;
			ПериодНачало.КнопкаОткрытия				= Ложь;
			ПериодНачало.КнопкаОчистки				= Ложь;
			ПериодНачало.КнопкаРегулирования		= Ложь;
			ПериодНачало.РедактированиеТекста		= Истина;
			ПериодНачало.ПоложениеЗаголовка			= ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПериодНачало.УстановитьДействие("ПриИзменении", "Подключаемый_СтандартныйПериод_НачалоПериода_ПриИзменении");

			Если СвойстваНастройки.Тип = "ЗначениеПараметраНастроек" Тогда
				ПериодНачало.АвтоОтметкаНезаполненного = СвойстваНастройки.ДоступнаяНастройкаКД.ЗапрещатьНезаполненныеЗначения;
			КонецЕсли;

			Тире			= Элементы.Добавить(ТиреИмя, Тип("ДекорацияФормы"), Группа);
			Тире.Вид		= ВидДекорацииФормы.Надпись;
			Тире.Заголовок	= Символ(8211); // Среднее тире (en dash).

			// Окончание произвольного периода.
			ПериодОкончание = Элементы.Добавить(ПериодОкончаниеИмя, Тип("ПолеФормы"), Группа);
			ПериодОкончание.Вид = ВидПоляФормы.ПолеВвода;
			ЗаполнитьЗначенияСвойств(ПериодОкончание, ПериодНачало, "РастягиватьПоГоризонтали, Ширина, ПоложениеЗаголовка,
			|РедактированиеТекста, КнопкаВыбора, КнопкаОткрытия, КнопкаОчистки, КнопкаРегулирования, АвтоОтметкаНезаполненного");
			ПериодОкончание.УстановитьДействие("ПриИзменении", "Подключаемый_СтандартныйПериод_КонецПериода_ПриИзменении");

			// Кнопка выбора.
			КомандаВыбора				= Форма.Команды.Добавить(КнопкаВыбораИмя);
			КомандаВыбора.Действие		= "Подключаемый_ВыбратьПериод";
			КомандаВыбора.Заголовок		= "Выбрать период...";
			КомандаВыбора.Подсказка		= КомандаВыбора.Заголовок; // Для платформы.
			КомандаВыбора.Отображение	= ОтображениеКнопки.Картинка;
			КомандаВыбора.Картинка		= БиблиотекаКартинок.Выбрать;

			КнопкаВыбора				= Элементы.Добавить(КнопкаВыбораИмя, Тип("КнопкаФормы"), Группа);
			КнопкаВыбора.ИмяКоманды		= КнопкаВыбораИмя;

			Дополнительно = Новый Структура;
			Дополнительно.Вставить("ЗначениеИмя",        ЗначениеИмя);
			Дополнительно.Вставить("ПериодНачалоИмя",    ПериодНачалоИмя);
			Дополнительно.Вставить("ПериодОкончаниеИмя", ПериодОкончаниеИмя);
			СвойстваНастройки.Дополнительно = Дополнительно;
			Прочее.ДобавленныеСтандартныеПериоды.Добавить(СвойстваНастройки);
		ИначеЕсли СвойстваНастройки.ТипЭлементов = "СписокСПодбором" Тогда
			Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;

			ЭлементВывода.Размер = 5;
			ЭлементВывода.ИмяЭлемента1 = ГруппаИмя;

			ГруппаЗаголовокИмя		= СтрШаблон(ШаблонИмениЭлемента, "ГруппаЗаголовка");
			ДекорацияИмя       		= СтрШаблон(ШаблонИмениЭлемента, "Декорация");
			ТаблицаИмя              = СтрШаблон(ШаблонИмениЭлемента, "СписокЗначений");
			ГруппаКолонокИмя        = СтрШаблон(ШаблонИмениЭлемента, "ГруппаКолонок");
			КолонкаИспользованиеИмя	= СтрШаблон(ШаблонИмениЭлемента, "Колонка_Использование");
			КолонкаЗначениеИмя      = СтрШаблон(ШаблонИмениЭлемента, "Колонка_Значение");
			КнопкаПодборИмя			= СтрШаблон(ШаблонИмениЭлемента, "Подбор");
			КнопкаВставитьИмя		= СтрШаблон(ШаблонИмениЭлемента, "ВставитьИзБуфера");

			Прочее.ИменаОсновныхРеквизитовФормы.Вставить(СвойстваНастройки.ИдентификаторЭлемента, ТаблицаИмя);
			Прочее.ИменаЭлементовДляУстановкиСвязей.Вставить(СвойстваНастройки.ИдентификаторЭлемента, КолонкаЗначениеИмя);

			Если Не СвойстваНастройки.ВыводитьФлажок Или Не СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
				// Группа-строка для заголовка и командной панели таблицы.
				ГруппаЗаголовокТаблицы						= Элементы.Добавить(ГруппаЗаголовокИмя, Тип("ГруппаФормы"), Группа);
				ГруппаЗаголовокТаблицы.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
				ГруппаЗаголовокТаблицы.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				ГруппаЗаголовокТаблицы.Отображение			= ОтображениеОбычнойГруппы.Нет;
				ГруппаЗаголовокТаблицы.ОтображатьЗаголовок	= Ложь;

				// Флажок уже создан.
				Если СвойстваНастройки.ВыводитьФлажок Тогда
					Элементы.Переместить(Флажок, ГруппаЗаголовокТаблицы);
				КонецЕсли;

				// Заголовок / Пустая декорация.
				ПустаяДекорация								= Элементы.Добавить(ДекорацияИмя, Тип("ДекорацияФормы"), ГруппаЗаголовокТаблицы);
				ПустаяДекорация.Вид							= ВидДекорацииФормы.Надпись;
				ПустаяДекорация.Заголовок					= ?(СвойстваНастройки.ВыводитьФлажок, " ", СвойстваНастройки.Представление + ":");
				ПустаяДекорация.АвтоМаксимальнаяШирина		= Ложь;
				ПустаяДекорация.РастягиватьПоГоризонтали	= Истина;

				// Кнопки.
				Если Не СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
					Если ИнформацияОТипах.СодержитСсылочныеТипы Тогда
						КомандаПодбор			= Форма.Команды.Добавить(КнопкаПодборИмя);
						КомандаПодбор.Действие  = "Подключаемый_СписокСПодбором_Подбор";
						КомандаПодбор.Заголовок = "Подбор";
					Иначе
						КомандаПодбор			= Форма.Команды.Добавить(КнопкаПодборИмя);
						КомандаПодбор.Действие  = "Подключаемый_СписокСПодбором_Добавить";
						КомандаПодбор.Заголовок = "Добавить";
						КомандаПодбор.Картинка  = БиблиотекаКартинок.СоздатьЭлементСписка;
					КонецЕсли;

					КнопкаПодбор				= Элементы.Добавить(КнопкаПодборИмя, Тип("КнопкаФормы"), ГруппаЗаголовокТаблицы);
					КнопкаПодбор.ИмяКоманды		= КнопкаПодборИмя;
					КнопкаПодбор.Вид			= ВидКнопкиФормы.Гиперссылка;
					КнопкаПодбор.Отображение	= ОтображениеКнопки.Текст;

					Если СвойстваНастройки.ИнформацияОТипах.СодержитСсылочныеТипы И Прочее.ЕстьЗагрузкаДанныхИзФайла Тогда
						КомандаВставить				= Форма.Команды.Добавить(КнопкаВставитьИмя);
						КомандаВставить.Действие	= "Подключаемый_СписокСПодбором_ВставитьИзБуфера";
						КомандаВставить.Заголовок	= "Вставить из буфера обмена...";
						КомандаВставить.Подсказка	= КомандаВставить.Заголовок; // Для платформы.
						КомандаВставить.Картинка	= БиблиотекаКартинок.ВставитьИзБуфераОбмена;

						КнопкаВставить				= Элементы.Добавить(КнопкаВставитьИмя, Тип("КнопкаФормы"), ГруппаЗаголовокТаблицы);
						КнопкаВставить.ИмяКоманды	= КнопкаВставитьИмя;
						КнопкаВставить.Вид			= ВидКнопкиФормы.Гиперссылка;
						КнопкаВставить.Отображение	= ОтображениеКнопки.Картинка;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			// Реквизит.
			БыстрыеНастройкиДобавитьРеквизит(Прочее.ПараметрыЗаполнения, ТаблицаИмя, "СписокЗначений");

			// Группа с отступом и таблицей.
			ГруппаСОтступом						= Элементы.Добавить(ГруппаИмя + "Отступ", Тип("ГруппаФормы"), Группа);
			ГруппаСОтступом.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаСОтступом.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаСОтступом.Отображение         = ОтображениеОбычнойГруппы.Нет;
			ГруппаСОтступом.Заголовок           = СвойстваНастройки.Представление;
			ГруппаСОтступом.ОтображатьЗаголовок = Ложь;

			// Декорация отступа.
			ПустаяДекорация								= Элементы.Добавить(ДекорацияИмя + "Отступ", Тип("ДекорацияФормы"), ГруппаСОтступом);
			ПустаяДекорация.Вид							= ВидДекорацииФормы.Надпись;
			ПустаяДекорация.Заголовок					= "     ";
			ПустаяДекорация.РастягиватьПоГоризонтали	= Ложь;

			// Таблица.
			ТаблицаФормы							= Элементы.Добавить(ТаблицаИмя, Тип("ТаблицаФормы"), ГруппаСОтступом);
			ТаблицаФормы.Отображение				= ОтображениеТаблицы.Список;
			ТаблицаФормы.Заголовок					= СвойстваНастройки.Представление;
			ТаблицаФормы.ПоложениеЗаголовка			= ПоложениеЗаголовкаЭлементаФормы.Нет;
			ТаблицаФормы.ПоложениеКоманднойПанели	= ПоложениеКоманднойПанелиЭлементаФормы.Нет;
			ТаблицаФормы.ВертикальныеЛинии			= Ложь;
			ТаблицаФормы.ГоризонтальныеЛинии		= Ложь;
			ТаблицаФормы.Шапка						= Ложь;
			ТаблицаФормы.Подвал						= Ложь;
			ТаблицаФормы.ИзменятьПорядокСтрок		= Не СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями;
			ТаблицаФормы.ИзменятьСоставСтрок		= Не СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями;
			ТаблицаФормы.РастягиватьПоГоризонтали	= Истина;
			ТаблицаФормы.РастягиватьПоВертикали		= Истина;
			ТаблицаФормы.Высота						= 3;

			Если СвойстваНастройки.ВыводитьФлажок Тогда
				Если Не СвойстваНастройки.ПользовательскаяНастройкаКД.Использование Тогда
					ТаблицаФормы.ЦветТекста = Форма.ЦветНеактивныхЗначенийТаблицы;
				КонецЕсли;
			КонецЕсли;

			// Группа колонок "в ячейке".
			ГруппаКолонок				= Элементы.Добавить(ГруппаКолонокИмя, Тип("ГруппаФормы"), ТаблицаФормы);
			ГруппаКолонок.Вид			= ВидГруппыФормы.ГруппаКолонок;
			ГруппаКолонок.Группировка	= ГруппировкаКолонок.ВЯчейке;

			// Колонка "Использование".
			КолонкаИспользованиеЭлемент		= Элементы.Добавить(КолонкаИспользованиеИмя, Тип("ПолеФормы"), ГруппаКолонок);
			КолонкаИспользованиеЭлемент.Вид = ВидПоляФормы.ПолеФлажка;

			// Колонка "Значение".
			КолонкаЗначениеЭлемент				= Элементы.Добавить(КолонкаЗначениеИмя, Тип("ПолеФормы"), ГруппаКолонок);
			КолонкаЗначениеЭлемент.Вид			= ВидПоляФормы.ПолеВвода;
			КолонкаЗначениеЭлемент.БыстрыйВыбор = СвойстваНастройки.БыстрыйВыбор;

			ЗаполнитьЗначенияСвойств(КолонкаЗначениеЭлемент, СвойстваНастройки.ДоступнаяНастройкаКД, "Маска, ФормаВыбора, ФорматРедактирования");

			КолонкаЗначениеЭлемент.ВыборГруппИЭлементов = СвойстваНастройки.ВыборГруппИЭлементов;
			Если СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
				КолонкаЗначениеЭлемент.ТолькоПросмотр = Истина;
			КонецЕсли;

			// Заполнение имен объектов метаданных в разрезах типов и идентификаторов элементов (для предустановленных).
			// Используется при клике по кнопке "Подбор" для получения имени формы подбора.
			Если ЗначениеЗаполнено(КолонкаЗначениеЭлемент.ФормаВыбора) Тогда
				Прочее.СоответствиеИменОбъектовМетаданных.Вставить(СвойстваНастройки.ИдентификаторЭлемента, КолонкаЗначениеЭлемент.ФормаВыбора);
			КонецЕсли;

			// Фиксированные параметры выбора.
			Если СвойстваНастройки.ПараметрыВыбора.Количество() > 0 Тогда
				КолонкаЗначениеЭлемент.ПараметрыВыбора = Новый ФиксированныйМассив(СвойстваНастройки.ПараметрыВыбора);
			КонецЕсли;

			Если ВыводитьУсловие Тогда
				КнопкаВидСравнения				= Элементы.Добавить(КомандаВидСравненияИмя, Тип("КнопкаФормы"), ТаблицаФормы.КонтекстноеМеню);
				КнопкаВидСравнения.ИмяКоманды	= КомандаВидСравненияИмя;
			КонецЕсли;

			Дополнительно = Новый Структура;
			Дополнительно.Вставить("ТаблицаИмя",              ТаблицаИмя);
			Дополнительно.Вставить("ИмяКолонкиЗначение",      КолонкаЗначениеИмя);
			Дополнительно.Вставить("ИмяКолонкиИспользование", КолонкаИспользованиеИмя);
			СвойстваНастройки.Дополнительно = Дополнительно;
			Прочее.ДобавленныеСпискиЗначений.Добавить(СвойстваНастройки);
		КонецЕсли;
	КонецЕсли;

	Если ЭлементВывода.ИмяЭлемента1 = Неопределено Тогда
		ЗаголовокИмя				= СтрШаблон(ШаблонИмениЭлемента, "Заголовок");
		ПолеНадписи					= Элементы.Добавить(ЗаголовокИмя, Тип("ДекорацияФормы"), Элементы.НеОтсортированное);
		ПолеНадписи.Вид				= ВидДекорацииФормы.Надпись;
		ПолеНадписи.Заголовок		= СвойстваНастройки.Представление + ":";
		ЭлементВывода.ИмяЭлемента1	= ЗаголовокИмя;
	КонецЕсли;

	Если СвойстваНастройки.ТипЭлементов = "СтандартныйПериод" Тогда
		ГруппаВывода.Порядок.Вставить(0, ЭлементВывода);
	Иначе
		ГруппаВывода.Порядок.Добавить(ЭлементВывода);
	КонецЕсли;
	ГруппаВывода.Размер = ГруппаВывода.Размер + ЭлементВывода.Размер;

	ПараметрыРасположенияЭлементовУправления = БазоваяПодсистемаКлиентСервер.СвойствоСтруктуры(Форма.НастройкиОтчета, "ПараметрыРасположенияЭлементовУправления");

	Если ПараметрыРасположенияЭлементовУправления <> Неопределено Тогда
		Для Каждого ПараметрРасположенияЭлементаУправления Из ПараметрыРасположенияЭлементовУправления Цикл
			КлючНастроек		= ПараметрРасположенияЭлементаУправления.Ключ;
			ЗначенияНастроек	= ПараметрРасположенияЭлементаУправления.Значение;

			Настройки			= Форма.Отчет.КомпоновщикНастроек.Настройки[КлючНастроек].Элементы;
			Для Каждого Настройка Из Настройки Цикл
				Для Каждого ЗначениеНастройки Из ЗначенияНастроек Цикл
					ЦелевойЭлемент = Неопределено;

					Если КлючНастроек = "Отбор" Тогда
						ПолеСКД = Новый ПолеКомпоновкиДанных(ЗначениеНастройки.Поле);
						Если ПолеСКД = Настройка.ЛевоеЗначение Тогда
							ЦелевойЭлемент = Элементы.Найти("ЭлементОтбора_Значение_" + СтрЗаменить(Настройка.ИдентификаторПользовательскойНастройки, "-", ""));
						КонецЕсли;
					ИначеЕсли КлючНастроек = "ПараметрыДанных" Тогда
						ПараметрСКД = Новый ПараметрКомпоновкиДанных(ЗначениеНастройки.Поле);
						Если ПараметрСКД = Настройка.Параметр Тогда
							ЦелевойЭлемент = Элементы.Найти("ЗначениеПараметраНастроек_Значение_" + СтрЗаменить(Настройка.ИдентификаторПользовательскойНастройки, "-", ""));
						КонецЕсли;
					КонецЕсли;

					Если ЦелевойЭлемент <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(ЦелевойЭлемент, ЗначениеНастройки);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ВывестиПоПорядку(Форма, ГруппаВывода, Родитель, КоличествоКолонок, ГибкаяБалансировка = Истина) Экспорт
	Элементы = Форма.Элементы;
	Если ГибкаяБалансировка Тогда
		Если ГруппаВывода.Размер <= 7 Тогда
			КоличествоКолонок = 1;
		КонецЕсли;
	КонецЕсли;

	РодительИмя				= Родитель.Имя;

	НомерКолонки			= 0;
	ОсталосьКолонок			= КоличествоКолонок + 1;
	ОсталосьМестаВсего		= ГруппаВывода.Размер;
	ОсталосьМестаВКолонке	= 0;

	Для Каждого ЭлементВывода Из ГруппаВывода.Порядок Цикл
		Если ОсталосьКолонок > 0 И ЭлементВывода.Размер > ОсталосьМестаВКолонке * 4 Тогда // Текущий шаг больше оставшегося места.
			НомерКолонки			= НомерКолонки + 1;
			ОсталосьКолонок			= ОсталосьКолонок - 1;
			ОсталосьМестаВКолонке	= ОсталосьМестаВсего / ОсталосьКолонок;

			КолонкаВерхнегоУровня						= Элементы.Добавить(РодительИмя + НомерКолонки, Тип("ГруппаФормы"), Элементы[РодительИмя]);
			КолонкаВерхнегоУровня.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
			КолонкаВерхнегоУровня.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			КолонкаВерхнегоУровня.Отображение			= ОтображениеОбычнойГруппы.Нет;
			КолонкаВерхнегоУровня.ОтображатьЗаголовок	= Ложь;

			НомерПодгруппы = 0;
			ТекущаяГруппа1 = Неопределено;
			ТекущаяГруппа2 = Неопределено;
		КонецЕсли;

		Если ЭлементВывода.ИмяЭлемента2 = Неопределено Тогда
			// Вывод в одну колонку.
			ТекущаяГруппа2 = Неопределено;
			Элементы.Переместить(Элементы[ЭлементВывода.ИмяЭлемента1], КолонкаВерхнегоУровня);
		Иначе
			// Вывод в две колонки.
			Если ТекущаяГруппа2 = Неопределено Тогда
				НомерПодгруппы = НомерПодгруппы + 1;

				Колонки						= Элементы.Добавить(РодительИмя + НомерКолонки + "_" + НомерПодгруппы, Тип("ГруппаФормы"), КолонкаВерхнегоУровня);
				Колонки.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
				Колонки.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				Колонки.Отображение         = ОтображениеОбычнойГруппы.Нет;
				Колонки.ОтображатьЗаголовок = Ложь;

				ТекущаяГруппа1						= Элементы.Добавить(РодительИмя + НомерКолонки + "_" + НомерПодгруппы + "_1", Тип("ГруппаФормы"), Колонки);
				ТекущаяГруппа1.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
				ТекущаяГруппа1.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
				ТекущаяГруппа1.Отображение			= ОтображениеОбычнойГруппы.Нет;
				ТекущаяГруппа1.ОтображатьЗаголовок	= Ложь;
				ТекущаяГруппа1.Объединенная			= Ложь;

				ТекущаяГруппа2						= Элементы.Добавить(РодительИмя + НомерКолонки + "_" + НомерПодгруппы + "_2", Тип("ГруппаФормы"), Колонки);
				ТекущаяГруппа2.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
				ТекущаяГруппа2.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
				ТекущаяГруппа2.Отображение			= ОтображениеОбычнойГруппы.Нет;
				ТекущаяГруппа2.ОтображатьЗаголовок	= Ложь;
				ТекущаяГруппа2.Объединенная			= Ложь;
			КонецЕсли;
			Элементы.Переместить(Элементы[ЭлементВывода.ИмяЭлемента1], ТекущаяГруппа1);
			Элементы.Переместить(Элементы[ЭлементВывода.ИмяЭлемента2], ТекущаяГруппа2);
		КонецЕсли;

		ОсталосьМестаВсего		= ОсталосьМестаВсего - ЭлементВывода.Размер;
		ОсталосьМестаВКолонке	= ОсталосьМестаВКолонке - ЭлементВывода.Размер;
	КонецЦикла;
КонецПроцедуры

Процедура БыстрыеНастройкиДобавитьРеквизит(ПараметрыЗаполнения, РеквизитПолноеИмя, ТипРеквизита)
	Если ТипЗнч(ТипРеквизита) = Тип("ОписаниеТипов") Тогда
		ТипыДобавляемого	= ТипРеквизита;
	ИначеЕсли ТипЗнч(ТипРеквизита) = Тип("Строка") Тогда
		ТипыДобавляемого	= Новый ОписаниеТипов(ТипРеквизита);
	ИначеЕсли ТипЗнч(ТипРеквизита) = Тип("Массив") Тогда
		ТипыДобавляемого	= Новый ОписаниеТипов(ТипРеквизита);
	ИначеЕсли ТипЗнч(ТипРеквизита) = Тип("Тип") Тогда
		МассивТипов			= Новый Массив;
		МассивТипов.Добавить(ТипРеквизита);
		ТипыДобавляемого	= Новый ОписаниеТипов(МассивТипов);
	Иначе
		Возврат;
	КонецЕсли;

	ТипыСуществующего = ПараметрыЗаполнения.Реквизиты.Существующие.Получить(РеквизитПолноеИмя);
	Если ОписанияТиповСовпадают(ТипыСуществующего, ТипыДобавляемого) Тогда
		ПараметрыЗаполнения.Реквизиты.Существующие.Удалить(РеквизитПолноеИмя);
	Иначе
		ПозицияТочки = СтрНайти(РеквизитПолноеИмя, ".");
		Если ПозицияТочки = 0 Тогда
			ПутьКРеквизиту		= "";
			КраткоеИмяРеквизита = РеквизитПолноеИмя;
		Иначе
			ПутьКРеквизиту		= Лев(РеквизитПолноеИмя, ПозицияТочки - 1);
			КраткоеИмяРеквизита = Сред(РеквизитПолноеИмя, ПозицияТочки + 1);
		КонецЕсли;

		ПараметрыЗаполнения.Реквизиты.Добавляемые.Добавить(Новый РеквизитФормы(КраткоеИмяРеквизита, ТипыДобавляемого, ПутьКРеквизиту));
		Если ТипыСуществующего <> Неопределено Тогда
			ПараметрыЗаполнения.Реквизиты.Удаляемые.Добавить(РеквизитПолноеИмя);
			ПараметрыЗаполнения.Реквизиты.Существующие.Удалить(РеквизитПолноеИмя);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ОписанияТиповСовпадают(ОписаниеТипов1, ОписаниеТипов2) Экспорт
	Если ОписаниеТипов1 = Неопределено Или ОписаниеТипов2 = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат ОписаниеТипов1 = ОписаниеТипов2 Или БазоваяПодсистемаСервер.ЗначениеВСтрокуXML(ОписаниеТипов1) = БазоваяПодсистемаСервер.ЗначениеВСтрокуXML(ОписаниеТипов2);
КонецФункции

// Определяет что отчет пустой.
//
// Параметры:
//   ОтчетОбъект - ОтчетОбъект, ВнешнийОтчетОбъект - проверяемый отчет.
//   ПроцессорКД - ПроцессорКомпоновкиДанных - объект, выполняющий компоновку данных в отчете.
//
// Возвращаемое значение:
//   Булево - Истина, если отчет пустой. Ложь, если отчет содержит данные.
//
Функция ОтчетПустой(ОтчетОбъект, ПроцессорКД = Неопределено) Экспорт
	Если ПроцессорКД = Неопределено Тогда
		Если ОтчетОбъект.СхемаКомпоновкиДанных = Неопределено Тогда
			Возврат Ложь; // Не СКД отчет.
		КонецЕсли;

		// Объект для создания макета компоновки данных.
		КомпоновщикМакетаКД	= Новый КомпоновщикМакетаКомпоновкиДанных;

		// Выполняет компоновку макета.
		МакетКД				= КомпоновщикМакетаКД.Выполнить(ОтчетОбъект.СхемаКомпоновкиДанных, ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки());

		// Пропуск проверки на то, что отчет пустой.
		Если ЕстьВнешнийНаборДанных(МакетКД.НаборыДанных) Тогда
			Возврат Ложь;
		КонецЕсли;

		// Объект, выполняющий компоновку данных.
		ПроцессорКД = Новый ПроцессорКомпоновкиДанных;

		// Инициализировать объект.
		ПроцессорКД.Инициализировать(МакетКД, , , Истина);
	Иначе
		// Встать в начало компоновки.
		ПроцессорКД.Сбросить();
	КонецЕсли;

	// Объект для вывода результата компоновки в табличный документ.
	ПроцессорВыводаРезультатаКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;

	// Устанавливает табличный документ, в который нужно выводить результат.
	ПроцессорВыводаРезультатаКД.УстановитьДокумент(Новый ТабличныйДокумент);

	// Последовательный вывод
	ПроцессорВыводаРезультатаКД.НачатьВывод();

	// Получает следующий элемент результата компоновки.
	ЭлементРезультатаКД = ПроцессорКД.Следующий();
	Пока ЭлементРезультатаКД <> Неопределено Цикл
		// Вывести элемент результата компоновки отчета в документ.
		ПроцессорВыводаРезультатаКД.ВывестиЭлемент(ЭлементРезультатаКД);

		// Определить не пустой результат.
		Для Каждого ЗначениеПараметраМакетаКД Из ЭлементРезультатаКД.ЗначенияПараметров Цикл
			Попытка
				ЗначениеЗаполнено = ЗначениеЗаполнено(ЗначениеПараметраМакетаКД.Значение);
			Исключение
				ЗначениеЗаполнено = Ложь; // Линия, Рамка, Цвет и другие объекты КД, которые могут фигурировать при выводе.
			КонецПопытки;
			Если ЗначениеЗаполнено Тогда
				ПроцессорВыводаРезультатаКД.ЗакончитьВывод();

				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;

		// Получает следующий элемент результата компоновки.
		ЭлементРезультатаКД = ПроцессорКД.Следующий();
	КонецЦикла;

	// Указание объекту о том, что вывод результата завершен.
	ПроцессорВыводаРезультатаКД.ЗакончитьВывод();

	Возврат Истина;
КонецФункции

// Проверяет наличие внешних наборов данных.
//
// Параметры:
//   НаборыДанных - НаборыДанныхМакетаКомпоновкиДанных - Коллекция проверяемых наборов данных.
//
// Возвращаемое значение:
//   Булево - Истина, если есть внешние наборы данных.
//
Функция ЕстьВнешнийНаборДанных(НаборыДанных)
	Для Каждого НаборДанных Из НаборыДанных Цикл
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъектМакетаКомпоновкиДанных") Тогда
			Возврат Истина;
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеМакетаКомпоновкиДанных") Тогда
			Если ЕстьВнешнийНаборДанных(НаборДанных.Элементы) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
КонецФункции

// Формирует описание периода для целей сбора статистики.
// Получаемая информация не содержит конкретных дат, поэтому может считаться анонимной.
//
// Параметры:
//   Период - СтандартныйПериод - анализируемый период.
//
// Возвращаемое значение:
//   Структура - описание периода:
//       * ВидПериода   - Строка - Классификация периода. Например: "Год", "СНачалаГода" или "ДоКонцаГода".
//       * СдвигПериода - Число  - Количество шагов, необходимых для получения периода относительно текущей даты.
//                                 Размер шага определяется видом периода.
//
Функция АнализПериода(Период) Экспорт
	Если Период.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
		Возврат АнализПроизвольногоПериода(Период.ДатаНачала, Период.ДатаОкончания);
	Иначе
		Возврат АнализСтандартногоПериода(Период.Вариант);
	КонецЕсли;
КонецФункции

Функция АнализСтандартногоПериода(Знач Вариант)
	Результат = Новый Структура("ВидПериода, СдвигПериода");

	Если Вариант = ВариантСтандартногоПериода.ЭтотГод Тогда
		Результат.ВидПериода   = "Год";
		Результат.СдвигПериода = 0;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.ПрошлыйГод Тогда
		Результат.ВидПериода   = "Год";
		Результат.СдвигПериода = -1;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.СледующийГод Тогда
		Результат.ВидПериода   = "Год";
		Результат.СдвигПериода = 1;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.СНачалаЭтогоГода Тогда
		Результат.ВидПериода   = "СНачалаГода";
		Результат.СдвигПериода = 0;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.ПрошлыйГодДоТакойЖеДаты Тогда
		Результат.ВидПериода   = "СНачалаГода";
		Результат.СдвигПериода = -1
	ИначеЕсли Вариант = ВариантСтандартногоПериода.СледующийГодДоТакойЖеДаты Тогда
		Результат.ВидПериода   = "СНачалаГода";
		Результат.СдвигПериода = 1;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.ДоКонцаЭтогоГода Тогда
		Результат.ВидПериода   = "ДоКонцаГода";
		Результат.СдвигПериода = 0;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.ЭтоПолугодие Тогда
		Результат.ВидПериода   = "Полугодие";
		Результат.СдвигПериода = 0;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.ПрошлоеПолугодие Тогда
		Результат.ВидПериода   = "Полугодие";
		Результат.СдвигПериода = -1;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.СледующееПолугодие Тогда
		Результат.ВидПериода   = "Полугодие";
		Результат.СдвигПериода = 1;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.СНачалаЭтогоПолугодия Тогда
		Результат.ВидПериода   = "СНачалаПолугодия";
		Результат.СдвигПериода = 0;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.ПрошлоеПолугодиеДоТакойЖеДаты Тогда
		Результат.ВидПериода   = "СНачалаПолугодия";
		Результат.СдвигПериода = -1;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.СледующееПолугодиеДоТакойЖеДаты Тогда
		Результат.ВидПериода   = "СНачалаПолугодия";
		Результат.СдвигПериода = 1;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.ДоКонцаЭтогоПолугодия Тогда
		Результат.ВидПериода   = "ДоКонцаПолугодия";
		Результат.СдвигПериода = 0;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.ЭтотКвартал Тогда
		Результат.ВидПериода   = "Квартал";
		Результат.СдвигПериода = 0;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.ПрошлыйКвартал Тогда
		Результат.ВидПериода   = "Квартал";
		Результат.СдвигПериода = -1;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.СледующийКвартал Тогда
		Результат.ВидПериода   = "Квартал";
		Результат.СдвигПериода = 1;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.СНачалаЭтогоКвартала Тогда
		Результат.ВидПериода   = "СНачалаКвартала";
		Результат.СдвигПериода = 0;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.ПрошлыйКварталДоТакойЖеДаты Тогда
		Результат.ВидПериода   = "СНачалаКвартала";
		Результат.СдвигПериода = -1;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.СледующийКварталДоТакойЖеДаты Тогда
		Результат.ВидПериода   = "СНачалаКвартала";
		Результат.СдвигПериода = 1;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.ДоКонцаЭтогоКвартала Тогда
		Результат.ВидПериода   = "ДоКонцаКвартала";
		Результат.СдвигПериода = 0;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.ЭтотМесяц Тогда
		Результат.ВидПериода   = "Месяц";
		Результат.СдвигПериода = 0;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.ПрошлыйМесяц Тогда
		Результат.ВидПериода   = "Месяц";
		Результат.СдвигПериода = -1;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.СледующийМесяц Тогда
		Результат.ВидПериода   = "Месяц";
		Результат.СдвигПериода = 1;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.Месяц Тогда
		Результат.ВидПериода   = "ПоследнийМесяц";
		Результат.СдвигПериода = 0;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.СНачалаЭтогоМесяца Тогда
		Результат.ВидПериода   = "СНачалаМесяца";
		Результат.СдвигПериода = 0;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.ПрошлыйМесяцДоТакойЖеДаты Тогда
		Результат.ВидПериода   = "СНачалаМесяца";
		Результат.СдвигПериода = -1;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.СледующийМесяцДоТакойЖеДаты Тогда
		Результат.ВидПериода   = "СНачалаМесяца";
		Результат.СдвигПериода = 1;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.ДоКонцаЭтогоМесяца Тогда
		Результат.ВидПериода   = "ДоКонцаМесяца";
		Результат.СдвигПериода = 0;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.ЭтаДекада Тогда
		Результат.ВидПериода   = "Декада";
		Результат.СдвигПериода = 0;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.ПрошлаяДекада Тогда
		Результат.ВидПериода   = "Декада";
		Результат.СдвигПериода = -1;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.СледующаяДекада Тогда
		Результат.ВидПериода   = "Декада";
		Результат.СдвигПериода = 1;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.СНачалаЭтойДекады Тогда
		Результат.ВидПериода   = "СНачалаДекады";
		Результат.СдвигПериода = 0;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.ПрошлаяДекадаДоТакогоЖеНомераДня Тогда
		Результат.ВидПериода   = "СНачалаДекады";
		Результат.СдвигПериода = -1;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.СледующаяДекадаДоТакогоЖеНомераДня Тогда
		Результат.ВидПериода   = "СНачалаДекады";
		Результат.СдвигПериода = 1;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.ДоКонцаЭтойДекады Тогда
		Результат.ВидПериода   = "ДоКонцаДекады";
		Результат.СдвигПериода = 0;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.ЭтаНеделя Тогда
		Результат.ВидПериода   = "Неделя";
		Результат.СдвигПериода = 0;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.ПрошлаяНеделя Тогда
		Результат.ВидПериода   = "Неделя";
		Результат.СдвигПериода = -1;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.СледующаяНеделя Тогда
		Результат.ВидПериода   = "Неделя";
		Результат.СдвигПериода = 1;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.Последние7Дней Тогда
		Результат.ВидПериода   = "Последние7Дней";
		Результат.СдвигПериода = 0;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.Следующие7Дней Тогда
		Результат.ВидПериода   = "Следующие7Дней";
		Результат.СдвигПериода = 0;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.СНачалаЭтойНедели Тогда
		Результат.ВидПериода   = "СНачалаНедели";
		Результат.СдвигПериода = 0;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.ПрошлаяНеделяДоТакогоЖеДняНедели Тогда
		Результат.ВидПериода   = "СНачалаНедели";
		Результат.СдвигПериода = -1
	ИначеЕсли Вариант = ВариантСтандартногоПериода.СледующаяНеделяДоТакогоЖеДняНедели Тогда
		Результат.ВидПериода   = "СНачалаНедели";
		Результат.СдвигПериода = 1
	ИначеЕсли Вариант = ВариантСтандартногоПериода.ДоКонцаЭтойНедели Тогда
		Результат.ВидПериода   = "ДоКонцаНедели";
		Результат.СдвигПериода = 0;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.Сегодня Тогда
		Результат.ВидПериода   = "День";
		Результат.СдвигПериода = 0;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.Вчера Тогда
		Результат.ВидПериода   = "День";
		Результат.СдвигПериода = -1;
	ИначеЕсли Вариант = ВариантСтандартногоПериода.Завтра Тогда
		Результат.ВидПериода   = "День";
		Результат.СдвигПериода = 1;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция АнализПроизвольногоПериода(Знач НачалоПериода, Знач КонецПериода)
	Результат = Новый Структура("ВидПериода, СдвигПериода");

	НачалоПериода	= НачалоДня(НачалоПериода);
	КонецПериода	= НачалоДня(КонецПериода);
	Сегодня			= НачалоДня(ТекущаяДатаСеанса());
	ДнейВПериоде    = (КонецПериода - НачалоПериода) / 86400 + 1;
	КонецСдвигВДнях = (КонецПериода - Сегодня) / 86400;

	Если ДнейВПериоде = 1 Тогда
		Результат.ВидПериода   = "День";
		Результат.СдвигПериода = КонецСдвигВДнях;

		Возврат Результат;
	КонецЕсли;

	Если ДнейВПериоде <= 7 Тогда
		НачалоДеньНедели  = ДеньНедели(НачалоПериода);
		КонецДеньНедели   = ДеньНедели(КонецПериода);
		ТекущийДеньНедели = ДеньНедели(Сегодня);
		Если НачалоДеньНедели = 1 И КонецДеньНедели = 7 Тогда
			Результат.ВидПериода = "Неделя";
			Результат.СдвигПериода = (НачалоНедели(КонецПериода) - НачалоНедели(Сегодня)) / 604800;
		ИначеЕсли НачалоДеньНедели = 1 И КонецДеньНедели = ТекущийДеньНедели Тогда
			Результат.ВидПериода = "СНачалаНедели";
			Результат.СдвигПериода = (НачалоНедели(КонецПериода) - НачалоНедели(Сегодня)) / 604800;
		ИначеЕсли НачалоДеньНедели = ТекущийДеньНедели И КонецДеньНедели = 7 Тогда
			Результат.ВидПериода = "ДоКонцаНедели";
			Результат.СдвигПериода = (НачалоНедели(КонецПериода) - НачалоНедели(Сегодня)) / 604800;
		ИначеЕсли КонецДеньНедели = ТекущийДеньНедели И ДнейВПериоде = 7 Тогда
			Результат.ВидПериода = "Последние7Дней";
			Результат.СдвигПериода = (НачалоНедели(КонецПериода) - НачалоНедели(Сегодня)) / 604800;
		ИначеЕсли НачалоДеньНедели = ТекущийДеньНедели И ДнейВПериоде = 7 Тогда
			Результат.ВидПериода = "Следующие7Дней";
			Результат.СдвигПериода = (НачалоНедели(НачалоПериода) - НачалоНедели(Сегодня)) / 604800;
		КонецЕсли;
		Если Результат.ВидПериода <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;

	КонецНомерГода   = Год(КонецПериода);
	ТекущийНомерГода = Год(Сегодня);

	НачалоНомерМесяца  = Месяц(НачалоПериода);
	КонецНомерМесяца   = Месяц(КонецПериода);
	ТекущийНомерМесяца = Месяц(Сегодня);

	КонецСдвигВГодах   = КонецНомерГода - ТекущийНомерГода;
	КонецСдвигВМесяцах = КонецСдвигВГодах*12 + КонецНомерМесяца - ТекущийНомерМесяца;

	НачалоДеньМесяца  = День(НачалоПериода);
	КонецДеньМесяца   = День(КонецПериода);
	ТекущийДеньМесяца = День(Сегодня);

	КонецЭтоПоследнийДеньМесяца = КонецДеньМесяца >= 27 И КонецДеньМесяца = День(КонецМесяца(КонецПериода));

	Если ДнейВПериоде <= 31 Тогда
		Если НачалоДеньМесяца = 1 И КонецЭтоПоследнийДеньМесяца Тогда
			Результат.ВидПериода   = "Месяц";
			Результат.СдвигПериода = КонецСдвигВМесяцах;

			Возврат Результат;
		ИначеЕсли НачалоДеньМесяца = 1 И КонецДеньМесяца = ТекущийДеньМесяца Тогда
			Результат.ВидПериода   = "СНачалаМесяца";
			Результат.СдвигПериода = КонецСдвигВМесяцах;

			Возврат Результат;
		ИначеЕсли НачалоДеньМесяца = ТекущийДеньМесяца И КонецЭтоПоследнийДеньМесяца Тогда
			Результат.ВидПериода   = "ДоКонцаМесяца";
			Результат.СдвигПериода = КонецСдвигВМесяцах;

			Возврат Результат;
		ИначеЕсли КонецДеньМесяца = ТекущийДеньМесяца И НачалоПериода = ДобавитьМесяц(КонецПериода + 86400, -1) Тогда
			Результат.ВидПериода   = "ПоследнийМесяц";
			Результат.СдвигПериода = КонецСдвигВМесяцах;

			Возврат Результат;
		КонецЕсли;
	КонецЕсли;

	Если ДнейВПериоде <= 93 Тогда // Легкая оптимизация вычислений.
		НачалоНомерМесяцаВКвартале = (НачалоНомерМесяца-1)%3 + 1;
		КонецНомерМесяцаВКвартале  = (КонецНомерМесяца-1)%3 + 1;

		НачалоЭтоНачалоКвартала = (НачалоНомерМесяцаВКвартале = 1 И НачалоДеньМесяца = 1);
		КонецЭтоКонецКвартала   = (КонецНомерМесяцаВКвартале  = 3 И КонецЭтоПоследнийДеньМесяца);

		Если НачалоЭтоНачалоКвартала Или КонецЭтоКонецКвартала Тогда // Легкая оптимизация вычислений.
			ТекущийНомерМесяцаВКвартале = (ТекущийНомерМесяца-1)%3 + 1;

			Если НачалоЭтоНачалоКвартала И КонецЭтоКонецКвартала Тогда
				Результат.ВидПериода = "Квартал";
			ИначеЕсли НачалоЭтоНачалоКвартала И КонецНомерМесяцаВКвартале = ТекущийНомерМесяцаВКвартале И КонецДеньМесяца = ТекущийДеньМесяца Тогда
				Результат.ВидПериода = "СНачалаКвартала";
			ИначеЕсли КонецЭтоКонецКвартала И НачалоНомерМесяцаВКвартале = ТекущийНомерМесяцаВКвартале И НачалоДеньМесяца = ТекущийДеньМесяца Тогда
				Результат.ВидПериода = "ДоКонцаКвартала";
			КонецЕсли;

			Если Результат.ВидПериода <> Неопределено Тогда // Легкая оптимизация вычислений.
				КонецНомерКварталаВГоду		= Цел((КонецНомерМесяца-1)/3)+1;
				ТекущийНомерКварталаВГоду	= Цел((ТекущийНомерМесяца-1)/3)+1;
				Результат.СдвигПериода		= КонецСдвигВГодах * 4 + КонецНомерКварталаВГоду - ТекущийНомерКварталаВГоду;

				Возврат Результат;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	Если ДнейВПериоде <= 186 Тогда // Легкая оптимизация вычислений.
		НачалоНомерМесяцаВПолугодии = (НачалоНомерМесяца-1)%6 + 1;
		КонецНомерМесяцаВПолугодии  = (КонецНомерМесяца-1)%6 + 1;

		НачалоЭтоНачалоПолугодия = (НачалоНомерМесяцаВПолугодии = 1 И НачалоДеньМесяца = 1);
		КонецЭтоКонецПолугодия   = (КонецНомерМесяцаВПолугодии  = 6 И КонецЭтоПоследнийДеньМесяца);

		Если НачалоЭтоНачалоПолугодия Или КонецЭтоКонецПолугодия Тогда // Легкая оптимизация вычислений.
			ТекущийНомерМесяцаВПолугодии = (ТекущийНомерМесяца-1)%6 + 1;

			Если НачалоЭтоНачалоПолугодия И КонецЭтоКонецПолугодия Тогда
				Результат.ВидПериода = "Полугодие";
			ИначеЕсли НачалоЭтоНачалоПолугодия И КонецНомерМесяцаВПолугодии = ТекущийНомерМесяцаВПолугодии И КонецДеньМесяца = ТекущийДеньМесяца Тогда
				Результат.ВидПериода = "СНачалаПолугодия";
			ИначеЕсли КонецЭтоКонецПолугодия И НачалоНомерМесяцаВПолугодии = ТекущийНомерМесяцаВПолугодии И НачалоДеньМесяца = ТекущийДеньМесяца Тогда
				Результат.ВидПериода = "ДоКонцаПолугодия";
			КонецЕсли;

			Если Результат.ВидПериода <> Неопределено Тогда // Легкая оптимизация вычислений.
				КонецНомерПолугодияВГоду	= ?(КонецНомерМесяца   <= 6, 1, 2);
				ТекущийНомерПолугодияВГоду	= ?(ТекущийНомерМесяца <= 6, 1, 2);
				Результат.СдвигПериода		= КонецСдвигВГодах*2 + КонецНомерПолугодияВГоду - ТекущийНомерПолугодияВГоду;

				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ДнейВПериоде <= 366 Тогда // Легкая оптимизация вычислений.
		НачалоЭтоНачалоГода = (НачалоНомерМесяца = 1 И НачалоДеньМесяца = 1);
		КонецЭтоКонецГода   = (КонецНомерМесяца  = 12 И КонецЭтоПоследнийДеньМесяца);

		Если НачалоЭтоНачалоГода Или КонецЭтоКонецГода Тогда // Легкая оптимизация вычислений.
			Если НачалоЭтоНачалоГода И КонецЭтоКонецГода Тогда
				Результат.ВидПериода   = "Год";
				Результат.СдвигПериода = КонецСдвигВГодах;

				Возврат Результат;
			ИначеЕсли НачалоЭтоНачалоГода И КонецНомерМесяца = ТекущийНомерМесяца И КонецДеньМесяца  = ТекущийДеньМесяца Тогда
				Результат.ВидПериода   = "СНачалаГода";
				Результат.СдвигПериода = КонецСдвигВГодах;

				Возврат Результат;
			ИначеЕсли КонецЭтоКонецГода И НачалоНомерМесяца = ТекущийНомерМесяца И НачалоДеньМесяца  = ТекущийДеньМесяца Тогда
				Результат.ВидПериода   = "ДоКонцаГода";
				Результат.СдвигПериода = КонецСдвигВГодах;

				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ДнейВПериоде <= 11 Тогда
		НачалоЭтоНачалоДекады = (НачалоДеньМесяца = 1 Или НачалоДеньМесяца = 11 Или НачалоДеньМесяца = 21);
		КонецЭтоКонецДекады   = (КонецДеньМесяца = 10 Или КонецДеньМесяца = 20 Или КонецЭтоПоследнийДеньМесяца);
		Если НачалоЭтоНачалоДекады И КонецЭтоКонецДекады Тогда
			Результат.ВидПериода = "Декада";
		Иначе
			НачалоДеньДекады  = (НачалоДеньМесяца-1)%10 + 1; // % это остаток от деления.
			КонецДеньДекады   = (КонецДеньМесяца-1)%10 + 1;
			ТекущийДеньДекады = (ТекущийДеньМесяца-1)%10 + 1;
			Если НачалоЭтоНачалоДекады И КонецДеньДекады = ТекущийДеньДекады Тогда
				Результат.ВидПериода = "СНачалаДекады";
			ИначеЕсли НачалоДеньДекады = ТекущийДеньДекады И КонецЭтоКонецДекады Тогда
				Результат.ВидПериода = "ДоКонцаДекады";
			КонецЕсли;
		КонецЕсли;
		Если Результат.ВидПериода <> Неопределено Тогда
			КонецНомерДекадыВМесяце		= ?(КонецДеньМесяца   <= 10, 1, ?(КонецДеньМесяца   <= 20, 2, 3));
			ТекущийНомерДекадыВМесяце	= ?(ТекущийДеньМесяца <= 10, 1, ?(ТекущийДеньМесяца <= 20, 2, 3));
			Результат.СдвигПериода		= КонецСдвигВМесяцах*3 + КонецНомерДекадыВМесяце - ТекущийНомерДекадыВМесяце;

			Возврат Результат;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ЗначенияДляВыбора(ПараметрыНастройки, ТипИлиТипы = Неопределено) Экспорт
	ПараметрыПолученияДанныхВыбора = Новый Структура("Отбор, ВыборГруппИЭлементов");
	ЗаполнитьЗначенияСвойств(ПараметрыПолученияДанныхВыбора, ПараметрыНастройки);
	ДополнитьСтруктуруИзПараметровВыбора(ПараметрыПолученияДанныхВыбора, ПараметрыНастройки.ПараметрыВыбора);

	ЗначенияДляВыбора = Новый СписокЗначений;
	Если ТипЗнч(ТипИлиТипы) = Тип("Тип") Тогда
		Типы = Новый Массив;
		Типы.Добавить(ТипИлиТипы);
	ИначеЕсли ТипЗнч(ТипИлиТипы) = Тип("Массив") Тогда
		Типы = ТипИлиТипы;
	Иначе
		Типы = ПараметрыНастройки.ОписаниеТипов.Типы();
	КонецЕсли;

	Для Каждого Тип Из Типы Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Менеджер = БазоваяПодсистемаСервер.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());

		СписокВыбора = Менеджер.ПолучитьДанныеВыбора(ПараметрыПолученияДанныхВыбора);
		Для Каждого ЭлементСписка Из СписокВыбора Цикл
			ЗначениеДляВыбора	= ЗначенияДляВыбора.Добавить();
			ЗаполнитьЗначенияСвойств(ЗначениеДляВыбора, ЭлементСписка);

			// Для перечислений значения возвращаются в виде структуры со свойством Значение.
			ЗначениеПеречисления = Неопределено;
			Если ТипЗнч(ЗначениеДляВыбора.Значение) = Тип("Структура") И ЗначениеДляВыбора.Значение.Свойство("Значение", ЗначениеПеречисления) Тогда
				ЗначениеДляВыбора.Значение = ЗначениеПеречисления;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат ЗначенияДляВыбора;
КонецФункции

Процедура ДополнитьСтруктуруИзПараметровВыбора(Структура, МассивПараметровВыбора)
	Для Каждого ПараметрВыбора Из МассивПараметровВыбора Цикл
		ТекущаяСтруктура	= Структура;
		МассивСтрок			= СтрРазделить(ПараметрВыбора.Имя, ".");
		Количество			= МассивСтрок.Количество();
		Если Количество > 1 Тогда
			Для Индекс = 0 По Количество-2 Цикл
				Ключ = МассивСтрок[Индекс];
				Если ТекущаяСтруктура.Свойство(Ключ) И ТипЗнч(ТекущаяСтруктура[Ключ]) = Тип("Структура") Тогда
					ТекущаяСтруктура = ТекущаяСтруктура[Ключ];
				Иначе
					ТекущаяСтруктура = ТекущаяСтруктура.Вставить(Ключ, Новый Структура);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Ключ = МассивСтрок[Количество-1];
		ТекущаяСтруктура.Вставить(Ключ, ПараметрВыбора.Значение);
	КонецЦикла;
КонецПроцедуры

Функция ПараметрыВыбораТипа(Знач Тип, Знач ПараметрыНастройки) Экспорт
	ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Результат = Новый Структура("БыстрыйВыбор, ПутьКФорме, ЗначенияДляВыбора");

	ПолноеИмя	= ОбъектМетаданных.ПолноеИмя();
	Вид			= ВРег(СтрРазделить(ПолноеИмя, ".")[0]);

	Если ПараметрыНастройки.БыстрыйВыбор = Истина Тогда
		Результат.БыстрыйВыбор = Истина;
	ИначеЕсли Вид = "ПЕРЕЧИСЛЕНИЕ" Тогда
		Результат.БыстрыйВыбор = Истина;
	ИначеЕсли Вид = "СПРАВОЧНИК" Или Вид = "ПЛАНВИДОВРАСЧЕТА" Или Вид = "ПЛАНВИДОВХАРАКТЕРИСТИК" Или Вид = "ПЛАНОБМЕНА" Или Вид = "ПЛАНСЧЕТОВ" Тогда
		Результат.БыстрыйВыбор = (ОбъектМетаданных.СпособВыбора = Метаданные.СвойстваОбъектов.СпособВыбора.БыстрыйВыбор);
	Иначе
		Результат.БыстрыйВыбор = Ложь;
	КонецЕсли;

	Если Результат.БыстрыйВыбор Тогда
		Результат.ЗначенияДляВыбора = ЗначенияДляВыбора(ПараметрыНастройки, Тип);

		Если Результат.ЗначенияДляВыбора.Количество() = 0 Тогда
			Результат.БыстрыйВыбор = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыНастройки.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы Тогда
		Если Вид = "СПРАВОЧНИК" Или Вид = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
			Результат.ПутьКФорме = ПолноеИмя + ".ФормаВыбораГруппы";
		Иначе
			Результат.ПутьКФорме = ПолноеИмя + ".ФормаВыбора";
		КонецЕсли;
	Иначе
		Результат.ПутьКФорме = ПолноеИмя + ".ФормаВыбора";
	КонецЕсли;

	Возврат Результат;
КонецФункции

#КонецОбласти
