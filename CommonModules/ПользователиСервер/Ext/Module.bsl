////////////////////////////////////////////////////////////////////////////////
// Подсистема "Пользователи"
//
////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиОбновленияИнформационнойБазы

// Вызывается при переходе на версию 1.0.5.2.
// Выполняет попытку сопоставления / заполнения реквизита "ИдентификаторПользователяИБ"
// для каждого элемента справочника Пользователи.
//
Процедура ЗаполнитьИдентификаторыПользователей() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	НайтиНеоднозначныхПользователейИБ(Неопределено);

	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	            	  |ИЗ
	            	  |	Справочник.Пользователи КАК Пользователи
	            	  |
	            	  |ОБЪЕДИНИТЬ
	            	  |
	            	  |ВЫБРАТЬ
	            	  |	ВнешниеПользователи.ИдентификаторПользователяИБ
	            	  |ИЗ
	            	  |	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	            	  |;
	            	  |
	            	  |////////////////////////////////////////////////////////////////////////////////
	            	  |ВЫБРАТЬ
	            	  |	Пользователи.Ссылка КАК Ссылка,
	            	  |	Пользователи.Наименование КАК Наименование
	            	  |ИЗ
	            	  |	Справочник.Пользователи КАК Пользователи
	            	  |ГДЕ
	            	  |	Пользователи.Ссылка <> &НеуказанныйПользователь
	            	  |	И Пользователи.ИдентификаторПользователяИБ = &ПустойИдентификатор";
	Запрос.УстановитьПараметр("ПустойИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") );
	Запрос.УстановитьПараметр("НеуказанныйПользователь", СвойстваНеуказанногоПользователя().Ссылка);

	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатыЗапроса[1].Пустой() Тогда
		Возврат;
	КонецЕсли;

	ЗанятыеИдентификаторы	= РезультатыЗапроса[0].Выгрузить();
	ЗанятыеИдентификаторы.Индексы.Добавить("ИдентификаторПользователяИБ");

	ДлинаПолногоИмени		= Метаданные.Справочники.Пользователи.ДлинаНаименования;
	СвободныеПользователи	= РезультатыЗапроса[1].Выгрузить();
	СвободныеПользователи.Индексы.Добавить("Наименование");

	Для каждого Строка Из СвободныеПользователи Цикл
		Строка.Наименование = ВРег(СокрЛП(Строка.Наименование));
	КонецЦикла;

	Для каждого ПользовательИБ Из ПользователиИБ Цикл
		Если ЗанятыеИдентификаторы.Найти(ПользовательИБ.УникальныйИдентификатор, "ИдентификаторПользователяИБ") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ПолноеИмяПользователя = ВРег(СокрЛП(Лев(ПользовательИБ.ПолноеИмя, ДлинаПолногоИмени)));

		ОписаниеПользователя = СвободныеПользователи.Найти(ПолноеИмяПользователя, "Наименование");
		Если ОписаниеПользователя <> Неопределено Тогда
			ОбъектПользователь								= ОписаниеПользователя.Ссылка.ПолучитьОбъект();
			ОбъектПользователь.ИдентификаторПользователяИБ	= ПользовательИБ.УникальныйИдентификатор;
			ОбновлениеИБСервер.ЗаписатьДанные(ОбъектПользователь);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Устанавливает константу ИспользоватьГруппыПользователей в Истина,
// если существует хотя бы одна группа пользователей в справочнике.
//
// Используется при обновлении информационной базы.
//
Процедура ПриНаличииГруппПользователейУстановитьИспользование() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	ИСТИНА КАК ЗначениеИстина
	            	  |ИЗ
	            	  |	Справочник.ГруппыПользователей КАК ГруппыПользователей
	            	  |ГДЕ
	            	  |	ГруппыПользователей.Ссылка <> ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
	            	  |
	            	  |ОБЪЕДИНИТЬ ВСЕ
	            	  |
	            	  |ВЫБРАТЬ
	            	  |	ИСТИНА
	            	  |ИЗ
	            	  |	Справочник.ГруппыВнешнихПользователей КАК ГруппыВнешнихПользователей
	            	  |ГДЕ
	            	  |	ГруппыВнешнихПользователей.Ссылка <> ЗНАЧЕНИЕ(Справочник.ГруппыВнешнихПользователей.ВсеВнешниеПользователи)";

	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Константы.ИспользоватьГруппыПользователей.Установить(Истина);
	КонецЕсли;
КонецПроцедуры

// Вызывается при переходе на версию 2.1.3.16.
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииПользователей() Экспорт
	Возврат;

	// Зарезервировано для новых подсистем
КонецПроцедуры

// Вызывается при переходе на версию 2.1.4.19.
Процедура ПеренестиГруппыВнешнихПользователейВКорень() Экспорт
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	ГруппыВнешнихПользователей.Ссылка КАК Ссылка
	            	  |ИЗ
	            	  |	Справочник.ГруппыВнешнихПользователей КАК ГруппыВнешнихПользователей
	            	  |ГДЕ
	            	  |	ГруппыВнешнихПользователей.Родитель.ВсеОбъектыАвторизации = ИСТИНА";

	Результат = Запрос.Выполнить().Выгрузить();

	Для Каждого СтрокаГруппаПользователей Из Результат Цикл
		ГруппаПользователей				= СтрокаГруппаПользователей.Ссылка.ПолучитьОбъект();
		ГруппаПользователей.Родитель	= Справочники.ГруппыВнешнихПользователей.ПустаяСсылка();
		ОбновлениеИБСервер.ЗаписатьДанные(ГруппаПользователей);
	КонецЦикла;
КонецПроцедуры

// Вызывается при переходе на новую версию 2.2.2.3.
Процедура ЗаполнитьСвойстваАутентификацииПользователей() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	Пользователи.Ссылка КАК Ссылка,
	            	  |	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ,
	            	  |	Пользователи.СвойстваПользователяИБ КАК СвойстваПользователяИБ
	            	  |ИЗ
	            	  |	Справочник.Пользователи КАК Пользователи
	            	  |ГДЕ
	            	  |	Пользователи.ИдентификаторПользователяИБ <> &ПустойИдентификаторПользователяИБ
	            	  |
	            	  |ОБЪЕДИНИТЬ ВСЕ
	            	  |
	            	  |ВЫБРАТЬ
	            	  |	ВнешниеПользователи.Ссылка,
	            	  |	ВнешниеПользователи.ИдентификаторПользователяИБ,
	            	  |	ВнешниеПользователи.СвойстваПользователяИБ
	            	  |ИЗ
	            	  |	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	            	  |ГДЕ
	            	  |	ВнешниеПользователи.ИдентификаторПользователяИБ <> &ПустойИдентификаторПользователяИБ";
	Запрос.УстановитьПараметр("ПустойИдентификаторПользователяИБ",Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.ИдентификаторПользователяИБ);

		Если ПользовательИБ = Неопределено Или Не ВходВПрограммуРазрешен(ПользовательИБ) Тогда
			Продолжить;
		КонецЕсли;

		ПользовательОбъект							= Выборка.Ссылка.ПолучитьОбъект();
		ХранимыеСвойства							= сХранимыеСвойстваПользователяИБ(ПользовательОбъект);
		ХранимыеСвойства.ВходВПрограммуРазрешен		= Истина;
		ХранимыеСвойства.АутентификацияСтандартная	= ПользовательИБ.АутентификацияСтандартная;
		ХранимыеСвойства.АутентификацияOpenID		= ПользовательИБ.АутентификацияOpenID;
		ХранимыеСвойства.АутентификацияОС		= ПользовательИБ.АутентификацияОС;

		Новые = Новый ХранилищеЗначения(ХранимыеСвойства);
		Если Не БазоваяПодсистемаСервер.ДанныеСовпадают(ПользовательОбъект.СвойстваПользователяИБ, Новые) Тогда
			ПользовательОбъект.СвойстваПользователяИБ = Новые;
			ОбновлениеИБСервер.ЗаписатьДанные(ПользовательОбъект);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Вызывается при переходе на новую версию 2.2.2.42.
Процедура ДобавитьПолноправнымПользователямРольАдминистраторСистемы() Экспорт
	Если Не ПравоДоступа("Администрирование", Метаданные, Метаданные.Роли.ПолныеПрава) Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	ВсеПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();

	Для каждого ПользовательИБ Из ВсеПользователиИБ Цикл
		Если Не ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
			Продолжить;
		КонецЕсли;
		Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.АдминистраторСистемы) Тогда
			Продолжить;
		КонецЕсли;

		ПользовательИБ.Роли.Добавить(Метаданные.Роли.АдминистраторСистемы);
		ПользовательИБ.Записать();
	КонецЦикла;
КонецПроцедуры

// Вызывается при переходе на новую версию 2.3.1.16.
Процедура ОчиститьРеквизитПоказыватьВСпискеВыбораУВсехПользователейИБ() Экспорт
	МенеджерЗначения = Константы.ИспользоватьВнешнихПользователей.СоздатьМенеджерЗначения();
	МенеджерЗначения.Прочитать();

	Если МенеджерЗначения.Значение = Ложь Тогда
		Возврат;
	КонецЕсли;

	МенеджерЗначения.ОчиститьРеквизитПоказыватьВСпискеВыбораУВсехПользователейИБ();
КонецПроцедуры

// Вызывается при переходе на новую версию 2.3.1.37.
Процедура ЗаполнитьНазначениеГруппВнешнихПользователей() Экспорт
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	ГруппыВнешнихПользователей.Ссылка КАК Ссылка
	            	  |ИЗ
	            	  |	Справочник.ГруппыВнешнихПользователей КАК ГруппыВнешнихПользователей
	            	  |ГДЕ
	            	  |	НЕ(НЕ ГруппыВнешнихПользователей.Предопределенный
	            	  |				И ГруппыВнешнихПользователей.Ссылка В
	            	  |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	            	  |						ГруппыВнешнихПользователей.Ссылка
	            	  |					ИЗ
	            	  |						Справочник.ГруппыВнешнихПользователей.Назначение КАК ГруппыВнешнихПользователейНазначение))";

	Результат	= Запрос.Выполнить();
	Выборка	= Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		ГруппаОбъект = Выборка.Ссылка.ПолучитьОбъект();

		Если ГруппаОбъект.Предопределенный Тогда // любые пользователи
			ОписаниеТипаСсылки				= Новый ОписаниеТипов(БазоваяПодсистемаКлиентСервер.ЗначениеВМассиве("Строка"));
			Значение						= ОписаниеТипаСсылки.ПривестиЗначение(Неопределено);

			НоваяСтрока						= ГруппаОбъект.Назначение.Добавить();
			НоваяСтрока.ТипПользователей	= Значение;
		Иначе
			НоваяСтрока						= ГруппаОбъект.Назначение.Добавить();
			НоваяСтрока.ТипПользователей	= "";
		КонецЕсли;

		ОбновлениеИБСервер.ЗаписатьДанные(ГруппаОбъект);
	КонецЦикла;
КонецПроцедуры

// Вызывается при переходе на новую версию 2.3.2.30.
Процедура ПеренестиНастройкиДлиныИСложностиПаролейКонфигуратора() Экспорт
	ВсеНастройки = ПользователиСерверПовтИсп.Настройки();

	Если Не ВсеНастройки.ОбщиеНастройкиВхода
	 Или ПолучитьМинимальнуюДлинуПаролейПользователей() = 0
	   И Не ПолучитьПроверкуСложностиПаролейПользователей()
	 Или ВсеНастройки.Пользователи.МинимальнаяДлинаПароля <> 0
	 Или ВсеНастройки.Пользователи.ПарольДолженОтвечатьТребованиямСложности <> 0
	 Или ВсеНастройки.ВнешниеПользователи.МинимальнаяДлинаПароля <> 0
	 Или ВсеНастройки.ВнешниеПользователи.ПарольДолженОтвечатьТребованиямСложности <> 0 Тогда

		Возврат;
	КонецЕсли;

	Блокировка			= Новый БлокировкаДанных;
	ЭлементБлокировки	= Блокировка.Добавить("Константа.НастройкиВходаПользователей");

	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		НастройкиВхода			= НастройкиВхода();

		СложныйПароль          = ПолучитьПроверкуСложностиПаролейПользователей();
		МинимальнаяДлинаПароля = ПолучитьМинимальнуюДлинуПаролейПользователей();

		НастройкиВхода.Пользователи.МинимальнаяДлинаПароля = МинимальнаяДлинаПароля;
		НастройкиВхода.Пользователи.ПарольДолженОтвечатьТребованиямСложности = СложныйПароль;
		Если Константы.ИспользоватьВнешнихПользователей.Получить() Тогда
			НастройкиВхода.ВнешниеПользователи.МинимальнаяДлинаПароля = МинимальнаяДлинаПароля;
			НастройкиВхода.ВнешниеПользователи.ПарольДолженОтвечатьТребованиямСложности = СложныйПароль;
		КонецЕсли;

		Константы.НастройкиВходаПользователей.Установить(Новый ХранилищеЗначения(НастройкиВхода));

		Если ПолучитьМинимальнуюДлинуПаролейПользователей() <> 0 Тогда
			УстановитьМинимальнуюДлинуПаролейПользователей(0);
		КонецЕсли;
		Если ПолучитьПроверкуСложностиПаролейПользователей() Тогда
			УстановитьПроверкуСложностиПаролейПользователей(Ложь);
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

// Вызывается при переходе на новую версию 2.4.1.1.
Процедура ПереименоватьКлючХраненияРешенияПоОткрытиюВнешнихОтчетовИОбработок() Экспорт
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("Константа.ПараметрыАдминистрированияИБ");

	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();

		ПараметрыАдминистрированияИБ = Константы.ПараметрыАдминистрированияИБ.Получить().Получить();

		Если ТипЗнч(ПараметрыАдминистрированияИБ) = Тип("Структура")
		   И ПараметрыАдминистрированияИБ.Свойство("РазрешеноОткрытиеВнешнихОтчетовИОбработок") Тогда

			Если Не ПараметрыАдминистрированияИБ.Свойство("ПринятоРешениеПоОткрытиюВнешнихОтчетовИОбработок")
			   И ТипЗнч(ПараметрыАдминистрированияИБ.РазрешеноОткрытиеВнешнихОтчетовИОбработок) = Тип("Булево")
			   И ПараметрыАдминистрированияИБ.РазрешеноОткрытиеВнешнихОтчетовИОбработок Тогда

				ПараметрыАдминистрированияИБ.Вставить("ПринятоРешениеПоОткрытиюВнешнихОтчетовИОбработок", Истина);
			КонецЕсли;
			ПараметрыАдминистрированияИБ.Удалить("РазрешеноОткрытиеВнешнихОтчетовИОбработок");
			Константы.ПараметрыАдминистрированияИБ.Установить(Новый ХранилищеЗначения(ПараметрыАдминистрированияИБ));
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

Процедура УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	Если ИмяПараметра <> "ТекущийПользователь"
	   И ИмяПараметра <> "ТекущийВнешнийПользователь"
	   И ИмяПараметра <> "АвторизованныйПользователь" Тогда

		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Попытка
		Значения = ЗначенияПараметровСеансаТекущийПользователь();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВызватьИсключение СтрШаблон("Не удалось установить параметр сеанса ТекущийПользователь по причине:
			           |""%1"".
			           |
			           |Обратитесь к администратору.",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;

	Если ТипЗнч(Значения) = Тип("Строка") Тогда
		ВызватьИсключение Значения;
	КонецЕсли;

	ПараметрыСеанса.ТекущийПользователь        = Значения.ТекущийПользователь;
	ПараметрыСеанса.ТекущийВнешнийПользователь = Значения.ТекущийВнешнийПользователь;

	Если ЗначениеЗаполнено(Значения.ТекущийПользователь) Тогда
		ПараметрыСеанса.АвторизованныйПользователь = Значения.ТекущийПользователь;
	Иначе
		ПараметрыСеанса.АвторизованныйПользователь = Значения.ТекущийВнешнийПользователь;
	КонецЕсли;

	УстановленныеПараметры.Добавить("ТекущийПользователь");
	УстановленныеПараметры.Добавить("ТекущийВнешнийПользователь");
	УстановленныеПараметры.Добавить("АвторизованныйПользователь");
КонецПроцедуры

Процедура ПроверитьПраваТекущегоПользователяПриВходе() Экспорт	
	ПроверитьПраваПользователя(ПользователиИнформационнойБазы.ТекущийПользователь(),
		"ПриЗапуске", ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя());
КонецПроцедуры

// Проверяет права указанного пользователя ИБ.
//
// Параметры:
//  ПользовательИБ         - ПользовательИнформационнойБазы - проверяемый пользователь.
//  РежимПроверки          - Строка - ПриЗаписи или ПриЗапуске.
//  ЭтоВнешнийПользователь - Булево - проверять права для внешнего пользователя.
//
Процедура ПроверитьПраваПользователя(ПользовательИБ, РежимПроверки, ЭтоВнешнийПользователь)
	Если РежимПроверки = "ПриЗапуске" И Не ЭтоВнешнийПользователь Тогда
		Возврат; // Не нужно проверять права пользователей при запуске в локальном режиме.
	КонецЕсли;	

	НедоступныеРоли = ПользователиСерверПовтИсп.НедоступныеРолиПоТипуПользователя(ЭтоВнешнийПользователь);
	
	РолиДляПроверки = Новый ТаблицаЗначений;
	РолиДляПроверки.Колонки.Добавить("Роль", Новый ОписаниеТипов("ОбъектМетаданных"));
	Для Каждого Роль Из ПользовательИБ.Роли Цикл
		РолиДляПроверки.Добавить().Роль = Роль;
	КонецЦикла;
	РолиДляПроверки.Индексы.Добавить("Роль");
	
	Если РежимПроверки = "ПередЗаписью" Тогда
		ПрежнийПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользовательИБ.УникальныйИдентификатор);

		Если ПрежнийПользовательИБ <> Неопределено Тогда
			Для Каждого Роль Из ПрежнийПользовательИБ.Роли Цикл
				Строка = РолиДляПроверки.Найти(Роль, "Роль");
				Если Строка <> Неопределено Тогда
					РолиДляПроверки.Удалить(Строка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	ДобавляемыеНедоступныеРоли	= "";
	НазначениеРолей				= Неопределено;

	Для Каждого ОписаниеРоли Из РолиДляПроверки Цикл
		Роль	= ОписаниеРоли.Роль;
		ИмяРоли	= Роль.Имя;

		Если НедоступныеРоли.Получить(ИмяРоли) = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если НазначениеРолей = Неопределено Тогда
			НазначениеРолей = ПользователиСерверПовтИсп.НазначениеРолей();
		КонецЕсли;

		Если НазначениеРолей.ТолькоДляАдминистраторовСистемы.Получить(ИмяРоли) <> Неопределено Тогда
			ТекстШаблона = """%1"" (предназначена только для администраторов системы)";	
		ИначеЕсли НазначениеРолей.ТолькоДляВнешнихПользователей.Получить(ИмяРоли) <> Неопределено Тогда
			ТекстШаблона = """%1"" (предназначена только для внешних пользователей)";
		Иначе // Это внешний пользователь.
			ТекстШаблона = """%1"" (предназначена только для пользователей)";
		КонецЕсли;
		
		ДобавляемыеНедоступныеРоли = ДобавляемыеНедоступныеРоли + СтрШаблон(ТекстШаблона, Роль.Представление()) + Символы.ПС;;
	КонецЦикла;

	ДобавляемыеНедоступныеРоли = СокрЛП(ДобавляемыеНедоступныеРоли);

	Если Не ЗначениеЗаполнено(ДобавляемыеНедоступныеРоли) Тогда
		Возврат;
	КонецЕсли;

	ИмяСобытия = "Пользователи.Ошибка при установке ролей пользователю ИБ";

	Если РежимПроверки = "ПриЗапуске" Тогда
		Если СтрЧислоСтрок(ДобавляемыеНедоступныеРоли) = 1 Тогда
			ТекстРегистрацииВхода = СтрШаблон("Попытка входа пользователя %1 с недоступной ролью:
				           |%2.",
			ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
		Иначе
			ТекстРегистрацииВхода = СтрШаблон("Попытка входа пользователя %1 с недоступными ролями: %2.",
			ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПользовательИБ, ТекстРегистрацииВхода);

		ТекстСообщенияВхода = "Невозможно выполнить вход из-за наличия недоступных ролей. Обратитесь к администратору.";
		ВызватьИсключение ТекстСообщенияВхода;
	КонецЕсли;

	Если СтрЧислоСтрок(ДобавляемыеНедоступныеРоли) = 1 И ЗначениеЗаполнено(ДобавляемыеНедоступныеРоли) Тогда
		ТекстРегистрацииДобавления = СтрШаблон("Попытка назначить пользователю %1 недоступную роль: %2.", ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
	ИначеЕсли СтрЧислоСтрок(ДобавляемыеНедоступныеРоли) > 1 Тогда
		ТекстРегистрацииДобавления = СтрШаблон("Попытка назначить пользователю %1 недоступные роли: %2.", ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
	Иначе
		ТекстРегистрацииДобавления = "";
	КонецЕсли;

	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПользовательИБ, ТекстРегистрацииДобавления);

	Если СтрЧислоСтрок(ДобавляемыеНедоступныеРоли) = 1 И ЗначениеЗаполнено(ДобавляемыеНедоступныеРоли) Тогда
		ТекстСообщенияДобавления = СтрШаблон("Пользователю ""%1"" невозможно назначить недоступную роль: %2.", ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
	ИначеЕсли СтрЧислоСтрок(ДобавляемыеНедоступныеРоли) > 1 Тогда
		ТекстСообщенияДобавления = СтрШаблон("Пользователю ""%1"" невозможно назначить недоступные роли: %2.", ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
	Иначе
		ТекстСообщенияДобавления = "";
	КонецЕсли;

	ВызватьИсключение ТекстСообщенияДобавления;
КонецПроцедуры

// Проверяет, является ли текущий или указанный пользователь полноправным.
//
// Полноправным считается пользователь, который
// а) при не пустом списке пользователей информационной базы, 
//    имеет роль ПолныеПрава и роль для администрирования системы (если ПроверятьПраваАдминистрированияСистемы = Истина)
// б) при пустом списке пользователей информационной базы
//    основная роль конфигурации не задана или ПолныеПрава.
//
// Параметры:
//  Пользователь - Неопределено - проверяется текущий пользователь ИБ.
//               - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи - осуществляется
//                    поиск пользователя ИБ по уникальному идентификатору, заданному в реквизите.
//                    ИдентификаторПользователяИБ. Если пользователь ИБ не найден, возвращается Ложь.
//               - ПользовательИнформационнойБазы - проверяется указанный пользователь ИБ.
//
//  ПроверятьПраваАдминистрированияСистемы - Булево - если задано Истина, тогда проверяется наличие
//                 роли для администрирования системы.
//
//  УчитыватьПривилегированныйРежим - Булево - если задано Истина, тогда для текущего пользователя
//                 функция возвращает Истина, когда установлен привилегированный режим.
//
// Возвращаемое значение:
//  Булево - если Истина, пользователь является полноправным.
//
Функция ЭтоПолноправныйПользователь(Пользователь = Неопределено,
                                    ПроверятьПраваАдминистрированияСистемы = Ложь,
                                    УчитыватьПривилегированныйРежим = Истина) Экспорт
	
	ПривилегированныйРежимУстановлен = ПривилегированныйРежим();
	
	УстановитьПривилегированныйРежим(Истина);
	СвойстваПользователяИБ = СвойстваПроверяемогоПользователяИБ(Пользователь);
	
	Если СвойстваПользователяИБ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	ПроверитьРольПолныеПрава			= Не ПроверятьПраваАдминистрированияСистемы;
	ПроверитьРольАдминистратораСистемы	= ПроверятьПраваАдминистрированияСистемы;

	Если Не СвойстваПользователяИБ.УказанТекущийПользовательИБ Тогда
		Роли = СвойстваПользователяИБ.ПользовательИБ.Роли;

		// Для не текущего пользователя ИБ проверяются роли в записанном пользователе ИБ.
		Если ПроверитьРольПолныеПрава
		   И Не Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
			Возврат Ложь;
		КонецЕсли;

		Если ПроверитьРольАдминистратораСистемы
		   И Не Роли.Содержит(Метаданные.Роли.АдминистраторСистемы) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
	КонецЕсли;

	Если УчитыватьПривилегированныйРежим И ПривилегированныйРежимУстановлен Тогда
		Возврат Истина;
	КонецЕсли;

	Если БазоваяПодсистемаСерверПовтИсп.ПривилегированныйРежимУстановленПриЗапуске() Тогда
		// Когда клиентское приложение запущено с параметром UsePrivilegedMode, тогда
		// пользователь является полноправным, если привилегированный режим установлен.
		Возврат Истина;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СвойстваПользователяИБ.Имя) И Метаданные.ОсновныеРоли.Количество() = 0 Тогда
		// Когда основные роли не указаны, тогда у неуказанного пользователя
		// есть все права (как в привилегированном режиме).
		Возврат Истина;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СвойстваПользователяИБ.Имя)
	   И ПривилегированныйРежимУстановлен
	   И СвойстваПользователяИБ.ПравоАдминистрирование Тогда
		// Когда у неуказанного пользователя есть право Администрирование,
		// тогда привилегированный режим учитывается всегда для поддержки
		// параметра запуска UsePrivilegedMode у не клиентских приложений.
		Возврат Истина;
	КонецЕсли;

	// Для текущего пользователя ИБ проверяются роли не в записанном пользователе ИБ,
	// а роли в текущем сеансе.
	Если ПроверитьРольПолныеПрава
	   И Не СвойстваПользователяИБ.РольДоступнаПолныеПрава Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ПроверитьРольАдминистратораСистемы
	   И Не СвойстваПользователяИБ.РольДоступнаАдминистраторСистемы Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

// Выполняет поиск идентификаторов пользователей ИБ используемых более одного раза и
// либо вызывает исключение, либо возвращает найденных пользователей ИБ для дальнейшей
// обработки.
//
// Параметры:
//  Пользователь - Неопределено - проверка для всех пользователей и внешних пользователей.
//               - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи - проверка
//                 только для указанной ссылки.
//
//  УникальныйИдентификатор - Неопределено - проверка всех заданных идентификаторов пользователей ИБ.
//                          - УникальныйИдентификатор - проверка только для заданного идентификатора.
//
//  НайденныеИдентификаторы - Неопределено - при нахождении ошибок вызывается исключение.
//                          - Соответствие - при нахождении ошибок исключение не вызывается,
//                              а вместо этого заполняется переданное соответствие:
//                              * Ключ     - неоднозначный идентификатор пользователя ИБ.
//                              * Значение - массив пользователей и внешних пользователей.
//
Процедура НайтиНеоднозначныхПользователейИБ(Знач Пользователь, Знач УникальныйИдентификатор = Неопределено, Знач НайденныеИдентификаторы = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Если ТипЗнч(УникальныйИдентификатор) <> Тип("УникальныйИдентификатор") Тогда
		УникальныйИдентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	КонецЕсли;

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	ИдентификаторыПользователей.ИдентификаторПользователяИБ КАК НеоднозначныйИдентификатор,
	            	  |	ИдентификаторыПользователей.Пользователь КАК Пользователь
	            	  |ИЗ
	            	  |	(ВЫБРАТЬ
	            	  |		Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ,
	            	  |		Пользователи.Ссылка КАК Пользователь
	            	  |	ИЗ
	            	  |		Справочник.Пользователи КАК Пользователи
	            	  |
	            	  |	ОБЪЕДИНИТЬ ВСЕ
	            	  |
	            	  |	ВЫБРАТЬ
	            	  |		ВнешниеПользователи.ИдентификаторПользователяИБ,
	            	  |		ВнешниеПользователи.Ссылка
	            	  |	ИЗ
	            	  |		Справочник.ВнешниеПользователи КАК ВнешниеПользователи) КАК ИдентификаторыПользователей
	            	  |ГДЕ
	            	  |	ИдентификаторыПользователей.ИдентификаторПользователяИБ В
	            	  |			(ВЫБРАТЬ
	            	  |				ИдентификаторыПользователей.ИдентификаторПользователяИБ
	            	  |			ИЗ
	            	  |				(ВЫБРАТЬ
	            	  |					Пользователи.ИдентификаторПользователяИБ,
	            	  |					Пользователи.Ссылка КАК Пользователь
	            	  |				ИЗ
	            	  |					Справочник.Пользователи КАК Пользователи
	            	  |				ГДЕ
	            	  |					Пользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор
	            	  |					И НЕ(&Пользователь <> НЕОПРЕДЕЛЕНО
	            	  |							И Пользователи.Ссылка <> &Пользователь)
	            	  |					И НЕ(&УникальныйИдентификатор <> &ПустойУникальныйИдентификатор
	            	  |							И Пользователи.ИдентификаторПользователяИБ <> &УникальныйИдентификатор)
	            	  |
	            	  |				ОБЪЕДИНИТЬ ВСЕ
	            	  |
	            	  |				ВЫБРАТЬ
	            	  |					ВнешниеПользователи.ИдентификаторПользователяИБ,
	            	  |					ВнешниеПользователи.Ссылка
	            	  |				ИЗ
	            	  |					Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	            	  |				ГДЕ
	            	  |					ВнешниеПользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор
	            	  |					И НЕ(&Пользователь <> НЕОПРЕДЕЛЕНО
	            	  |							И ВнешниеПользователи.Ссылка <> &Пользователь)
	            	  |					И НЕ(&УникальныйИдентификатор <> &ПустойУникальныйИдентификатор
	            	  |							И ВнешниеПользователи.ИдентификаторПользователяИБ <> &УникальныйИдентификатор)) КАК ИдентификаторыПользователей
	            	  |			СГРУППИРОВАТЬ ПО
	            	  |				ИдентификаторыПользователей.ИдентификаторПользователяИБ
	            	  |			ИМЕЮЩИЕ
	            	  |				КОЛИЧЕСТВО(ИдентификаторыПользователей.Пользователь) > 1)
	            	  |
	            	  |УПОРЯДОЧИТЬ ПО
	            	  |	ИдентификаторыПользователей.ИдентификаторПользователяИБ";
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИдентификатор);
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));

	Выгрузка = Запрос.Выполнить().Выгрузить();
	Если Выгрузка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ОписаниеОшибки						= "Ошибка в базе данных:" + Символы.ПС;
	ТекущийНеоднозначныйИдентификатор	= Неопределено;

	Для каждого Строка Из Выгрузка Цикл
		НовыйУникальныйИдентификатор = Ложь;
		Если Строка.НеоднозначныйИдентификатор <> ТекущийНеоднозначныйИдентификатор Тогда
			НовыйУникальныйИдентификатор		= Истина;
			ТекущийНеоднозначныйИдентификатор	= Строка.НеоднозначныйИдентификатор;
			Если ТипЗнч(НайденныеИдентификаторы) = Тип("Соответствие") Тогда
				ТекущиеПользователи = Новый Массив;
				НайденныеИдентификаторы.Вставить(ТекущийНеоднозначныйИдентификатор, ТекущиеПользователи);
			Иначе
				ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();

				Если ТекущийПользовательИБ.УникальныйИдентификатор <> ТекущийНеоднозначныйИдентификатор Тогда
					ТекущийПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ТекущийНеоднозначныйИдентификатор);
				КонецЕсли;

				Если ТекущийПользовательИБ = Неопределено Тогда
					ИмяДляВхода = "<не найден>";
				Иначе
					ИмяДляВхода = ТекущийПользовательИБ.Имя;
				КонецЕсли;

				ОписаниеОшибки = ОписаниеОшибки + СтрШаблон("Пользователю ИБ ""%1"" с идентификатором ""%2"" соответствует более одного элемента в справочнике Пользователи:", ИмяДляВхода, ТекущийНеоднозначныйИдентификатор);
			КонецЕсли;
		КонецЕсли;

		Если ТипЗнч(НайденныеИдентификаторы) = Тип("Соответствие") Тогда
			ТекущиеПользователи.Добавить(Строка.Пользователь);
		Иначе
			Если НЕ НовыйУникальныйИдентификатор Тогда
				ОписаниеОшибки = ОписаниеОшибки + ",";
			КонецЕсли;

			ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + "	" + СтрШаблон("""%1"" с идентификатором ссылки %2", Строка.Пользователь, Строка.Пользователь.УникальныйИдентификатор());
		КонецЕсли;
	КонецЦикла;

	Если ТипЗнч(НайденныеИдентификаторы) <> Тип("Соответствие") Тогда
		ВызватьИсключение ОписаниеОшибки + "." + Символы.ПС;
	КонецЕсли;
КонецПроцедуры

// Возвращает назначение ролей, указанное разработчиками библиотек и прикладных решений.
// Область применения: только для автоматизированной проверки конфигурации.
//
// Возвращаемое значение:
//  Структура - смотри одноименный параметр в процедуре ПриОпределенииНазначенияРолей
//              общего модуля ПользователиСервер.
//
Функция НазначениеРолей() Экспорт
	НазначениеРолей = Новый Структура;
	НазначениеРолей.Вставить("ТолькоДляАдминистраторовСистемы",                Новый Массив);
	НазначениеРолей.Вставить("ТолькоДляПользователейСистемы",                  Новый Массив);
	НазначениеРолей.Вставить("ТолькоДляВнешнихПользователей",                  Новый Массив);
	НазначениеРолей.Вставить("СовместноДляПользователейИВнешнихПользователей", Новый Массив);
	
	ИнтеграцияПодсистемСервер.ПриОпределенииНазначенияРолей(НазначениеРолей);
	
	Возврат НазначениеРолей;
КонецФункции

Функция СвойстваПроверяемогоПользователяИБ(Пользователь)
	СвойстваТекущегоПользовательИБ	= ПользователиСерверПовтИсп.СвойстваТекущегоПользователяИБ();
	ПользовательИБ					= Неопределено;

	Если ТипЗнч(Пользователь) = Тип("ПользовательИнформационнойБазы") Тогда
		ПользовательИБ = Пользователь;
	ИначеЕсли Пользователь = Неопределено Или Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь() Тогда
		Возврат СвойстваТекущегоПользовательИБ;
	Иначе
		// Задан не текущий пользователь.
		Если ЗначениеЗаполнено(Пользователь) Тогда
			ИдентификаторПользователяИБ = БазоваяПодсистемаСервер.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ");
			Если СвойстваТекущегоПользовательИБ.УникальныйИдентификатор = ИдентификаторПользователяИБ Тогда
				Возврат СвойстваТекущегоПользовательИБ;
			КонецЕсли;
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
		КонецЕсли;
	КонецЕсли;

	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если СвойстваТекущегоПользовательИБ.УникальныйИдентификатор = ПользовательИБ.УникальныйИдентификатор Тогда
		Возврат СвойстваТекущегоПользовательИБ;
	КонецЕсли;

	Свойства = Новый Структура;
	Свойства.Вставить("УказанТекущийПользовательИБ", Ложь);
	Свойства.Вставить("ПользовательИБ", ПользовательИБ);

	Возврат Свойства;
КонецФункции

Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры, Отказ, ЭтоВызовПередНачаломРаботыСистемы) Экспорт
	Если Не ЭтоВызовПередНачаломРаботыСистемы Тогда
		КлючПредупрежденияБезопасности = КлючПредупрежденияБезопасностиПриЗапуске();
		Если ЗначениеЗаполнено(КлючПредупрежденияБезопасности) Тогда
			Параметры.Вставить("КлючПредупрежденияБезопасности", КлючПредупрежденияБезопасности);
		КонецЕсли;

		Возврат;
	КонецЕсли;

	РегистрироватьВЖурнале = (Параметры.ПолученныеПараметрыКлиента <> Неопределено) И Не Параметры.ПолученныеПараметрыКлиента.Свойство("ОшибкаАвторизации");

	ОшибкаАвторизации = АвторизоватьТекущегоПользователя(Истина, РегистрироватьВЖурнале);

	Если ОшибкаАвторизации <> "" Тогда
		Параметры.Вставить("ОшибкаАвторизации", ОшибкаАвторизации);
		Отказ = Истина;

		Возврат;
	КонецЕсли;

	Если ТребуетсяСменитьПароль(ОшибкаАвторизации, Истина, РегистрироватьВЖурнале) Тогда
		Параметры.Вставить("ТребуетсяСменитьПароль");
		БазоваяПодсистемаВызовСервера.СкрытьРабочийСтолПриНачалеРаботыСистемы();
	ИначеЕсли ОшибкаАвторизации <> "" Тогда
		Параметры.Вставить("ОшибкаАвторизации", ОшибкаАвторизации);
		Отказ = Истина;

		Возврат;
	КонецЕсли;
КонецПроцедуры

Функция КлючПредупрежденияБезопасностиПриЗапуске()
	Если ПустаяСтрока(ПользователиИнформационнойБазы.ТекущийПользователь().Имя) Тогда
		Возврат Неопределено; // В базе без пользователей предупреждение не требуется.
	КонецЕсли;

	Если ПривилегированныйРежим() Тогда
		Возврат Неопределено; // С ключом запуска "/UsePrivilegedMode" предупреждение не требуется.
	КонецЕсли;

	Если БазоваяПодсистемаСервер.ЭтоПодчиненныйУзелРИБ()
		И Не БазоваяПодсистемаСервер.ЭтоАвтономноеРабочееМесто() Тогда
		Возврат Неопределено; // В подчиненных узлах предупреждение не требуется.
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	Если Не ПривилегированныйРежим() Тогда
		Возврат Неопределено; // В безопасном режиме предупреждение не требуется.
	КонецЕсли;

	ПараметрыАдминистрирования	= БазоваяПодсистемаСервер.ПараметрыАдминистрирования();
	РешениеПринято				= ПараметрыАдминистрирования.ПринятоРешениеПоОткрытиюВнешнихОтчетовИОбработок;
	Если ТипЗнч(РешениеПринято) <> Тип("Булево") Тогда
		РешениеПринято = Ложь;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);

	ЭтоАдминистраторСистемы = ЭтоПолноправныйПользователь(, Истина, Ложь);
	Если ЭтоАдминистраторСистемы И Не РешениеПринято Тогда
		Возврат "ПослеОбновления";
	КонецЕсли;

	Если РешениеПринято Тогда
		Если ПравоДоступа("ИнтерактивноеОткрытиеВнешнихОбработок", Метаданные)
		 Или ПравоДоступа("ИнтерактивноеОткрытиеВнешнихОтчетов", Метаданные) Тогда

			ПользовательОзнакомлен = БазоваяПодсистемаСервер.ХранилищеОбщихНастроекЗагрузить("ПредупреждениеБезопасности", "ПользовательОзнакомлен", Ложь);

			Если Не ПользовательОзнакомлен Тогда
				Возврат "ПослеПоявленияПрава";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Вызывается при начале работы системы, чтобы проверить возможность выполнения авторизации и
// вызвать заполнение значений параметров сеанса ТекущийПользователь и ТекущийВнешнийПользователь.
// Также вызывается при входе в область данных.
//
// Возвращаемое значение:
//  Строка - пустая строка   - авторизация выполнена успешно.
//           Непустая строка - описание ошибки.
//                             При начале работы системы следует
//                             завершить работу 1С:Предприятия.
//
Функция АвторизоватьТекущегоПользователя(ПриНачалеРаботыСистемы = Ложь, РегистрироватьВЖурнале = Ложь) Экспорт
	Если Не ПриНачалеРаботыСистемы Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользовательИБ	= ПользователиИнформационнойБазы.ТекущийПользователь();
	ЭтоВнешнийПользователь	= ЗначениеЗаполнено(Справочники.ВнешниеПользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ТекущийПользовательИБ.УникальныйИдентификатор));
	ПроверитьПраваПользователя(ТекущийПользовательИБ, "ПриЗапуске", ЭтоВнешнийПользователь);

	Если ПустаяСтрока(ТекущийПользовательИБ.Имя) Тогда
		// Авторизуется пользователь по умолчанию.
		Попытка
			Значения = ЗначенияПараметровСеансаТекущийПользователь();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Возврат КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(ИнформацияОбОшибке,
				"Не удалось установить параметр сеанса ТекущийПользователь по причине:
				           |""%1"".
				           |
				           |Обратитесь к администратору.",
				РегистрироватьВЖурнале);
		КонецПопытки;
		Если ТипЗнч(Значения) = Тип("Строка") Тогда
			Возврат КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(Значения, , РегистрироватьВЖурнале);
		КонецЕсли;

		Возврат РезультатУстановкиПараметровСеанса(РегистрироватьВЖурнале);
	КонецЕсли;

	НайденныйПользователь = Неопределено;
	Если ПользовательПоИдентификаторуСуществует(ТекущийПользовательИБ.УникальныйИдентификатор, , НайденныйПользователь) Тогда
		// ПользовательИБ найден в справочнике.
		Если ПриНачалеРаботыСистемы И РолиАдминистратораДоступны() Тогда
			ИнтеграцияПодсистемСервер.ПриСозданииАдминистратора(НайденныйПользователь, "При авторизации у пользователя найдены роли администратора.");
		КонецЕсли;

		Возврат РезультатУстановкиПараметровСеанса(РегистрироватьВЖурнале);
	КонецЕсли;

	// Требуется либо создать администратора, либо сообщить об отказе авторизации.
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();

	Если ПользователиИБ.Количество() > 1
	   И Не РолиАдминистратораДоступны()
	   И Не ПравоДоступа("Администрирование", Метаданные, ТекущийПользовательИБ) Тогда

		// Авторизуется обычный пользователь, созданный в конфигураторе.
		Возврат КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(
			ТекстСообщенияПользовательНеНайденВСправочнике(ТекущийПользовательИБ.Имя),, РегистрироватьВЖурнале);
	КонецЕсли;

	// Авторизуется администратор, созданный в конфигураторе.
	Если Не РолиАдминистратораДоступны() Тогда
		Возврат КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(
			"Запуск от имени пользователя с правом Администрирование невозможен,
			           |так как он не зарегистрирован в списке пользователей.
			           |
			           |Для ведения списка и настройки прав пользователей предназначен список Пользователи,
			           |режим конфигурирования 1С:Предприятия для этого использовать не следует.",
			, РегистрироватьВЖурнале);
	КонецЕсли;

	Попытка
		Пользователь = СоздатьАдминистратора(ТекущийПользовательИБ);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Возврат КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(ИнформацияОбОшибке,
			"Не удалось выполнить автоматическую регистрацию администратора в списке по причине:
			           |""%1"".
			           |
			           |Для ведения списка и настройки прав пользователей предназначен список Пользователи,
			           |режим конфигурирования 1С:Предприятия для этого использовать не следует.",
			РегистрироватьВЖурнале);
	КонецПопытки;

	Комментарий = "Выполнен запуск от имени пользователя с ролью ""Полные права"",
		           |который не зарегистрирован в списке пользователей.
		           |Выполнена автоматическая регистрация в списке пользователей.
		           |
		           |Для ведения списка и настройки прав пользователей предназначен список Пользователи,
		           |режим конфигурирования 1С:Предприятия для этого использовать не следует.";

	ИнтеграцияПодсистемСервер.ПослеЗаписиАдминистратораПриАвторизации(Комментарий);

	ЗаписьЖурналаРегистрации("Пользователи.Администратор зарегистрирован в справочнике Пользователи",
		УровеньЖурналаРегистрации.Предупреждение,
		Метаданные.Справочники.Пользователи,
		Пользователь,
		Комментарий);

	Возврат РезультатУстановкиПараметровСеанса(РегистрироватьВЖурнале);
КонецФункции

// Используется при обновлении и начальном заполнении информационной базы.
// 1) Создает первого администратора и сопоставляет его с новым или существующим
//    пользователем в справочнике Пользователи.
// 2) Сопоставляет администратора, указанного в параметре ПользовательИБ с новым или
//    существующим пользователем в справочнике Пользователи.
//
// Параметры:
//  ПользовательИБ - Неопределено - создать первого администратора, если не существует.
//                 - ПользовательИнформационнойБазы - используется, когда нужно сопоставить
//                   существующего администратора с новым или существующим пользователем
//                   в справочнике Пользователи.
//
// Возвращаемое значение:
//  Неопределено                  - первый администратор уже существует.
//  СправочникСсылка.Пользователи - пользователь в справочнике, с которым сопоставлен созданный
//                                  первый администратор или указанный существующий.
//
Функция СоздатьАдминистратора(ПользовательИБ = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	// Добавление администратора.
	Если ПользовательИБ = Неопределено Тогда
		ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();

		Если ПользователиИБ.Количество() = 0 Тогда
			ПользовательИБ				= ПользователиИнформационнойБазы.СоздатьПользователя();
			ПользовательИБ.Имя			= "Администратор";
			ПользовательИБ.ПолноеИмя	= ПользовательИБ.Имя;
			ПользовательИБ.Роли.Очистить();
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
			РольАдминистратораСистемы	= Метаданные.Роли.АдминистраторСистемы;
			Если НЕ ПользовательИБ.Роли.Содержит(РольАдминистратораСистемы) Тогда
				ПользовательИБ.Роли.Добавить(РольАдминистратораСистемы);
			КонецЕсли;
			ПользовательИБ.Записать();
		Иначе
			// Если существует пользователь с правами администратора,
			// тогда первый администратор уже создан и его не требуется создавать.
			Для Каждого ТекущийПользовательИБ Из ПользователиИБ Цикл
				Если РолиАдминистратораДоступны(ТекущийПользовательИБ) Тогда
					Возврат Неопределено; // Первый администратор уже создан.
				КонецЕсли;
			КонецЦикла;
			// Первый администратор создан некорректно.
			ТекстОшибки = "Список пользователей информационной базы не пустой, однако не удалось
				           |найти ни одного пользователя с ролями Полные права и Администратор системы.
				           |
				           |Вероятно, пользователи создавались в конфигураторе.
				           |Требуется назначить роли Полные права и Администратор системы хотя бы одному пользователю.";
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	Иначе
		Если Не РолиАдминистратораДоступны(ПользовательИБ) Тогда
			ТекстОшибки = "Невозможно создать пользователя в справочнике для пользователя
				           |информационной базы ""%1"",
				           |так как у него нет ролей Полные права и Администратор системы.
				           |
				           |Вероятно, пользователь был создан в конфигураторе.
				           |Для автоматического создания пользователя в справочнике требуется
				           |назначить ему роли Полные права и Администратор системы.";
			ВызватьИсключение СтрШаблон(ТекстОшибки, Строка(ПользовательИБ));
		КонецЕсли;

		НайтиНеоднозначныхПользователейИБ(Неопределено, ПользовательИБ.УникальныйИдентификатор);
	КонецЕсли;

	Если ПользовательПоИдентификаторуСуществует(ПользовательИБ.УникальныйИдентификатор) Тогда
		Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);

		// Если администратор сопоставлен с внешним пользователем - это ошибка,
		// требуется очистить сопоставление.
		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
			ВнешнийПользователь = Справочники.ВнешниеПользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);

			ВнешнийПользовательОбъект								= ВнешнийПользователь.ПолучитьОбъект();
			ВнешнийПользовательОбъект.ИдентификаторПользователяИБ	= Неопределено;
			ВнешнийПользовательОбъект.ОбменДанными.Загрузка			= Истина;
			ВнешнийПользовательОбъект.Записать();
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = Справочники.Пользователи.НайтиПоНаименованию(ПользовательИБ.ПолноеИмя);

		Если ЗначениеЗаполнено(Пользователь)
		   И ЗначениеЗаполнено(Пользователь.ИдентификаторПользователяИБ)
		   И Пользователь.ИдентификаторПользователяИБ <> ПользовательИБ.УникальныйИдентификатор
		   И ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ) <> Неопределено Тогда

			Пользователь = Неопределено;
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь		= Справочники.Пользователи.СоздатьЭлемент();
		ПользовательСоздан	= Истина;
	Иначе
		Пользователь		= Пользователь.ПолучитьОбъект();
		ПользовательСоздан	= Ложь;
	КонецЕсли;

	Пользователь.Наименование = ПользовательИБ.ПолноеИмя;

	ОписаниеПользователяИБ = Новый Структура;
	ОписаниеПользователяИБ.Вставить("Действие", "Записать");
	ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор", ПользовательИБ.УникальныйИдентификатор);

	Пользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);

	Пользователь.ДополнительныеСвойства.Вставить("СозданиеАдминистратора",
		?(ПользовательИБ = Неопределено,
		  "Выполнено создание первого администратора.",
		  ?(ПользовательСоздан,
		    "Администратор сопоставлен с новым пользователем справочника.",
		    "Администратор сопоставлен с существующим пользователем справочника.") ) );

	Пользователь.Записать();

	Возврат Пользователь.Ссылка;
КонецФункции

Функция РолиАдминистратораДоступны(ПользовательИБ = Неопределено) Экспорт
	Если ПользовательИБ = Неопределено
	 Или ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь() Тогда

		Возврат РольДоступна(Метаданные.Роли.ПолныеПрава) И РольДоступна(Метаданные.Роли.АдминистраторСистемы);
	КонецЕсли;

	Возврат ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) И ПользовательИБ.Роли.Содержит(Метаданные.Роли.АдминистраторСистемы);
КонецФункции

// Определяет наличие элемента в справочнике Пользователи
// или справочнике ВнешниеПользователи по уникальному идентификатору
// пользователя информационной.
//  Функция используется для проверки наличия сопоставления пользователяИБ только
// с одним элементом справочников Пользователи и ВнешниеПользователи.
//
// Параметры:
//  УникальныйИдентификатор - идентификатор пользователя ИБ.
//
//  СсылкаНаТекущего - СправочникСсылка.Пользователи,
//                     СправочникСсылка.ВнешниеПользователи - исключить
//                       указанную ссылку из поиска.
//                     Неопределено - искать среди всех элементов справочников.
//
//  НайденныйПользователь (Возвращаемое значение):
//                     Неопределено - пользователь не существует.
//                     СправочникСсылка.Пользователи,
//                     СправочникСсылка.ВнешниеПользователи, если найден.
//
//  ИдентификаторПользователяСервиса - Булево.
//                     Ложь   - проверять ИдентификаторПользователяИБ.
//                     Истина - проверять ИдентификаторПользователяСервиса.
//
// Возвращаемое значение:
//  Булево.
//
Функция ПользовательПоИдентификаторуСуществует(УникальныйИдентификатор, СсылкаНаТекущего = Неопределено, НайденныйПользователь = Неопределено, ИдентификаторПользователяСервиса = Ложь) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	Пользователи.Ссылка КАК Пользователь
	            	  |ИЗ
	            	  |	Справочник.Пользователи КАК Пользователи
	            	  |ГДЕ
	            	  |	Пользователи.ИдентификаторПользователяИБ = &УникальныйИдентификатор
	            	  |	И Пользователи.Ссылка <> &СсылкаНаТекущего
	            	  |
	            	  |ОБЪЕДИНИТЬ ВСЕ
	            	  |
	            	  |ВЫБРАТЬ
	            	  |	ВнешниеПользователи.Ссылка
	            	  |ИЗ
	            	  |	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	            	  |ГДЕ
	            	  |	ВнешниеПользователи.ИдентификаторПользователяИБ = &УникальныйИдентификатор
	            	  |	И ВнешниеПользователи.Ссылка <> &СсылкаНаТекущего";
	Запрос.УстановитьПараметр("СсылкаНаТекущего", СсылкаНаТекущего);
	Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИдентификатор);

	РезультатЗапроса	= Запрос.Выполнить();

	Результат				= Ложь;
	НайденныйПользователь	= Неопределено;

	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка					= РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		НайденныйПользователь	= Выборка.Пользователь;
		Результат				= Истина;
		НайтиНеоднозначныхПользователейИБ(Неопределено, УникальныйИдентификатор);
	КонецЕсли;

	Возврат Результат;
КонецФункции

// Обновляет дату последней активности и проверяет необходимость смены пароля.
Функция ТребуетсяСменитьПароль(ОписаниеОшибки = "", ПриЗапуске = Ложь, РегистрироватьВЖурнале = Истина)
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	Если Не ЗначениеЗаполнено(ПользовательИБ.Имя) Тогда
		Возврат Ложь;
	КонецЕсли;

	// Обновление даты последнего входа пользователя.
	УстановитьПривилегированныйРежим(Истина);
	ТекущийПользователь			= ПользователиКлиентСервер.АвторизованныйПользователь();
	НачалоДняТекущейДатыСеанса	= НачалоДня(ТекущаяДатаСеанса());

	Блокировка			= Новый БлокировкаДанных;
	ЭлементБлокировки	= Блокировка.Добавить("РегистрСведений.СведенияОПользователях");
	ЭлементБлокировки.УстановитьЗначение("Пользователь", ТекущийПользователь);
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			СведенияОПользователе				= НаборЗаписей.Добавить();
			СведенияОПользователе.Пользователь	= ТекущийПользователь;
		Иначе
			СведенияОПользователе = НаборЗаписей[0];
		КонецЕсли;
		Записать = Ложь;
		Если СведенияОПользователе.ДатаПоследнейАктивности <> НачалоДняТекущейДатыСеанса Тогда
			СведенияОПользователе.ДатаПоследнейАктивности = НачалоДняТекущейДатыСеанса;
			Записать = Истина;
		КонецЕсли;
		ИспользуемыйКлиент = БазоваяПодсистемаСервер.ПараметрыКлиентаНаСервере().Получить("ИспользуемыйКлиент");
		Если СведенияОПользователе.ПоследнийИспользуемыйКлиент <> ИспользуемыйКлиент Тогда
			СведенияОПользователе.ПоследнийИспользуемыйКлиент	= ИспользуемыйКлиент;
			Записать											= Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СведенияОПользователе.ДатаНачалаИспользованияПароля)
		 Или СведенияОПользователе.ДатаНачалаИспользованияПароля > НачалоДняТекущейДатыСеанса Тогда
			СведенияОПользователе.ДатаНачалаИспользованияПароля	= НачалоДняТекущейДатыСеанса;
			Записать											= Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(СведенияОПользователе.ДатаАвтоматическогоЗапрещенияВхода) Тогда
			СведенияОПользователе.ДатаАвтоматическогоЗапрещенияВхода	= Неопределено;
			Записать													= Истина;
		КонецЕсли;
		Если Записать Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ИнформацияОбОшибке	= ИнформацияОбОшибке();
		ОтменитьТранзакцию();
		ШаблонТекстаОшибки	= "Не удалось записать сведения о текущем пользователе по причине:
			           |%1
			           |
			           |Обратитесь к администратору.";
		Если ПриЗапуске Тогда
			ОписаниеОшибки = "Авторизация не выполнена. Работа системы будет завершена." + Символы.ПС + Символы.ПС
				+ СтрШаблон(ШаблонТекстаОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке));

			Если РегистрироватьВЖурнале Тогда
				ЗаписьЖурналаРегистрации("Пользователи.Ошибка входа в программу",
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.НайтиПоТипу(ТипЗнч(ТекущийПользователь)),
					ТекущийПользователь,
					СтрШаблон(ШаблонТекстаОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
			КонецЕсли;
		Иначе
			Если РегистрироватьВЖурнале Тогда
				ЗаписьЖурналаРегистрации("Пользователи.Ошибка обновления даты последней активности",
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.НайтиПоТипу(ТипЗнч(ТекущийПользователь)),
					ТекущийПользователь,
					СтрШаблон(ШаблонТекстаОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
			КонецЕсли;
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УчитыватьСвойствоЗапрещеноИзменятьПароль");
	ДополнительныеПараметры.Вставить("УчитыватьСвойствоАутентификацияСтандартная");
	Если Не ВозможноИзменитьПароль(ТекущийПользователь, ДополнительныеПараметры) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если СведенияОПользователе.ПотребоватьСменуПароляПриВходе Тогда
		Возврат Истина;
	КонецЕсли;

	Если Не ПользователиСерверПовтИсп.Настройки().ОбщиеНастройкиВхода Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		НастройкиВхода = ПользователиСерверПовтИсп.Настройки().ВнешниеПользователи;
	Иначе
		НастройкиВхода = ПользователиСерверПовтИсп.Настройки().Пользователи;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(НастройкиВхода.МаксимальныйСрокДействияПароля) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СведенияОПользователе.ДатаНачалаИспользованияПароля) Тогда
		Возврат Ложь;
	КонецЕсли;

	ОстатокМаксимальногоСрокаДействияПароля = НастройкиВхода.МаксимальныйСрокДействияПароля
		- (НачалоДняТекущейДатыСеанса - СведенияОПользователе.ДатаНачалаИспользованияПароля) / (24*60*60);

	Возврат ОстатокМаксимальногоСрокаДействияПароля <= 0;
КонецФункции

Функция НастройкиВхода() Экспорт
	Настройки = Новый Структура;
	// Требования сложности.
	Настройки.Вставить("ПарольДолженОтвечатьТребованиямСложности", Ложь);
	Настройки.Вставить("МинимальнаяДлинаПароля", 0);
	// Требования срока действия.
	Настройки.Вставить("МаксимальныйСрокДействияПароля", 0);
	Настройки.Вставить("МинимальныйСрокДействияПароля", 0);
	Настройки.Вставить("ЗапретитьПовторениеПароляСредиПоследних", 0);
	// Требование периодической работы в программе.
	Настройки.Вставить("ПросрочкаРаботыВПрограммеДоЗапрещенияВхода", 0);
	Настройки.Вставить("ПросрочкаРаботыВПрограммеДатаВключения", '00010101');

	КопияНастроек = Новый ФиксированнаяСтруктура(Настройки);

	ПодготовленныеНастройки = Новый Структура;
	ПодготовленныеНастройки.Вставить("Пользователи", Новый Структура(КопияНастроек));
	ПодготовленныеНастройки.Вставить("ВнешниеПользователи", Настройки);

	УстановитьПривилегированныйРежим(Истина);
	СохраненныеНастройки = Константы.НастройкиВходаПользователей.Получить().Получить();
	УстановитьПривилегированныйРежим(Ложь);
	Если ТипЗнч(СохраненныеНастройки) <> Тип("Структура") Тогда
		Возврат ПодготовленныеНастройки;
	КонецЕсли;

	Для Каждого ПодготовленнаяНастройка Из ПодготовленныеНастройки Цикл
		Если Не СохраненныеНастройки.Свойство(ПодготовленнаяНастройка.Ключ)
		 Или ТипЗнч(СохраненныеНастройки[ПодготовленнаяНастройка.Ключ]) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		НачальныеНастройки	= ПодготовленнаяНастройка.Значение;
		ТекущиеНастройки	= СохраненныеНастройки[ПодготовленнаяНастройка.Ключ];

		Если ТипЗнч(ТекущиеНастройки) = Тип("Структура") Тогда
			Для Каждого НачальнаяНастройка Из НачальныеНастройки Цикл

				Если Не ТекущиеНастройки.Свойство(НачальнаяНастройка.Ключ)
				 Или ТипЗнч(ТекущиеНастройки[НачальнаяНастройка.Ключ]) <> ТипЗнч(НачальнаяНастройка.Значение) Тогда

					Продолжить;
				КонецЕсли;

				НачальныеНастройки[НачальнаяНастройка.Ключ] = ТекущиеНастройки[НачальнаяНастройка.Ключ];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Возврат ПодготовленныеНастройки;
КонецФункции

Функция ЗначенияПараметровСеансаТекущийПользователь()
	ЗаголовокОшибки = "Не удалось установить параметр сеанса ТекущийПользователь." + Символы.ПС;

	НачатьТранзакцию();
	Попытка
		СведенияОПользователе = НайтиТекущегоПользователяВСправочнике();

		Если СведенияОПользователе.СоздатьПользователя Тогда
			СоздатьТекущегоПользователяВСправочнике(СведенияОПользователе);
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

	Если Не СведенияОПользователе.СоздатьПользователя И Не СведенияОПользователе.ПользовательНайден Тогда
		Возврат ЗаголовокОшибки + ТекстСообщенияПользовательНеНайденВСправочнике(СведенияОПользователе.ИмяПользователя);
	КонецЕсли;

	Если СведенияОПользователе.ТекущийПользователь        = Неопределено
	 Или СведенияОПользователе.ТекущийВнешнийПользователь = Неопределено Тогда

		Возврат ЗаголовокОшибки + ТекстСообщенияПользовательНеНайденВСправочнике(
				СведенияОПользователе.ИмяПользователя) + Символы.ПС
			+ "Возникла внутренняя ошибка при поиске пользователя.";
	КонецЕсли;

	Значения = Новый Структура;
	Значения.Вставить("ТекущийПользователь",        СведенияОПользователе.ТекущийПользователь);
	Значения.Вставить("ТекущийВнешнийПользователь", СведенияОПользователе.ТекущийВнешнийПользователь);

	Возврат Значения;
КонецФункции

Функция КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(ИнформацияОбОшибке, ШаблонОшибки = "", РегистрироватьВЖурнале = Истина)
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		КраткоеПредставление   = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробноеПредставление = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	Иначе
		КраткоеПредставление   = ИнформацияОбОшибке;
		ПодробноеПредставление = ИнформацияОбОшибке;
	КонецЕсли;

	Если ЗначениеЗаполнено(ШаблонОшибки) Тогда
		КраткоеПредставление	= СтрШаблон(ШаблонОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке));

		ПодробноеПредставление	= СтрШаблон(ШаблонОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецЕсли;

	КраткоеПредставление   = "Авторизация не выполнена. Работа системы будет завершена." + Символы.ПС + Символы.ПС + КраткоеПредставление;
	ПодробноеПредставление = "Авторизация не выполнена. Работа системы будет завершена." + Символы.ПС + Символы.ПС + ПодробноеПредставление;

	Если РегистрироватьВЖурнале Тогда
		ЗаписьЖурналаРегистрации("Пользователи.Ошибка входа в программу",УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставление);
	КонецЕсли;

	Возврат КраткоеПредставление;
КонецФункции

Функция РезультатУстановкиПараметровСеанса(РегистрироватьВЖурнале)
	Попытка
		ПользователиКлиентСервер.АвторизованныйПользователь();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Возврат КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(ИнформацияОбОшибке,, РегистрироватьВЖурнале);
	КонецПопытки;

	Возврат "";
КонецФункции

Функция ТекстСообщенияПользовательНеНайденВСправочнике(ИмяПользователя)
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей") Тогда
		ШаблонСообщенияОбОшибке = "Пользователь ""%1"" не найден в справочниках
			           |""Пользователи"" и ""Внешние пользователи"".
			           |
			           |Обратитесь к администратору.";
	Иначе
		ШаблонСообщенияОбОшибке = "Пользователь ""%1"" не найден в справочнике ""Пользователи"".
			           |
			           |Обратитесь к администратору.";
	КонецЕсли;

	Возврат СтрШаблон(ШаблонСообщенияОбОшибке, ИмяПользователя);
КонецФункции

// Проверяет наличие хотя бы одного вида аутентификации у пользователя ИБ.
//
// Параметры:
//  ОписаниеПользователяИБ - УникальныйИдентификатор - идентификатор пользователя ИБ.
//                         - Структура - содержит 3 свойства аутентификации:
//                             * АутентификацияСтандартная - Булево - аутентификация 1С:Предприятия.
//                             * АутентификацияОС          - Булево - аутентификация операционной системы.
//                             * АутентификацияOpenID      - Булево - аутентификация OpenID.
//                         - ПользовательИнформационнойБазы       - пользователь ИБ.
//                         - СправочникСсылка.Пользователи        - пользователь.
//                         - СправочникСсылка.ВнешниеПользователи - внешний пользователь.
//
// Возвращаемое значение:
//  Булево - Истина, если хотя бы одно свойство аутентификации равно Истина.
//
Функция ВходВПрограммуРазрешен(ОписаниеПользователяИБ) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	УникальныйИдентификатор = Неопределено;

	Если ТипЗнч(ОписаниеПользователяИБ) = Тип("СправочникСсылка.Пользователи")
	 Или ТипЗнч(ОписаниеПользователяИБ) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда

		УникальныйИдентификатор = БазоваяПодсистемаСервер.ЗначениеРеквизитаОбъекта(ОписаниеПользователяИБ, "ИдентификаторПользователяИБ");

		Если ТипЗнч(ОписаниеПользователяИБ) <> Тип("УникальныйИдентификатор") Тогда
			Возврат Ложь;
		КонецЕсли;

	ИначеЕсли ТипЗнч(ОписаниеПользователяИБ) = Тип("УникальныйИдентификатор") Тогда
		УникальныйИдентификатор = ОписаниеПользователяИБ;
	КонецЕсли;

	Если УникальныйИдентификатор <> Неопределено Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(УникальныйИдентификатор);

		Если ПользовательИБ = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ПользовательИБ = ОписаниеПользователяИБ;
	КонецЕсли;

	Возврат ПользовательИБ.АутентификацияСтандартная
		ИЛИ ПользовательИБ.АутентификацияОС
		ИЛИ ПользовательИБ.АутентификацияOpenID;
КонецФункции

// Проверяет наличие учетной записи и прав, необходимых для изменения пароля.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи,
//                 СправочникСсылка.ВнешниеПользователи - пользователь для смены пароля.
//
//  ДополнительныеПараметры - Структура - (возвращаемое значение) со свойствами:
//   * ТекстОшибки                 - Строка - описание ошибки, если нет возможности изменить пароль.
//   * ИдентификаторПользователяИБ - УникальныйИдентификатор - идентификатор пользователя ИБ.
//   * ЭтоТекущийПользовательИБ    - Булево - Истина, если пользователь является текущим.
//
// Возвращаемое значение:
//  Булево - Ложь, если нет возможности изменить пароль.
//
Функция ВозможноИзменитьПароль(Пользователь, ДополнительныеПараметры = Неопределено) Экспорт
	Если ТипЗнч(ДополнительныеПараметры) <> Тип("Структура") Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	РеквизитыПользователя = БазоваяПодсистемаСервер.ЗначенияРеквизитовОбъекта(Пользователь, "Ссылка, Недействителен, ИдентификаторПользователяИБ, Подготовлен");

	Если РеквизитыПользователя.Ссылка <> Пользователь Тогда
		РеквизитыПользователя.Ссылка			= БазоваяПодсистемаСервер.МенеджерОбъектаПоСсылке(Пользователь).ПустаяСсылка();
		РеквизитыПользователя.Недействителен	= Ложь;
		РеквизитыПользователя.Подготовлен		= Ложь;
		РеквизитыПользователя.ИдентификаторПользователяИБ = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	КонецЕсли;

	Если ДополнительныеПараметры.Свойство("ПроверятьДействительностьПользователя") И РеквизитыПользователя.Недействителен <> Ложь Тогда
		ДополнительныеПараметры.Вставить("ТекстОшибки", СтрШаблон("Пользователь ""%1"" недействителен.", Пользователь));

		Возврат Ложь;
	КонецЕсли;

	ИдентификаторПользователяИБ	= РеквизитыПользователя.ИдентификаторПользователяИБ;
	ПользовательИБ				= ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);

	УстановитьПривилегированныйРежим(Ложь);

	Если ДополнительныеПараметры.Свойство("ПроверятьНаличиеПользователяИБ") И ПользовательИБ = Неопределено Тогда
		ДополнительныеПараметры.Вставить("ТекстОшибки", СтрШаблон("Не найдена учетная запись пользователя ""%1"".", Пользователь));
		Возврат Ложь;
	КонецЕсли;

	ДополнительныеПараметры.Вставить("ИдентификаторПользователяИБ", ИдентификаторПользователяИБ);

	ИдентификаторТекущегоПользователяИБ	= ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	ДополнительныеПараметры.Вставить("ЭтоТекущийПользовательИБ", ИдентификаторПользователяИБ = ИдентификаторТекущегоПользователяИБ);

	УровеньДоступа = сУровеньДоступаКСвойствамПользователя(РеквизитыПользователя);

	Если Не ДополнительныеПараметры.ЭтоТекущийПользовательИБ И Не УровеньДоступа.НастройкиДляВхода Тогда
		ДополнительныеПараметры.Вставить("ТекстОшибки", СтрШаблон("Недостаточно прав для изменения пароля пользователя ""%1"".", Пользователь));
		Возврат Ложь;
	КонецЕсли;

	ДополнительныеПараметры.Вставить("ПарольУстановлен", ПользовательИБ <> Неопределено И ПользовательИБ.ПарольУстановлен);

	Если ПользовательИБ <> Неопределено И ПользовательИБ.ЗапрещеноИзменятьПароль Тогда
		Если УровеньДоступа.НастройкиДляВхода Тогда
			Если ДополнительныеПараметры.Свойство("УчитыватьСвойствоЗапрещеноИзменятьПароль") Тогда
				ДополнительныеПараметры.Вставить("ТекстОшибки", СтрШаблон("Установлен запрет изменения пароля пользователя ""%1"".", Пользователь));
				Возврат Ложь;
			КонецЕсли;
		Иначе
			ДополнительныеПараметры.Вставить("ТекстОшибки", СтрШаблон("Установлен запрет изменения пароля пользователя ""%1"". Обратитесь к администратору.", Пользователь));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Если ДополнительныеПараметры.Свойство("УчитыватьСвойствоАутентификацияСтандартная") И ПользовательИБ <> Неопределено И Не ПользовательИБ.АутентификацияСтандартная Тогда
		Возврат Ложь;
	КонецЕсли;

	// Проверка минимального срока действия пароля.
	Если УровеньДоступа.НастройкиДляВхода Тогда
		Возврат Истина;
	КонецЕсли;

	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		НастройкиВхода = ПользователиСерверПовтИсп.Настройки().ВнешниеПользователи;
	Иначе
		НастройкиВхода = ПользователиСерверПовтИсп.Настройки().Пользователи;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(НастройкиВхода.МинимальныйСрокДействияПароля) Тогда
		Возврат Истина;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей	= РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Прочитать();
	УстановитьПривилегированныйРежим(Ложь);

	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	СведенияОПользователе = НаборЗаписей[0];

	Если Не ЗначениеЗаполнено(СведенияОПользователе.ДатаНачалаИспользованияПароля) Тогда
		Возврат Истина;
	КонецЕсли;

	НачалоДняТекущейДатыСеанса				= НачалоДня(ТекущаяДатаСеанса());
	ОстатокМинимальногоСрокаДействияПароля	= НастройкиВхода.МинимальныйСрокДействияПароля
		- (НачалоДняТекущейДатыСеанса - СведенияОПользователе.ДатаНачалаИспользованияПароля) / (24*60*60);

	Если ОстатокМинимальногоСрокаДействияПароля <= 0 Тогда
		Возврат Истина;
	КонецЕсли;

	КоличествоДней	= ОстатокМинимальногоСрокаДействияПароля;

	ЧислоИПредмет	= СтрокаСЧислом(";%1 день;;%1 дня;%1 дней;%1 дня", КоличествоДней, ВидЧисловогоЗначения.Количественное, "L=ru");

	ДополнительныеПараметры.Вставить("ТекстОшибки", СтрШаблон("Пароль можно будет сменить только через %1.", ЧислоИПредмет));

	Возврат Ложь;
КонецФункции

Функция НайтиТекущегоПользователяВСправочнике()
	Результат = Новый Структура;
	Результат.Вставить("ИмяПользователя",             Неопределено);
	Результат.Вставить("ПолноеИмяПользователя",       Неопределено);
	Результат.Вставить("ИдентификаторПользователяИБ", Неопределено);
	Результат.Вставить("ПользовательНайден",          Ложь);
	Результат.Вставить("СоздатьПользователя",         Ложь);
	Результат.Вставить("СсылкаНового",                Неопределено);
	Результат.Вставить("Служебный",                   Ложь);
	Результат.Вставить("ТекущийПользователь",         Неопределено);
	Результат.Вставить("ТекущийВнешнийПользователь",  Справочники.ВнешниеПользователи.ПустаяСсылка());

	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();

	Если ПустаяСтрока(ТекущийПользовательИБ.Имя) Тогда
		СвойстваНеуказанногоПользователя = СвойстваНеуказанногоПользователя();

		Результат.ИмяПользователя       = СвойстваНеуказанногоПользователя.ПолноеИмя;
		Результат.ПолноеИмяПользователя = СвойстваНеуказанногоПользователя.ПолноеИмя;
		Результат.СсылкаНового          = СвойстваНеуказанногоПользователя.СтандартнаяСсылка;

		Если СвойстваНеуказанногоПользователя.Ссылка = Неопределено Тогда
			Результат.СоздатьПользователя			= Истина;
			Результат.Служебный						= Истина;
			Результат.ИдентификаторПользователяИБ	= "";
		Иначе
			Результат.ПользовательНайден			= Истина;
			Результат.ТекущийПользователь			= СвойстваНеуказанногоПользователя.Ссылка;
		КонецЕсли;

		Возврат Результат;
	КонецЕсли;

	Результат.ИмяПользователя             = ТекущийПользовательИБ.Имя;
	Результат.ИдентификаторПользователяИБ = ТекущийПользовательИБ.УникальныйИдентификатор;

	НайтиНеоднозначныхПользователейИБ(Неопределено, Результат.ИдентификаторПользователяИБ);

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ ПЕРВЫЕ 1
	            	  |	ВнешниеПользователи.Ссылка КАК Ссылка
	            	  |ИЗ
	            	  |	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	            	  |ГДЕ
	            	  |	ВнешниеПользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
	Запрос.Параметры.Вставить("ИдентификаторПользователяИБ", Результат.ИдентификаторПользователяИБ);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей") Тогда
			Возврат "Внешние пользователи отключены.";
		КонецЕсли;

		Результат.ТекущийПользователь        = Справочники.Пользователи.ПустаяСсылка();
		Результат.ТекущийВнешнийПользователь = Выборка.Ссылка;

		Результат.ПользовательНайден		= Истина;

		Возврат Результат;
	КонецЕсли;

	Запрос.Текст	= "ВЫБРАТЬ ПЕРВЫЕ 1
	            	  |	Пользователи.Ссылка КАК Ссылка
	            	  |ИЗ
	            	  |	Справочник.Пользователи КАК Пользователи
	            	  |ГДЕ
	            	  |	Пользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Результат.ТекущийПользователь	= Выборка.Ссылка;
		Результат.ПользовательНайден	= Истина;

		Возврат Результат;
	КонецЕсли;

	Если Не Результат.СоздатьПользователя И Не РолиАдминистратораДоступны() Тогда
		Возврат Результат;
	КонецЕсли;

	Результат.ИдентификаторПользователяИБ = ТекущийПользовательИБ.УникальныйИдентификатор;
	Результат.ПолноеИмяПользователя       = ТекущийПользовательИБ.ПолноеИмя;

	Если Результат.СоздатьПользователя Тогда
		Возврат Результат;
	КонецЕсли;

	ПользовательПоНаименованию = СсылкаПользователяПоПолномуНаименованию(Результат.ПолноеИмяПользователя);

	Если ПользовательПоНаименованию <> Неопределено Тогда
		Результат.ПользовательНайден  = Истина;
		Результат.ТекущийПользователь = ПользовательПоНаименованию;
	Иначе
		Результат.СоздатьПользователя = Истина;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Процедура СоздатьТекущегоПользователяВСправочнике(СведенияОПользователе)
	НачатьТранзакцию();
	Попытка
		Если СведенияОПользователе.СсылкаНового = Неопределено Тогда
			СведенияОПользователе.СсылкаНового = Справочники.Пользователи.ПолучитьСсылку();
		КонецЕсли;

		СведенияОПользователе.ТекущийПользователь = СведенияОПользователе.СсылкаНового;

		ПараметрыСеанса.ТекущийПользователь        = СведенияОПользователе.ТекущийПользователь;
		ПараметрыСеанса.ТекущийВнешнийПользователь = СведенияОПользователе.ТекущийВнешнийПользователь;
		ПараметрыСеанса.АвторизованныйПользователь = СведенияОПользователе.ТекущийПользователь;

		НовыйПользователь				= Справочники.Пользователи.СоздатьЭлемент();
		НовыйПользователь.Служебный		= СведенияОПользователе.Служебный;
		НовыйПользователь.Наименование	= СведенияОПользователе.ПолноеИмяПользователя;
		НовыйПользователь.УстановитьСсылкуНового(СведенияОПользователе.СсылкаНового);

		Если ЗначениеЗаполнено(СведенияОПользователе.ИдентификаторПользователяИБ) Тогда
			ОписаниеПользователяИБ = Новый Структура;
			ОписаниеПользователяИБ.Вставить("Действие", "Записать");
			ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор", СведенияОПользователе.ИдентификаторПользователяИБ);

			НовыйПользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		КонецЕсли;

		НовыйПользователь.Записать();

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ОчищаемыеПараметры = Новый Массив;
		ОчищаемыеПараметры.Добавить("ТекущийПользователь");
		ОчищаемыеПараметры.Добавить("ТекущийВнешнийПользователь");
		ОчищаемыеПараметры.Добавить("АвторизованныйПользователь");
		ПараметрыСеанса.Очистить(ОчищаемыеПараметры);

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

// Возвращает свойства пользователя для пользователя ИБ с пустым именем.
Функция СвойстваНеуказанногоПользователя() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Свойства = Новый Структура;

	// Ссылка на найденный элемент справочника
	// соответствующий неуказанному пользователю.
	Свойства.Вставить("Ссылка", Неопределено);

	// Ссылка, используемая для поиска и создания
	// неуказанного пользователя в справочнике Пользователи.
	Свойства.Вставить("СтандартнаяСсылка", Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор("aa00559e-ad84-4494-88fd-f0826edc46f0")));

	// Полное имя, которое устанавливается в элемент справочника Пользователи
	// при создании несуществующего неуказанного пользователя.
	Свойства.Вставить("ПолноеИмя", "<Не указан>");

	// Полное имя, которое используется для поиска неуказанного пользователя
	// старым способом, необходимым для поддержки старых версий
	// неуказанного пользователя. Это имя не требуется изменять.
	Свойства.Вставить("ПолноеИмяДляПоиска", "<Не указан>");

	// Поиск по уникальному идентификатору.
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ ПЕРВЫЕ 1
	            	  |	ИСТИНА КАК ЗначениеИстина
	            	  |ИЗ
	            	  |	Справочник.Пользователи КАК Пользователи
	            	  |ГДЕ
	            	  |	Пользователи.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Свойства.СтандартнаяСсылка);

	НачатьТранзакцию();
	Попытка
		Если Запрос.Выполнить().Пустой() Тогда
			Запрос.Текст	= "ВЫБРАТЬ ПЕРВЫЕ 1
			            	  |	Пользователи.Ссылка КАК Ссылка
			            	  |ИЗ
			            	  |	Справочник.Пользователи КАК Пользователи
			            	  |ГДЕ
			            	  |	Пользователи.Наименование = &ПолноеИмя";
			Запрос.УстановитьПараметр("ПолноеИмя", Свойства.ПолноеИмяДляПоиска);

			Результат = Запрос.Выполнить();

			Если НЕ Результат.Пустой() Тогда
				Выборка			= Результат.Выбрать();
				Выборка.Следующий();
				Свойства.Ссылка	= Выборка.Ссылка;
			КонецЕсли;
		Иначе
			Свойства.Ссылка = Свойства.СтандартнаяСсылка;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;

	Возврат Свойства;
КонецФункции

Функция СсылкаПользователяПоПолномуНаименованию(ПолноеИмя)
	УстановитьПривилегированныйРежим(Истина);

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	Пользователи.Ссылка КАК Ссылка,
	            	  |	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	            	  |ИЗ
	            	  |	Справочник.Пользователи КАК Пользователи
	            	  |ГДЕ
	            	  |	Пользователи.Наименование = &ПолноеИмя";

	Запрос.УстановитьПараметр("ПолноеИмя", ПолноеИмя);

	Результат = Неопределено;

	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда

			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();

			Если НЕ ПользовательИБЗанят(Выборка.ИдентификаторПользователяИБ) Тогда
				Результат = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;

	Возврат Результат;
КонецФункции

// Проверяет сопоставлен ли пользовательИБ с элементом справочника Пользователи или
// с элементом справочника ВнешниеПользователи.
//
// Параметры:
//  ПользовательИБ - Строка - имя пользователя ИБ.
//                 - УникальныйИдентификатор - уникальный идентификатор пользователя ИБ.
//                 - ПользовательИнформационнойБазы -
//
//  УчетнаяЗапись  - ПользовательИнформационнойБазы - (возвращаемое значение).
//
// Возвращаемое значение:
//  Булево - Истина, если пользователь ИБ существует и его идентификатор
//   используется либо в справочнике Пользователи, либо в справочнике ВнешниеПользователи.
//
Функция ПользовательИБЗанят(ПользовательИБ, УчетнаяЗапись = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Если ТипЗнч(ПользовательИБ) = Тип("Строка") Тогда
		УчетнаяЗапись = ПользователиИнформационнойБазы.НайтиПоИмени(ПользовательИБ);
	ИначеЕсли ТипЗнч(ПользовательИБ) = Тип("УникальныйИдентификатор") Тогда
		УчетнаяЗапись = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользовательИБ);
	Иначе
		УчетнаяЗапись = ПользовательИБ;
	КонецЕсли;

	Если УчетнаяЗапись = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат ПользовательПоИдентификаторуСуществует(УчетнаяЗапись.УникальныйИдентификатор);
КонецФункции

// Обработчик регламентного задания КонтрольАктивностиПользователей.
Процедура КонтрольАктивностиПользователей() Экспорт
	БазоваяПодсистемаСервер.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.КонтрольАктивностиПользователей);

	ОтключитьНеактивныхИПросроченныхПользователей();
КонецПроцедуры

Процедура ОтключитьНеактивныхИПросроченныхПользователей()
	УстановитьПривилегированныйРежим(Истина);

	Настройки = ПользователиСерверПовтИсп.Настройки();
	Если Не Настройки.ОбщиеНастройкиВхода Тогда
		БазоваяПодсистемаСервер.УстановитьИспользованиеПредопределенногоРегламентногоЗадания(Метаданные.РегламентныеЗадания.КонтрольАктивностиПользователей, Ложь);

		Возврат;
	КонецЕсли;

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	Пользователи.Ссылка КАК Пользователь,
	            	  |	ВЫБОР
	            	  |		КОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <> &ПустаяДата
	            	  |			ТОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <= &НачалоДняТекущейДатыСеанса
	            	  |		ИНАЧЕ ЛОЖЬ
	            	  |	КОНЕЦ КАК СрокДействияИстек
	            	  |ИЗ
	            	  |	Справочник.Пользователи КАК Пользователи
	            	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	            	  |		ПО (СведенияОПользователях.Пользователь = Пользователи.Ссылка)
	            	  |ГДЕ
	            	  |	ЕСТЬNULL(СведенияОПользователях.СрокДействияНеОграничен, ЛОЖЬ) = ЛОЖЬ
	            	  |	И ЕСТЬNULL(СведенияОПользователях.ДатаАвтоматическогоЗапрещенияВхода, &ПустаяДата) = &ПустаяДата
	            	  |	И ВЫБОР
	            	  |			КОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <> &ПустаяДата
	            	  |				ТОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <= &НачалоДняТекущейДатыСеанса
	            	  |			КОГДА ЕСТЬNULL(СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода, 0) <> 0
	            	  |				ТОГДА ВЫБОР
	            	  |						КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата) = &ПустаяДата
	            	  |							ТОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(&ДатаВключенияПросрочкиПользователей, ДЕНЬ, СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
	            	  |						КОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата), ДЕНЬ, СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
	            	  |							ТОГДА ИСТИНА
	            	  |						ИНАЧЕ ЛОЖЬ
	            	  |					КОНЕЦ
	            	  |			ИНАЧЕ ВЫБОР
	            	  |					КОГДА &ПросрочкаРаботыПользователей = 0
	            	  |						ТОГДА ЛОЖЬ
	            	  |					КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата) = &ПустаяДата
	            	  |						ТОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(&ДатаВключенияПросрочкиПользователей, ДЕНЬ, &ПросрочкаРаботыПользователей)
	            	  |					КОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата), ДЕНЬ, &ПросрочкаРаботыПользователей)
	            	  |						ТОГДА ИСТИНА
	            	  |					ИНАЧЕ ЛОЖЬ
	            	  |				КОНЕЦ
	            	  |		КОНЕЦ
	            	  |
	            	  |ОБЪЕДИНИТЬ ВСЕ
	            	  |
	            	  |ВЫБРАТЬ
	            	  |	ВнешниеПользователи.Ссылка,
	            	  |	ВЫБОР
	            	  |		КОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <> &ПустаяДата
	            	  |			ТОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <= &НачалоДняТекущейДатыСеанса
	            	  |		ИНАЧЕ ЛОЖЬ
	            	  |	КОНЕЦ
	            	  |ИЗ
	            	  |	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	            	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	            	  |		ПО (СведенияОПользователях.Пользователь = ВнешниеПользователи.Ссылка)
	            	  |ГДЕ
	            	  |	ЕСТЬNULL(СведенияОПользователях.СрокДействияНеОграничен, ЛОЖЬ) = ЛОЖЬ
	            	  |	И ЕСТЬNULL(СведенияОПользователях.ДатаАвтоматическогоЗапрещенияВхода, &ПустаяДата) = &ПустаяДата
	            	  |	И ВЫБОР
	            	  |			КОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <> &ПустаяДата
	            	  |				ТОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <= &НачалоДняТекущейДатыСеанса
	            	  |			КОГДА ЕСТЬNULL(СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода, 0) <> 0
	            	  |				ТОГДА ВЫБОР
	            	  |						КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата) = &ПустаяДата
	            	  |							ТОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(&ДатаВключенияПросрочкиПользователей, ДЕНЬ, СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
	            	  |						КОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата), ДЕНЬ, СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
	            	  |							ТОГДА ИСТИНА
	            	  |						ИНАЧЕ ЛОЖЬ
	            	  |					КОНЕЦ
	            	  |			ИНАЧЕ ВЫБОР
	            	  |					КОГДА &ПросрочкаРаботыВнешнихПользователей = 0
	            	  |						ТОГДА ЛОЖЬ
	            	  |					КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата) = &ПустаяДата
	            	  |						ТОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(&ДатаВключенияПросрочкиВнешнихПользователей, ДЕНЬ, &ПросрочкаРаботыВнешнихПользователей)
	            	  |					КОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата), ДЕНЬ, &ПросрочкаРаботыВнешнихПользователей)
	            	  |						ТОГДА ИСТИНА
	            	  |					ИНАЧЕ ЛОЖЬ
	            	  |				КОНЕЦ
	            	  |		КОНЕЦ";
	Запрос.УстановитьПараметр("ПустаяДата",                                 '00010101');
	Запрос.УстановитьПараметр("НачалоДняТекущейДатыСеанса",                 НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ДатаВключенияПросрочкиПользователей",        Настройки.Пользователи.ПросрочкаРаботыВПрограммеДатаВключения);
	Запрос.УстановитьПараметр("ПросрочкаРаботыПользователей",               Настройки.Пользователи.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода);
	Запрос.УстановитьПараметр("ДатаВключенияПросрочкиВнешнихПользователей", Настройки.ВнешниеПользователи.ПросрочкаРаботыВПрограммеДатаВключения);
	Запрос.УстановитьПараметр("ПросрочкаРаботыВнешнихПользователей",        Настройки.ВнешниеПользователи.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода);

	Выборка = Запрос.Выполнить().Выбрать();

	ИнформацияОбОшибке = Неопределено;
	Пока Выборка.Следующий() Цикл
		Пользователь = Выборка.Пользователь;
		Если НЕ Выборка.СрокДействияИстек И ЭтоПолноправныйПользователь(Пользователь,, Ложь) Тогда
			Продолжить;
		КонецЕсли;
		Блокировка			= Новый БлокировкаДанных;
		ЭлементБлокировки	= Блокировка.Добавить("РегистрСведений.СведенияОПользователях");
		ЭлементБлокировки.УстановитьЗначение("Пользователь", Пользователь);
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			ИдентификаторПользователяИБ = БазоваяПодсистемаСервер.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ");
			ПользовательИБ = Неопределено;
			Если ТипЗнч(ИдентификаторПользователяИБ) = Тип("УникальныйИдентификатор") Тогда
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
			КонецЕсли;
			Если ПользовательИБ <> Неопределено
			   И (    ПользовательИБ.АутентификацияСтандартная
			      Или ПользовательИБ.АутентификацияОС
			      Или ПользовательИБ.АутентификацияOpenID) Тогда

				ОбновляемыеСвойства = Новый Структура;
				ОбновляемыеСвойства.Вставить("АутентификацияСтандартная", Ложь);
				ОбновляемыеСвойства.Вставить("АутентификацияОС",          Ложь);
				ОбновляемыеСвойства.Вставить("АутентификацияOpenID",      Ложь);

				УстановитьСвойстваПользователяИБ(ПользовательИБ.УникальныйИдентификатор, ОбновляемыеСвойства, Ложь, ТипЗнч(Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи"));
			КонецЕсли;
			НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				СведенияОПользователе				= НаборЗаписей.Добавить();
				СведенияОПользователе.Пользователь	= Пользователь;
			Иначе
				СведенияОПользователе = НаборЗаписей[0];
			КонецЕсли;
			СведенияОПользователе.ДатаАвтоматическогоЗапрещенияВхода = НачалоДня(ТекущаяДатаСеанса());
			НаборЗаписей.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОтменитьТранзакцию();
			Если Выборка.СрокДействияИстек Тогда
				ШаблонКомментария = "Не удалось снять пользователю ""%1"" признак
					           |""Вход в программу разрешен"" в связи с окончанием срока действия по причине:
					           |%2";
			Иначе
				ШаблонКомментария = "Не удалось снять пользователю ""%1"" признак
					           |""Вход в программу разрешен"" в связи с отсутствием работы
					           |в программе более установленного срока по причине:
					           |%2";
			КонецЕсли;
			ЗаписьЖурналаРегистрации("Пользователи.Ошибка автоматического запрещения входа в программу'",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.НайтиПоТипу(ТипЗнч(Пользователь)),
				Пользователь,
				СтрШаблон(ШаблонКомментария, Пользователь, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
		КонецПопытки;
	КонецЦикла;

	Если ИнформацияОбОшибке <> Неопределено
	 Или ЗначениеЗаполнено(Настройки.Пользователи.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
	 Или ЗначениеЗаполнено(Настройки.ВнешниеПользователи.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода) Тогда
		// Для проверки просрочки работы в программе, задание выключить нельзя.
		Возврат;
	КонецЕсли;

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ ПЕРВЫЕ 1
	            	  |	ИСТИНА КАК ЗначениеИстина
	            	  |ИЗ
	            	  |	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	            	  |ГДЕ
	            	  |	СведенияОПользователях.СрокДействия <> &ПустаяДата
	            	  |	И СведенияОПользователях.ДатаАвтоматическогоЗапрещенияВхода = &ПустаяДата";
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');

	Если Запрос.Выполнить().Пустой() Тогда
		БазоваяПодсистемаСервер.УстановитьИспользованиеПредопределенногоРегламентногоЗадания(Метаданные.РегламентныеЗадания.КонтрольАктивностиПользователей, Ложь);
	КонецЕсли;
КонецПроцедуры

// Записывает новые значения свойств указанного пользователя ИБ, либо создает нового пользователя ИБ.
// Если пользователь не существует, а также при попытке создания существующего пользователя будет вызвано исключение.
//
// Параметры:
//  ИмяИлиИдентификатор - Строка, УникальныйИдентификатор - имя или уникальный идентификатор пользователя ИБ, свойства
//                                                          которого нужно установить. Либо имя нового пользователя ИБ.
//  ОбновляемыеСвойства - Структура - см. Пользователи.НовоеОписаниеПользователяИБ.
//    Если какое-либо свойство в структуре не задано, то используется прочитанное или начальное значение.
//    Следующие свойства структуры имеют особенности:
//      * ПользовательИБ          - ПользовательИнформационнойБазы - возвращаемый параметр: пользователь ИБ, свойства
//                                  которого были записаны.
//      * УникальныйИдентификатор - УникальныйИдентификатор - возвращаемый параметр: уникальный идентификатор
//                                  записанного пользователя ИБ.
//      * СтарыйПароль            - Неопределено, Строка - если заданный пароль
//                                  не совпадет с существующим, то будет вызвано исключение.
//
//  СоздатьНового - Булево - указать Истина, чтобы создать нового пользователя ИБ с именем ИмяИлиИдентификатор.
//
//  ЭтоВнешнийПользователь - Булево - указать Истина, если пользователь ИБ соответствует внешнему пользователю
//                                    (элементу справочника ВнешниеПользователи).
//
Процедура УстановитьСвойстваПользователяИБ(Знач ИмяИлиИдентификатор, Знач ОбновляемыеСвойства, Знач СоздатьНового = Ложь, Знач ЭтоВнешнийПользователь = Ложь) Экспорт
	ИмяПроцедуры = "ПользователиСервер.УстановитьСвойстваПользователяИБ";
	БазоваяПодсистемаКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ИмяИлиИдентификатор", ИмяИлиИдентификатор, Новый ОписаниеТипов("Строка, УникальныйИдентификатор"));
	БазоваяПодсистемаКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ОбновляемыеСвойства", ОбновляемыеСвойства, Тип("Структура"));
	БазоваяПодсистемаКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "СоздатьНового", СоздатьНового, Тип("Булево"));
	БазоваяПодсистемаКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ЭтоВнешнийПользователь", ЭтоВнешнийПользователь, Тип("Булево"));

	СтарыеСвойства			= СвойстваПользователяИБ(ИмяИлиИдентификатор);
	ПользовательСуществует	= СтарыеСвойства <> Неопределено;
	Если ПользовательСуществует Тогда
		ПользовательИБ = СтарыеСвойства.ПользовательИБ;
	Иначе
		ПользовательИБ = Неопределено;
		СтарыеСвойства = НовоеОписаниеПользователяИБ();
	КонецЕсли;

	Если Не ПользовательСуществует Тогда
		Если Не СоздатьНового Тогда
			ВызватьИсключение СтрШаблон("Пользователь информационной базы ""%1"" не существует.", ИмяИлиИдентификатор);
		КонецЕсли;
		ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
	Иначе
		Если СоздатьНового Тогда
			ВызватьИсключение ОписаниеОшибкиПриЗаписиПользователяИБ(
				"Невозможно создать пользователя информационной базы ""%1"", так как он уже существует.",
				СтарыеСвойства.Имя,
				СтарыеСвойства.УникальныйИдентификатор);
		КонецЕсли;
		Если ОбновляемыеСвойства.Свойство("СтарыйПароль") И ТипЗнч(ОбновляемыеСвойства.СтарыйПароль) = Тип("Строка") Тогда
			СтарыйПарольСовпадает = Ложь;

			СохраняемоеЗначениеСтрокиПароля(ОбновляемыеСвойства.СтарыйПароль, СтарыеСвойства.УникальныйИдентификатор, СтарыйПарольСовпадает);

			Если Не СтарыйПарольСовпадает Тогда
				ВызватьИсключение ОписаниеОшибкиПриЗаписиПользователяИБ(
					"При записи пользователя информационной базы ""%1"" старый пароль указан не верно.",
					СтарыеСвойства.Имя,
					СтарыеСвойства.УникальныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Подготовка новых значений свойств.
	НовыеСвойства = БазоваяПодсистемаКлиентСервер.СкопироватьСтруктуру(СтарыеСвойства);
	Для каждого КлючИЗначение Из НовыеСвойства Цикл
		Если ОбновляемыеСвойства.Свойство(КлючИЗначение.Ключ)
		   И ОбновляемыеСвойства[КлючИЗначение.Ключ] <> Неопределено Тогда
			НовыеСвойства[КлючИЗначение.Ключ] = ОбновляемыеСвойства[КлючИЗначение.Ключ];
		КонецЕсли;
	КонецЦикла;

	СкопироватьСвойстваПользователяИБ(ПользовательИБ, НовыеСвойства);

	// Попытка записи нового или изменение существующего пользователя ИБ.
	Попытка
		ЗаписатьПользователяИнформационнойБазы(ПользовательИБ, ЭтоВнешнийПользователь);
	Исключение
		ВызватьИсключение ОписаниеОшибкиПриЗаписиПользователяИБ(
			"Не удалось записать свойства пользователя информационной базы ""%1"" по причине:
			           |%2.",
			ПользовательИБ.Имя,
			?(ПользовательСуществует, СтарыеСвойства.УникальныйИдентификатор, Неопределено),
			ИнформацияОбОшибке());
	КонецПопытки;

	Если ЗначениеЗаполнено(СтарыеСвойства.Имя) И СтарыеСвойства.Имя <> НовыеСвойства.Имя Тогда
		// Перемещение настроек пользователя
		СкопироватьНастройкиПользователя(СтарыеСвойства.Имя, НовыеСвойства.Имя, Истина);
	КонецЕсли;

	Если СоздатьНового Тогда
		УстановитьНачальныеНастройки(ПользовательИБ.Имя, ЭтоВнешнийПользователь);
	КонецЕсли;

	ОбновляемыеСвойства.Вставить("УникальныйИдентификатор", ПользовательИБ.УникальныйИдентификатор);
	ОбновляемыеСвойства.Вставить("ПользовательИБ", ПользовательИБ);
КонецПроцедуры

// Возвращает сохраняемое значение пароля для указанного пароля.
//
// Параметры:
//  Пароль                      - Строка - пароль для которого нужно получить сохраняемое значение.
//
//  ИдентификаторПользователяИБ - УникальныйИдентификатор - пользователя ИБ для которого нужно
//                                сравнить сохраняемое значение с полученным и результат поместить
//                                в следующий параметр Совпадает.
//
//  Совпадает                   - Булево (возвращаемое значение) - см. комментарий к параметру.
//                                ИдентификаторПользователяИБ.
// Возвращаемое значение:
//  Строка - сохраняемое значение пароля.
//
Функция СохраняемоеЗначениеСтрокиПароля(Знач Пароль, Знач ИдентификаторПользователяИБ = Неопределено, Совпадает = Ложь) Экспорт
	ТекущаяПроверкаСложности = ПолучитьПроверкуСложностиПаролейПользователей();
	ТекущаяМинимальнаяДлина  = ПолучитьМинимальнуюДлинуПаролейПользователей();

	НачатьТранзакцию();
	Попытка
		Если ТекущаяМинимальнаяДлина > 0 Тогда
			УстановитьМинимальнуюДлинуПаролейПользователей(0);
		КонецЕсли;
		Если ТекущаяПроверкаСложности Тогда
			УстановитьПроверкуСложностиПаролейПользователей(Ложь);
		КонецЕсли;

		Если Не ЗначениеЗаполнено(ИмяПользователя()) И ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 Тогда
				ВременныйАдминистраторИБ							= ПользователиИнформационнойБазы.СоздатьПользователя();
				ВременныйАдминистраторИБ.АутентификацияСтандартная	= Истина;
				ВременныйАдминистраторИБ.Роли.Добавить(Метаданные.Роли.Администрирование);
				ВременныйАдминистраторИБ.Имя						= "Временный первый администратор" + " (" + Строка(Новый УникальныйИдентификатор) + ")";
				ВременныйАдминистраторИБ.Записать();
			Иначе
				ВременныйАдминистраторИБ = Неопределено;
			КонецЕсли;

			ВременныйПользовательИБ								= ПользователиИнформационнойБазы.СоздатьПользователя();
			ВременныйПользовательИБ.АутентификацияСтандартная	= Ложь;
			ВременныйПользовательИБ.Пароль						= Пароль;
			ВременныйПользовательИБ.Имя							= "Временный пользователь" + " (" + Строка(Новый УникальныйИдентификатор) + ")";
			ВременныйПользовательИБ.Записать();

			ВременныйПользовательИБ		= ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ВременныйПользовательИБ.УникальныйИдентификатор);

			СохраняемоеЗначениеПароля	= ВременныйПользовательИБ.СохраняемоеЗначениеПароля;

			ВременныйПользовательИБ.Удалить();

			Если ВременныйАдминистраторИБ <> Неопределено Тогда
				ВременныйАдминистраторИБ.Удалить();
			КонецЕсли;

			Если ТекущаяМинимальнаяДлина > 0 Тогда
				УстановитьМинимальнуюДлинуПаролейПользователей(ТекущаяМинимальнаяДлина);
			КонецЕсли;
			Если ТекущаяПроверкаСложности Тогда
				УстановитьПроверкуСложностиПаролейПользователей(Истина);
			КонецЕсли;

			ЗафиксироватьТранзакцию();
	Исключение
		Если ТекущаяМинимальнаяДлина <> ПолучитьМинимальнуюДлинуПаролейПользователей() Тогда
			УстановитьМинимальнуюДлинуПаролейПользователей(ТекущаяМинимальнаяДлина);
		КонецЕсли;
		Если ТекущаяПроверкаСложности <> ПолучитьПроверкуСложностиПаролейПользователей() Тогда
			УстановитьПроверкуСложностиПаролейПользователей(ТекущаяПроверкаСложности);
		КонецЕсли;

		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;

	Если ТипЗнч(ИдентификаторПользователяИБ) = Тип("УникальныйИдентификатор") Тогда

		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);

		Если ТипЗнч(ПользовательИБ) = Тип("ПользовательИнформационнойБазы") Тогда
			Совпадает = (СохраняемоеЗначениеПароля = ПользовательИБ.СохраняемоеЗначениеПароля);
		КонецЕсли;
	КонецЕсли;

	Возврат СохраняемоеЗначениеПароля;
КонецФункции

// Вызывает событие ПередЗаписьюПользователяИБ, проверяет права с учетом
// режима разделения данных и записывает указанного пользователя ИБ.
//
// Параметры:
//  ПользовательИБ  - ПользовательИнформационнойБазы - объект, который требуется записать.
//  ЭтоВнешнийПользователь - Булево - указать Истина, если пользователь ИБ соответствует внешнему пользователю
//                                    (элементу справочника ВнешниеПользователи).
//
Процедура ЗаписатьПользователяИнформационнойБазы(ПользовательИБ, ЭтоВнешнийПользователь = Ложь) Экспорт
	ПроверитьПраваПользователя(ПользовательИБ, "ПередЗаписью", ЭтоВнешнийПользователь);
	ОбновлениеИБСервер.УстановитьФлагОтображенияОписанийДляНовогоПользователя(ПользовательИБ.Имя);
	ПользовательИБ.Записать();
КонецПроцедуры

// Копирует настройки от пользователя источника пользователю приемнику. При значении
// параметра Переносить = Истина, настройки у пользователя источника удаляются.
//
// Параметры:
// ИмяПользователяИсточник - Строка - Имя пользователя ИБ от которого будет производиться копирование настроек.
//
// ИмяПользователяПриемник - Строка - Имя пользователя ИБ которому будут записаны настройки.
//
// Переносить              - Булево - Если Истина - настройки переносятся от одного пользователя другому,
//                           если Ложь - копируются новому.
//
Процедура СкопироватьНастройкиПользователя(ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить = Ложь) Экспорт
	// Перенос пользовательских настроек отчетов.
	СкопироватьНастройки(ХранилищеПользовательскихНастроекОтчетов, ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить);
	// Перенос настроек внешнего вида.
	СкопироватьНастройки(ХранилищеСистемныхНастроек,ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить);
	// Перенос произвольных настроек пользователей.
	СкопироватьНастройки(ХранилищеОбщихНастроек, ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить);
	// Перенос настроек данных форм.
	СкопироватьНастройки(ХранилищеНастроекДанныхФорм, ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить);
	// Перенос настроек быстрого доступа дополнительных отчетов и обработок.
	Если Не Переносить Тогда
		СкопироватьПрочиеПользовательскиеНастройки(ИмяПользователяИсточник, ИмяПользователяПриемник);
	КонецЕсли;
КонецПроцедуры

// Устанавливает начальные настройки для пользователя информационной базы.
//
// Параметры:
//  ИмяПользователя - Строка - имя пользователя информационной базы, для которого сохраняются настройки.
//  ЭтоВнешнийПользователь - Булево - указать Истина, если пользователь ИБ соответствует внешнему пользователю
//                                    (элементу справочника ВнешниеПользователи).
//
Процедура УстановитьНачальныеНастройки(Знач ИмяПользователя, ЭтоВнешнийПользователь = Ложь) Экспорт
	СистемнаяИнформация = Новый СистемнаяИнформация;

	ТекущийРежим = Метаданные.РежимСовместимостиИнтерфейса;
	Такси = (ТекущийРежим = Метаданные.СвойстваОбъектов.РежимСовместимостиИнтерфейса.Такси ИЛИ ТекущийРежим = Метаданные.СвойстваОбъектов.РежимСовместимостиИнтерфейса.ТаксиРазрешитьВерсия8_2);

	НастройкиКлиента									= Новый НастройкиКлиентскогоПриложения;
	НастройкиКлиента.ОтображатьПанелиНавигацииИДействий = Ложь;
	НастройкиКлиента.ОтображатьПанельРазделов			= Истина;
	НастройкиКлиента.РежимОткрытияФормПриложения 		= РежимОткрытияФормПриложения.Закладки;

	НастройкиТакси		= Неопределено;
	НастройкиИнтерфейса	= Новый НастройкиКомандногоИнтерфейса;

	Если Такси Тогда
		НастройкиКлиента.ВариантИнтерфейсаКлиентскогоПриложения	= ВариантИнтерфейсаКлиентскогоПриложения.Такси;

		НастройкиИнтерфейса.ОтображениеПанелиРазделов			= ОтображениеПанелиРазделов.КартинкаИТекст;

		НастройкиТакси		= Новый НастройкиИнтерфейсаКлиентскогоПриложения;
		НастройкиСостава	= Новый НастройкиСоставаИнтерфейсаКлиентскогоПриложения;
		ГруппаСлева			= Новый ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения;
		ГруппаСлева.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельИнструментов"));
		ГруппаСлева.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельРазделов"));
		НастройкиСостава.Лево.Добавить(ГруппаСлева);
		НастройкиТакси.УстановитьСостав(НастройкиСостава);
	Иначе
		НастройкиИнтерфейса.ОтображениеПанелиРазделов = ОтображениеПанелиРазделов.Текст;
	КонецЕсли;

	НачальныеНастройки = Новый Структура;
	НачальныеНастройки.Вставить("НастройкиКлиента",    НастройкиКлиента);
	НачальныеНастройки.Вставить("НастройкиИнтерфейса", НастройкиИнтерфейса);
	НачальныеНастройки.Вставить("НастройкиТакси",      НастройкиТакси);
	НачальныеНастройки.Вставить("ЭтоВнешнийПользователь", ЭтоВнешнийПользователь);

	Если НачальныеНастройки.НастройкиКлиента <> Неопределено Тогда
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиКлиентскогоПриложения", "", НачальныеНастройки.НастройкиКлиента, , ИмяПользователя);
	КонецЕсли;

	Если НачальныеНастройки.НастройкиИнтерфейса <> Неопределено Тогда
		ХранилищеСистемныхНастроек.Сохранить("Общее/ПанельРазделов/НастройкиКомандногоИнтерфейса", "", НачальныеНастройки.НастройкиИнтерфейса, , ИмяПользователя);
	КонецЕсли;

	Если НачальныеНастройки.НастройкиТакси <> Неопределено Тогда
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения", "", НачальныеНастройки.НастройкиТакси, , ИмяПользователя);
	КонецЕсли;
КонецПроцедуры

// Возвращает свойства пользователя информационной базы в виде структуры.
// Если пользователь с указанным идентификатором или именем не существует, то возвращается Неопределено.
//
// Параметры:
//  ИмяИлиИдентификатор  - Строка, УникальныйИдентификатор - имя или идентификатор пользователя ИБ.
//
// Возвращаемое значение:
//  Структура, Неопределено - свойства пользователя, см. Пользователи.НовоеОписаниеПользователяИБ.
//                            Неопределено, если пользователь с указанным идентификатором или именем не существует.
//
Функция СвойстваПользователяИБ(Знач ИмяИлиИдентификатор) Экспорт
	БазоваяПодсистемаКлиентСервер.ПроверитьПараметр("Пользователи.СвойстваПользователяИБ", "ИмяИлиИдентификатор", ИмяИлиИдентификатор, Новый ОписаниеТипов("Строка, УникальныйИдентификатор"));

	Свойства		= НовоеОписаниеПользователяИБ();
	Свойства.Роли	= Новый Массив;

	Если ТипЗнч(ИмяИлиИдентификатор) = Тип("УникальныйИдентификатор") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИмяИлиИдентификатор);
	ИначеЕсли ТипЗнч(ИмяИлиИдентификатор) = Тип("Строка") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяИлиИдентификатор);
	Иначе
		ПользовательИБ = Неопределено;
	КонецЕсли;

	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	СкопироватьСвойстваПользователяИБ(Свойства, ПользовательИБ);
	Свойства.Вставить("ПользовательИБ", ПользовательИБ);

	Возврат Свойства;
КонецФункции

// Возвращает пустую структуру описания пользователя ИБ.
// Назначение свойств структуры соответствует свойствам объекта ПользовательИнформационнойБазы.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//   * УникальныйИдентификатор   - УникальныйИдентификатор - уникальный идентификатор пользователя информационной базы.
//   * Имя                       - Строка - имя пользователя информационной базы. Например, "Иванов".
//   * ПолноеИмя                 - Строка - полное имя пользователя информационной базы.
//                                          Например, "Иванов Иван Иванович (менеджер по продажам)"
//   * АутентификацияOpenID      - Булево - разрешена ли пользователю аутентификация по протоколу OpenID.
//
//   * АутентификацияСтандартная - Булево - разрешена ли стандартная аутентификация (по пользователю и паролю).
//   * ПоказыватьВСпискеВыбора   - Булево - показывать ли полное имя пользователя в списке для выбора при запуске.
//   * Пароль                    - Строка, Неопределено - пароль, используемый при стандартной аутентификации.
//   * СохраняемоеЗначениеПароля - Строка, Неопределено - хранимые значения пароля (хеш).
//   * ПарольУстановлен          - Булево - установлен ли пароль у пользователя.
//   * ЗапрещеноИзменятьПароль   - Булево - определяет возможность пользователя изменять свой пароль.
//
//   * АутентификацияОС          - Булево - разрешена ли аутентификация средствами операционной системы.
//   * ПользовательОС            - Строка - имя соответствующей учетной записи пользователя операционной системы
//                                          (не учитывается в учебной версии платформы).
//
//   * ОсновнойИнтерфейс         - Строка, Неопределено - имя основного интерфейса пользователя информационной базы
//                                         (из коллекции Метаданные.Интерфейсы).
//   * РежимЗапуска              - Строка, Неопределено - "Авто", "ОбычноеПриложение" или "УправляемоеПриложение".
//   * Язык                      - Строка, Неопределено - имя языка из коллекции Метаданные.Языки.
//   * Роли                      - Неопределено - роли не указаны.
//                               - Массив - коллекция имен ролей пользователя информационной базы.
//
Функция НовоеОписаниеПользователяИБ() Экспорт
	// Подготовка структур возвращаемых данных.
	Свойства = Новый Структура;

	Свойства.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));

	Свойства.Вставить("Имя",                       "");
	Свойства.Вставить("ПолноеИмя",                 "");
	Свойства.Вставить("АутентификацияOpenID",      Ложь);
	Свойства.Вставить("АутентификацияСтандартная", Ложь);
	Свойства.Вставить("ПоказыватьВСпискеВыбора",   Ложь);
	Свойства.Вставить("СтарыйПароль",              Неопределено);
	Свойства.Вставить("Пароль",                    Неопределено);
	Свойства.Вставить("СохраняемоеЗначениеПароля", Неопределено);
	Свойства.Вставить("ПарольУстановлен",          Ложь);
	Свойства.Вставить("ЗапрещеноИзменятьПароль",   Ложь);
	Свойства.Вставить("АутентификацияОС",          Ложь);
	Свойства.Вставить("ПользовательОС",            "");
	Свойства.Вставить("ОсновнойИнтерфейс",			?(Метаданные.ОсновнойИнтерфейс = Неопределено, "", Метаданные.ОсновнойИнтерфейс.Имя));
	Свойства.Вставить("РежимЗапуска",              "Авто");
	Свойства.Вставить("Язык",						?(Метаданные.ОсновнойЯзык = Неопределено, "", Метаданные.ОсновнойЯзык.Имя));

	Свойства.Вставить("Роли", Неопределено);

	Возврат Свойства;
КонецФункции

// Формирует краткое описание ошибки, которое увидит пользователь,
// а также может записать подробное описание ошибки в журнал регистрации.
//
// Параметры:
//  ШаблонОшибки       - Шаблон, содержащий параметр "%1" для представления пользователя ИБ и
//                       параметр %2 для описания ошибки.
//
//  ИмяДляВхода        - имя пользователя информационной базы, используемое для входа.
//
//  ИдентификаторПользователяИБ - Неопределено, УникальныйИдентификатор.
//
//  ИнформацияОбОшибке - ИнформацияОбОшибке.
//
//  ЗаписатьВЖурнал    - Булево. Если Истина, то выполняется запись подробного описания ошибки
//                       в журнал регистрации.
//
// Возвращаемое значение:
//  Строка - описание ошибки для просмотра пользователю.
//
Функция ОписаниеОшибкиПриЗаписиПользователяИБ(ШаблонОшибки, ИмяДляВхода, ИдентификаторПользователяИБ, ИнформацияОбОшибке = Неопределено, ЗаписатьВЖурнал = Истина)
	Если ЗаписатьВЖурнал Тогда
		ЗаписьЖурналаРегистрации("Пользователи.Ошибка записи пользователя ИБ",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			СтрШаблон(ШаблонОшибки,
				"""" + ИмяДляВхода + """ (" + ?(ЗначениеЗаполнено(ИдентификаторПользователяИБ),
					"Новый", Строка(ИдентификаторПользователяИБ)) + ")",
				?(ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), Строка(ИнформацияОбОшибке))));
	КонецЕсли;

	Возврат СтрШаблон(ШаблонОшибки, """" + ИмяДляВхода + """",
		?(ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке), Строка(ИнформацияОбОшибке)));
КонецФункции

// Копирует значения свойств пользователя ИБ с преобразованием
// в/из строковых идентификаторов для основного интерфейса,
// языка, режима запуска и ролей.
//
//  Несуществующие свойства в источнике или приемнике не копируются.
//
//  Свойства Пароль и СохраняемоеЗначениеПароля не копируются, если
// значения в Источнике равно Неопределено.
//
//  Свойства АутентификацияОС, АутентификацияСтандартная,
// АутентификацияOpenID и ПользовательОС не переустанавливается,
// если совпадают, когда Приемник типа ПользовательИнформационнойБазы.
//
//  Свойства УникальныйИдентификатор, ПарольУстановлен, СтарыйПароль
// не копируются, если Приемник типа ПользовательИнформационнойБазы.
//
//  Преобразование выполняется только для типа Источника или Приемника.
// ПользовательИнформационнойБазы.
//
// Параметры:
//  Приемник     - Структура, ПользовательИнформационнойБазы, ДанныеФормыКоллекция - подмножество
//                 свойств из НовоеОписаниеПользователяИБ().
//
//  Источник     - Структура, ПользовательИнформационнойБазы, ДанныеФормыКоллекция - как и приемник,
//                 но типы обратные, т.е. когда в Приемнике тип Структура, тогда в источнике НЕ Структура.
//
//  КопируемыеСвойства  - Строка - список свойств через запятую, которые нужно скопировать (без префикса).
//  ИсключаемыеСвойства - Строка - список свойств через запятую, которые не нужно копировать (без префикса).
//  ПрефиксСвойств      - Строка - начальное имя для Источника или Приемника типа НЕ Структура.
//
Процедура СкопироватьСвойстваПользователяИБ(Приемник, Источник, КопируемыеСвойства = "", ИсключаемыеСвойства = "", ПрефиксСвойств = "") Экспорт
	ВсеСвойства = НовоеОписаниеПользователяИБ();

	Если ЗначениеЗаполнено(КопируемыеСвойства) Тогда
		СтруктураКопируемыхСвойств = Новый Структура(КопируемыеСвойства);
	Иначе
		СтруктураКопируемыхСвойств = ВсеСвойства;
	КонецЕсли;

	Если ЗначениеЗаполнено(ИсключаемыеСвойства) Тогда
		СтруктураИсключаемыхСвойств = Новый Структура(ИсключаемыеСвойства);
	Иначе
		СтруктураИсключаемыхСвойств = Новый Структура;
	КонецЕсли;

	Если БазоваяПодсистемаСервер.ЭтоУчебнаяПлатформа() Тогда
		СтруктураИсключаемыхСвойств.Вставить("АутентификацияОС");
		СтруктураИсключаемыхСвойств.Вставить("ПользовательОС");
	КонецЕсли;

	ПарольУстановлен = Ложь;

	Для каждого КлючИЗначение Из ВсеСвойства Цикл
		Свойство = КлючИЗначение.Ключ;

		Если НЕ СтруктураКопируемыхСвойств.Свойство(Свойство)
		 ИЛИ СтруктураИсключаемыхСвойств.Свойство(Свойство) Тогда

			Продолжить;
		КонецЕсли;

		Если ТипЗнч(Источник) = Тип("ПользовательИнформационнойБазы") Тогда
			Если Свойство = "Пароль"
			 ИЛИ Свойство = "СтарыйПароль" Тогда

				ЗначениеСвойства	= Неопределено;

			ИначеЕсли Свойство = "ОсновнойИнтерфейс" Тогда
				ЗначениеСвойства	= ?(Источник.ОсновнойИнтерфейс = Неопределено,
				                     "",
				                     Источник.ОсновнойИнтерфейс.Имя);
			ИначеЕсли Свойство = "РежимЗапуска" Тогда
				ПолноеИмяЗначения	= ПолучитьПолноеИмяПредопределенногоЗначения(Источник.РежимЗапуска);
				ЗначениеСвойства	= Сред(ПолноеИмяЗначения, СтрНайти(ПолноеИмяЗначения, ".") + 1);
			ИначеЕсли Свойство = "Язык" Тогда
				ЗначениеСвойства	= ?(Источник.Язык = Неопределено,
				                     "",
				                     Источник.Язык.Имя);
			ИначеЕсли Свойство = "Роли" Тогда
				ВременнаяСтруктура	= Новый Структура("Роли", Новый ТаблицаЗначений);
				ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, Приемник);
				Если ТипЗнч(ВременнаяСтруктура.Роли) = Тип("ТаблицаЗначений") Тогда
					Продолжить;
				ИначеЕсли ВременнаяСтруктура.Роли = Неопределено Тогда
					Приемник.Роли = Новый Массив;
				Иначе
					Приемник.Роли.Очистить();
				КонецЕсли;

				Для каждого Роль Из Источник.Роли Цикл
					Приемник.Роли.Добавить(Роль.Имя);
				КонецЦикла;

				Продолжить;
			Иначе
				ЗначениеСвойства = Источник[Свойство];
			КонецЕсли;

			ПолноеИмяСвойства	= ПрефиксСвойств + Свойство;
			ВременнаяСтруктура	= Новый Структура(ПолноеИмяСвойства, ЗначениеСвойства);
			ЗаполнитьЗначенияСвойств(Приемник, ВременнаяСтруктура);
		Иначе
			Если ТипЗнч(Источник) = Тип("Структура") Тогда
				Если Источник.Свойство(Свойство) Тогда
					ЗначениеСвойства = Источник[Свойство];
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				ПолноеИмяСвойства = ПрефиксСвойств + Свойство;
				ВременнаяСтруктура = Новый Структура(ПолноеИмяСвойства, Новый ТаблицаЗначений);
				ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, Источник);
				ЗначениеСвойства = ВременнаяСтруктура[ПолноеИмяСвойства];
				Если ТипЗнч(ЗначениеСвойства) = Тип("ТаблицаЗначений") Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Если ТипЗнч(Приемник) = Тип("ПользовательИнформационнойБазы") Тогда
				Если Свойство = "УникальныйИдентификатор"
				 ИЛИ Свойство = "СтарыйПароль"
				 ИЛИ Свойство = "ПарольУстановлен" Тогда

					Продолжить;
				ИначеЕсли Свойство = "АутентификацияOpenID"
				      ИЛИ Свойство = "АутентификацияСтандартная"
				      ИЛИ Свойство = "АутентификацияОС"
				      ИЛИ Свойство = "ПользовательОС" Тогда

					Если Приемник[Свойство] <> ЗначениеСвойства Тогда
						Приемник[Свойство] = ЗначениеСвойства;
					КонецЕсли;
				ИначеЕсли Свойство = "Пароль" Тогда
					Если ЗначениеСвойства <> Неопределено Тогда
						Приемник.Пароль = ЗначениеСвойства;
						ПарольУстановлен = Истина;
					КонецЕсли;
				ИначеЕсли Свойство = "СохраняемоеЗначениеПароля" Тогда
					Если ЗначениеСвойства <> Неопределено
					   И НЕ ПарольУстановлен Тогда
						Приемник.СохраняемоеЗначениеПароля = ЗначениеСвойства;
					КонецЕсли;
				ИначеЕсли Свойство = "ОсновнойИнтерфейс" Тогда
					Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
						Приемник.ОсновнойИнтерфейс = Метаданные.Интерфейсы.Найти(ЗначениеСвойства);
					Иначе
						Приемник.ОсновнойИнтерфейс = Неопределено;
					КонецЕсли;
				ИначеЕсли Свойство = "РежимЗапуска" Тогда
					Если ЗначениеСвойства = "Авто"
					 ИЛИ ЗначениеСвойства = "ОбычноеПриложение"
					 ИЛИ ЗначениеСвойства = "УправляемоеПриложение" Тогда

						Приемник.РежимЗапуска = РежимЗапускаКлиентскогоПриложения[ЗначениеСвойства];
					Иначе
						Приемник.РежимЗапуска = РежимЗапускаКлиентскогоПриложения.Авто;
					КонецЕсли;
				ИначеЕсли Свойство = "Язык" Тогда
					Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
						Приемник.Язык = Метаданные.Языки.Найти(ЗначениеСвойства);
					Иначе
						Приемник.Язык = Неопределено;
					КонецЕсли;
				ИначеЕсли Свойство = "Роли" Тогда
					Приемник.Роли.Очистить();
					Если ЗначениеСвойства <> Неопределено Тогда
						Для каждого ИмяРоли Из ЗначениеСвойства Цикл
							Роль = Метаданные.Роли.Найти(ИмяРоли);
							Если Роль <> Неопределено Тогда
								Приемник.Роли.Добавить(Роль);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				Иначе
					Если Свойство = "Имя"
					   И Приемник[Свойство] <> ЗначениеСвойства Тогда

						Если СтрДлина(ЗначениеСвойства) > 64 Тогда
							ВызватьИсключение СтрШаблон("Ошибка записи пользователя информационной базы
								           |Имя (для входа): ""%1""
								           |превышает длину 64 символа.",
								ЗначениеСвойства);
						ИначеЕсли СтрНайти(ЗначениеСвойства, ":") > 0 Тогда
							ВызватьИсключение СтрШаблон("Ошибка записи пользователя информационной базы
								           |Имя (для входа): ""%1""
								           |содержит запрещенный символ "":"".",
								ЗначениеСвойства);
						КонецЕсли;
					КонецЕсли;
					Приемник[Свойство] = Источник[Свойство];
				КонецЕсли;
			Иначе
				Если Свойство = "Роли" Тогда
					ВременнаяСтруктура = Новый Структура("Роли", Новый ТаблицаЗначений);
					ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, Приемник);
					Если ТипЗнч(ВременнаяСтруктура.Роли) = Тип("ТаблицаЗначений") Тогда
						Продолжить;
					ИначеЕсли ВременнаяСтруктура.Роли = Неопределено Тогда
						Приемник.Роли = Новый Массив;
					Иначе
						Приемник.Роли.Очистить();
					КонецЕсли;

					Если Источник.Роли <> Неопределено Тогда
						Для каждого Роль Из Источник.Роли Цикл
							Приемник.Роли.Добавить(Роль.Имя);
						КонецЦикла;
					КонецЕсли;

					Продолжить;
				ИначеЕсли ТипЗнч(Источник) = Тип("Структура") Тогда
					ПолноеИмяСвойства = ПрефиксСвойств + Свойство;
				Иначе
					ПолноеИмяСвойства = Свойство;
				КонецЕсли;
				ВременнаяСтруктура = Новый Структура(ПолноеИмяСвойства, ЗначениеСвойства);
				ЗаполнитьЗначенияСвойств(Приемник, ВременнаяСтруктура);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СкопироватьНастройки(МенеджерНастроек, ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить)
	ТаблицаНастроек = СписокНастроек(ИмяПользователяИсточник, МенеджерНастроек);

	Для Каждого Настройка Из ТаблицаНастроек Цикл
		КлючОбъекта			= Настройка.КлючОбъекта;
		КлючНастроек		= Настройка.КлючНастроек;
		Значение			= МенеджерНастроек.Загрузить(КлючОбъекта, КлючНастроек, , ИмяПользователяИсточник);
		ОписаниеНастроек	= МенеджерНастроек.ПолучитьОписание(КлючОбъекта, КлючНастроек, ИмяПользователяИсточник);
		МенеджерНастроек.Сохранить(КлючОбъекта, КлючНастроек, Значение, ОписаниеНастроек, ИмяПользователяПриемник);
		Если Переносить Тогда
			МенеджерНастроек.Удалить(КлючОбъекта, КлючНастроек, ИмяПользователяИсточник);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция СписокНастроек(ИмяПользователяИБ, МенеджерНастроек)
	ТаблицаНастроек = Новый ТаблицаЗначений;
	ТаблицаНастроек.Колонки.Добавить("КлючОбъекта");
	ТаблицаНастроек.Колонки.Добавить("КлючНастроек");

	Отбор = Новый Структура;
	Отбор.Вставить("Пользователь", ИмяПользователяИБ);

	ВыборкаНастроек	= МенеджерНастроек.Выбрать(Отбор);
	Пропустить		= Ложь;
	Пока СледующаяНастройка(ВыборкаНастроек, Пропустить) Цикл
		Если Пропустить Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока					= ТаблицаНастроек.Добавить();
		НоваяСтрока.КлючОбъекта		= ВыборкаНастроек.КлючОбъекта;
		НоваяСтрока.КлючНастроек	= ВыборкаНастроек.КлючНастроек;
	КонецЦикла;

	Возврат ТаблицаНастроек;
КонецФункции

Функция СледующаяНастройка(ВыборкаНастроек, Пропустить)
	Попытка
		Пропустить = Ложь;

		Возврат ВыборкаНастроек.Следующий();
	Исключение
		Пропустить = Истина;

		Возврат Истина;
	КонецПопытки;
КонецФункции

Процедура СкопироватьПрочиеПользовательскиеНастройки(ИмяПользователяИсточник, ИмяПользователяПриемник)
	ПользовательИсточникСсылка = НайтиПоИмени(ИмяПользователяИсточник);
	ПользовательПриемникСсылка = НайтиПоИмени(ИмяПользователяПриемник);
	СведенияОПользователеИсточнике = Новый Структура;
	СведенияОПользователеИсточнике.Вставить("ПользовательСсылка", ПользовательИсточникСсылка);
	СведенияОПользователеИсточнике.Вставить("ИмяПользователяИнформационнойБазы", ИмяПользователяИсточник);

	СведенияОПользователеПриемнике = Новый Структура;
	СведенияОПользователеПриемнике.Вставить("ПользовательСсылка", ПользовательПриемникСсылка);
	СведенияОПользователеПриемнике.Вставить("ИмяПользователяИнформационнойБазы", ИмяПользователяПриемник);

	// Получение прочих настроек.
	ПрочиеНастройкиПользователей	= Новый Структура;
	ИнтеграцияПодсистемСервер.ПриПолученииПрочихНастроек(СведенияОПользователеИсточнике, ПрочиеНастройкиПользователей);
	Ключи							= Новый СписокЗначений;
	МассивПрочихНастроек			= Новый Массив;
	Если ПрочиеНастройкиПользователей.Количество() <> 0 Тогда
		Для Каждого ПрочаяНастройка Из ПрочиеНастройкиПользователей Цикл
			ПрочиеНастройкиСтруктура = Новый Структура;
			Если ПрочаяНастройка.Ключ = "НастройкаБыстрогоДоступа" Тогда
				СписокНастроек = ПрочаяНастройка.Значение.СписокНастроек;
				Для Каждого Элемент Из СписокНастроек Цикл
					Ключи.Добавить(Элемент.Объект, Элемент.Идентификатор);
				КонецЦикла;
				ПрочиеНастройкиСтруктура.Вставить("ИдентификаторНастройки", "НастройкаБыстрогоДоступа");
				ПрочиеНастройкиСтруктура.Вставить("ЗначениеНастройки", Ключи);
			Иначе
				ПрочиеНастройкиСтруктура.Вставить("ИдентификаторНастройки", ПрочаяНастройка.Ключ);
				ПрочиеНастройкиСтруктура.Вставить("ЗначениеНастройки", ПрочаяНастройка.Значение.СписокНастроек);
			КонецЕсли;
			ИнтеграцияПодсистемСервер.ПриСохраненииПрочихНастроек(СведенияОПользователеПриемнике, ПрочиеНастройкиСтруктура);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Возвращает пользователя из справочника Пользователи, с которым сопоставлен
// пользователь ИБ с указанным именем.
//  Для поиска требуются административные права. Если административных прав нет,
// допустимо искать только пользователя для текущего пользователя ИБ.
//
// Параметры:
//  ИмяДляВхода - Строка - имя пользователя информационной базы, используемое для входа.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи           - если пользователь найден.
//  Справочники.Пользователи.ПустаяСсылка() - если пользователь ИБ найден.
//  Неопределено                            - если пользователь ИБ не найден.
//
Функция НайтиПоИмени(Знач ИмяДляВхода) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяДляВхода);

	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		НайтиНеоднозначныхПользователейИБ(Неопределено, ПользовательИБ.УникальныйИдентификатор);

		Возврат Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
	КонецЕсли;
КонецФункции

// Возвращает несовпадающие значения в колонке таблиц значений.
//
// Параметры:
//  ИмяКолонки - Строка - имя сравниваемой колонки.
//  Таблица1   - ТаблицаЗначений.
//  Таблица2   - ТаблицаЗначений.
//
// Возвращаемое значение:
//  Массив значений, которые есть только в колонке только одной из таблиц.
//
Функция РазличияЗначенийКолонки(ИмяКолонки, Таблица1, Таблица2) Экспорт
	Если ТипЗнч(Таблица1) <> Тип("ТаблицаЗначений")
	   И ТипЗнч(Таблица2) <> Тип("ТаблицаЗначений") Тогда

		Возврат Новый Массив;
	КонецЕсли;

	Если ТипЗнч(Таблица1) <> Тип("ТаблицаЗначений") Тогда
		Возврат Таблица2.ВыгрузитьКолонку(ИмяКолонки);
	КонецЕсли;

	Если ТипЗнч(Таблица2) <> Тип("ТаблицаЗначений") Тогда
		Возврат Таблица1.ВыгрузитьКолонку(ИмяКолонки);
	КонецЕсли;

	Таблица11 = Таблица1.Скопировать(, ИмяКолонки);
	Таблица11.Свернуть(ИмяКолонки);

	Таблица22 = Таблица2.Скопировать(, ИмяКолонки);
	Таблица22.Свернуть(ИмяКолонки);

	Для Каждого Строка Из Таблица22 Цикл
		НоваяСтрока				= Таблица11.Добавить();
		НоваяСтрока[ИмяКолонки] = Строка[ИмяКолонки];
	КонецЦикла;

	Таблица11.Колонки.Добавить("Признак");
	Таблица11.ЗаполнитьЗначения(1, "Признак");

	Таблица11.Свернуть(ИмяКолонки, "Признак");

	Отбор	= Новый Структура("Признак", 1);
	Таблица	= Таблица11.Скопировать(Таблица11.НайтиСтроки(Отбор));

	Возврат Таблица.ВыгрузитьКолонку(ИмяКолонки);
КонецФункции

Процедура ОбновитьСоставГруппыВсеПользователи(Пользователь,
                                              ОбновитьГруппуВнешнихПользователей = Ложь,
                                              УчастникиИзменений = Неопределено,
                                              ИзмененныеГруппы   = Неопределено)
	Если ОбновитьГруппуВнешнихПользователей Тогда
		ГруппаВсеПользователи = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи;
	Иначе
		ГруппаВсеПользователи = Справочники.ГруппыПользователей.ВсеПользователи;
	КонецЕсли;

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	Пользователи.Ссылка КАК Ссылка,
	            	  |	ВЫБОР
	            	  |		КОГДА Пользователи.ПометкаУдаления
	            	  |			ТОГДА ЛОЖЬ
	            	  |		КОГДА Пользователи.Недействителен
	            	  |			ТОГДА ЛОЖЬ
	            	  |		ИНАЧЕ ИСТИНА
	            	  |	КОНЕЦ КАК Используется
	            	  |ПОМЕСТИТЬ Пользователи
	            	  |ИЗ
	            	  |	Справочник.Пользователи КАК Пользователи
	            	  |ГДЕ
	            	  |	&ОтборПользователя
	            	  |
	            	  |ИНДЕКСИРОВАТЬ ПО
	            	  |	Пользователи.Ссылка
	            	  |;
	            	  |
	            	  |////////////////////////////////////////////////////////////////////////////////
	            	  |ВЫБРАТЬ
	            	  |	&ГруппаВсеПользователи КАК ГруппаПользователей,
	            	  |	Пользователи.Ссылка КАК Пользователь,
	            	  |	Пользователи.Используется КАК Используется
	            	  |ИЗ
	            	  |	Пользователи КАК Пользователи
	            	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	            	  |		ПО (СоставыГруппПользователей.ГруппаПользователей = &ГруппаВсеПользователи)
	            	  |			И (СоставыГруппПользователей.Пользователь = Пользователи.Ссылка)
	            	  |			И (СоставыГруппПользователей.Используется = Пользователи.Используется)
	            	  |ГДЕ
	            	  |	СоставыГруппПользователей.Пользователь ЕСТЬ NULL
	            	  |
	            	  |ОБЪЕДИНИТЬ ВСЕ
	            	  |
	            	  |ВЫБРАТЬ
	            	  |	Пользователи.Ссылка,
	            	  |	Пользователи.Ссылка,
	            	  |	Пользователи.Используется
	            	  |ИЗ
	            	  |	Пользователи КАК Пользователи
	            	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	            	  |		ПО (СоставыГруппПользователей.ГруппаПользователей = Пользователи.Ссылка)
	            	  |			И (СоставыГруппПользователей.Пользователь = Пользователи.Ссылка)
	            	  |			И (СоставыГруппПользователей.Используется = Пользователи.Используется)
	            	  |ГДЕ
	            	  |	СоставыГруппПользователей.Пользователь ЕСТЬ NULL";
	Запрос.УстановитьПараметр("ГруппаВсеПользователи", ГруппаВсеПользователи);

	Если ОбновитьГруппуВнешнихПользователей Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Пользователи", "Справочник.ВнешниеПользователи");
	КонецЕсли;

	Если Пользователь = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПользователя", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПользователя", "Пользователи.Ссылка В (&Пользователь)");
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		НаборЗаписей	= РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
		Запись			= НаборЗаписей.Добавить();
		Выборка			= РезультатЗапроса.Выбрать();

		Пока Выборка.Следующий() Цикл
			НаборЗаписей.Отбор.ГруппаПользователей.Установить(Выборка.ГруппаПользователей);
			НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			НаборЗаписей.Записать(); // Добавление недостающих записей о связях.

			Если УчастникиИзменений <> Неопределено Тогда
				УчастникиИзменений.Вставить(Выборка.Пользователь);
			КонецЕсли;
		КонецЦикла;

		Если ИзмененныеГруппы <> Неопределено Тогда
			ИзмененныеГруппы.Вставить(ГруппаВсеПользователи);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьСоставыИерархическихГруппПользователей(ГруппаПользователей,
                                                         Пользователь,
                                                         УчастникиИзменений = Неопределено,
                                                         ИзмененныеГруппы   = Неопределено)

	ОбновитьГруппыВнешнихПользователей = ТипЗнч(ГруппаПользователей) <> Тип("СправочникСсылка.ГруппыПользователей");

	// Подготовка групп пользователей в иерархии их родителей.
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	СсылкиВИерархииРодителей.Родитель КАК Родитель,
	            	  |	СсылкиВИерархииРодителей.Ссылка КАК Ссылка
	            	  |ПОМЕСТИТЬ СсылкиВИерархииРодителей
	            	  |ИЗ
	            	  |	&СсылкиВИерархииРодителей КАК СсылкиВИерархииРодителей";

	Запрос.УстановитьПараметр("СсылкиВИерархииРодителей", СсылкиВИерархииРодителей(
		?(ОбновитьГруппыВнешнихПользователей,"Справочник.ГруппыВнешнихПользователей", "Справочник.ГруппыПользователей")));

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Выполнить();

	// Подготовка запроса для цикла.
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	СоставыГруппПользователей.Пользователь КАК Пользователь,
	            	  |	СоставыГруппПользователей.Используется КАК Используется
	            	  |ПОМЕСТИТЬ СоставыГруппПользователей
	            	  |ИЗ
	            	  |	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	            	  |ГДЕ
	            	  |	&ОтборПользователяВРегистре
	            	  |	И СоставыГруппПользователей.ГруппаПользователей = &ГруппаПользователей
	            	  |
	            	  |ИНДЕКСИРОВАТЬ ПО
	            	  |	СоставыГруппПользователей.Пользователь,
	            	  |	СоставыГруппПользователей.Используется
	            	  |;
	            	  |
	            	  |////////////////////////////////////////////////////////////////////////////////
	            	  |ВЫБРАТЬ
	            	  |	ГруппыПользователейСостав.Пользователь КАК Пользователь,
	            	  |	МАКСИМУМ(ВЫБОР
	            	  |			КОГДА ГруппыПользователейСостав.Ссылка.ПометкаУдаления
	            	  |				ТОГДА ЛОЖЬ
	            	  |			КОГДА ГруппыПользователейСостав.Пользователь.ПометкаУдаления
	            	  |				ТОГДА ЛОЖЬ
	            	  |			КОГДА ГруппыПользователейСостав.Пользователь.Недействителен
	            	  |				ТОГДА ЛОЖЬ
	            	  |			ИНАЧЕ ИСТИНА
	            	  |		КОНЕЦ) КАК Используется
	            	  |ПОМЕСТИТЬ НовыеСоставыГруппПользователей
	            	  |ИЗ
	            	  |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	            	  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СсылкиВИерархииРодителей КАК СсылкиВИерархииРодителей
	            	  |		ПО (СсылкиВИерархииРодителей.Ссылка = ГруппыПользователейСостав.Ссылка)
	            	  |			И (СсылкиВИерархииРодителей.Родитель = &ГруппаПользователей)
	            	  |			И (&ОтборПользователяВСправочнике)
	            	  |
	            	  |СГРУППИРОВАТЬ ПО
	            	  |	ГруппыПользователейСостав.Пользователь
	            	  |
	            	  |ИНДЕКСИРОВАТЬ ПО
	            	  |	Пользователь
	            	  |;
	            	  |
	            	  |////////////////////////////////////////////////////////////////////////////////
	            	  |ВЫБРАТЬ РАЗЛИЧНЫЕ
	            	  |	СоставыГруппПользователей.Пользователь КАК Пользователь
	            	  |ИЗ
	            	  |	СоставыГруппПользователей КАК СоставыГруппПользователей
	            	  |		ЛЕВОЕ СОЕДИНЕНИЕ НовыеСоставыГруппПользователей КАК НовыеСоставыГруппПользователей
	            	  |		ПО СоставыГруппПользователей.Пользователь = НовыеСоставыГруппПользователей.Пользователь
	            	  |ГДЕ
	            	  |	НовыеСоставыГруппПользователей.Пользователь ЕСТЬ NULL
	            	  |;
	            	  |
	            	  |////////////////////////////////////////////////////////////////////////////////
	            	  |ВЫБРАТЬ РАЗЛИЧНЫЕ
	            	  |	&ГруппаПользователей КАК ГруппаПользователей,
	            	  |	НовыеСоставыГруппПользователей.Пользователь КАК Пользователь,
	            	  |	НовыеСоставыГруппПользователей.Используется КАК Используется
	            	  |ИЗ
	            	  |	НовыеСоставыГруппПользователей КАК НовыеСоставыГруппПользователей
	            	  |		ЛЕВОЕ СОЕДИНЕНИЕ СоставыГруппПользователей КАК СоставыГруппПользователей
	            	  |		ПО (СоставыГруппПользователей.Пользователь = НовыеСоставыГруппПользователей.Пользователь)
	            	  |			И (СоставыГруппПользователей.Используется = НовыеСоставыГруппПользователей.Используется)
	            	  |ГДЕ
	            	  |	СоставыГруппПользователей.Пользователь ЕСТЬ NULL
	            	  |;
	            	  |
	            	  |////////////////////////////////////////////////////////////////////////////////
	            	  |ВЫБРАТЬ
	            	  |	ГруппыПользователей.Родитель КАК Родитель
	            	  |ИЗ
	            	  |	Справочник.ГруппыПользователей КАК ГруппыПользователей
	            	  |ГДЕ
	            	  |	ГруппыПользователей.Ссылка = &ГруппаПользователей
	            	  |;
	            	  |
	            	  |////////////////////////////////////////////////////////////////////////////////
	            	  |УНИЧТОЖИТЬ СоставыГруппПользователей
	            	  |;
	            	  |
	            	  |////////////////////////////////////////////////////////////////////////////////
	            	  |УНИЧТОЖИТЬ НовыеСоставыГруппПользователей";

	Если Пользователь = Неопределено Тогда
		ОтборПользователяВРегистре    = "ИСТИНА";
		ОтборПользователяВСправочнике = "ИСТИНА";
	Иначе
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		ОтборПользователяВРегистре    = "СоставыГруппПользователей.Пользователь В (&Пользователь)";
		ОтборПользователяВСправочнике = "ГруппыПользователейСостав.Пользователь В (&Пользователь)";
	КонецЕсли;

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПользователяВРегистре",    ОтборПользователяВРегистре);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПользователяВСправочнике", ОтборПользователяВСправочнике);

	Если ОбновитьГруппыВнешнихПользователей Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.ГруппыПользователей", "Справочник.ГруппыВнешнихПользователей");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГруппыПользователейСостав.Пользователь", "ГруппыПользователейСостав.ВнешнийПользователь");
	КонецЕсли;

	// Выполнение для текущий группы пользователей и каждой группы-родителя.
	Пока ЗначениеЗаполнено(ГруппаПользователей) Цикл
		Запрос.УстановитьПараметр("ГруппаПользователей", ГруппаПользователей);

		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		Если НЕ РезультатыЗапроса[2].Пустой() Тогда
			НаборЗаписей	= РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
			Выборка			= РезультатыЗапроса[2].Выбрать();
			Пока Выборка.Следующий() Цикл
				НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
				НаборЗаписей.Отбор.ГруппаПользователей.Установить(ГруппаПользователей);
				НаборЗаписей.Записать(); // Удаление лишних записей о связях.

				Если УчастникиИзменений <> Неопределено Тогда
					УчастникиИзменений.Вставить(Выборка.Пользователь);
				КонецЕсли;

				Если ИзмененныеГруппы <> Неопределено Тогда
					ИзмененныеГруппы.Вставить(ГруппаПользователей);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		Если НЕ РезультатыЗапроса[3].Пустой() Тогда
			НаборЗаписей	= РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
			Запись			= НаборЗаписей.Добавить();
			Выборка			= РезультатыЗапроса[3].Выбрать();

			Пока Выборка.Следующий() Цикл
				НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
				НаборЗаписей.Отбор.ГруппаПользователей.Установить(Выборка.ГруппаПользователей);
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				НаборЗаписей.Записать(); // Добавление недостающих записей о связях.

				Если УчастникиИзменений <> Неопределено Тогда
					УчастникиИзменений.Вставить(Выборка.Пользователь);
				КонецЕсли;

				Если ИзмененныеГруппы <> Неопределено Тогда
					ИзмененныеГруппы.Вставить(Выборка.ГруппаПользователей);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		Если НЕ РезультатыЗапроса[4].Пустой() Тогда
			Выборка				= РезультатыЗапроса[4].Выбрать();
			Выборка.Следующий();
			ГруппаПользователей	= Выборка.Родитель;
		Иначе
			ГруппаПользователей = Неопределено;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция СсылкиВИерархииРодителей(Таблица)
	// Подготовка состава групп родителей.
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	СсылкиРодителей.Ссылка КАК Ссылка,
	            	  |	СсылкиРодителей.Родитель КАК Родитель
	            	  |ИЗ
	            	  |	&Таблица КАК СсылкиРодителей";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", Таблица);

	СсылкиРодителей				= Запрос.Выполнить().Выгрузить();
	СсылкиРодителей.Индексы.Добавить("Родитель");
	СсылкиВИерархииРодителей	= СсылкиРодителей.Скопировать(Новый Массив);

	Для каждого ОписаниеСсылки Из СсылкиРодителей Цикл
		НоваяСтрока				= СсылкиВИерархииРодителей.Добавить();
		НоваяСтрока.Родитель	= ОписаниеСсылки.Ссылка;
		НоваяСтрока.Ссылка		= ОписаниеСсылки.Ссылка;

		ЗаполнитьСсылкиВИерархииРодителя(ОписаниеСсылки.Ссылка, ОписаниеСсылки.Ссылка, СсылкиРодителей, СсылкиВИерархииРодителей);
	КонецЦикла;

	Возврат СсылкиВИерархииРодителей;
КонецФункции

Процедура ЗаполнитьСсылкиВИерархииРодителя(Знач Родитель, Знач ТекущийРодитель, Знач СсылкиРодителей, Знач СсылкиВИерархииРодителей)
	СсылкиРодителя = СсылкиРодителей.НайтиСтроки(Новый Структура("Родитель", ТекущийРодитель));

	Для каждого ОписаниеСсылки Из СсылкиРодителя Цикл
		НоваяСтрока				= СсылкиВИерархииРодителей.Добавить();
		НоваяСтрока.Родитель	= Родитель;
		НоваяСтрока.Ссылка		= ОписаниеСсылки.Ссылка;

		ЗаполнитьСсылкиВИерархииРодителя(Родитель, ОписаниеСсылки.Ссылка, СсылкиРодителей, СсылкиВИерархииРодителей);
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьСоставыГруппПоТипамОбъектовАвторизации(ГруппаВнешнихПользователей, ВнешнийПользователь, УчастникиИзменений, ИзмененныеГруппы)
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	ГруппыВнешнихПользователей.Ссылка КАК ГруппаПользователей,
	            	  |	ВнешниеПользователи.Ссылка КАК Пользователь,
	            	  |	ВЫБОР
	            	  |		КОГДА ГруппыВнешнихПользователей.ПометкаУдаления
	            	  |			ТОГДА ЛОЖЬ
	            	  |		КОГДА ВнешниеПользователи.ПометкаУдаления
	            	  |			ТОГДА ЛОЖЬ
	            	  |		КОГДА ВнешниеПользователи.Недействителен
	            	  |			ТОГДА ЛОЖЬ
	            	  |		ИНАЧЕ ИСТИНА
	            	  |	КОНЕЦ КАК Используется
	            	  |ПОМЕСТИТЬ НовыеСоставы
	            	  |ИЗ
	            	  |	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	            	  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыВнешнихПользователей КАК ГруппыВнешнихПользователей
	            	  |		ПО (ГруппыВнешнихПользователей.ВсеОбъектыАвторизации = ИСТИНА)
	            	  |			И (&ОтборГруппыВнешнихПользователей1)
	            	  |			И (ИСТИНА В
	            	  |				(ВЫБРАТЬ ПЕРВЫЕ 1
	            	  |					ИСТИНА
	            	  |				ИЗ
	            	  |					Справочник.ГруппыВнешнихПользователей.Назначение КАК ТипыПользователей
	            	  |				ГДЕ
	            	  |					ТипыПользователей.Ссылка = ГруппыВнешнихПользователей.Ссылка
	            	  |					И ТИПЗНАЧЕНИЯ(ТипыПользователей.ТипПользователей) = ТИПЗНАЧЕНИЯ(ВнешниеПользователи.ОбъектАвторизации)))
	            	  |			И (&ОтборВнешнегоПользователя1)
	            	  |;
	            	  |
	            	  |////////////////////////////////////////////////////////////////////////////////
	            	  |ВЫБРАТЬ
	            	  |	СоставыГруппПользователей.ГруппаПользователей КАК ГруппаПользователей,
	            	  |	СоставыГруппПользователей.Пользователь КАК Пользователь
	            	  |ИЗ
	            	  |	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	            	  |		ЛЕВОЕ СОЕДИНЕНИЕ НовыеСоставы КАК НовыеСоставы
	            	  |		ПО СоставыГруппПользователей.ГруппаПользователей = НовыеСоставы.ГруппаПользователей
	            	  |			И СоставыГруппПользователей.Пользователь = НовыеСоставы.Пользователь
	            	  |ГДЕ
	            	  |	ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.ГруппаПользователей) = ТИП(Справочник.ГруппыВнешнихПользователей)
	            	  |	И ВЫРАЗИТЬ(СоставыГруппПользователей.ГруппаПользователей КАК Справочник.ГруппыВнешнихПользователей).ВсеОбъектыАвторизации = ИСТИНА
	            	  |	И &ОтборГруппыВнешнихПользователей2
	            	  |	И &ОтборВнешнегоПользователя2
	            	  |	И НовыеСоставы.Пользователь ЕСТЬ NULL
	            	  |;
	            	  |
	            	  |////////////////////////////////////////////////////////////////////////////////
	            	  |ВЫБРАТЬ
	            	  |	НовыеСоставы.ГруппаПользователей КАК ГруппаПользователей,
	            	  |	НовыеСоставы.Пользователь КАК Пользователь,
	            	  |	НовыеСоставы.Используется КАК Используется
	            	  |ИЗ
	            	  |	НовыеСоставы КАК НовыеСоставы
	            	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	            	  |		ПО (СоставыГруппПользователей.ГруппаПользователей = НовыеСоставы.ГруппаПользователей)
	            	  |			И (СоставыГруппПользователей.Пользователь = НовыеСоставы.Пользователь)
	            	  |			И (СоставыГруппПользователей.Используется = НовыеСоставы.Используется)
	            	  |ГДЕ
	            	  |	СоставыГруппПользователей.Пользователь ЕСТЬ NULL";

	Если ГруппаВнешнихПользователей = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборГруппыВнешнихПользователей1", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборГруппыВнешнихПользователей2", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("ГруппаВнешнихПользователей", ГруппаВнешнихПользователей);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборГруппыВнешнихПользователей1", "ГруппыВнешнихПользователей.Ссылка В (&ГруппаВнешнихПользователей)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборГруппыВнешнихПользователей2", "СоставыГруппПользователей.ГруппаПользователей В (&ГруппаВнешнихПользователей)");
	КонецЕсли;

	Если ВнешнийПользователь = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборВнешнегоПользователя1", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборВнешнегоПользователя2", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("ВнешнийПользователь", ВнешнийПользователь);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборВнешнегоПользователя1", "ВнешниеПользователи.Ссылка В (&ВнешнийПользователь)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборВнешнегоПользователя2", "СоставыГруппПользователей.Пользователь В (&ВнешнийПользователь)");
	КонецЕсли;

	РезультатыЗапросов = Запрос.ВыполнитьПакет();

	Если НЕ РезультатыЗапросов[1].Пустой() Тогда
		НаборЗаписей	= РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
		Выборка			= РезультатыЗапросов[1].Выбрать();

		Пока Выборка.Следующий() Цикл
			НаборЗаписей.Отбор.ГруппаПользователей.Установить(Выборка.ГруппаПользователей);
			НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
			НаборЗаписей.Записать(); // Удаление лишних записей о связях.

			Если УчастникиИзменений <> Неопределено Тогда
				УчастникиИзменений.Вставить(Выборка.Пользователь);
			КонецЕсли;

			Если ИзмененныеГруппы <> Неопределено И ТипЗнч(Выборка.ГруппаПользователей) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
				ИзмененныеГруппы.Вставить(Выборка.ГруппаПользователей);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если НЕ РезультатыЗапросов[2].Пустой() Тогда
		НаборЗаписей	= РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
		Запись			= НаборЗаписей.Добавить();
		Выборка			= РезультатыЗапросов[2].Выбрать();

		Пока Выборка.Следующий() Цикл
			НаборЗаписей.Отбор.ГруппаПользователей.Установить(Выборка.ГруппаПользователей);
			НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			НаборЗаписей.Записать(); // Добавление недостающих записей о связях.

			Если УчастникиИзменений <> Неопределено Тогда
				УчастникиИзменений.Вставить(Выборка.Пользователь);
			КонецЕсли;

			Если ИзмененныеГруппы <> Неопределено И ТипЗнч(Выборка.ГруппаПользователей) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
				ИзмененныеГруппы.Вставить(Выборка.ГруппаПользователей);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Возвращает текст ошибки, если у текущего пользователя нет ни роли базовые права, ни ролей администратора.
// Регистрирует ошибку в журнале.
//
Функция ОшибкаНедостаточноПравДляВходаВПрограмму(РегистрироватьВЖурнале = Истина) Экспорт
	Если РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
		Возврат "";
	КонецЕсли;

	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		ИмяРолиБазовыеПрава = Метаданные.Роли.БазовыеПраваВнешнегоПользователя.Имя;
	Иначе
		ИмяРолиБазовыеПрава = Метаданные.Роли.БазовыеПрава.Имя;
	КонецЕсли;

	Если РольДоступна(ИмяРолиБазовыеПрава) Тогда // Не заменять на РолиДоступны.
		Возврат "";
	КонецЕсли;

	Возврат КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале("Недостаточно прав для входа в программу. Обратитесь к администратору.",, РегистрироватьВЖурнале);
КонецФункции

Процедура ПриВыполненииСтандартныхПериодическихПроверокНаСервере(Параметры) Экспорт
	// Проверка, что срок действия учетной записи истек и нужно завершить работу.

	УстановитьПривилегированныйРежим(Истина);

	ТребуетсяСменитьПароль(); // Обновление даты последней активности.

	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);

	Параметры.Вставить("ВходВПрограммуЗапрещен", Ложь);

	Если ПользовательИБ = Неопределено Тогда
		Параметры.ВходВПрограммуЗапрещен = Истина;
	ИначеЕсли ПользовательИБ.АутентификацияСтандартная = Ложь
	        И ПользовательИБ.АутентификацияОС          = Ложь
	        И ПользовательИБ.АутентификацияOpenID      = Ложь Тогда

		Параметры.ВходВПрограммуЗапрещен = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ОбработатьНовыйПароль(Параметры) Экспорт
	НовыйПароль  = Параметры.НовыйПароль;
	СтарыйПароль = Параметры.СтарыйПароль;

	Если ТипЗнч(Параметры.Пользователь) = Тип("СправочникОбъект.Пользователи")
	 Или ТипЗнч(Параметры.Пользователь) = Тип("СправочникОбъект.ВнешниеПользователи") Тогда

		СсылкаОбъекта			= Параметры.Пользователь.Ссылка;
		Пользователь			= СсылкаОбъекта(Параметры.Пользователь);
		ВызовИзФормыСменаПароля = Ложь;
	Иначе
		СсылкаОбъекта			= Параметры.Пользователь;
		Пользователь			= Параметры.Пользователь;
		ВызовИзФормыСменаПароля	= Истина;
	КонецЕсли;

	Параметры.Вставить("СтарыйПарольСовпадает", Ложь);

	ДополнительныеПараметры = Новый Структура;
	Если Не ВозможноИзменитьПароль(СсылкаОбъекта, ДополнительныеПараметры) Тогда
		Возврат ДополнительныеПараметры.ТекстОшибки;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Если ДополнительныеПараметры.ЭтоТекущийПользовательИБ
	   И ДополнительныеПараметры.ПарольУстановлен
	   И (ВызовИзФормыСменаПароля Или СтарыйПароль <> Неопределено) Тогда

		СохраняемоеЗначениеСтрокиПароля(СтарыйПароль, ДополнительныеПараметры.ИдентификаторПользователяИБ, Параметры.СтарыйПарольСовпадает);

		Если Не Параметры.СтарыйПарольСовпадает Тогда
			Возврат "Старый пароль указан неверно.";
		КонецЕсли;
	КонецЕсли;

	Если ПользователиСерверПовтИсп.Настройки().ОбщиеНастройкиВхода Тогда
		Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
			НастройкиВхода = ПользователиСерверПовтИсп.Настройки().ВнешниеПользователи;
		Иначе
			НастройкиВхода = ПользователиСерверПовтИсп.Настройки().Пользователи;
		КонецЕсли;

		ТекстОшибки = ОшибкаДлиныИлиСложностиПароля(НовыйПароль, НастройкиВхода.МинимальнаяДлинаПароля, НастройкиВхода.ПарольДолженОтвечатьТребованиямСложности);

		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Возврат ТекстОшибки;
		КонецЕсли;
	КонецЕсли;

	ТекстОшибки = ОшибкаДлиныИлиСложностиПароля(НовыйПароль, ПолучитьМинимальнуюДлинуПаролейПользователей(), ПолучитьПроверкуСложностиПаролейПользователей());

	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Если Не ПользователиСерверПовтИсп.Настройки().ОбщиеНастройкиВхода Тогда
			Возврат ТекстОшибки;
		КонецЕсли;
		Возврат СтрШаблон("%1
			           |
			           |Ограничение установлено в конфигураторе в меню ""Администрирование"" пункт ""Параметры информационной базы ..."".
			           |Следует очистить минимальную длину и требование сложности пароля в конфигураторе и
			           |задать настройки входа пользователей в настройках программы.",ТекстОшибки);
	КонецЕсли;

	ТекстОшибки					= "";
	СохраняемоеЗначениеПароля	= СохраняемоеЗначениеСтрокиПароля(НовыйПароль);

	Блокировка			= Новый БлокировкаДанных;
	ЭлементБлокировки	= Блокировка.Добавить(Метаданные.НайтиПоТипу(ТипЗнч(Пользователь)).ПолноеИмя());
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Пользователь);
	ЭлементБлокировки	= Блокировка.Добавить("РегистрСведений.СведенияОПользователях");
	ЭлементБлокировки.УстановитьЗначение("Пользователь", Пользователь);
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			СведенияОПользователе				= НаборЗаписей.Добавить();
			СведенияОПользователе.Пользователь	= Пользователь;
		Иначе
			СведенияОПользователе				= НаборЗаписей[0];
		КонецЕсли;
		ИспользованныеПароли = СведенияОПользователе.ИспользованныеПароли.Получить();
		Если ИспользованныеПароли = Неопределено Тогда
			ИспользованныеПароли = Новый Массив;
		КонецЕсли;

		Если ПользователиСерверПовтИсп.Настройки().ОбщиеНастройкиВхода
		   И ЗначениеЗаполнено(НастройкиВхода.ЗапретитьПовторениеПароляСредиПоследних)
		   И ИспользованныеПароли.Найти(СохраняемоеЗначениеПароля) <> Неопределено Тогда

			ТекстОшибки = "Новый пароль использовался ранее.";
		ИначеЕсли Не (ВызовИзФормыСменаПароля И Параметры.ТолькоПроверить) Тогда
			Если ВызовИзФормыСменаПароля Тогда
				ОписаниеПользователяИБ = Новый Структура;
				ОписаниеПользователяИБ.Вставить("Действие", "Записать");
				ОписаниеПользователяИБ.Вставить("Пароль", НовыйПароль);

				ТекущийОбъект = Пользователь.ПолучитьОбъект();
				ТекущийОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);

				Если Параметры.ПриВходеВПрограмму Тогда
					ТекущийОбъект.ДополнительныеСвойства.Вставить("СменаПароляПриВходеВПрограмму");
				КонецЕсли;
				Попытка
					ТекущийОбъект.Записать();
				Исключение
					ВызватьИсключение;
				КонецПопытки;
			Иначе
				СведенияОПользователе.ДатаНачалаИспользованияПароля = Неопределено;
				Если Параметры.Пользователь.ДополнительныеСвойства.Свойство("СменаПароляПриВходеВПрограмму") Тогда
					СведенияОПользователе.ПотребоватьСменуПароляПриВходе = Ложь;
				КонецЕсли;
				Если ПользователиСерверПовтИсп.Настройки().ОбщиеНастройкиВхода
				   И ЗначениеЗаполнено(НастройкиВхода.ЗапретитьПовторениеПароляСредиПоследних) Тогда

					ИспользованныеПароли.Добавить(СохраняемоеЗначениеПароля);
					Пока ИспользованныеПароли.Количество() > НастройкиВхода.ЗапретитьПовторениеПароляСредиПоследних Цикл
						ИспользованныеПароли.Удалить(0);
					КонецЦикла;
				Иначе
					ИспользованныеПароли.Очистить();
				КонецЕсли;
				СведенияОПользователе.ИспользованныеПароли = Новый ХранилищеЗначения(ИспользованныеПароли);
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОтменитьТранзакцию();
		Если ВызовИзФормыСменаПароля Тогда
			ЗаписьЖурналаРегистрации("Пользователи.Ошибка смены пароля",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.НайтиПоТипу(ТипЗнч(Пользователь)),
				Пользователь,
				СтрШаблон("Не удалось сменить пароль пользователя ""%1"" по причине:
					           |%2",
					Пользователь, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
			Параметры.Вставить("ОшибкаЗаписанаВЖурналРегистрации");
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;

	Возврат ТекстОшибки;
КонецФункции

// Возвращает ссылку старого объекта или ссылку нового объекта.
//
// Параметры:
//  Объект       - СправочникОбъект, ...
//  ЭтоНовый     - Булево (Возвращаемое значение).
//
Функция СсылкаОбъекта(Знач Объект, ЭтоНовый = Неопределено) Экспорт
	Ссылка = Объект.Ссылка;
	ЭтоНовый = НЕ ЗначениеЗаполнено(Ссылка);

	Если ЭтоНовый Тогда
		Ссылка = Объект.ПолучитьСсылкуНового();

		Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
			Менеджер	= БазоваяПодсистемаСервер.МенеджерОбъектаПоСсылке(Объект.Ссылка);
			Ссылка		= Менеджер.ПолучитьСсылку();
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
	КонецЕсли;

	Возврат Ссылка;
КонецФункции

Функция ОшибкаДлиныИлиСложностиПароля(Пароль, МинимальнаяДлинаПароля, СложныйПароль)
	Если СложныйПароль И МинимальнаяДлинаПароля < 7 Тогда
		МинимальнаяДлинаПароля = 7;
	КонецЕсли;
	Если СтрДлина(Пароль) < МинимальнаяДлинаПароля Тогда
		Возврат СтрШаблон("Количество символов нового пароля должно быть не менее %1.",
			Формат(МинимальнаяДлинаПароля, "ЧГ="));
	КонецЕсли;

	Если СложныйПароль И Не ПарольОтвечаетТребованиямСложности(Пароль) Тогда
		Возврат "Пароль не отвечает требованиям сложности." + Символы.ПС + Символы.ПС + "Надежный пароль:
		           |- имеет не менее 7 символов;
		           |- содержит любые 3 из 4-х типов символов: заглавные
		           |  буквы, строчные буквы, цифры, специальные символы;
		           |- не совпадает с именем (для входа).";
	КонецЕсли;
КонецФункции

Функция ПарольОтвечаетТребованиямСложности(Пароль)
	УстановитьПривилегированныйРежим(Истина);

	ТекущаяПроверкаСложности = ПолучитьПроверкуСложностиПаролейПользователей();
	ТекущаяМинимальнаяДлина  = ПолучитьМинимальнуюДлинуПаролейПользователей();

	НачатьТранзакцию();
	Попытка
		Если ТекущаяМинимальнаяДлина > 0 Тогда
			УстановитьМинимальнуюДлинуПаролейПользователей(0);
		КонецЕсли;
		Если ТекущаяПроверкаСложности Тогда
			УстановитьПроверкуСложностиПаролейПользователей(Ложь);
		КонецЕсли;

		Если Не ЗначениеЗаполнено(ИмяПользователя())
		   И ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 Тогда

			ВременныйАдминистраторИБ							= ПользователиИнформационнойБазы.СоздатьПользователя();
			ВременныйАдминистраторИБ.АутентификацияСтандартная	= Истина;
			ВременныйАдминистраторИБ.Роли.Добавить(Метаданные.Роли.АдминистраторСистемы);
			ВременныйАдминистраторИБ.Имя						= "Временный первый администратор (" + Строка(Новый УникальныйИдентификатор) + ")";
			ВременныйАдминистраторИБ.Записать();
		Иначе
			ВременныйАдминистраторИБ							= Неопределено;
		КонецЕсли;

		ВременныйПользовательИБ									= ПользователиИнформационнойБазы.СоздатьПользователя();
		ВременныйПользовательИБ.АутентификацияСтандартная		= Истина;
		ВременныйПользовательИБ.Пароль							= Пароль;
		ВременныйПользовательИБ.Имя								= "Временный пользователь (" + Строка(Новый УникальныйИдентификатор) + ")";
		ВременныйПользовательИБ.Записать();

		ВременныйПользовательИБ									= ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ВременныйПользовательИБ.УникальныйИдентификатор);

		УстановитьПроверкуСложностиПаролейПользователей(Истина);
		Отвечает = Истина;
		Попытка
			ВременныйПользовательИБ.Пароль = Пароль;
			ВременныйПользовательИБ.Записать();
		Исключение
			Отвечает = Ложь;
		КонецПопытки;

		ВременныйПользовательИБ.Удалить();

		Если ВременныйАдминистраторИБ <> Неопределено Тогда
			ВременныйАдминистраторИБ.Удалить();
		КонецЕсли;

		Если ТекущаяМинимальнаяДлина > 0 Тогда
			УстановитьМинимальнуюДлинуПаролейПользователей(ТекущаяМинимальнаяДлина);
		КонецЕсли;
		Если Не ТекущаяПроверкаСложности Тогда
			УстановитьПроверкуСложностиПаролейПользователей(Ложь);
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();

		Если ТекущаяМинимальнаяДлина <> ПолучитьМинимальнуюДлинуПаролейПользователей() Тогда
			УстановитьМинимальнуюДлинуПаролейПользователей(ТекущаяМинимальнаяДлина);
		КонецЕсли;
		Если ТекущаяПроверкаСложности <> ПолучитьПроверкуСложностиПаролейПользователей() Тогда
			УстановитьПроверкуСложностиПаролейПользователей(ТекущаяПроверкаСложности);
		КонецЕсли;

		ОтменитьТранзакцию();
		ВызватьИсключение СтрШаблон("Не удалось проверить отвечает ли пароль требованиям сложности по причине:
			           |%1",
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;

	Возврат Отвечает;
КонецФункции

// Возвращает стандартные параметры с учетом длины и сложности.
//
// Параметры:
//  НаименьшаяДлина - Число - наименьшая длина пароля (по умолчанию - 7).
//  Сложный         - Булево - учитывать требования проверки сложности пароля.
//
// Возвращаемое значение:
//  Структура - параметры создания пароля.
//
Функция ПараметрыПароля(НаименьшаяДлина = 7, Сложный = Ложь) Экспорт
	ПараметрыПароля = Новый Структура;
	ПараметрыПароля.Вставить("МинимальнаяДлина",                НаименьшаяДлина);
	ПараметрыПароля.Вставить("МаксимальнаяДлина",               99);
	ПараметрыПароля.Вставить("ГласныеБуквыСтрочные",            "aeiouy");
	ПараметрыПароля.Вставить("ГласныеБуквыЗаглавные",           "AEIOUY");
	ПараметрыПароля.Вставить("СогласныеБуквыСтрочные",          "bcdfghjklmnpqrstvwxz");
	ПараметрыПароля.Вставить("СогласныеБуквыЗаглавные",         "BCDFGHJKLMNPQRSTVWXZ");
	ПараметрыПароля.Вставить("Цифры",                           "0123456789");
	ПараметрыПароля.Вставить("СпецСимволы",                     " _.,!?");
	ПараметрыПароля.Вставить("ПроверятьУсловияСложности",       Сложный);
	ПараметрыПароля.Вставить("ЗаглавныеБуквыПроверятьНаличие",  Истина);
	ПараметрыПароля.Вставить("СтрочныеБуквыПроверятьНаличие",   Истина);
	ПараметрыПароля.Вставить("ЦифрыПроверятьНаличие",           Истина);
	ПараметрыПароля.Вставить("СпецСимволыПроверятьНаличие",     Ложь);

	Возврат ПараметрыПароля;
КонецФункции

// Создает новый пароль, соответствующий заданным правилам проверки сложности.
// Для облегчения запоминания, пароль формируется из слогов (согласная-гласная).
//
// Параметры:
//  ПараметрыПароля - Структура - возвращается функций ПараметрыПароля.
//  ГСЧ             - ГенераторСлучайныхЧисел - если уже используется.
//                  - Неопределено - создать новый.
//
// Возвращаемое значение:
//  Строка - новый пароль.
//
Функция СоздатьПароль(ПараметрыПароля, ГСЧ = Неопределено) Экспорт
	НовыйПароль						= "";

	СогласныеСтрочные               = ПараметрыПароля.СогласныеБуквыСтрочные;
	СогласныеЗаглавные              = ПараметрыПароля.СогласныеБуквыЗаглавные;
	КоличествоСогласныхСтрочных     = СтрДлина(СогласныеСтрочные);
	КоличествоСогласныхЗаглавных    = СтрДлина(СогласныеЗаглавные);
	ИспользоватьСогласные           = (КоличествоСогласныхСтрочных > 0)
	                                  ИЛИ (КоличествоСогласныхЗаглавных > 0);

	ГласныеСтрочные                 = ПараметрыПароля.ГласныеБуквыСтрочные;
	ГласныеЗаглавные                = ПараметрыПароля.ГласныеБуквыЗаглавные;
	КоличествоГласныхСтрочных       = СтрДлина(ГласныеСтрочные);
	КоличествоГласныхЗаглавных      = СтрДлина(ГласныеЗаглавные);
	ИспользоватьГласные             = (КоличествоГласныхСтрочных > 0)
	                                  ИЛИ (КоличествоГласныхЗаглавных > 0);

	Цифры                   = ПараметрыПароля.Цифры;
	КоличествоЦифр          = СтрДлина(Цифры);
	ИспользоватьЦифры       = (КоличествоЦифр > 0);

	СпецСимволы             = ПараметрыПароля.СпецСимволы;
	КоличествоСпецСимволов  = СтрДлина(СпецСимволы);
	ИспользоватьСпецСимволы = (КоличествоСпецСимволов > 0);

	// Создание генератора случайных чисел.
	Если ГСЧ = Неопределено Тогда
		ГСЧ = Новый ГенераторСлучайныхЧисел;
	КонецЕсли;

	Счетчик = 0;

	МаксимальнаяДлина           = ПараметрыПароля.МаксимальнаяДлина;
	МинимальнаяДлина            = ПараметрыПароля.МинимальнаяДлина;

	// Определение позиции спец. символов и цифр.
	Если ПараметрыПароля.ПроверятьУсловияСложности Тогда
		УстановитьСтрочную      = ПараметрыПароля.СтрочныеБуквыПроверятьНаличие;
		УстановитьЗаглавную     = ПараметрыПароля.ЗаглавныеБуквыПроверятьНаличие;
		УстановитьЦифру         = ПараметрыПароля.ЦифрыПроверятьНаличие;
		УстановитьСпецСимвол    = ПараметрыПароля.СпецСимволыПроверятьНаличие;
	Иначе
		УстановитьСтрочную      = (КоличествоГласныхСтрочных > 0)
		                          ИЛИ (КоличествоСогласныхСтрочных > 0);
		УстановитьЗаглавную     = (КоличествоГласныхЗаглавных > 0)
		                          ИЛИ (КоличествоСогласныхЗаглавных > 0);
		УстановитьЦифру         = ИспользоватьЦифры;
		УстановитьСпецСимвол    = ИспользоватьСпецСимволы;
	КонецЕсли;

	Пока Счетчик < МаксимальнаяДлина Цикл
		// Начало с согласной буквы.
		Если ИспользоватьСогласные Тогда
			Если УстановитьЗаглавную И УстановитьСтрочную Тогда
				СтрокаПоиска = СогласныеСтрочные + СогласныеЗаглавные;
				ВерхняяГраница = КоличествоСогласныхСтрочных + КоличествоСогласныхЗаглавных;
			ИначеЕсли УстановитьЗаглавную Тогда
				СтрокаПоиска = СогласныеЗаглавные;
				ВерхняяГраница = КоличествоСогласныхЗаглавных;
			Иначе
				СтрокаПоиска = СогласныеСтрочные;
				ВерхняяГраница = КоличествоСогласныхСтрочных;
			КонецЕсли;
			Если ПустаяСтрока(СтрокаПоиска) Тогда
				СтрокаПоиска = СогласныеСтрочные + СогласныеЗаглавные;
				ВерхняяГраница = КоличествоСогласныхСтрочных + КоличествоСогласныхЗаглавных;
			КонецЕсли;
			Символ = Сред(СтрокаПоиска, ГСЧ.СлучайноеЧисло(1, ВерхняяГраница), 1);
			Если Символ = ВРЕГ(Символ) Тогда
				Если УстановитьЗаглавную Тогда
					УстановитьЗаглавную = (ГСЧ.СлучайноеЧисло(0, 1) = 1);
				КонецЕсли;
			Иначе
				УстановитьСтрочную = Ложь;
			КонецЕсли;
			НовыйПароль = НовыйПароль + Символ;
			Счетчик     = Счетчик + 1;
			Если Счетчик >= МинимальнаяДлина Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;

		// Добавление гласных.
		Если ИспользоватьГласные Тогда
			Если УстановитьЗаглавную И УстановитьСтрочную Тогда
				СтрокаПоиска = ГласныеСтрочные + ГласныеЗаглавные;
				ВерхняяГраница = КоличествоГласныхСтрочных + КоличествоГласныхЗаглавных;
			ИначеЕсли УстановитьЗаглавную Тогда
				СтрокаПоиска = ГласныеЗаглавные;
				ВерхняяГраница = КоличествоГласныхЗаглавных;
			Иначе
				СтрокаПоиска = ГласныеСтрочные;
				ВерхняяГраница = КоличествоГласныхСтрочных;
			КонецЕсли;
			Если ПустаяСтрока(СтрокаПоиска) Тогда
				СтрокаПоиска = ГласныеСтрочные + ГласныеЗаглавные;
				ВерхняяГраница = КоличествоГласныхСтрочных + КоличествоГласныхЗаглавных;
			КонецЕсли;
			Символ = Сред(СтрокаПоиска, ГСЧ.СлучайноеЧисло(1, ВерхняяГраница), 1);
			Если Символ = Врег(Символ) Тогда
				УстановитьЗаглавную = Ложь;
			Иначе
				УстановитьСтрочную = Ложь;
			КонецЕсли;
			НовыйПароль = НовыйПароль + Символ;
			Счетчик     = Счетчик + 1;
			Если Счетчик >= МинимальнаяДлина Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;

		// Добавление цифр.
		Если ИспользоватьЦифры И УстановитьЦифру Тогда
			УстановитьЦифру = (ГСЧ.СлучайноеЧисло(0, 1) = 1);
			Символ          = Сред(Цифры, ГСЧ.СлучайноеЧисло(1, КоличествоЦифр), 1);
			НовыйПароль     = НовыйПароль + Символ;
			Счетчик         = Счетчик + 1;
			Если Счетчик >= МинимальнаяДлина Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;

		// Добавление спец. символов.
		Если ИспользоватьСпецСимволы И УстановитьСпецСимвол Тогда
			УстановитьСпецСимвол = (ГСЧ.СлучайноеЧисло(0, 1) = 1);
			Символ      = Сред(СпецСимволы, ГСЧ.СлучайноеЧисло(1, КоличествоСпецСимволов), 1);
			НовыйПароль = НовыйПароль + Символ;
			Счетчик     = Счетчик + 1;
			Если Счетчик >= МинимальнаяДлина Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат НовыйПароль;
КонецФункции

// Проверяет корректность заполнения назначения ролей, а также корректность прав в ролях по назначению.
Процедура ПроверитьНазначениеРолей(НазначениеРолей = Неопределено, ПроверитьВсе = Ложь, СписокОшибок = Неопределено) Экспорт
	Если НазначениеРолей = Неопределено Тогда
		НазначениеРолей = ПользователиСерверПовтИсп.НазначениеРолей();
	КонецЕсли;

	ЗаголовокОшибки = "Ошибка в процедуре ПриОпределенииНазначенияРолей общего модуля ПользователиСервер.";

	ТекстОшибки = "";

	Назначение = Новый Структура;
	Для Каждого ОписаниеНазначенияРолей Из НазначениеРолей Цикл
		Роли = Новый Соответствие;
		Для Каждого КлючИЗначение Из ОписаниеНазначенияРолей.Значение Цикл
			Роль = Метаданные.Роли.Найти(КлючИЗначение.Ключ);
			Если Роль = Неопределено Тогда
				ОписаниеОшибки = СтрШаблон("В метаданных не найдена роль ""%1"",
						           |указанная в назначении %2.",
						КлючИЗначение.Ключ, ОписаниеНазначенияРолей.Ключ);
				Если СписокОшибок = Неопределено Тогда
					ТекстОшибки = ТекстОшибки + Символы.ПС + Символы.ПС + ОписаниеОшибки;
				Иначе
					СписокОшибок.Добавить(Неопределено, ОписаниеОшибки);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			Роли.Вставить(Роль, Истина);
			Для Каждого ОписаниеНазначения Из Назначение Цикл
				Если ОписаниеНазначения.Значение.Получить(Роль) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ОписаниеОшибки = СтрШаблон("Роль ""%1"" указана более чем в одном назначении:
					           |%2, %3.",
					Роль.Имя, ОписаниеНазначенияРолей.Ключ, ОписаниеНазначения.Ключ);
				Если СписокОшибок = Неопределено Тогда
					ТекстОшибки = ТекстОшибки + Символы.ПС + Символы.ПС + ОписаниеОшибки;
				Иначе
					СписокОшибок.Добавить(Роль, ОписаниеОшибки);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Назначение.Вставить(ОписаниеНазначенияРолей.Ключ, Роли);
	КонецЦикла;

	// Проверка ролей внешних пользователей.
	НедоступныеПрава = Новый Массив;
	НедоступныеПрава.Добавить("Администрирование");
	НедоступныеПрава.Добавить("АдминистрированиеРасширенийКонфигурации");
	НедоступныеПрава.Добавить("ОбновлениеКонфигурацииБазыДанных");
	НедоступныеПрава.Добавить("АдминистрированиеДанных");

	ПроверитьСоставПравРолей(НедоступныеПрава, Назначение.ТолькоДляВнешнихПользователей, ТекстОшибки, "При проверке ролей только для внешних пользователей найдены ошибки:", СписокОшибок);
	ПроверитьСоставПравРолей(НедоступныеПрава, Назначение.СовместноДляПользователейИВнешнихПользователей, ТекстОшибки, "При проверке ролей совместно для пользователей и внешних пользователей найдены ошибки:", СписокОшибок);

	// Проверка ролей пользователей.
	Если ПроверитьВсе Тогда
		Роли = Новый Соответствие;
		Для Каждого Роль Из Метаданные.Роли Цикл
			Если Назначение.ТолькоДляАдминистраторовСистемы.Получить(Роль) <> Неопределено
			 Или Назначение.ТолькоДляПользователейСистемы.Получить(Роль) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Роли.Вставить(Роль, Истина);
		КонецЦикла;
		НедоступныеПрава = Новый Массив;
		НедоступныеПрава.Добавить("Администрирование");
		НедоступныеПрава.Добавить("АдминистрированиеРасширенийКонфигурации");
		НедоступныеПрава.Добавить("ОбновлениеКонфигурацииБазыДанных");
		НедоступныеПрава.Добавить("ТолстыйКлиент");
		НедоступныеПрава.Добавить("ВнешнееСоединение");
		НедоступныеПрава.Добавить("Automation");
		НедоступныеПрава.Добавить("ИнтерактивноеОткрытиеВнешнихОбработок");
		НедоступныеПрава.Добавить("ИнтерактивноеОткрытиеВнешнихОтчетов");
		НедоступныеПрава.Добавить("РежимВсеФункции");

		ПроверитьСоставПравРолей(НедоступныеПрава, Роли, ТекстОшибки, "При проверке ролей для пользователей приложения найдены ошибки:", СписокОшибок);
	КонецЕсли;

	Роли = Новый Соответствие;
	Для Каждого Роль Из Метаданные.Роли Цикл
		Если Назначение.ТолькоДляАдминистраторовСистемы.Получить(Роль) <> Неопределено
		 Или Назначение.ТолькоДляВнешнихПользователей.Получить(Роль) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Роли.Вставить(Роль, Истина);
	КонецЦикла;
	НедоступныеПрава = Новый Массив;
	НедоступныеПрава.Добавить("Администрирование");
	НедоступныеПрава.Добавить("АдминистрированиеРасширенийКонфигурации");
	НедоступныеПрава.Добавить("ОбновлениеКонфигурацииБазыДанных");

	ПроверитьСоставПравРолей(НедоступныеПрава, Роли, ТекстОшибки, "При проверке ролей для пользователей найдены ошибки:", СписокОшибок);
	ПроверитьСоставПравРолей(НедоступныеПрава, Назначение.СовместноДляПользователейИВнешнихПользователей, ТекстОшибки, "При проверке ролей совместно для пользователей и внешних пользователей найдены ошибки:", СписокОшибок);

	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ЗаголовокОшибки + ТекстОшибки;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьСоставПравРолей(НедоступныеПрава, ОписаниеРолей, ОбщийТекстОшибки, ЗаголовокОшибки, СписокОшибок)
	ТекстОшибки = "";

	Для Каждого ОписаниеРоли Из ОписаниеРолей Цикл
		Роль = ОписаниеРоли.Ключ;
		Для Каждого НедоступноеПраво Из НедоступныеПрава Цикл
			Если ПравоДоступа(НедоступноеПраво, Метаданные, Роль) Тогда
				ОписаниеОшибки = СтрШаблон("Роль ""%1"" содержит недоступное право %2.", Роль, НедоступноеПраво);
				Если СписокОшибок = Неопределено Тогда
					ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки;
				Иначе
					СписокОшибок.Добавить(Роль, ЗаголовокОшибки + Символы.ПС + ОписаниеОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщийТекстОшибки = ОбщийТекстОшибки + Символы.ПС + Символы.ПС + ЗаголовокОшибки + ТекстОшибки;
	КонецЕсли;
КонецПроцедуры

// Проверяет возможность включения внешнего пользователя в группу.
//
// Параметры:
//  ГруппыПриемник     - СправочникСсылка.ГруппыПользователей, группа, в которую
//                       добавляется пользователь.
//  ПользовательСсылка - СправочникСсылка.Пользователь - пользователь, которого необходимо
//                       добавить в группу.
//
// Возвращаемое значение:
//  Булево             - Ложь, если добавление пользователя в группу невозможно.
//
Функция ВозможноПеремещениеПользователя(ГруппаПриемник, ПользовательСсылка) Экспорт
	Если ТипЗнч(ПользовательСсылка) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		СвойстваГруппыПриемника = БазоваяПодсистемаСервер.ЗначенияРеквизитовОбъекта(ГруппаПриемник, "Назначение, ВсеОбъектыАвторизации");

		Если СвойстваГруппыПриемника.ВсеОбъектыАвторизации Тогда
			Возврат Ложь;
		КонецЕсли;

		НазначениеГруппыПриемника = СвойстваГруппыПриемника.Назначение.Выгрузить();

		ТипВнешнегоПользователя	= ТипЗнч(БазоваяПодсистемаСервер.ЗначениеРеквизитаОбъекта(ПользовательСсылка, "ОбъектАвторизации"));
		ОписаниеТипаСсылки		= Новый ОписаниеТипов(БазоваяПодсистемаКлиентСервер.ЗначениеВМассиве(ТипВнешнегоПользователя));
		Значение				= ОписаниеТипаСсылки.ПривестиЗначение(Неопределено);

		Отбор = Новый Структура("ТипПользователей", Значение);
		Если НазначениеГруппыПриемника.НайтиСтроки(Отбор).Количество() <> 1 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;
КонецФункции

// Добавляет пользователя в группу.
//
// Параметры:
//  ГруппаПриемник     - СправочникСсылка.ГруппыПользователей - группа, в которую переносится
//                       пользователь.
//  ПользовательСсылка - СправочникСсылка.Пользователь - пользователь, которого необходимо
//                       добавить в группу.
//  ТипПользователя    - Строка - ВнешнийПользователь или Пользователь.
//
Процедура ДобавитьПользователяВГруппу(ГруппаПриемник, ПользовательСсылка, ТипПользователя) Экспорт
	НачатьТранзакцию();
	Попытка
		ГруппаПриемникОбъект	= ГруппаПриемник.ПолучитьОбъект();
		СтрокаСостава			= ГруппаПриемникОбъект.Состав.Добавить();
		Если ТипПользователя = "ВнешнийПользователь" Тогда
			СтрокаСостава.ВнешнийПользователь	= ПользовательСсылка;
		Иначе
			СтрокаСостава.Пользователь			= ПользовательСсылка;
		КонецЕсли;

		ГруппаПриемникОбъект.Записать();

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

// Удаляет пользователя из группы.
//
// Параметры:
//  ГруппаПриемник     - СправочникСсылка.ГруппыПользователей - группа, из которой удаляется
//                       пользователь.
//  ПользовательСсылка - СправочникСсылка.Пользователь - пользователь, которого необходимо
//                       добавить в группу.
//  ТипПользователя    - Строка - ВнешнийПользователь или Пользователь.
//
Процедура УдалитьПользователяИзГруппы(ГруппаВладелец, ПользовательСсылка, ТипПользователя) Экспорт
	НачатьТранзакцию();
	Попытка
		ГруппаВладелецОбъект = ГруппаВладелец.ПолучитьОбъект();
		Если ГруппаВладелецОбъект.Состав.Количество() <> 0 Тогда
			ГруппаВладелецОбъект.Состав.Удалить(ГруппаВладелецОбъект.Состав.Найти(ПользовательСсылка, ТипПользователя));
			ГруппаВладелецОбъект.Записать();
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

// Формирует сообщение о результатах переноса пользователя.
//
// Параметры:
//  МассивПользователей - Массив - пользователи, которых нужно перенести в новую группу.
//  ГруппаПриемник      - СправочникСсылка.ГруппыПользователей - группа, в которую переносятся
//                        пользователи.
//  Перемещение         - Булево - если Истина, то пользователь удаляется из старой группы.
//  МассивНеПеремещенныхПользователей - Массив - пользователи, которых не удалось переместить в группу.
//  ГруппаИсточник      - СправочникСсылка.ГруппыПользователей - группа, из которой происходит
//                        перенос пользователей.
//
// ВозвращаемоеЗначение:
//  Строка - Сообщение пользователю.
//
Функция ФормированиеСообщенияПользователю(МассивПользователей, ГруппаПриемник, Перемещение, МассивНеПеремещенныхПользователей, ГруппаИсточник = Неопределено) Экспорт
	КоличествоПользователей					= МассивПользователей.Количество();
	НаименованиеГруппы						= БазоваяПодсистемаСервер.ЗначениеРеквизитаОбъекта(ГруппаПриемник, "Наименование");
	СообщениеПользователю					= Неопределено;
	КоличествоНеПеремещенныхПользователей	= МассивНеПеремещенныхПользователей.Количество();

	УведомлениеПользователя = Новый Структура;
	УведомлениеПользователя.Вставить("Сообщение");
	УведомлениеПользователя.Вставить("ЕстьОшибки");
	УведомлениеПользователя.Вставить("Пользователи");

	Если КоличествоНеПеремещенныхПользователей > 0 Тогда
		СвойстваГруппыПриемника					= БазоваяПодсистемаСервер.ЗначенияРеквизитовОбъекта(ГруппаПриемник, "Назначение, Наименование");

		НаименованиеГруппы						= СвойстваГруппыПриемника.Наименование;
		НазначениеГруппыВнешнихПользователей	= СвойстваГруппыПриемника.Назначение.Выгрузить();

		МассивПредставлений = Новый Массив;
		Для Каждого СтрокаНазначения Из НазначениеГруппыВнешнихПользователей Цикл
			МассивПредставлений.Добавить(НРег(Метаданные.НайтиПоТипу(ТипЗнч(СтрокаНазначения.ТипПользователей)).Синоним));
		КонецЦикла;

		ПредставлениеТипаОбъектаАвторизации = СтрСоединить(МассивПредставлений, ", ");

		Если КоличествоНеПеремещенныхПользователей = 1 Тогда
			СвойстваНеПеремещенногоПользователя	= БазоваяПодсистемаСервер.ЗначенияРеквизитовОбъекта(МассивНеПеремещенныхПользователей[0], "Наименование, ОбъектАвторизации");

			Предмет								= СвойстваНеПеремещенногоПользователя.Наименование;

			ТипВнешнегоПользователя				= ТипЗнч(СвойстваНеПеремещенногоПользователя.ОбъектАвторизации);
			ОписаниеТипаСсылки					= Новый ОписаниеТипов(БазоваяПодсистемаКлиентСервер.ЗначениеВМассиве(ТипВнешнегоПользователя));
			Значение							= ОписаниеТипаСсылки.ПривестиЗначение(Неопределено);

			Отбор								= Новый Структура("ТипПользователей", Значение);
			ТипПользователяСовпадаетСГруппой	= (НазначениеГруппыВнешнихПользователей.НайтиСтроки(Отбор).Количество() = 1);

			УведомлениеПользователя.Пользователи = Неопределено;

			Если ТипПользователяСовпадаетСГруппой Тогда
				СообщениеПользователю = СтрШаблон("Пользователь ""%1"" не может быть включен в группу ""%2"",
					           |т.к. у группы стоит признак ""Все пользователи заданного типа"".",
					Предмет, НаименованиеГруппы) + Символы.ПС;
			Иначе
				СообщениеПользователю = СтрШаблон("Пользователь ""%1"" не может быть включен в группу ""%2"",
					           |т.к. в состав ее участников входят только %3.",
					Предмет, НаименованиеГруппы, ПредставлениеТипаОбъектаАвторизации) + Символы.ПС;
			КонецЕсли;
		Иначе
			УведомлениеПользователя.Пользователи = СтрСоединить(МассивНеПеремещенныхПользователей, Символы.ПС);

			СообщениеПользователю = СтрШаблон("Не все пользователи могут быть включены в группу ""%1"",
				           |т.к. в состав ее участников входят только %2
				           |или у группы стоит признак ""Все пользователи заданного типа"".",
				НаименованиеГруппы,
				ПредставлениеТипаОбъектаАвторизации);
		КонецЕсли;

		УведомлениеПользователя.Сообщение	= СообщениеПользователю;
		УведомлениеПользователя.ЕстьОшибки	= Истина;

		Возврат УведомлениеПользователя;
	КонецЕсли;

	Если КоличествоПользователей = 1 Тогда
		СтрокаОбъект	= БазоваяПодсистемаСервер.ЗначениеРеквизитаОбъекта(МассивПользователей[0], "Наименование");

		Если ГруппаПриемник = Справочники.ГруппыПользователей.ВсеПользователи
		 Или ГруппаПриемник = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи Тогда

			СтрокаДействие		= "исключен из группы";
			НаименованиеГруппы	= БазоваяПодсистемаСервер.ЗначениеРеквизитаОбъекта(ГруппаИсточник, "Наименование");
		ИначеЕсли Перемещение Тогда
			СтрокаДействие = "перемещен в группу";
		Иначе
			СтрокаДействие = "включен в группу";
		КонецЕсли;

		СообщениеПользователю = """%1"" %2 ""%3""";
	ИначеЕсли КоличествоПользователей > 1 Тогда
		СтрокаОбъект = СтрокаСЧислом("%1 пользователю;;%1 пользователям;%1 пользователям;%1 пользователям", КоличествоПользователей, ВидЧисловогоЗначения.Количественное);

		Если ГруппаПриемник = Справочники.ГруппыПользователей.ВсеПользователи Тогда
			СтрокаДействие		= "исключены из группы";
			НаименованиеГруппы	= БазоваяПодсистемаСервер.ЗначениеРеквизитаОбъекта(ГруппаИсточник, "Наименование");
		ИначеЕсли Перемещение Тогда
			СтрокаДействие		= "перемещены в группу";
		Иначе
			СтрокаДействие		= "включены в группу";
		КонецЕсли;
		СообщениеПользователю	= "%1 %2 ""%3""";
	КонецЕсли;

	Если СообщениеПользователю <> Неопределено Тогда
		СообщениеПользователю = СтрШаблон(СообщениеПользователю, СтрокаОбъект, СтрокаДействие, НаименованиеГруппы);
	КонецЕсли;

	УведомлениеПользователя.Сообщение	= СообщениеПользователю;
	УведомлениеПользователя.ЕстьОшибки	= Ложь;

	Возврат УведомлениеПользователя;
КонецФункции

Процедура ОбновитьНазначениеПриСозданииНаСервере(Форма, ДобавлятьПользователей = Истина, ТолькоВнешниеПользователи = Ложь) Экспорт
	Назначение = Форма.Объект.Назначение;

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей") Тогда
		Назначение.Очистить();
		НоваяСтрока											= Назначение.Добавить();
		Форма.Элементы.ВыбратьНазначение.Родитель.Видимость = Ложь;
		НоваяСтрока.ТипПользователей						= Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;

	Если ДобавлятьПользователей И Назначение.Количество() = 0 Тогда
		Если ТолькоВнешниеПользователи Тогда
			Для Каждого Тип Из Метаданные.ОпределяемыеТипы.ВнешнийПользователь.Тип.Типы() Цикл
				ОписаниеТипаСсылки	= Новый ОписаниеТипов(БазоваяПодсистемаКлиентСервер.ЗначениеВМассиве(Тип));
				Значение			= ОписаниеТипаСсылки.ПривестиЗначение(Неопределено);

				НоваяСтрока						= Назначение.Добавить();
				НоваяСтрока.ТипПользователей	= Значение;
			КонецЦикла;
		Иначе
			НоваяСтрока						= Назначение.Добавить();
			НоваяСтрока.ТипПользователей	= Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

	Если Назначение.Количество() <> 0 Тогда
		МассивПредставлений = Новый Массив;
		Индекс = Назначение.Количество() - 1;
		Пока Индекс >= 0 Цикл
			ТипПользователей = Назначение.Получить(Индекс).ТипПользователей;
			Если ТипПользователей = Неопределено Тогда
				Назначение.Удалить(Индекс);
			Иначе
				МассивПредставлений.Добавить(ТипПользователей.Метаданные().Синоним);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		Форма.Элементы.ВыбратьНазначение.Заголовок = СтрСоединить(МассивПредставлений, ", ");
	КонецЕсли;
КонецПроцедуры

Процедура НастроитьИнтерфейсРолейПриЧтенииНаСервере(Параметры)
	Форма    = Параметры.Форма;
	Элементы = Форма.Элементы;

	// Установка начальных значений перед загрузкой данных из настроек на сервере
	// для случая, когда данные еще не были записаны и не загружаются.
	Форма.ПоказатьПодсистемыРолей					= Ложь;
	Элементы.РолиПоказатьПодсистемыРолей.Пометка	= Ложь;

	// Для нового элемента показать все роли, для существующего - только выбранные роли.
	Если Элементы.Найти("РолиПоказатьТолькоВыбранныеРоли") <> Неопределено Тогда
		Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка = Параметры.ОсновнойПараметр;
	КонецЕсли;

	ОбновитьДеревоРолей(Параметры);
КонецПроцедуры

Процедура ОбновитьСоставРолей(Параметры)
	Роли                        = Параметры.Форма.Роли;
	ПоказатьТолькоВыбранныеРоли = Параметры.Форма.Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка;
	НазначениеРолей             = Параметры.НазначениеРолей;

	ВсеРоли         = ПользователиСерверПовтИсп.ВсеРоли().Массив;
	НедоступныеРоли = ПользователиСерверПовтИсп.НедоступныеРоли(НазначениеРолей);

	Если Параметры.ОсновнойПараметр = "ВключитьВсе" Тогда
		ИдентификаторСтроки = Неопределено;
		Добавить            = Истина;
	ИначеЕсли Параметры.ОсновнойПараметр = "ИсключитьВсе" Тогда
		ИдентификаторСтроки = Неопределено;
		Добавить            = Ложь;
	Иначе
		ИдентификаторСтроки = Параметры.Форма.Элементы.Роли.ТекущаяСтрока;
	КонецЕсли;

	Если ИдентификаторСтроки = Неопределено Тогда
		БылУстановленАдминистративныйДоступ = Параметры.КоллекцияРолей.НайтиСтроки(Новый Структура("Роль", "ПолныеПрава")).Количество() > 0;

		// Обработка всех.
		КоллекцияРолей = Параметры.КоллекцияРолей;
		КоллекцияРолей.Очистить();
		Если Добавить Тогда
			Для Каждого ИмяРоли Из ВсеРоли Цикл
				Если ИмяРоли = "ПолныеПрава"
				 Или ИмяРоли = "АдминистраторСистемы"
				 Или НедоступныеРоли.Получить(ИмяРоли) <> Неопределено
				 Или ВРег(Лев(ИмяРоли, СтрДлина("Удалить"))) = ВРег("Удалить") Тогда

					Продолжить;
				КонецЕсли;
				КоллекцияРолей.Добавить().Роль = ИмяРоли;
			КонецЦикла;
		КонецЕсли;

		Если Параметры.Свойство("ЗапретИзмененияАдминистративногоДоступа")
			И Параметры.ЗапретИзмененияАдминистративногоДоступа Тогда

			УстановленАдминистративныйДоступ = Параметры.КоллекцияРолей.НайтиСтроки(Новый Структура("Роль", "ПолныеПрава")).Количество() > 0;

			Если УстановленАдминистративныйДоступ И НЕ БылУстановленАдминистративныйДоступ Тогда
				Отбор = Новый Структура("Роль", "ПолныеПрава");
				Параметры.КоллекцияРолей.НайтиСтроки(Отбор).Удалить(0);
			ИначеЕсли БылУстановленАдминистративныйДоступ И НЕ УстановленАдминистративныйДоступ Тогда
				КоллекцияРолей.Добавить().Роль = "ПолныеПрава";
			КонецЕсли;
		КонецЕсли;

		Если ПоказатьТолькоВыбранныеРоли Тогда
			Если КоллекцияРолей.Количество() > 0 Тогда
				ОбновитьДеревоРолей(Параметры);
			Иначе
				Роли.ПолучитьЭлементы().Очистить();
			КонецЕсли;

			Возврат;
		КонецЕсли;
	Иначе
		ТекущиеДанные = Роли.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТекущиеДанные.ЭтоРоль Тогда
			ДобавитьУдалитьРоль(Параметры, ТекущиеДанные.Имя, ТекущиеДанные.Пометка);
		Иначе
			ДобавитьУдалитьРолиПодсистемы(Параметры, ТекущиеДанные.ПолучитьЭлементы(), ТекущиеДанные.Пометка);
		КонецЕсли;
	КонецЕсли;

	ОбновитьПометкуВыбранныхРолей(Параметры, Роли.ПолучитьЭлементы());

	Модифицированность = Истина;
КонецПроцедуры

Процедура ДобавитьУдалитьРоль(Параметры, Знач Роль, Знач Добавить)
	НайденныеРоли = Параметры.КоллекцияРолей.НайтиСтроки(Новый Структура("Роль", Роль));

	Если Добавить Тогда
		Если НайденныеРоли.Количество() = 0 Тогда
			Параметры.КоллекцияРолей.Добавить().Роль = Роль;
		КонецЕсли;
	Иначе
		Если НайденныеРоли.Количество() > 0 Тогда
			Параметры.КоллекцияРолей.Удалить(НайденныеРоли[0]);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьУдалитьРолиПодсистемы(Параметры, Знач Коллекция, Знач Добавить)
	Для каждого Строка Из Коллекция Цикл
		Если Строка.ЭтоРоль Тогда
			ДобавитьУдалитьРоль(Параметры, Строка.Имя, Добавить);
		Иначе
			ДобавитьУдалитьРолиПодсистемы(Параметры, Строка.ПолучитьЭлементы(), Добавить);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьПометкуВыбранныхРолей(Параметры, Знач Коллекция)
	ПоказатьТолькоВыбранныеРоли = Параметры.Форма.Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка;

	Индекс = Коллекция.Количество()-1;

	Пока Индекс >= 0 Цикл
		Строка = Коллекция[Индекс];
		Если Строка.ЭтоРоль Тогда
			Отбор = Новый Структура("Роль", Строка.Имя);
			Строка.Пометка = Параметры.КоллекцияРолей.НайтиСтроки(Отбор).Количество() > 0;
			Если ПоказатьТолькоВыбранныеРоли И НЕ Строка.Пометка Тогда
				Коллекция.Удалить(Индекс);
			КонецЕсли;
		Иначе
			ОбновитьПометкуВыбранныхРолей(Параметры, Строка.ПолучитьЭлементы());
			Если Строка.ПолучитьЭлементы().Количество() = 0 Тогда
				Коллекция.Удалить(Индекс);
			Иначе
				Строка.Пометка = Истина;
				Для каждого Элемент Из Строка.ПолучитьЭлементы() Цикл
					Если НЕ Элемент.Пометка Тогда
						Строка.Пометка = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		Индекс = Индекс-1;
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьДеревоРолей(Параметры)
	Форма           = Параметры.Форма;
	Элементы        = Форма.Элементы;
	Роли            = Форма.Роли;
	КоллекцияРолей  = Параметры.КоллекцияРолей;
	НазначениеРолей = Параметры.НазначениеРолей;

	СкрытьРольПолныеПрава = Параметры.Свойство("СкрытьРольПолныеПрава")
	                      И Параметры.СкрытьРольПолныеПрава = Истина;

	Если Элементы.Найти("РолиПоказатьТолькоВыбранныеРоли") <> Неопределено Тогда
		Если НЕ Элементы.РолиПоказатьТолькоВыбранныеРоли.Доступность Тогда
			Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка = Истина;
		КонецЕсли;
		ПоказатьТолькоВыбранныеРоли = Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка;
	Иначе
		ПоказатьТолькоВыбранныеРоли = Истина;
	КонецЕсли;

	ПоказатьПодсистемыРолей = Параметры.Форма.ПоказатьПодсистемыРолей;

	// Запоминание текущей строки.
	ТекущаяПодсистема = "";
	ТекущаяРоль       = "";

	Если Элементы.Роли.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = Роли.НайтиПоИдентификатору(Элементы.Роли.ТекущаяСтрока);

		Если ТекущиеДанные = Неопределено Тогда
			Элементы.Роли.ТекущаяСтрока = Неопределено;

		ИначеЕсли ТекущиеДанные.ЭтоРоль Тогда
			ТекущаяРоль       = ТекущиеДанные.Имя;
			ТекущаяПодсистема = ?(ТекущиеДанные.ПолучитьРодителя() = Неопределено, "",ТекущиеДанные.ПолучитьРодителя().Имя);
		Иначе
			ТекущаяРоль       = "";
			ТекущаяПодсистема = ТекущиеДанные.Имя;
		КонецЕсли;
	КонецЕсли;

	ДеревоРолей = ПользователиСерверПовтИсп.ДеревоРолей(ПоказатьПодсистемыРолей, НазначениеРолей).Скопировать();

	ДеревоРолей.Колонки.Добавить("ЭтоНедоступнаяРоль",    Новый ОписаниеТипов("Булево"));
	ДеревоРолей.Колонки.Добавить("ЭтоНесуществующаяРоль", Новый ОписаниеТипов("Булево"));
	ДобавитьИменаНесуществующихИНедоступныхРолей(Параметры, ДеревоРолей);

	ДеревоРолей.Колонки.Добавить("Пометка",       Новый ОписаниеТипов("Булево"));
	ДеревоРолей.Колонки.Добавить("НомерКартинки", Новый ОписаниеТипов("Число"));
	ПодготовитьДеревоРолей(ДеревоРолей.Строки, СкрытьРольПолныеПрава, ПоказатьТолькоВыбранныеРоли, Параметры.КоллекцияРолей);

	Параметры.Форма.ЗначениеВРеквизитФормы(ДеревоРолей, "Роли");

	Элементы.Роли.Отображение = ?(ДеревоРолей.Строки.Найти(Ложь, "ЭтоРоль") = Неопределено, ОтображениеТаблицы.Список, ОтображениеТаблицы.Дерево);

	// Восстановление текущей строки.
	Отбор = Новый Структура("ЭтоРоль, Имя", Ложь, ТекущаяПодсистема);
	НайденныеСтроки = ДеревоРолей.Строки.НайтиСтроки(Отбор, Истина);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		ОписаниеПодсистемы = НайденныеСтроки[0];

		ИндексПодсистемы = ?(ОписаниеПодсистемы.Родитель = Неопределено, ДеревоРолей.Строки, ОписаниеПодсистемы.Родитель.Строки).Индекс(ОписаниеПодсистемы);

		СтрокаПодсистемы = ДанныеФормыКоллекцияЭлементовДерева(Роли, ОписаниеПодсистемы).Получить(ИндексПодсистемы);

		Если ЗначениеЗаполнено(ТекущаяРоль) Тогда
			Отбор = Новый Структура("ЭтоРоль, Имя", Истина, ТекущаяРоль);
			НайденныеСтроки = ОписаниеПодсистемы.Строки.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() <> 0 Тогда
				ОписаниеРоли = НайденныеСтроки[0];
				Элементы.Роли.ТекущаяСтрока = СтрокаПодсистемы.ПолучитьЭлементы().Получить(ОписаниеПодсистемы.Строки.Индекс(ОписаниеРоли)).ПолучитьИдентификатор();
			Иначе
				Элементы.Роли.ТекущаяСтрока = СтрокаПодсистемы.ПолучитьИдентификатор();
			КонецЕсли;
		Иначе
			Элементы.Роли.ТекущаяСтрока = СтрокаПодсистемы.ПолучитьИдентификатор();
		КонецЕсли;
	Иначе
		Отбор = Новый Структура("ЭтоРоль, Имя", Истина, ТекущаяРоль);
		НайденныеСтроки = ДеревоРолей.Строки.НайтиСтроки(Отбор, Истина);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			ОписаниеРоли = НайденныеСтроки[0];

			ИндексРоли = ?(ОписаниеРоли.Родитель = Неопределено, ДеревоРолей.Строки, ОписаниеРоли.Родитель.Строки).Индекс(ОписаниеРоли);

			СтрокаРоли = ДанныеФормыКоллекцияЭлементовДерева(Роли, ОписаниеРоли).Получить(ИндексРоли);
			Элементы.Роли.ТекущаяСтрока = СтрокаРоли.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПодготовитьДеревоРолей(Знач Коллекция, Знач СкрытьРольПолныеПрава, Знач ПоказатьТолькоВыбранныеРоли, КоллекцияРолей)
	Индекс = Коллекция.Количество()-1;

	Пока Индекс >= 0 Цикл
		Строка = Коллекция[Индекс];

		ПодготовитьДеревоРолей(Строка.Строки, СкрытьРольПолныеПрава, ПоказатьТолькоВыбранныеРоли, КоллекцияРолей);

		Если Строка.ЭтоРоль Тогда
			Если СкрытьРольПолныеПрава И (ВРег(Строка.Имя) = ВРег("ПолныеПрава") ИЛИ ВРег(Строка.Имя) = ВРег("АдминистраторСистемы")) Тогда
				Коллекция.Удалить(Индекс);
			Иначе
				Строка.НомерКартинки	= 7;
				Строка.Пометка			= КоллекцияРолей.НайтиСтроки(Новый Структура("Роль", Строка.Имя)).Количество() > 0;

				Если ПоказатьТолькоВыбранныеРоли И НЕ Строка.Пометка Тогда
					Коллекция.Удалить(Индекс);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Строка.Строки.Количество() = 0 Тогда
				Коллекция.Удалить(Индекс);
			Иначе
				Строка.НомерКартинки	= 6;
				Строка.Пометка			= Строка.Строки.НайтиСтроки(Новый Структура("Пометка", Ложь)).Количество() = 0;
			КонецЕсли;
		КонецЕсли;

		Индекс = Индекс-1;
	КонецЦикла;
КонецПроцедуры

Функция ДанныеФормыКоллекцияЭлементовДерева(Знач ДанныеФормыДерево, Знач СтрокаДереваЗначений)
	Если СтрокаДереваЗначений.Родитель = Неопределено Тогда
		ДанныеФормыКоллекцияЭлементовДерева	= ДанныеФормыДерево.ПолучитьЭлементы();
	Иначе
		ИндексРодителя						= ?(СтрокаДереваЗначений.Родитель.Родитель = Неопределено, СтрокаДереваЗначений.Владелец().Строки, СтрокаДереваЗначений.Родитель.Родитель.Строки).Индекс(СтрокаДереваЗначений.Родитель);

		ДанныеФормыКоллекцияЭлементовДерева	= ДанныеФормыКоллекцияЭлементовДерева(ДанныеФормыДерево, СтрокаДереваЗначений.Родитель).Получить(ИндексРодителя).ПолучитьЭлементы();
	КонецЕсли;

	Возврат ДанныеФормыКоллекцияЭлементовДерева;
КонецФункции

Процедура ДобавитьИменаНесуществующихИНедоступныхРолей(Параметры, ДеревоРолей)
	КоллекцияРолей	= Параметры.КоллекцияРолей;
	ВсеРоли			= ПользователиСерверПовтИсп.ВсеРоли().Соответствие;

	НедоступныеРоли    = Новый СписокЗначений;
	НесуществующиеРоли = Новый СписокЗначений;

	// Добавление несуществующих ролей.
	Для каждого Строка Из КоллекцияРолей Цикл
		Отбор = Новый Структура("ЭтоРоль, Имя", Истина, Строка.Роль);
		Если ДеревоРолей.Строки.НайтиСтроки(Отбор, Истина).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		Синоним = ВсеРоли.Получить(Строка.Роль);
		Если Синоним = Неопределено Тогда
			НесуществующиеРоли.Добавить(Строка.Роль, ?(Лев(Строка.Роль, 1) = "?", Строка.Роль, "? " + Строка.Роль));
		Иначе
			НедоступныеРоли.Добавить(Строка.Роль, Синоним);
		КонецЕсли;
	КонецЦикла;

	НедоступныеРоли.СортироватьПоПредставлению();
	Для Каждого ОписаниеРоли Из НедоступныеРоли Цикл
		Индекс							= НедоступныеРоли.Индекс(ОписаниеРоли);

		СтрокаДерева					= ДеревоРолей.Строки.Вставить(Индекс);
		СтрокаДерева.Имя				= ОписаниеРоли.Значение;
		СтрокаДерева.Синоним			= ОписаниеРоли.Представление;
		СтрокаДерева.ЭтоРоль			= Истина;
		СтрокаДерева.ЭтоНедоступнаяРоль	= Истина;
	КонецЦикла;

	НесуществующиеРоли.СортироватьПоПредставлению();
	Для Каждого ОписаниеРоли Из НесуществующиеРоли Цикл
		Индекс								= НесуществующиеРоли.Индекс(ОписаниеРоли);

		СтрокаДерева						= ДеревоРолей.Строки.Вставить(Индекс);
		СтрокаДерева.Имя					= ОписаниеРоли.Значение;
		СтрокаДерева.Синоним				= ОписаниеРоли.Представление;
		СтрокаДерева.ЭтоРоль				= Истина;
		СтрокаДерева.ЭтоНесуществующаяРоль	= Истина;
	КонецЦикла;
КонецПроцедуры

// Удаляет указанного пользователя информационной базы.
//
// Параметры:
//  ИмяИлиИдентификатор  - Строка, УникальныйИдентификатор - имя или идентификатор удаляемого пользователя ИБ.
//
Процедура УдалитьПользователяИБ(Знач ИмяИлиИдентификатор) Экспорт
	БазоваяПодсистемаКлиентСервер.ПроверитьПараметр("Пользователи.УдалитьПользователяИБ", "ИмяИлиИдентификатор", ИмяИлиИдентификатор, Новый ОписаниеТипов("Строка, УникальныйИдентификатор"));

	СвойстваУдаляемогоПользователяИБ = СвойстваПользователяИБ(ИмяИлиИдентификатор);
	Если СвойстваУдаляемогоПользователяИБ = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Пользователь информационной базы ""%1"" не существует.", ИмяИлиИдентификатор);
	КонецЕсли;
	ПользовательИБ = СвойстваУдаляемогоПользователяИБ.ПользовательИБ;

	Попытка
		ПользовательИБ.Удалить();
	Исключение
		ВызватьИсключение ОписаниеОшибкиПриЗаписиПользователяИБ(
			"Не удалось удалить пользователя информационной базы ""%1"" по причине:
			           |%2.",
			ПользовательИБ.Имя,
			ПользовательИБ.УникальныйИдентификатор,
			ИнформацияОбОшибке());
	КонецПопытки;
КонецПроцедуры

// Заполняет номера картинок пользователей, групп пользователей, внешних пользователей и групп внешних пользователей
// во всех или указанной (см. параметр ИдентификаторСтроки) строк коллекции ТаблицаИлиДерево.
//
// Параметры:
//  ТаблицаИлиДерево      - ДанныеФормыКоллекция, ДанныеФормыДерево - коллекция для заполнения.
//  ИмяПоляПользователь   - Строка - имя колонки в коллекции ТаблицаИлиДерево, содержащего ссылку на пользователя,
//                                   группу пользователей, внешнего пользователя или группу внешних пользователей.
//                                   По ее значению вычисляется номер картинки.
//  ИмяПоляНомераКартинки - Строка - имя колонки в коллекции ТаблицаИлиДерево с номером картинки,
//                                   которое требуется заполнить.
//  ИдентификаторСтроки  - Неопределено, Число - идентификатор строки (не порядковый номер), которую требуется
//                                   заполнить (у дерева также будут заполнены и дочерние строки);
//                                   если Неопределено, то картинки будут заполнены во всех строках.
//  ОбработатьИерархиюВторогоИТретьегоУровней - Булево - если Истина и в параметре ТаблицаИлиДерево указана
//                                 коллекция типа ДанныеФормыДерево, то
//                                 будут заполнены поля по четвертый уровень дерева включительно;
//                                 иначе будут заполнены поля только на первом и втором уровне дерева.
//
Процедура ЗаполнитьНомераКартинокПользователей(Знач ТаблицаИлиДерево, Знач ИмяПоляПользователь, Знач ИмяПоляНомераКартинки, Знач ИдентификаторСтроки = Неопределено, Знач ОбработатьИерархиюВторогоИТретьегоУровней = Ложь) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Если ИдентификаторСтроки = Неопределено Тогда
		МассивСтрок = Неопределено;
	ИначеЕсли ТипЗнч(ИдентификаторСтроки) = Тип("Массив") Тогда
		МассивСтрок = Новый Массив;
		Для каждого Идентификатор Из ИдентификаторСтроки Цикл
			МассивСтрок.Добавить(ТаблицаИлиДерево.НайтиПоИдентификатору(Идентификатор));
		КонецЦикла;
	Иначе
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(ТаблицаИлиДерево.НайтиПоИдентификатору(ИдентификаторСтроки));
	КонецЕсли;

	Если ТипЗнч(ТаблицаИлиДерево) = Тип("ДанныеФормыДерево") Тогда
		Если МассивСтрок = Неопределено Тогда
			МассивСтрок = ТаблицаИлиДерево.ПолучитьЭлементы();
		КонецЕсли;
		ТаблицаПользователей = Новый ТаблицаЗначений;
		ТаблицаПользователей.Колонки.Добавить(ИмяПоляПользователь, Метаданные.РегистрыСведений.СоставыГруппПользователей.Измерения.ГруппаПользователей.Тип);
		Для Каждого Строка Из МассивСтрок Цикл
			ТаблицаПользователей.Добавить()[ИмяПоляПользователь] = Строка[ИмяПоляПользователь];
			Если ОбработатьИерархиюВторогоИТретьегоУровней Тогда
				Для каждого Строка2 Из Строка.ПолучитьЭлементы() Цикл
					ТаблицаПользователей.Добавить()[ИмяПоляПользователь] = Строка2[ИмяПоляПользователь];
					Для каждого Строка3 Из Строка2.ПолучитьЭлементы() Цикл
						ТаблицаПользователей.Добавить()[ИмяПоляПользователь] = Строка3[ИмяПоляПользователь];
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ТаблицаИлиДерево) = Тип("ДанныеФормыКоллекция") Тогда
		Если МассивСтрок = Неопределено Тогда
			МассивСтрок = ТаблицаИлиДерево;
		КонецЕсли;
		ТаблицаПользователей = Новый ТаблицаЗначений;
		ТаблицаПользователей.Колонки.Добавить(ИмяПоляПользователь, Метаданные.РегистрыСведений.СоставыГруппПользователей.Измерения.ГруппаПользователей.Тип);
		Для Каждого Строка Из МассивСтрок Цикл
			ТаблицаПользователей.Добавить()[ИмяПоляПользователь] = Строка[ИмяПоляПользователь];
		КонецЦикла;
	ИначеЕсли ТипЗнч(ТаблицаИлиДерево) = Тип("Массив") Тогда
		МассивСтрок				= ТаблицаИлиДерево;
		ТаблицаПользователей	= Новый ТаблицаЗначений;
		ТаблицаПользователей.Колонки.Добавить(ИмяПоляПользователь, Метаданные.РегистрыСведений.СоставыГруппПользователей.Измерения.ГруппаПользователей.Тип);
		Для Каждого Строка Из ТаблицаИлиДерево Цикл
			ТаблицаПользователей.Добавить()[ИмяПоляПользователь] = Строка[ИмяПоляПользователь];
		КонецЦикла;
	Иначе
		Если МассивСтрок = Неопределено Тогда
			МассивСтрок = ТаблицаИлиДерево;
		КонецЕсли;
		ТаблицаПользователей = ТаблицаИлиДерево.Выгрузить(МассивСтрок, ИмяПоляПользователь);
	КонецЕсли;

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ РАЗЛИЧНЫЕ
	            	  |	Пользователи.ИмяПоляПользователь КАК Пользователь
	            	  |ПОМЕСТИТЬ Пользователи
	            	  |ИЗ
	            	  |	&Пользователи КАК Пользователи
	            	  |;
	            	  |
	            	  |////////////////////////////////////////////////////////////////////////////////
	            	  |ВЫБРАТЬ
	            	  |	Пользователи.Пользователь КАК Пользователь,
	            	  |	ВЫБОР
	            	  |		КОГДА Пользователи.Пользователь = НЕОПРЕДЕЛЕНО
	            	  |			ТОГДА -1
	            	  |		КОГДА ТИПЗНАЧЕНИЯ(Пользователи.Пользователь) = ТИП(Справочник.Пользователи)
	            	  |			ТОГДА ВЫБОР
	            	  |					КОГДА ВЫРАЗИТЬ(Пользователи.Пользователь КАК Справочник.Пользователи).ПометкаУдаления
	            	  |						ТОГДА 0
	            	  |					ИНАЧЕ 1
	            	  |				КОНЕЦ
	            	  |		КОГДА ТИПЗНАЧЕНИЯ(Пользователи.Пользователь) = ТИП(Справочник.ГруппыПользователей)
	            	  |			ТОГДА ВЫБОР
	            	  |					КОГДА ВЫРАЗИТЬ(Пользователи.Пользователь КАК Справочник.ГруппыПользователей).ПометкаУдаления
	            	  |						ТОГДА 2
	            	  |					ИНАЧЕ 3
	            	  |				КОНЕЦ
	            	  |		КОГДА ТИПЗНАЧЕНИЯ(Пользователи.Пользователь) = ТИП(Справочник.ВнешниеПользователи)
	            	  |			ТОГДА ВЫБОР
	            	  |					КОГДА ВЫРАЗИТЬ(Пользователи.Пользователь КАК Справочник.ВнешниеПользователи).ПометкаУдаления
	            	  |						ТОГДА 6
	            	  |					ИНАЧЕ 7
	            	  |				КОНЕЦ
	            	  |		КОГДА ТИПЗНАЧЕНИЯ(Пользователи.Пользователь) = ТИП(Справочник.ГруппыВнешнихПользователей)
	            	  |			ТОГДА ВЫБОР
	            	  |					КОГДА ВЫРАЗИТЬ(Пользователи.Пользователь КАК Справочник.ГруппыВнешнихПользователей).ПометкаУдаления
	            	  |						ТОГДА 8
	            	  |					ИНАЧЕ 9
	            	  |				КОНЕЦ
	            	  |		ИНАЧЕ -2
	            	  |	КОНЕЦ КАК НомерКартинки
	            	  |ИЗ
	            	  |	Пользователи КАК Пользователи";
	Запрос.Текст	= СтрЗаменить(Запрос.Текст, "ИмяПоляПользователь", ИмяПоляПользователь);
	Запрос.УстановитьПараметр("Пользователи", ТаблицаПользователей);

	НомераКартинок = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из МассивСтрок Цикл
		НайденнаяСтрока					= НомераКартинок.Найти(Строка[ИмяПоляПользователь], "Пользователь");
		Строка[ИмяПоляНомераКартинки]	= ?(НайденнаяСтрока = Неопределено, -2, НайденнаяСтрока.НомерКартинки);
		Если ОбработатьИерархиюВторогоИТретьегоУровней Тогда
			Для каждого Строка2 Из Строка.ПолучитьЭлементы() Цикл
				НайденнаяСтрока					= НомераКартинок.Найти(Строка2[ИмяПоляПользователь], "Пользователь");
				Строка2[ИмяПоляНомераКартинки]	= ?(НайденнаяСтрока = Неопределено, -2, НайденнаяСтрока.НомерКартинки);
				Для каждого Строка3 Из Строка2.ПолучитьЭлементы() Цикл
					НайденнаяСтрока					= НомераКартинок.Найти(Строка3[ИмяПоляПользователь], "Пользователь");
					Строка3[ИмяПоляНомераКартинки]	= ?(НайденнаяСтрока = Неопределено, -2, НайденнаяСтрока.НомерКартинки);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Нельзя вызвать из фоновых заданий с пустым пользователем.
Функция сТребуетсяСоздатьПервогоАдминистратора(Знач ОписаниеПользователяИБ, Текст = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();

	Если НЕ ЗначениеЗаполнено(ТекущийПользовательИБ.Имя) И ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 Тогда
		Если ТипЗнч(ОписаниеПользователяИБ) = Тип("Структура") Тогда
			// Проверка перед записью обычного пользователя или пользователя ИБ.
			Если ОписаниеПользователяИБ.Свойство("Роли") Тогда
				Роли = ОписаниеПользователяИБ.Роли;
			Иначе
				Роли = Новый Массив;
			КонецЕсли;

			Если ПользователиСерверПовтИсп.Настройки().РедактированиеРолей <> Истина ИЛИ Роли.Найти("ПолныеПрава") = Неопределено ИЛИ Роли.Найти("АдминистраторСистемы") = Неопределено Тогда
				// Подготовка текста вопроса при записи первого администратора.
				Текст = "В список пользователей программы добавляется первый пользователь, поэтому ему
					           |автоматически будут назначены роли ""Администратор системы"" и ""Полные права"".
					           |Продолжить?";

				Если ПользователиСерверПовтИсп.Настройки().РедактированиеРолей Тогда
					Возврат Истина;
				КонецЕсли;

				ИнтеграцияПодсистемСервер.ПриОпределенииТекстаВопросаПередЗаписьюПервогоАдминистратора(Текст);

				Возврат Истина;
			КонецЕсли;
		Иначе
			// Проверка перед записью внешнего пользователя.
			Текст = "Первый пользователь информационной базы должен иметь полные права.
			                   |Внешний пользователь не может быть полноправным.
			                   |Сначала создайте администратора в справочнике Пользователи.";
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

// Проверяет корректность заполнения структуры описания пользователя ИБ.
// В случае нахождения ошибок устанавливает параметр Отказ в Истина и
// отправляет сообщения об ошибках.
//
// Параметры:
//  ОписаниеПользователяИБ - Структура - описание пользователя ИБ
//                 заполнение которого требуется проверить.
//
//  Отказ        - Булево - флаг отказа от выполнения операции.
//                 Устанавливается в случае ошибки.
//
// Возвращаемое значение:
//  Булево - если Истина, ошибок не найдено.
//
Функция сПроверитьОписаниеПользователяИБ(Знач ОписаниеПользователяИБ, Отказ) Экспорт
	Если ОписаниеПользователяИБ.Свойство("Имя") Тогда
		Имя = ОписаниеПользователяИБ.Имя;

		Если ПустаяСтрока(Имя) Тогда
			// Хранилище настроек использует только первые 64 символа имени пользователя ИБ.
			БазоваяПодсистемаКлиентСервер.СообщитьПользователю(
				"Не заполнено Имя (для входа).",
				,
				"Имя",
				,
				Отказ);
		ИначеЕсли СтрДлина(Имя) > 64 Тогда
			// Аутентификация через web использует символ ":",
			// как разделитель имени и пароля пользователя.
			БазоваяПодсистемаКлиентСервер.СообщитьПользователю(
				"Имя (для входа) превышает 64 символа.",
				,
				"Имя",
				,
				Отказ);
		ИначеЕсли СтрНайти(Имя, ":") > 0 Тогда
			БазоваяПодсистемаКлиентСервер.СообщитьПользователю(
				"Имя (для входа) содержит запрещенный символ "":"".",
				,
				"Имя",
				,
				Отказ);
		Иначе
			УстановитьПривилегированныйРежим(Истина);
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Имя);
			УстановитьПривилегированныйРежим(Ложь);

			Если ПользовательИБ <> Неопределено
			   И ПользовательИБ.УникальныйИдентификатор <> ОписаниеПользователяИБ.ИдентификаторПользователяИБ Тогда

				НайденныйПользователь = Неопределено;
				ПользовательПоИдентификаторуСуществует(ПользовательИБ.УникальныйИдентификатор, , НайденныйПользователь);

				Если НайденныйПользователь = Неопределено ИЛИ НЕ ЭтоПолноправныйПользователь() Тогда
					ТекстОшибки = "Имя (для входа) уже занято.";
				Иначе
					ТекстОшибки = СтрШаблон("Имя (для входа) уже занято для пользователя ""%1"".", Строка(НайденныйПользователь));
				КонецЕсли;

				БазоваяПодсистемаКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Имя", , Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ОписаниеПользователяИБ.Свойство("ПользовательОС") Тогда
		Если Не ПустаяСтрока(ОписаниеПользователяИБ.ПользовательОС) И Не БазоваяПодсистемаСервер.ЭтоУчебнаяПлатформа() Тогда
			УстановитьПривилегированныйРежим(Истина);
			Попытка
				ПользовательИБ					= ПользователиИнформационнойБазы.СоздатьПользователя();
				ПользовательИБ.ПользовательОС	= ОписаниеПользователяИБ.ПользовательОС;
			Исключение
				БазоваяПодсистемаКлиентСервер.СообщитьПользователю(
					"Пользователь ОС должен быть в формате
					           |""\\ИмяДомена\ИмяПользователя"".",
					,
					"ПользовательОС",
					,
					Отказ);
			КонецПопытки;
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	КонецЕсли;

	Возврат НЕ Отказ;
КонецФункции

Процедура сОбработатьИнтерфейсРолей(Действие, Параметры) Экспорт
	Если Действие = "УстановитьТолькоПросмотрРолей" Тогда
		Элементы               = Параметры.Форма.Элементы;
		ТолькоПросмотрРолей    = Параметры.ОсновнойПараметр;

		Если ТолькоПросмотрРолей <> Неопределено Тогда
			Элементы.Роли.ТолькоПросмотр = ТолькоПросмотрРолей;

			Если Элементы.Найти("РолиУстановитьФлажки") <> Неопределено Тогда
				Элементы.РолиУстановитьФлажки.Доступность = НЕ ТолькоПросмотрРолей;
			КонецЕсли;
			Если Элементы.Найти("РолиСнятьФлажки") <> Неопределено Тогда
				Элементы.РолиСнятьФлажки.Доступность = НЕ ТолькоПросмотрРолей;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Действие = "НастроитьИнтерфейсРолейПриЗагрузкеНастроек" Тогда
		Настройки = Параметры.ОсновнойПараметр;
		Форма     = Параметры.Форма;
		Элементы  = Форма.Элементы;

		ПоказатьПодсистемыРолей = Форма.ПоказатьПодсистемыРолей;

		Если Настройки["ПоказатьПодсистемыРолей"] = Ложь Тогда
			Форма.ПоказатьПодсистемыРолей = Ложь;
			Элементы.РолиПоказатьПодсистемыРолей.Пометка = Ложь;
		Иначе
			Форма.ПоказатьПодсистемыРолей = Истина;
			Элементы.РолиПоказатьПодсистемыРолей.Пометка = Истина;
		КонецЕсли;

		Если ПоказатьПодсистемыРолей <> Форма.ПоказатьПодсистемыРолей Тогда
			ОбновитьДеревоРолей(Параметры);
		КонецЕсли
	ИначеЕсли Действие = "НастроитьИнтерфейсРолейПриСозданииФормы" Тогда
		Форма    = Параметры.Форма;
		Элементы = Форма.Элементы;

		// Условное оформление недоступных ролей.
		ЭлементУсловногоОформления				= Форма.УсловноеОформление.Элементы.Добавить();

		ЭлементЦветаОформления					= ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
		ЭлементЦветаОформления.Значение			= Метаданные.ЭлементыСтиля.ПоясняющийОшибкуТекст.Значение;
		ЭлементЦветаОформления.Использование	= Истина;

		ЭлементОтбораДанных						= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Роли.ЭтоНедоступнаяРоль");
		ЭлементОтбораДанных.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораДанных.ПравоеЗначение		= Истина;
		ЭлементОтбораДанных.Использование		= Истина;

		ЭлементОформляемогоПоля					= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ЭлементОформляемогоПоля.Поле			= Новый ПолеКомпоновкиДанных("Роли");
		ЭлементОформляемогоПоля.Использование	= Истина;

		// Условное оформление несуществующих ролей.
		ЭлементУсловногоОформления				= Форма.УсловноеОформление.Элементы.Добавить();

		ЭлементЦветаОформления					= ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
		ЭлементЦветаОформления.Значение			= Метаданные.ЭлементыСтиля.ТекстЗапрещеннойЯчейкиЦвет.Значение;
		ЭлементЦветаОформления.Использование	= Истина;

		ЭлементОтбораДанных						= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Роли.ЭтоНесуществующаяРоль");
		ЭлементОтбораДанных.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораДанных.ПравоеЗначение		= Истина;
		ЭлементОтбораДанных.Использование		= Истина;

		ЭлементОформляемогоПоля					= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ЭлементОформляемогоПоля.Поле			= Новый ПолеКомпоновкиДанных("Роли");
		ЭлементОформляемогоПоля.Использование	= Истина;

		НастроитьИнтерфейсРолейПриЧтенииНаСервере(Параметры);
	ИначеЕсли Действие = "НастроитьИнтерфейсРолейПриЧтенииНаСервере" Тогда
		НастроитьИнтерфейсРолейПриЧтенииНаСервере(Параметры);
	ИначеЕсли Действие = "ТолькоВыбранныеРоли" Тогда
		Параметры.Форма.Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка = НЕ Параметры.Форма.Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка;

		ОбновитьДеревоРолей(Параметры);
	ИначеЕсли Действие = "ГруппировкаПоПодсистемам" Тогда
		Параметры.Форма.ПоказатьПодсистемыРолей							= НЕ Параметры.Форма.ПоказатьПодсистемыРолей;
		Параметры.Форма.Элементы.РолиПоказатьПодсистемыРолей.Пометка	= Параметры.Форма.ПоказатьПодсистемыРолей;

		ОбновитьДеревоРолей(Параметры);
	ИначеЕсли Действие = "ОбновитьДеревоРолей" Тогда
		ОбновитьДеревоРолей(Параметры);
	ИначеЕсли Действие = "ОбновитьСоставРолей" Тогда
		ОбновитьСоставРолей(Параметры);
	ИначеЕсли Действие = "ЗаполнитьРоли" Тогда
		ПрочитанныеРоли = Параметры.ОсновнойПараметр;
		КоллекцияРолей  = Параметры.КоллекцияРолей;

		КоллекцияРолей.Очистить();
		ДобавленныеРоли = Новый Соответствие;

		Если ТипЗнч(ПрочитанныеРоли) = Тип("Массив") Тогда
			Для Каждого Роль Из ПрочитанныеРоли Цикл
				Если ДобавленныеРоли.Получить(Роль) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ДобавленныеРоли.Вставить(Роль, Истина);
				КоллекцияРолей.Добавить().Роль = Роль;
			КонецЦикла;
		Иначе
			ИдентификаторыРолей = Новый Массив;
			Для Каждого Строка Из ПрочитанныеРоли Цикл
				Если ТипЗнч(Строка.Роль) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных")
				 Или ТипЗнч(Строка.Роль) = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
					ИдентификаторыРолей.Добавить(Строка.Роль);
				КонецЕсли;
			КонецЦикла;
			ПрочитанныеРоли = Справочники.ИдентификаторыОбъектовМетаданных.ОбъектыМетаданныхПоИдентификаторам(ИдентификаторыРолей, Истина);

			Для Каждого ОписаниеРоли Из ПрочитанныеРоли Цикл
				Если ТипЗнч(ОписаниеРоли.Значение) <> Тип("ОбъектМетаданных") Тогда
					Роль = ОписаниеРоли.Ключ;
					ИмяРоли = БазоваяПодсистемаСервер.ЗначениеРеквизитаОбъекта(Роль, "Имя");
					ИмяРоли = ?(ИмяРоли = Неопределено, "(" + Роль.УникальныйИдентификатор() + ")", ИмяРоли);
					ИмяРоли = ?(Лев(ИмяРоли, 1) = "?", Сред(ИмяРоли, 2), ИмяРоли);
					КоллекцияРолей.Добавить().Роль = СокрЛП(ИмяРоли);
				Иначе
					КоллекцияРолей.Добавить().Роль = ОписаниеРоли.Значение.Имя;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		ОбновитьДеревоРолей(Параметры);
	Иначе
		ВызватьИсключение СтрШаблон("Ошибка в процедуре ПользователиСервер.сОбработатьИнтерфейсРолей()
			           |Неверное значение параметра Действие: ""%1"".",
			Действие);
	КонецЕсли;
КонецПроцедуры

// Обновляет список ролей пользователей информационной базы, которые соответствуют
// внешним пользователям. Состав ролей вычисляется исходя из вхождения внешних
// пользователей в группы внешних пользователей, кроме тех внешних пользователей,
// для которых роли установлены непосредственно.
//  Требуется только при разрешении редактирования ролей, например, если
// встроена подсистема Управление доступом, то эта процедура не требуется.
//
// Параметры:
//  МассивВнешнихПользователей - Неопределено - все внешние пользователи.
//                               СправочникСсылка.ГруппаВнешнихПользователей,
//                               Массив элементов СправочникСсылка.ВнешниеПользователи.
//
Процедура сОбновитьРолиВнешнихПользователей(Знач МассивВнешнихПользователей = Неопределено) Экспорт
	Если ПользователиСерверПовтИсп.Настройки().РедактированиеРолей <> Истина Тогда
		// Роли устанавливаются другим механизмом, например, механизмом подсистемы УправлениеДоступом.
		Возврат;
	КонецЕсли;

	Если ТипЗнч(МассивВнешнихПользователей) = Тип("Массив") И МассивВнешнихПользователей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	НачатьТранзакцию();
	Попытка
		Если ТипЗнч(МассивВнешнихПользователей) <> Тип("Массив") Тогда

			Если МассивВнешнихПользователей = Неопределено Тогда
				ГруппаВнешнихПользователей = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи;
			Иначе
				ГруппаВнешнихПользователей = МассивВнешнихПользователей;
			КонецЕсли;

			Запрос			= Новый Запрос;
			Запрос.Текст	= "ВЫБРАТЬ
			            	  |	СоставыГруппПользователей.Пользователь КАК Пользователь
			            	  |ИЗ
			            	  |	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
			            	  |ГДЕ
			            	  |	СоставыГруппПользователей.ГруппаПользователей = &ГруппаВнешнихПользователей";
			Запрос.УстановитьПараметр("ГруппаВнешнихПользователей", ГруппаВнешнихПользователей);

			МассивВнешнихПользователей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
		КонецЕсли;

		НайтиНеоднозначныхПользователейИБ(Неопределено);

		ИдентификаторыПользователейИБ = Новый Соответствие;

		Запрос			= Новый Запрос;
		Запрос.Текст	= "ВЫБРАТЬ
		            	  |	ВнешниеПользователи.Ссылка КАК ВнешнийПользователь,
		            	  |	ВнешниеПользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
		            	  |ИЗ
		            	  |	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		            	  |ГДЕ
		            	  |	ВнешниеПользователи.Ссылка В(&ВнешниеПользователи)
		            	  |	И НЕ ВнешниеПользователи.УстановитьРолиНепосредственно";
		Запрос.УстановитьПараметр("ВнешниеПользователи", МассивВнешнихПользователей);

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ИдентификаторыПользователейИБ.Вставить(Выборка.ВнешнийПользователь, Выборка.ИдентификаторПользователяИБ);
		КонецЦикла;

		// Подготовка таблицы старых ролей внешних пользователей.
		СтарыеРолиВнешнихПользователей = Новый ТаблицаЗначений;
		СтарыеРолиВнешнихПользователей.Колонки.Добавить("ВнешнийПользователь", Новый ОписаниеТипов("СправочникСсылка.ВнешниеПользователи"));
		СтарыеРолиВнешнихПользователей.Колонки.Добавить("Роль", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)));

		ТекущийНомер = МассивВнешнихПользователей.Количество() - 1;
		Пока ТекущийНомер >= 0 Цикл
			// Проверка необходимости обработки пользователя.
			ПользовательИБ = Неопределено;
			ИдентификаторПользователяИБ = ИдентификаторыПользователейИБ[МассивВнешнихПользователей[ТекущийНомер]];
			Если ИдентификаторПользователяИБ <> Неопределено Тогда

				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
			КонецЕсли;

			Если ПользовательИБ = Неопределено ИЛИ ПустаяСтрока(ПользовательИБ.Имя) Тогда
				МассивВнешнихПользователей.Удалить(ТекущийНомер);
			Иначе
				Для каждого Роль Из ПользовательИБ.Роли Цикл
					СтараяРольВнешнегоПользователя						= СтарыеРолиВнешнихПользователей.Добавить();
					СтараяРольВнешнегоПользователя.ВнешнийПользователь	= МассивВнешнихПользователей[ТекущийНомер];
					СтараяРольВнешнегоПользователя.Роль					= Роль.Имя;
				КонецЦикла;
			КонецЕсли;
			ТекущийНомер = ТекущийНомер - 1;
		КонецЦикла;

		// Подготовка списка ролей отсутствующих в метаданных и которые нужно переустановить.
		Запрос			= Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст	= "ВЫБРАТЬ
		            	  |	СтарыеРолиВнешнихПользователей.ВнешнийПользователь,
		            	  |	СтарыеРолиВнешнихПользователей.Роль
		            	  |ПОМЕСТИТЬ СтарыеРолиВнешнихПользователей
		            	  |ИЗ
		            	  |	&СтарыеРолиВнешнихПользователей КАК СтарыеРолиВнешнихПользователей
		            	  |;
		            	  |
		            	  |////////////////////////////////////////////////////////////////////////////////
		            	  |ВЫБРАТЬ
		            	  |	ВсеРоли.Имя
		            	  |ПОМЕСТИТЬ ВсеРоли
		            	  |ИЗ
		            	  |	&ВсеРоли КАК ВсеРоли
		            	  |;
		            	  |
		            	  |////////////////////////////////////////////////////////////////////////////////
		            	  |ВЫБРАТЬ РАЗЛИЧНЫЕ
		            	  |	СоставыГруппПользователей.ГруппаПользователей КАК ГруппаВнешнихПользователей,
		            	  |	СоставыГруппПользователей.Пользователь КАК ВнешнийПользователь,
		            	  |	Роли.Роль.Имя КАК Роль
		            	  |ПОМЕСТИТЬ ВсеНовыеРолиВнешнихПользователей
		            	  |ИЗ
		            	  |	Справочник.ГруппыВнешнихПользователей.Роли КАК Роли
		            	  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		            	  |		ПО (СоставыГруппПользователей.Пользователь В (&ВнешниеПользователи))
		            	  |			И (СоставыГруппПользователей.ГруппаПользователей = Роли.Ссылка)
		            	  |			И (&ИспользоватьВнешнихПользователей = ИСТИНА)
		            	  |;
		            	  |
		            	  |////////////////////////////////////////////////////////////////////////////////
		            	  |ВЫБРАТЬ РАЗЛИЧНЫЕ
		            	  |	ВсеНовыеРолиВнешнихПользователей.ВнешнийПользователь,
		            	  |	ВсеНовыеРолиВнешнихПользователей.Роль
		            	  |ПОМЕСТИТЬ НовыеРолиВнешнихПользователей
		            	  |ИЗ
		            	  |	ВсеНовыеРолиВнешнихПользователей КАК ВсеНовыеРолиВнешнихПользователей
		            	  |;
		            	  |
		            	  |////////////////////////////////////////////////////////////////////////////////
		            	  |ВЫБРАТЬ
		            	  |	СтарыеРолиВнешнихПользователей.ВнешнийПользователь
		            	  |ПОМЕСТИТЬ ИзмененныеВнешниеПользователи
		            	  |ИЗ
		            	  |	СтарыеРолиВнешнихПользователей КАК СтарыеРолиВнешнихПользователей
		            	  |		ЛЕВОЕ СОЕДИНЕНИЕ НовыеРолиВнешнихПользователей КАК НовыеРолиВнешнихПользователей
		            	  |		ПО (НовыеРолиВнешнихПользователей.ВнешнийПользователь = СтарыеРолиВнешнихПользователей.ВнешнийПользователь)
		            	  |			И (НовыеРолиВнешнихПользователей.Роль = СтарыеРолиВнешнихПользователей.Роль)
		            	  |ГДЕ
		            	  |	НовыеРолиВнешнихПользователей.Роль ЕСТЬ NULL
		            	  |
		            	  |ОБЪЕДИНИТЬ
		            	  |
		            	  |ВЫБРАТЬ
		            	  |	НовыеРолиВнешнихПользователей.ВнешнийПользователь
		            	  |ИЗ
		            	  |	НовыеРолиВнешнихПользователей КАК НовыеРолиВнешнихПользователей
		            	  |		ЛЕВОЕ СОЕДИНЕНИЕ СтарыеРолиВнешнихПользователей КАК СтарыеРолиВнешнихПользователей
		            	  |		ПО НовыеРолиВнешнихПользователей.ВнешнийПользователь = СтарыеРолиВнешнихПользователей.ВнешнийПользователь
		            	  |			И НовыеРолиВнешнихПользователей.Роль = СтарыеРолиВнешнихПользователей.Роль
		            	  |ГДЕ
		            	  |	СтарыеРолиВнешнихПользователей.Роль ЕСТЬ NULL
		            	  |;
		            	  |
		            	  |////////////////////////////////////////////////////////////////////////////////
		            	  |ВЫБРАТЬ
		            	  |	ВсеНовыеРолиВнешнихПользователей.ГруппаВнешнихПользователей,
		            	  |	ВсеНовыеРолиВнешнихПользователей.ВнешнийПользователь,
		            	  |	ВсеНовыеРолиВнешнихПользователей.Роль
		            	  |ИЗ
		            	  |	ВсеНовыеРолиВнешнихПользователей КАК ВсеНовыеРолиВнешнихПользователей
		            	  |ГДЕ
		            	  |	НЕ ИСТИНА В
		            	  |				(ВЫБРАТЬ ПЕРВЫЕ 1
		            	  |					ИСТИНА КАК ЗначениеИстина
		            	  |				ИЗ
		            	  |					ВсеРоли КАК ВсеРоли
		            	  |				ГДЕ
		            	  |					ВсеРоли.Имя = ВсеНовыеРолиВнешнихПользователей.Роль)";
		Запрос.УстановитьПараметр("ВнешниеПользователи", МассивВнешнихПользователей);
		Запрос.УстановитьПараметр("ВсеРоли", ПользователиСерверПовтИсп.ВсеРоли().Таблица);
		Запрос.УстановитьПараметр("СтарыеРолиВнешнихПользователей", СтарыеРолиВнешнихПользователей);
		Запрос.УстановитьПараметр("ИспользоватьВнешнихПользователей", ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей"));

		// Регистрация ошибок имен ролей в профилях групп доступа.
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = СтрШаблон("При обновлении ролей внешнего пользователя
				          |""%1""
				          |роль ""%2""
				          |группы внешних пользователей ""%3""
				          |не найдена в метаданных.",
				СокрЛП(Выборка.ВнешнийПользователь.Наименование),
				Выборка.Роль,
				Строка(Выборка.ГруппаВнешнихПользователей));

			ЗаписьЖурналаРегистрации("Пользователи.Роль не найдена в метаданных",
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстСообщения,
				РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецЦикла;

		// Обновление ролей пользователей ИБ.
		Запрос.Текст	= "ВЫБРАТЬ
		            	  |	ИзмененныеВнешниеПользователиИРоли.ВнешнийПользователь,
		            	  |	ИзмененныеВнешниеПользователиИРоли.Роль
		            	  |ИЗ
		            	  |	(ВЫБРАТЬ
		            	  |		НовыеРолиВнешнихПользователей.ВнешнийПользователь КАК ВнешнийПользователь,
		            	  |		НовыеРолиВнешнихПользователей.Роль КАК Роль
		            	  |	ИЗ
		            	  |		НовыеРолиВнешнихПользователей КАК НовыеРолиВнешнихПользователей
		            	  |	ГДЕ
		            	  |		НовыеРолиВнешнихПользователей.ВнешнийПользователь В
		            	  |				(ВЫБРАТЬ
		            	  |					ИзмененныеВнешниеПользователи.ВнешнийПользователь
		            	  |				ИЗ
		            	  |					ИзмененныеВнешниеПользователи КАК ИзмененныеВнешниеПользователи)
		            	  |
		            	  |	ОБЪЕДИНИТЬ ВСЕ
		            	  |
		            	  |	ВЫБРАТЬ
		            	  |		ВнешниеПользователи.Ссылка,
		            	  |		""""
		            	  |	ИЗ
		            	  |		Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		            	  |	ГДЕ
		            	  |		ВнешниеПользователи.Ссылка В
		            	  |				(ВЫБРАТЬ
		            	  |					ИзмененныеВнешниеПользователи.ВнешнийПользователь
		            	  |				ИЗ
		            	  |					ИзмененныеВнешниеПользователи КАК ИзмененныеВнешниеПользователи)) КАК ИзмененныеВнешниеПользователиИРоли
		            	  |
		            	  |УПОРЯДОЧИТЬ ПО
		            	  |	ИзмененныеВнешниеПользователиИРоли.ВнешнийПользователь,
		            	  |	ИзмененныеВнешниеПользователиИРоли.Роль";
		Выборка = Запрос.Выполнить().Выбрать();

		ПользовательИБ = Неопределено;
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Роль) Тогда
				ПользовательИБ.Роли.Добавить(Метаданные.Роли[Выборка.Роль]);
				Продолжить;
			КонецЕсли;
			Если ПользовательИБ <> Неопределено Тогда
				ПользовательИБ.Записать();
			КонецЕсли;

			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторыПользователейИБ[Выборка.ВнешнийПользователь]);

			ПользовательИБ.Роли.Очистить();
		КонецЦикла;
		Если ПользовательИБ <> Неопределено Тогда
			ПользовательИБ.Записать();
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Процедура сПрочитатьСведенияОПользователе(Форма) Экспорт
	Пользователь = Форма.Объект.Ссылка;

	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат;
	КонецЕсли;

	УровеньДоступа	= сУровеньДоступаКСвойствамПользователя(Форма.Объект);

	НаборЗаписей	= РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Прочитать();

	Форма.ПотребоватьСменуПароляПриВходе             = Ложь;
	Форма.СрокДействияНеОграничен                    = Ложь;
	Форма.СрокДействия                               = Неопределено;
	Форма.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода = 0;

	Если НаборЗаписей.Количество() > 0 Тогда
		Если УровеньДоступа.УправлениеСписком Или УровеньДоступа.ИзменениеТекущего Тогда
			ЗаполнитьЗначенияСвойств(Форма, НаборЗаписей[0],
				"ПотребоватьСменуПароляПриВходе,
				|СрокДействияНеОграничен,
				|СрокДействия,
				|ПросрочкаРаботыВПрограммеДоЗапрещенияВхода");
		Иначе
			Форма.ПотребоватьСменуПароляПриВходе = НаборЗаписей[0].ПотребоватьСменуПароляПриВходе;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура сЗаписатьСведенияОПользователе(Форма, ТекущийОбъект) Экспорт
	УровеньДоступа	= сУровеньДоступаКСвойствамПользователя(ТекущийОбъект);

	Пользователь	= ТекущийОбъект.Ссылка;

	Блокировка			= Новый БлокировкаДанных;
	ЭлементБлокировки	= Блокировка.Добавить("РегистрСведений.СведенияОПользователях");
	ЭлементБлокировки.УстановитьЗначение("Пользователь", Пользователь);
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			СведенияОПользователе				= НаборЗаписей.Добавить();
			СведенияОПользователе.Пользователь	= Пользователь;
		Иначе
			СведенияОПользователе				= НаборЗаписей[0];
		КонецЕсли;

		Если УровеньДоступа.НастройкиДляВхода Тогда
			ЗаполнитьЗначенияСвойств(СведенияОПользователе, Форма,
				"ПотребоватьСменуПароляПриВходе,
				|СрокДействияНеОграничен,
				|СрокДействия,
				|ПросрочкаРаботыВПрограммеДоЗапрещенияВхода");
		Иначе
			СведенияОПользователе.ПотребоватьСменуПароляПриВходе = Форма.ПотребоватьСменуПароляПриВходе;
		КонецЕсли;

		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Функция сХранимыеСвойстваПользователяИБ(ОписаниеПользователя, ВходВПрограммуРазрешен = Ложь) Экспорт
	Свойства = Новый Структура;
	Свойства.Вставить("ВходВПрограммуРазрешен",    Ложь);
	Свойства.Вставить("АутентификацияСтандартная", Ложь);
	Свойства.Вставить("АутентификацияOpenID",      Ложь);
	Свойства.Вставить("АутентификацияОС",          Ложь);

	Если ТипЗнч(ОписаниеПользователя) = Тип("СправочникСсылка.Пользователи")
	 Или ТипЗнч(ОписаниеПользователя) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда

		ХранилищеСвойств = БазоваяПодсистемаСервер.ЗначениеРеквизитаОбъекта(ОписаниеПользователя, "СвойстваПользователяИБ");
	Иначе
		ХранилищеСвойств = ОписаниеПользователя.СвойстваПользователяИБ;
	КонецЕсли;

	Если ТипЗнч(ХранилищеСвойств) <> Тип("ХранилищеЗначения") Тогда
		Возврат Свойства;
	КонецЕсли;

	СохраненныеСвойства = ХранилищеСвойств.Получить();

	Если ТипЗнч(СохраненныеСвойства) <> Тип("Структура") Тогда
		Возврат Свойства;
	КонецЕсли;

	Для каждого КлючИЗначение Из Свойства Цикл
		Если СохраненныеСвойства.Свойство(КлючИЗначение.Ключ) И ТипЗнч(СохраненныеСвойства[КлючИЗначение.Ключ]) = Тип("Булево") Тогда
			Свойства[КлючИЗначение.Ключ] = СохраненныеСвойства[КлючИЗначение.Ключ];
		КонецЕсли;
	КонецЦикла;

	Если Свойства.ВходВПрограммуРазрешен И Не ВходВПрограммуРазрешен Тогда
		Свойства.Вставить("АутентификацияСтандартная", Ложь);
		Свойства.Вставить("АутентификацияOpenID",      Ложь);
		Свойства.Вставить("АутентификацияОС",          Ложь);
	КонецЕсли;

	Возврат Свойства;
КонецФункции

// Возвращает текущий уровень доступа на изменение свойств пользователя ИБ.
//
// Параметры:
//  ОписаниеОбъекта - СправочникОбъект.Пользователи -
//                  - СправочникОбъект.ВнешниеПользователи -
//                  - ДанныеФормыСтруктура - созданная из объектов указанных выше.
//
//  ПараметрыОбработки - Неопределено - получить данные из описания объекта,
//                       иначе взять уже готовые данные из параметров обработки.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//   * АдминистраторСистемы       - Булево - любые действия с любым пользователем и его пользователем ИБ.
//   * ПолныеПрава                - Булево - то же, АдминистраторСистемы, исключая администраторов системы.
//   * УправлениеСписком          - Булево - добавление новых пользователей и изменение существующих:
//                                   - для пользователей, которым еще не разрешался вход в программу (новых),
//                                     можно настроить любые свойства, кроме включения входа в программу,
//                                   - для пользователей, которым уже разрешался вход в программу,
//                                     можно настроить любые свойства, кроме включения входа в программу
//                                     и настройки аутентификации (см. ниже).
//   * ИзменениеРазрешенияНаВход  - Булево - изменение флажка "Вход в программу разрешен".
//   * ОтключениеРазрешенияНаВход - Булево - снятие    флажка "Вход в программу разрешен".
//   * НастройкиДляВхода          - Булево - изменение свойств пользователя ИБ: Имя, ПользовательОС и
//                                    свойств элемента справочника АутентификацияOpenID, АутентификацияСтандартная,
//                                    АутентификацияОС и Роли (если нет запрета редактирования при внедрении).
//   * ИзменениеТекущего          - Булево - изменение свойств текущего пользователя Пароль и Язык.
//   * НетДоступа                 - Булево - нет ни одного из указанных выше уровней доступа.
//
Функция сУровеньДоступаКСвойствамПользователя(ОписаниеОбъекта, ПараметрыОбработки = Неопределено) Экспорт
	УровеньДоступа = Новый Структура;

	// Администратор системы (системные данные).
	УровеньДоступа.Вставить("АдминистраторСистемы", ЭтоПолноправныйПользователь(, Истина));

	// Полноправный пользователь (основных данные).
	УровеньДоступа.Вставить("ПолныеПрава", ЭтоПолноправныйПользователь());

	Если ТипЗнч(ОписаниеОбъекта.Ссылка) = Тип("СправочникСсылка.Пользователи") Тогда
		// Ответственный за список пользователей.
		УровеньДоступа.Вставить("УправлениеСписком",
			ПравоДоступа("Добавление", Метаданные.Справочники.Пользователи)
			И (УровеньДоступа.ПолныеПрава Или Не ЭтоПолноправныйПользователь(ОписаниеОбъекта.Ссылка)));
		// Пользователь текущего пользователя ИБ.
		УровеньДоступа.Вставить("ИзменениеТекущего",
			УровеньДоступа.ПолныеПрава
			Или ПравоДоступа("Изменение", Метаданные.Справочники.Пользователи) И ОписаниеОбъекта.Ссылка = ПользователиКлиентСервер.АвторизованныйПользователь());
	ИначеЕсли ТипЗнч(ОписаниеОбъекта.Ссылка) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		// Ответственный за список внешних пользователей.
		УровеньДоступа.Вставить("УправлениеСписком",
			ПравоДоступа("Добавление", Метаданные.Справочники.ВнешниеПользователи)
			И (УровеньДоступа.ПолныеПрава Или Не ЭтоПолноправныйПользователь(ОписаниеОбъекта.Ссылка)));
		// Внешний пользователь текущего пользователя ИБ.
		УровеньДоступа.Вставить("ИзменениеТекущего",
			УровеньДоступа.ПолныеПрава
			Или ПравоДоступа("Изменение", Метаданные.Справочники.ВнешниеПользователи) И ОписаниеОбъекта.Ссылка = ПользователиКлиентСервер.АвторизованныйПользователь());
	КонецЕсли;

	Если ПараметрыОбработки = Неопределено Тогда
		УстановитьПривилегированныйРежим(Истина);
		Если ЗначениеЗаполнено(ОписаниеОбъекта.ИдентификаторПользователяИБ) Тогда
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ОписаниеОбъекта.ИдентификаторПользователяИБ);
		Иначе
			ПользовательИБ = Неопределено;
		КонецЕсли;
		ПользовательБезНастроекДляВходаИлиПодготовлен = (ПользовательИБ = Неопределено) Или ОписаниеОбъекта.Подготовлен И Не ВходВПрограммуРазрешен(ПользовательИБ);

		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		ПользовательБезНастроекДляВходаИлиПодготовлен = Не ПараметрыОбработки.СтарыйПользовательИБСуществует
			Или ПараметрыОбработки.СтарыйПользователь.Подготовлен И Не ВходВПрограммуРазрешен(ПараметрыОбработки.ОписаниеСтарогоПользователяИБ);
	КонецЕсли;

	УровеньДоступа.Вставить("ИзменениеРазрешенияНаВход",
		    УровеньДоступа.АдминистраторСистемы
		Или УровеньДоступа.ПолныеПрава
		  И Не ЭтоПолноправныйПользователь(ОписаниеОбъекта.Ссылка, Истина));

	УровеньДоступа.Вставить("ОтключениеРазрешенияНаВход",
		    УровеньДоступа.АдминистраторСистемы
		Или УровеньДоступа.ПолныеПрава
		  И Не ЭтоПолноправныйПользователь(ОписаниеОбъекта.Ссылка, Истина)
		Или УровеньДоступа.УправлениеСписком);

	УровеньДоступа.Вставить("НастройкиДляВхода",
		    УровеньДоступа.АдминистраторСистемы
		Или УровеньДоступа.ПолныеПрава
		  И Не ЭтоПолноправныйПользователь(ОписаниеОбъекта.Ссылка, Истина)
		Или УровеньДоступа.УправлениеСписком
		  И ПользовательБезНастроекДляВходаИлиПодготовлен);

	УровеньДоступа.Вставить("НетДоступа",
		  НЕ УровеньДоступа.АдминистраторСистемы
		И НЕ УровеньДоступа.ПолныеПрава
		И НЕ УровеньДоступа.УправлениеСписком
		И НЕ УровеньДоступа.ИзменениеТекущего
		И НЕ УровеньДоступа.НастройкиДляВхода);

	Возврат УровеньДоступа;
КонецФункции

// Проверяет, что указанный пользователь имеем более высокий уровень доступа, чем текущий пользователь.
Функция сУровеньДоступаПользователяВыше(ОписаниеПользователя, ТекущийУровеньДоступа) Экспорт
	Если ТипЗнч(ОписаниеПользователя) = Тип("СправочникСсылка.Пользователи") Или ТипЗнч(ОписаниеПользователя) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		Возврат ЭтоПолноправныйПользователь(ОписаниеПользователя, Истина, Ложь)
		      И Не ТекущийУровеньДоступа.АдминистраторСистемы
		    Или ЭтоПолноправныйПользователь(ОписаниеПользователя, Ложь, Ложь)
		      И Не ТекущийУровеньДоступа.ПолныеПрава;
	Иначе
		Возврат ОписаниеПользователя.Роли.Найти("АдминистраторСистемы") <> Неопределено
		      И Не ТекущийУровеньДоступа.АдминистраторСистемы
		    Или ОписаниеПользователя.Роли.Найти("ПолныеПрава") <> Неопределено
		      И Не ТекущийУровеньДоступа.ПолныеПрава;
	КонецЕсли;
КонецФункции

// Вызывается при записи пользователя или внешнего пользователя, проверят срок действия.
Процедура сВключитьЗаданиеКонтрольАктивностиПользователейПриНеобходимости(Пользователь) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Если Не ПользователиСерверПовтИсп.Настройки().ОбщиеНастройкиВхода Тогда
		Возврат;
	КонецЕсли;

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ ПЕРВЫЕ 1
	            	  |	ИСТИНА КАК ЗначениеИстина
	            	  |ИЗ
	            	  |	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	            	  |ГДЕ
	            	  |	СведенияОПользователях.Пользователь В(&Пользователь)
	            	  |	И СведенияОПользователях.СрокДействия <> &ПустаяДата
	            	  |	И СведенияОПользователях.ДатаАвтоматическогоЗапрещенияВхода = &ПустаяДата";
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');

	Если Не Запрос.Выполнить().Пустой() Тогда
		БазоваяПодсистемаСервер.УстановитьИспользованиеПредопределенногоРегламентногоЗадания(Метаданные.РегламентныеЗадания.КонтрольАктивностиПользователей, Истина);
	КонецЕсли;
КонецПроцедуры

Процедура сПослеОбновленияСоставовГруппПользователей(УчастникиИзменений, ИзмененныеГруппы) Экспорт
	Если УчастникиИзменений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	УчастникиИзмененийМассив = Новый Массив;

	Для каждого КлючИЗначение Из УчастникиИзменений Цикл
		УчастникиИзмененийМассив.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;

	ИзмененныеГруппыМассив = Новый Массив;
	Для каждого КлючИЗначение Из ИзмененныеГруппы Цикл
		ИзмененныеГруппыМассив.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;

	ИнтеграцияПодсистемСервер.ПослеОбновленияСоставовГруппПользователей(УчастникиИзмененийМассив,ИзмененныеГруппыМассив);
КонецПроцедуры

Процедура сПослеОбновленияСоставовГруппВнешнихПользователей(УчастникиИзменений, ИзмененныеГруппы) Экспорт
	Если УчастникиИзменений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	УчастникиИзмененийМассив = Новый Массив;
	Для каждого КлючИЗначение Из УчастникиИзменений Цикл
		УчастникиИзмененийМассив.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;

	сОбновитьРолиВнешнихПользователей(УчастникиИзмененийМассив);

	ИзмененныеГруппыМассив = Новый Массив;
	Для каждого КлючИЗначение Из ИзмененныеГруппы Цикл
		ИзмененныеГруппыМассив.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;

	ИнтеграцияПодсистемСервер.ПослеОбновленияСоставовГруппПользователей(УчастникиИзмененийМассив, ИзмененныеГруппыМассив);
КонецПроцедуры

// Обновляет составы пользователей у групп пользователей с учетом иерархии
// в регистре сведений "Составы групп пользователей".
//  Данные регистра используются в форме списка и формы выбора пользователей.
//  Данные регистра могут быть использованы для повышения производительности запросов,
// т.к. не требуется работать с иерархией.
//
// Параметры:
//  ГруппаПользователей - СправочникСсылка.ГруппыПользователей.
//
//  Пользователь - Неопределено                                  - для всех пользователей.
//               - Массив значений СправочникСсылка.Пользователи - для указанных пользователей.
//               - СправочникСсылка.Пользователи                 - для указанного пользователя.
//
//  УчастникиИзменений - Неопределено - никаких действий.
//                     - Массив (возвращаемое значение) - заполняет массив пользователями
//                       для которых есть изменения.
//
//  ИзмененныеГруппы   - Неопределено - никаких действий.
//                     - Массив (возвращаемое значение) - заполняет массив группами пользователей
//                       для которых есть изменения.
//
Процедура сОбновитьСоставыГруппПользователей(Знач ГруппаПользователей, Знач Пользователь = Неопределено, Знач УчастникиИзменений = Неопределено, Знач ИзмененныеГруппы = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(ГруппаПользователей) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Пользователь) = Тип("Массив") И Пользователь.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если УчастникиИзменений = Неопределено Тогда
		ТекущиеУчастникиИзменений = Новый Соответствие;
	Иначе
		ТекущиеУчастникиИзменений = УчастникиИзменений;
	КонецЕсли;

	Если ИзмененныеГруппы = Неопределено Тогда
		ТекущиеИзмененныеГруппы = Новый Соответствие;
	Иначе
		ТекущиеИзмененныеГруппы = ИзмененныеГруппы;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	НачатьТранзакцию();
	Попытка
		Если ГруппаПользователей = Справочники.ГруппыПользователей.ВсеПользователи Тогда
			ОбновитьСоставГруппыВсеПользователи(Пользователь, , ТекущиеУчастникиИзменений, ТекущиеИзмененныеГруппы);
		Иначе
			ОбновитьСоставыИерархическихГруппПользователей(ГруппаПользователей, Пользователь, ТекущиеУчастникиИзменений, ТекущиеИзмененныеГруппы);
		КонецЕсли;

		Если УчастникиИзменений = Неопределено
		   И ИзмененныеГруппы   = Неопределено Тогда

			сПослеОбновленияСоставовГруппПользователей(ТекущиеУчастникиИзменений, ТекущиеИзмененныеГруппы);
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

// Обновляет составы внешних пользователей у групп внешних пользователей
// с учетом иерархии в регистре сведений "Составы групп пользователей".
//  Данные используются в форме списка и форме выбора внешних пользователей.
//  Данные могут быть использованы в целях для повышения производительности,
// так как не требуется работать с иерархией на языке запросов.
//
// Параметры:
//  ГруппаВнешнихПользователей - СправочникСсылка.ГруппыВнешнихПользователей
//                        Когда указана группа ВсеВнешниеПользователи обновляются также все
//                        автоматические группы внешних пользователей по типам объектов авторизации.
//
//  ВнешнийПользователь - Неопределено - для всех внешних пользователей.
//                      - Массив значений СправочникСсылка.ВнешниеПользователи - для указанных
//                          внешних пользователей.
//                      - СправочникСсылка.ВнешниеПользователи - для указанного внешнего пользователя.
//
//  УчастникиИзменений  - Неопределено - никаких действий.
//                      - Массив (возвращаемое значение) - заполняет массив внешними
//                        пользователями для которых есть изменения.
//
//  ИзмененныеГруппы   - Неопределено - никаких действий.
//                     - Массив (возвращаемое значение) - заполняет массив группами внешних
//                       пользователей для которых есть изменения.
//
Процедура сОбновитьСоставыГруппВнешнихПользователей(Знач ГруппаВнешнихПользователей, Знач ВнешнийПользователь = Неопределено, Знач УчастникиИзменений  = Неопределено, Знач ИзмененныеГруппы    = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(ГруппаВнешнихПользователей) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ВнешнийПользователь) = Тип("Массив") И ВнешнийПользователь.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если УчастникиИзменений = Неопределено Тогда
		ТекущиеУчастникиИзменений = Новый Соответствие;
	Иначе
		ТекущиеУчастникиИзменений = УчастникиИзменений;
	КонецЕсли;

	Если ИзмененныеГруппы = Неопределено Тогда
		ТекущиеИзмененныеГруппы = Новый Соответствие;
	Иначе
		ТекущиеИзмененныеГруппы = ИзмененныеГруппы;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	НачатьТранзакцию();
	Попытка
		Если ГруппаВнешнихПользователей = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи Тогда
			ОбновитьСоставГруппыВсеПользователи(ВнешнийПользователь, Истина, ТекущиеУчастникиИзменений, ТекущиеИзмененныеГруппы);

			ОбновитьСоставыГруппПоТипамОбъектовАвторизации(, ВнешнийПользователь, ТекущиеУчастникиИзменений, ТекущиеИзмененныеГруппы);
		Иначе
			ВсеОбъектыАвторизации = БазоваяПодсистемаСервер.ЗначениеРеквизитаОбъекта(ГруппаВнешнихПользователей, "ВсеОбъектыАвторизации");
			ВсеОбъектыАвторизации = ?(ВсеОбъектыАвторизации = Неопределено, Ложь, ВсеОбъектыАвторизации);

			Если ВсеОбъектыАвторизации Тогда
				ОбновитьСоставыГруппПоТипамОбъектовАвторизации(ГруппаВнешнихПользователей, ВнешнийПользователь, ТекущиеУчастникиИзменений, ТекущиеИзмененныеГруппы);
			Иначе
				ОбновитьСоставыИерархическихГруппПользователей(ГруппаВнешнихПользователей, ВнешнийПользователь, ТекущиеУчастникиИзменений, ТекущиеИзмененныеГруппы);
			КонецЕсли;
		КонецЕсли;

		Если УчастникиИзменений = Неопределено И ИзмененныеГруппы   = Неопределено Тогда
			сПослеОбновленияСоставовГруппВнешнихПользователей(ТекущиеУчастникиИзменений, ТекущиеИзмененныеГруппы);
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Процедура сОбновитьИспользуемостьСоставовГруппПользователей(Знач ПользовательИлиГруппа, Знач УчастникиИзменений, Знач ИзмененныеГруппы) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	СоставыГруппПользователей.ГруппаПользователей КАК ГруппаПользователей,
	            	  |	СоставыГруппПользователей.Пользователь КАК Пользователь,
	            	  |	ВЫБОР
	            	  |		КОГДА СоставыГруппПользователей.ГруппаПользователей.ПометкаУдаления
	            	  |			ТОГДА ЛОЖЬ
	            	  |		КОГДА СоставыГруппПользователей.Пользователь.ПометкаУдаления
	            	  |			ТОГДА ЛОЖЬ
	            	  |		КОГДА СоставыГруппПользователей.Пользователь.Недействителен
	            	  |			ТОГДА ЛОЖЬ
	            	  |		ИНАЧЕ ИСТИНА
	            	  |	КОНЕЦ КАК Используется
	            	  |ИЗ
	            	  |	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	            	  |ГДЕ
	            	  |	&Отбор
	            	  |	И ВЫБОР
	            	  |			КОГДА СоставыГруппПользователей.ГруппаПользователей.ПометкаУдаления
	            	  |				ТОГДА ЛОЖЬ
	            	  |			КОГДА СоставыГруппПользователей.Пользователь.ПометкаУдаления
	            	  |				ТОГДА ЛОЖЬ
	            	  |			КОГДА СоставыГруппПользователей.Пользователь.Недействителен
	            	  |				ТОГДА ЛОЖЬ
	            	  |			ИНАЧЕ ИСТИНА
	            	  |		КОНЕЦ <> СоставыГруппПользователей.Используется";
	Запрос.УстановитьПараметр("ПользовательИлиГруппа", ПользовательИлиГруппа);

	Если ТипЗнч(ПользовательИлиГруппа) = Тип("СправочникСсылка.Пользователи")
	 ИЛИ ТипЗнч(ПользовательИлиГруппа) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда

		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Отбор", "СоставыГруппПользователей.Пользователь = &ПользовательИлиГруппа");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Отбор", "СоставыГруппПользователей.ГруппаПользователей = &ПользовательИлиГруппа");
	КонецЕсли;

	НаборЗаписи	= РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
	Запись		= НаборЗаписи.Добавить();

	НачатьТранзакцию();
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл

			НаборЗаписи.Отбор.ГруппаПользователей.Установить(Выборка.ГруппаПользователей);
			НаборЗаписи.Отбор.Пользователь.Установить(Выборка.Пользователь);

			Запись.ГруппаПользователей = Выборка.ГруппаПользователей;
			Запись.Пользователь        = Выборка.Пользователь;
			Запись.Используется        = Выборка.Используется;

			НаборЗаписи.Записать();

			ИзмененныеГруппы.Вставить(Выборка.ГруппаПользователей);
			УчастникиИзменений.Вставить(Выборка.Пользователь);
		КонецЦикла;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Процедура сНачатьОбработкуПользователяИБ(ПользовательОбъект, ПараметрыОбработки, УдалениеПользователяИзСправочника = Ложь) Экспорт
	ПараметрыОбработки		= Новый Структура;
	ДополнительныеСвойства	= ПользовательОбъект.ДополнительныеСвойства;

	ПараметрыОбработки.Вставить("УдалениеПользователяИзСправочника", УдалениеПользователяИзСправочника);
	ПараметрыОбработки.Вставить("ТекстСообщенияНедостаточноПрав","Недостаточно прав для изменения пользователя информационной базы.");

	Если ДополнительныеСвойства.Свойство("ЗначениеКопирования")
	   И ЗначениеЗаполнено(ДополнительныеСвойства.ЗначениеКопирования)
	   И ТипЗнч(ДополнительныеСвойства.ЗначениеКопирования) = ТипЗнч(ПользовательОбъект.Ссылка) Тогда

		ПараметрыОбработки.Вставить("ЗначениеКопирования", ДополнительныеСвойства.ЗначениеКопирования);
	КонецЕсли;

	// Реквизиты справочника, которые устанавливаются автоматически (проверка неизменности).
	АвтоРеквизиты = Новый Структура;
	АвтоРеквизиты.Вставить("ИдентификаторПользователяИБ");
	АвтоРеквизиты.Вставить("СвойстваПользователяИБ");
	ПараметрыОбработки.Вставить("АвтоРеквизиты", АвтоРеквизиты);

	// Реквизиты справочника, которые не допускается изменять в подписках на события (проверка начальных значений).
	БлокируемыеРеквизиты = Новый Структура;
	БлокируемыеРеквизиты.Вставить("Служебный", Ложь); // Значение для внешнего пользователя.
	БлокируемыеРеквизиты.Вставить("ПометкаУдаления");
	БлокируемыеРеквизиты.Вставить("Недействителен");
	БлокируемыеРеквизиты.Вставить("Подготовлен");
	ПараметрыОбработки.Вставить("БлокируемыеРеквизиты", БлокируемыеРеквизиты);

	сЗапомнитьСвойстваПользователя(ПользовательОбъект, ПараметрыОбработки);

	УровеньДоступа = сУровеньДоступаКСвойствамПользователя(ПользовательОбъект, ПараметрыОбработки);
	ПараметрыОбработки.Вставить("УровеньДоступа", УровеньДоступа);

	Если ПараметрыОбработки.СтарыйПользователь.Подготовлен <> ПользовательОбъект.Подготовлен И Не УровеньДоступа.ИзменениеРазрешенияНаВход Тогда
		ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
	КонецЕсли;

	// Поддержка интерактивной пометки удаления и группового изменения реквизитов ПометкаУдаления, Недействителен.
	Если ПараметрыОбработки.СтарыйПользовательИБСуществует
	   И ВходВПрограммуРазрешен(ПараметрыОбработки.ОписаниеСтарогоПользователяИБ)
	   И Не ДополнительныеСвойства.Свойство("ОписаниеПользователяИБ")
	   И (ПараметрыОбработки.СтарыйПользователь.ПометкаУдаления = Ложь И ПользовательОбъект.ПометкаУдаления = Истина Или ПараметрыОбработки.СтарыйПользователь.Недействителен = Ложь И ПользовательОбъект.Недействителен  = Истина) Тогда

		ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", Новый Структура);
		ДополнительныеСвойства.ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		ДополнительныеСвойства.ОписаниеПользователяИБ.Вставить("ВходВПрограммуРазрешен", Ложь);
	КонецЕсли;

	// Поддержка обновления полного имени пользователя ИБ при изменении наименования.
	Если ПараметрыОбработки.СтарыйПользовательИБСуществует
	   И Не ДополнительныеСвойства.Свойство("ОписаниеПользователяИБ")
	   И ПараметрыОбработки.ОписаниеСтарогоПользователяИБ.ПолноеИмя <> ПользовательОбъект.Наименование Тогда

		ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", Новый Структура);
		ДополнительныеСвойства.ОписаниеПользователяИБ.Вставить("Действие", "Записать");
	КонецЕсли;

	Если НЕ ДополнительныеСвойства.Свойство("ОписаниеПользователяИБ") Тогда
		Если УровеньДоступа.УправлениеСписком
		   И Не ПараметрыОбработки.СтарыйПользовательИБСуществует
		   И ЗначениеЗаполнено(ПользовательОбъект.ИдентификаторПользователяИБ) Тогда
			// Очистка идентификатора пользователя ИБ.
			ПользовательОбъект.ИдентификаторПользователяИБ					= Неопределено;
			ПараметрыОбработки.АвтоРеквизиты.ИдентификаторПользователяИБ	= ПользовательОбъект.ИдентификаторПользователяИБ;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	ОписаниеПользователяИБ = ДополнительныеСвойства.ОписаниеПользователяИБ;

	Если НЕ ОписаниеПользователяИБ.Свойство("Действие") Тогда
		ВызватьИсключение СтрШаблон("Ошибка при записи пользователя ""%1"".
			           |В параметре ОписаниеПользователяИБ не указано свойство Действие.",
			ПользовательОбъект.Ссылка);
	КонецЕсли;

	Если ОписаниеПользователяИБ.Действие <> "Записать" И ОписаниеПользователяИБ.Действие <> "Удалить" Тогда
		ВызватьИсключение СтрШаблон("Ошибка при записи пользователя ""%1"".
			           |В параметре ОписаниеПользователяИБ указано
			           |неверное значение ""%2"" свойства Действие.",
			ПользовательОбъект.Ссылка,
			ОписаниеПользователяИБ.Действие);
	КонецЕсли;
	ПараметрыОбработки.Вставить("Действие", ОписаниеПользователяИБ.Действие);

	Если Не ПараметрыОбработки.Свойство("Действие") Тогда
		Возврат;
	КонецЕсли;

	Если УровеньДоступа.НетДоступа Тогда
		ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
	КонецЕсли;

	Если ОписаниеПользователяИБ.Действие = "Удалить" Тогда
		Если Не УровеньДоступа.ИзменениеРазрешенияНаВход Тогда
			ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
		КонецЕсли;
	ИначеЕсли Не УровеньДоступа.УправлениеСписком Тогда // Действие = "Записать"
		Если Не УровеньДоступа.ИзменениеТекущего Или Не ПараметрыОбработки.СтарыйПользовательИБТекущий Тогда
			ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
		КонецЕсли;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Если ОписаниеПользователяИБ.Действие = "Записать"
	   И ОписаниеПользователяИБ.Свойство("УникальныйИдентификатор")
	   И ЗначениеЗаполнено(ОписаниеПользователяИБ.УникальныйИдентификатор)
	   И ОписаниеПользователяИБ.УникальныйИдентификатор <> ПараметрыОбработки.СтарыйПользователь.ИдентификаторПользователяИБ Тогда

		ПараметрыОбработки.Вставить("УстановкаПользователяИБ");

		Если ПараметрыОбработки.СтарыйПользовательИБСуществует Тогда
			ВызватьИсключение СтрШаблон("Ошибка при записи пользователя ""%1"".
				           |Нельзя сопоставить пользователя ИБ с пользователем в справочнике,
				           |с которым уже сопоставлен другой пользователем ИБ.",
				ПользовательОбъект.Наименование);
		КонецЕсли;

		НайденныйПользователь = Неопределено;

		Если ПользовательПоИдентификаторуСуществует(ОписаниеПользователяИБ.УникальныйИдентификатор, ПользовательОбъект.Ссылка, НайденныйПользователь) Тогда
			ВызватьИсключение СтрШаблон("Ошибка при записи пользователя ""%1"".
				           |Нельзя сопоставить пользователя ИБ с этим пользователем в справочнике,
				           |так как он уже сопоставлен с другим пользователем в справочнике
				           |""%2"".",
				НайденныйПользователь,
				ПользовательОбъект.Наименование);
		КонецЕсли;

		Если Не УровеньДоступа.ПолныеПрава Тогда
			ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
		КонецЕсли;
	КонецЕсли;

	Если ОписаниеПользователяИБ.Действие = "Записать" Тогда
		// Проверка прав на изменение пользователей с широким доступом.
		Если ПараметрыОбработки.СтарыйПользовательИБСуществует И сУровеньДоступаПользователяВыше(ПараметрыОбработки.ОписаниеСтарогоПользователяИБ, УровеньДоступа) Тогда
			ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
		КонецЕсли;

		// Проверка попытки изменения недоступных свойств.
		Если Не УровеньДоступа.ПолныеПрава Тогда
			ДопустимыеСвойства = Новый Структура;
			ДопустимыеСвойства.Вставить("УникальныйИдентификатор"); // Проверено выше.

			Если УровеньДоступа.ИзменениеТекущего Тогда
				ДопустимыеСвойства.Вставить("Пароль");
				ДопустимыеСвойства.Вставить("Язык");
			КонецЕсли;

			Если УровеньДоступа.УправлениеСписком Тогда
				ДопустимыеСвойства.Вставить("ПолноеИмя");
				ДопустимыеСвойства.Вставить("ПоказыватьВСпискеВыбора");
				ДопустимыеСвойства.Вставить("ЗапрещеноИзменятьПароль");
				ДопустимыеСвойства.Вставить("Язык");
				ДопустимыеСвойства.Вставить("РежимЗапуска");
			КонецЕсли;

			Если УровеньДоступа.НастройкиДляВхода Тогда
				ДопустимыеСвойства.Вставить("Имя");
				ДопустимыеСвойства.Вставить("АутентификацияСтандартная");
				ДопустимыеСвойства.Вставить("Пароль");
				ДопустимыеСвойства.Вставить("АутентификацияОС");
				ДопустимыеСвойства.Вставить("ПользовательОС");
				ДопустимыеСвойства.Вставить("АутентификацияOpenID");
				ДопустимыеСвойства.Вставить("Роли");
			КонецЕсли;

			ВсеСвойства = НовоеОписаниеПользователяИБ();

			Для Каждого КлючИЗначение Из ОписаниеПользователяИБ Цикл
				Если ВсеСвойства.Свойство(КлючИЗначение.Ключ) И Не ДопустимыеСвойства.Свойство(КлючИЗначение.Ключ) Тогда
					ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		сЗаписатьПользователяИБ(ПользовательОбъект, ПараметрыОбработки);
	Иначе
		ОписаниеПользователяИБ = ПользовательОбъект.ДополнительныеСвойства.ОписаниеПользователяИБ;
		СтарыйПользователь     = ПараметрыОбработки.СтарыйПользователь;

		// Очистка идентификатора пользователя ИБ.
		ПользовательОбъект.ИдентификаторПользователяИБ = Неопределено;

		Если ПараметрыОбработки.СтарыйПользовательИБСуществует Тогда
			УстановитьПривилегированныйРежим(Истина);
			УдалитьПользователяИБ(СтарыйПользователь.ИдентификаторПользователяИБ);

			// Установка идентификатора удаляемого пользователя ИБ, как результата действия Удалить.
			ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор",	СтарыйПользователь.ИдентификаторПользователяИБ);
			ОписаниеПользователяИБ.Вставить("РезультатДействия",		"УдаленПользовательИБ");
		ИначеЕсли ЗначениеЗаполнено(СтарыйПользователь.ИдентификаторПользователяИБ) Тогда
			ОписаниеПользователяИБ.Вставить("РезультатДействия",		"ОчищеноСопоставлениеСНесуществующимПользователемИБ");
		Иначе
			ОписаниеПользователяИБ.Вставить("РезультатДействия",		"НеТребуетсяУдалениеПользовательИБ");
		КонецЕсли;
	КонецЕсли;

	// Обновление значения реквизита контролируемого при записи.
	ПараметрыОбработки.АвтоРеквизиты.ИдентификаторПользователяИБ	= ПользовательОбъект.ИдентификаторПользователяИБ;

	ОписаниеНовогоПользователяИБ									= СвойстваПользователяИБ(ПользовательОбъект.ИдентификаторПользователяИБ);
	Если ОписаниеНовогоПользователяИБ <> Неопределено Тогда
		ПараметрыОбработки.Вставить("НовыйПользовательИБСуществует",	Истина);
		ПараметрыОбработки.Вставить("ОписаниеНовогоПользователяИБ",		ОписаниеНовогоПользователяИБ);

		// Проверка прав на изменение пользователей с широким доступом.
		Если ПараметрыОбработки.СтарыйПользовательИБСуществует И сУровеньДоступаПользователяВыше(ПараметрыОбработки.ОписаниеНовогоПользователяИБ, УровеньДоступа) Тогда
			ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
		КонецЕсли;
	Иначе
		ПараметрыОбработки.Вставить("НовыйПользовательИБСуществует", Ложь);
	КонецЕсли;

	Если ПараметрыОбработки.Свойство("СозданиеАдминистратора") Тогда
		УстановитьПривилегированныйРежим(Истина);
		ИнтеграцияПодсистемСервер.ПриСозданииАдминистратора(СсылкаОбъекта(ПользовательОбъект), ПараметрыОбработки.СозданиеАдминистратора);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры

Процедура сЗавершитьОбработкуПользователяИБ(ПользовательОбъект, ПараметрыОбработки) Экспорт
	сПроверитьИзмененияРеквизитовПользователя(ПользовательОбъект, ПараметрыОбработки);

	Если НЕ ПараметрыОбработки.Свойство("Действие") Тогда
		Возврат;
	КонецЕсли;

	ОбновлятьРоли = Истина;

	Если ПараметрыОбработки.Свойство("УстановкаПользователяИБ") И ОбновлятьРоли Тогда
		ИнтеграцияПодсистемСервер.ПослеУстановкиПользователяИБ(ПользовательОбъект.Ссылка);
	КонецЕсли;

	Если ПараметрыОбработки.Действие = "Записать" И ВходВПрограммуРазрешен(ПараметрыОбработки.ОписаниеНовогоПользователяИБ) Тогда
		УстановитьПривилегированныйРежим(Истина);

		Блокировка			= Новый БлокировкаДанных;
		ЭлементБлокировки	= Блокировка.Добавить("РегистрСведений.СведенияОПользователях");
		ЭлементБлокировки.УстановитьЗначение("Пользователь", ПользовательОбъект.Ссылка);
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Пользователь.Установить(ПользовательОбъект.Ссылка);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей[0].ДатаАвтоматическогоЗапрещенияВхода = Неопределено;
				НаборЗаписей.Записать();
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();

			ВызватьИсключение;
		КонецПопытки;

		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;

	сСкопироватьНастройкиПользователяИБ(ПользовательОбъект, ПараметрыОбработки);
КонецПроцедуры

Процедура сЗаписатьПользователяИБ(ПользовательОбъект, ПараметрыОбработки)
	ДополнительныеСвойства = ПользовательОбъект.ДополнительныеСвойства;
	ОписаниеПользователяИБ = ДополнительныеСвойства.ОписаниеПользователяИБ;
	СтарыйПользователь     = ПараметрыОбработки.СтарыйПользователь;
	АвтоРеквизиты          = ПараметрыОбработки.АвтоРеквизиты;

	Если ОписаниеПользователяИБ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СоздатьНовогоПользователяИБ = Ложь;

	Если ОписаниеПользователяИБ.Свойство("УникальныйИдентификатор")
	   И ЗначениеЗаполнено(ОписаниеПользователяИБ.УникальныйИдентификатор)
	   И ОписаниеПользователяИБ.УникальныйИдентификатор <> ПараметрыОбработки.СтарыйПользователь.ИдентификаторПользователяИБ Тогда

		ИдентификаторПользователяИБ = ОписаниеПользователяИБ.УникальныйИдентификатор;
	ИначеЕсли ЗначениеЗаполнено(СтарыйПользователь.ИдентификаторПользователяИБ) Тогда
		ИдентификаторПользователяИБ = СтарыйПользователь.ИдентификаторПользователяИБ;
		СоздатьНовогоПользователяИБ = НЕ ПараметрыОбработки.СтарыйПользовательИБСуществует;
	Иначе
		ИдентификаторПользователяИБ = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		СоздатьНовогоПользователяИБ = Истина;
	КонецЕсли;

	// Заполнение автоматических свойств пользователя ИБ.
	ОписаниеПользователяИБ.Вставить("ПолноеИмя", ПользовательОбъект.Наименование);

	ХранимыеСвойства = сХранимыеСвойстваПользователяИБ(ПользовательОбъект);
	Если ПараметрыОбработки.СтарыйПользовательИБСуществует Тогда
		СтараяАутентификация = ПараметрыОбработки.ОписаниеСтарогоПользователяИБ;
		Если ВходВПрограммуРазрешен(СтараяАутентификация) Тогда
			ХранимыеСвойства.АутентификацияСтандартная	= СтараяАутентификация.АутентификацияСтандартная;
			ХранимыеСвойства.АутентификацияOpenID		= СтараяАутентификация.АутентификацияOpenID;
			ХранимыеСвойства.АутентификацияОС			= СтараяАутентификация.АутентификацияОС;
			ПользовательОбъект.СвойстваПользователяИБ	= Новый ХранилищеЗначения(ХранимыеСвойства);
			АвтоРеквизиты.СвойстваПользователяИБ		= ПользовательОбъект.СвойстваПользователяИБ;
		КонецЕсли;
	Иначе
		СтараяАутентификация = Новый Структура;
		СтараяАутентификация.Вставить("АутентификацияСтандартная", Ложь);
		СтараяАутентификация.Вставить("АутентификацияОС",          Ложь);
		СтараяАутентификация.Вставить("АутентификацияOpenID",      Ложь);
		ХранимыеСвойства.АутентификацияСтандартная	= Ложь;
		ХранимыеСвойства.АутентификацияOpenID		= Ложь;
		ХранимыеСвойства.АутентификацияОС			= Ложь;
		ПользовательОбъект.СвойстваПользователяИБ	= Новый ХранилищеЗначения(ХранимыеСвойства);
		АвтоРеквизиты.СвойстваПользователяИБ		= ПользовательОбъект.СвойстваПользователяИБ;
	КонецЕсли;

	Если ОписаниеПользователяИБ.Свойство("АутентификацияСтандартная") Тогда
		ХранимыеСвойства.АутентификацияСтандартная	= ОписаниеПользователяИБ.АутентификацияСтандартная;
		ПользовательОбъект.СвойстваПользователяИБ	= Новый ХранилищеЗначения(ХранимыеСвойства);
		АвтоРеквизиты.СвойстваПользователяИБ		= ПользовательОбъект.СвойстваПользователяИБ;
	КонецЕсли;

	Если ОписаниеПользователяИБ.Свойство("АутентификацияОС") Тогда
		ХранимыеСвойства.АутентификацияОС			= ОписаниеПользователяИБ.АутентификацияОС;
		ПользовательОбъект.СвойстваПользователяИБ	= Новый ХранилищеЗначения(ХранимыеСвойства);
		АвтоРеквизиты.СвойстваПользователяИБ		= ПользовательОбъект.СвойстваПользователяИБ;
	КонецЕсли;

	Если ОписаниеПользователяИБ.Свойство("АутентификацияOpenID") Тогда
		ХранимыеСвойства.АутентификацияOpenID = ОписаниеПользователяИБ.АутентификацияOpenID;
		ПользовательОбъект.СвойстваПользователяИБ = Новый ХранилищеЗначения(ХранимыеСвойства);
		АвтоРеквизиты.СвойстваПользователяИБ = ПользовательОбъект.СвойстваПользователяИБ;
	КонецЕсли;

	УстановитьХранимуюАутентификацию = Неопределено;
	Если ОписаниеПользователяИБ.Свойство("ВходВПрограммуРазрешен") Тогда
		УстановитьХранимуюАутентификацию = ОписаниеПользователяИБ.ВходВПрограммуРазрешен = Истина;
	ИначеЕсли ОписаниеПользователяИБ.Свойство("АутентификацияСтандартная")
	        И ОписаниеПользователяИБ.АутентификацияСтандартная = Истина
	      ИЛИ ОписаниеПользователяИБ.Свойство("АутентификацияОС")
	        И ОписаниеПользователяИБ.АутентификацияОС = Истина
	      ИЛИ ОписаниеПользователяИБ.Свойство("АутентификацияOpenID")
	        И ОписаниеПользователяИБ.АутентификацияOpenID = Истина Тогда

		УстановитьХранимуюАутентификацию = Истина;
	КонецЕсли;

	Если УстановитьХранимуюАутентификацию = Неопределено Тогда
		НоваяАутентификация = СтараяАутентификация;
	Иначе
		Если УстановитьХранимуюАутентификацию Тогда
			ОписаниеПользователяИБ.Вставить("АутентификацияСтандартная", ХранимыеСвойства.АутентификацияСтандартная);
			ОписаниеПользователяИБ.Вставить("АутентификацияOpenID",      ХранимыеСвойства.АутентификацияOpenID);
			ОписаниеПользователяИБ.Вставить("АутентификацияОС",          ХранимыеСвойства.АутентификацияОС);
		Иначе
			ОписаниеПользователяИБ.Вставить("АутентификацияСтандартная", Ложь);
			ОписаниеПользователяИБ.Вставить("АутентификацияОС",          Ложь);
			ОписаниеПользователяИБ.Вставить("АутентификацияOpenID",      Ложь);
		КонецЕсли;
		НоваяАутентификация = ОписаниеПользователяИБ;
	КонецЕсли;

	Если ХранимыеСвойства.ВходВПрограммуРазрешен <> ВходВПрограммуРазрешен(НоваяАутентификация) Тогда
		ХранимыеСвойства.ВходВПрограммуРазрешен		= ВходВПрограммуРазрешен(НоваяАутентификация);
		ПользовательОбъект.СвойстваПользователяИБ	= Новый ХранилищеЗначения(ХранимыеСвойства);
		АвтоРеквизиты.СвойстваПользователяИБ		= ПользовательОбъект.СвойстваПользователяИБ;
	КонецЕсли;

	// Проверка прав на изменение разрешения входа в программу.
	Если ВходВПрограммуРазрешен(НоваяАутентификация) <> ВходВПрограммуРазрешен(СтараяАутентификация) Тогда
		Если ВходВПрограммуРазрешен(НоваяАутентификация)
		   И Не ПараметрыОбработки.УровеньДоступа.ИзменениеРазрешенияНаВход
		 Или Не ВходВПрограммуРазрешен(НоваяАутентификация)
		   И Не ПараметрыОбработки.УровеньДоступа.ОтключениеРазрешенияНаВход Тогда

			ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
		КонецЕсли;
	КонецЕсли;

	Если ОписаниеПользователяИБ.Свойство("Пароль") И ОписаниеПользователяИБ.Пароль <> Неопределено Тогда
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("Пользователь", ПользовательОбъект);
		ПараметрыВыполнения.Вставить("НовыйПароль",  ОписаниеПользователяИБ.Пароль);
		ПараметрыВыполнения.Вставить("СтарыйПароль", Неопределено);

		ОписаниеПользователяИБ.Свойство("СтарыйПароль", ПараметрыВыполнения.СтарыйПароль);

		ТекстОшибки = ОбработатьНовыйПароль(ПараметрыВыполнения);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЕсли;

	// Попытка записи пользователя ИБ.
	УстановитьСвойстваПользователяИБ(ИдентификаторПользователяИБ, ОписаниеПользователяИБ, СоздатьНовогоПользователяИБ, ТипЗнч(ПользовательОбъект) = Тип("СправочникОбъект.ВнешниеПользователи"));
	ПользовательИБ = ОписаниеПользователяИБ.ПользовательИБ;

	Если ПользовательОбъект.ДополнительныеСвойства.Свойство("СозданиеАдминистратора")
	   И ЗначениеЗаполнено(ПользовательОбъект.ДополнительныеСвойства.СозданиеАдминистратора)
	   И РолиАдминистратораДоступны(ПользовательИБ) Тогда

		ПараметрыОбработки.Вставить("СозданиеАдминистратора", ПользовательОбъект.ДополнительныеСвойства.СозданиеАдминистратора);
	КонецЕсли;

	Если СоздатьНовогоПользователяИБ Тогда
		ОписаниеПользователяИБ.Вставить("РезультатДействия", "ДобавленПользовательИБ");
		ИдентификаторПользователяИБ = ОписаниеПользователяИБ.УникальныйИдентификатор;
		ПараметрыОбработки.Вставить("УстановкаПользователяИБ");

		Если Не ПараметрыОбработки.УровеньДоступа.ИзменениеРазрешенияНаВход
		   И ПараметрыОбработки.УровеньДоступа.УправлениеСписком
		   И Не ВходВПрограммуРазрешен(ПользовательИБ) Тогда

			ПользовательОбъект.Подготовлен = Истина;
			ПараметрыОбработки.БлокируемыеРеквизиты.Подготовлен = Истина;
		КонецЕсли;
	Иначе
		ОписаниеПользователяИБ.Вставить("РезультатДействия", "ИзмененПользовательИБ");

		Если ВходВПрограммуРазрешен(ПользовательИБ) Тогда
			ПользовательОбъект.Подготовлен						= Ложь;
			ПараметрыОбработки.БлокируемыеРеквизиты.Подготовлен = Ложь;
		КонецЕсли;
	КонецЕсли;

	ПользовательОбъект.ИдентификаторПользователяИБ = ИдентификаторПользователяИБ;

	ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор", ИдентификаторПользователяИБ);
КонецПроцедуры

Процедура сЗапомнитьСвойстваПользователя(ПользовательОбъект, ПараметрыОбработки)
	Поля = "Ссылка,
	|ИдентификаторПользователяИБ,
	|СвойстваПользователяИБ,
	|Подготовлен,
	|ПометкаУдаления,
	|Недействителен";

	Если ТипЗнч(ПользовательОбъект) = Тип("СправочникОбъект.Пользователи") Тогда
		Поля = Поля + ",
		|Служебный";
	КонецЕсли;

	СтарыйПользователь = БазоваяПодсистемаСервер.ЗначенияРеквизитовОбъекта(ПользовательОбъект.Ссылка, Поля);

	Если ТипЗнч(ПользовательОбъект) <> Тип("СправочникОбъект.Пользователи") Тогда
		СтарыйПользователь.Вставить("Служебный", Ложь);
	КонецЕсли;

	Если ПользовательОбъект.ЭтоНовый() Или ПользовательОбъект.Ссылка <> СтарыйПользователь.Ссылка Тогда
		СтарыйПользователь.ИдентификаторПользователяИБ	= Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		СтарыйПользователь.СвойстваПользователяИБ		= Новый ХранилищеЗначения(Неопределено);
		СтарыйПользователь.Подготовлен					= Ложь;
		СтарыйПользователь.ПометкаУдаления				= Ложь;
		СтарыйПользователь.Недействителен				= Ложь;
	КонецЕсли;
	ПараметрыОбработки.Вставить("СтарыйПользователь", СтарыйПользователь);

	// Свойства старого пользователя ИБ (если существует).
	УстановитьПривилегированныйРежим(Истина);

	ОписаниеСтарогоПользователяИБ = СвойстваПользователяИБ(СтарыйПользователь.ИдентификаторПользователяИБ);
	ПараметрыОбработки.Вставить("СтарыйПользовательИБСуществует", ОписаниеСтарогоПользователяИБ <> Неопределено);
	ПараметрыОбработки.Вставить("СтарыйПользовательИБТекущий", Ложь);

	Если ПараметрыОбработки.СтарыйПользовательИБСуществует Тогда
		ПараметрыОбработки.Вставить("ОписаниеСтарогоПользователяИБ", ОписаниеСтарогоПользователяИБ);

		Если ОписаниеСтарогоПользователяИБ.УникальныйИдентификатор = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор Тогда
			ПараметрыОбработки.Вставить("СтарыйПользовательИБТекущий", Истина);
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);

	// Начальное заполнение значений полей авто реквизитов значениями старого пользователя.
	ЗаполнитьЗначенияСвойств(ПараметрыОбработки.АвтоРеквизиты, СтарыйПользователь);

	// Начальное заполнение значений полей блокируемых реквизитов значениями нового пользователя.
	ЗаполнитьЗначенияСвойств(ПараметрыОбработки.БлокируемыеРеквизиты, ПользовательОбъект);
КонецПроцедуры

Процедура сПроверитьИзмененияРеквизитовПользователя(ПользовательОбъект, ПараметрыОбработки)
	СтарыйПользователь   = ПараметрыОбработки.СтарыйПользователь;
	АвтоРеквизиты        = ПараметрыОбработки.АвтоРеквизиты;
	БлокируемыеРеквизиты = ПараметрыОбработки.БлокируемыеРеквизиты;

	Если ТипЗнч(ПользовательОбъект) = Тип("СправочникОбъект.Пользователи") И БлокируемыеРеквизиты.Служебный <> ПользовательОбъект.Служебный Тогда
		ВызватьИсключение СтрШаблон("Ошибка при записи пользователя ""%1"".
			           |Реквизит Служебный не допускается изменять в подписках на события.",
			ПользовательОбъект.Ссылка);
	КонецЕсли;

	Если БлокируемыеРеквизиты.Подготовлен <> ПользовательОбъект.Подготовлен Тогда
		ВызватьИсключение СтрШаблон("Ошибка при записи пользователя ""%1"".
			           |Реквизит Подготовлен не допускается изменять в подписках на события.",
			ПользовательОбъект.Ссылка);
	КонецЕсли;

	Если АвтоРеквизиты.ИдентификаторПользователяИБ <> ПользовательОбъект.ИдентификаторПользователяИБ Тогда
		ВызватьИсключение СтрШаблон("Ошибка при записи пользователя ""%1"".
			           |Реквизит ИдентификаторПользователяИБ не допускается изменять.
			           |Обновление реквизита выполняется автоматически.",
			ПользовательОбъект.Ссылка);
	КонецЕсли;

	Если Не БазоваяПодсистемаСервер.ДанныеСовпадают(АвтоРеквизиты.СвойстваПользователяИБ, ПользовательОбъект.СвойстваПользователяИБ) Тогда
		ВызватьИсключение СтрШаблон("Ошибка при записи пользователя ""%1"".
			           |Реквизит СвойстваПользователяИБ не допускается изменять.
			           |Обновление реквизита выполняется автоматически.",
			ПользовательОбъект.Ссылка);
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Если СтарыйПользователь.ПометкаУдаления = Ложь
	   И ПользовательОбъект.ПометкаУдаления = Истина
	   И ВходВПрограммуРазрешен(ПользовательОбъект.ИдентификаторПользователяИБ) Тогда

		ВызватьИсключение СтрШаблон("Ошибка при записи пользователя ""%1"".
			           |Нельзя помечать на удаление пользователя, которому разрешен вход в программу.",
			ПользовательОбъект.Ссылка);
	КонецЕсли;

	Если СтарыйПользователь.Недействителен = Ложь
	   И ПользовательОбъект.Недействителен = Истина
	   И ВходВПрограммуРазрешен(ПользовательОбъект.ИдентификаторПользователяИБ) Тогда

		ВызватьИсключение СтрШаблон("Ошибка при записи пользователя ""%1"".
			           |Нельзя пометить недействительным пользователя, которому разрешен вход в программу.",
			ПользовательОбъект.Ссылка);
	КонецЕсли;

	Если СтарыйПользователь.Подготовлен = Ложь
	   И ПользовательОбъект.Подготовлен = Истина
	   И ВходВПрограммуРазрешен(ПользовательОбъект.ИдентификаторПользователяИБ) Тогда

		ВызватьИсключение СтрШаблон("Ошибка при записи пользователя ""%1"".
			           |Нельзя пометить подготовленным пользователя, которому разрешен вход в программу.",
			ПользовательОбъект.Ссылка);
	КонецЕсли;
КонецПроцедуры

Процедура сСкопироватьНастройкиПользователяИБ(ПользовательОбъект, ПараметрыОбработки)
	Если НЕ ПараметрыОбработки.Свойство("ЗначениеКопирования") ИЛИ НЕ ПараметрыОбработки.НовыйПользовательИБСуществует Тогда
		Возврат;
	КонецЕсли;

	ИмяНовогоПользователяИБ = ПараметрыОбработки.ОписаниеНовогоПользователяИБ.Имя;

	ИдентификаторКопируемогоПользователяИБ = БазоваяПодсистемаСервер.ЗначениеРеквизитаОбъекта(ПараметрыОбработки.ЗначениеКопирования, "ИдентификаторПользователяИБ");

	Если НЕ ЗначениеЗаполнено(ИдентификаторКопируемогоПользователяИБ) Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	ОписаниеКопируемогоПользователяИБ = СвойстваПользователяИБ(ИдентификаторКопируемогоПользователяИБ);
	Если ОписаниеКопируемогоПользователяИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);

	ИмяКопируемогоПользователяИБ = ОписаниеКопируемогоПользователяИБ.Имя;

	// Копирование настроек.
	СкопироватьНастройкиПользователя(ИмяКопируемогоПользователяИБ, ИмяНовогоПользователяИБ, Ложь);
КонецПроцедуры

// Перемещает пользователя из одной группы в другую.
//
// Параметры:
//  МассивПользователей - Массив - пользователи, которых нужно перенести в новую группу.
//  ГруппаИсточник      - СправочникСсылка.ГруппыПользователей - группа, из которой происходит
//                        перенос пользователей.
//  ГруппаПриемник      - СправочникСсылка.ГруппыПользователей - группа, в которую переносятся
//                        пользователи.
//  Перемещение         - Булево - если Истина, то пользователь удаляется из старой группы.
//
// ВозвращаемоеЗначение:
//  Строка - Сообщение о результате переноса.
//
Функция сПеремещениеПользователяВНовуюГруппу(МассивПользователей, ГруппаИсточник, ГруппаПриемник, Перемещение) Экспорт
	Если ГруппаПриемник = Неопределено Или ГруппаПриемник = ГруппаИсточник Тогда
		Возврат Неопределено;
	КонецЕсли;
	МассивПеремещенныхПользователей		= Новый Массив;
	МассивНеПеремещенныхПользователей	= Новый Массив;

	Для Каждого ПользовательСсылка Из МассивПользователей Цикл
		Если ТипЗнч(ПользовательСсылка) <> Тип("СправочникСсылка.Пользователи") И ТипЗнч(ПользовательСсылка) <> Тип("СправочникСсылка.ВнешниеПользователи") Тогда
			Продолжить;
		КонецЕсли;

		Если Не ВозможноПеремещениеПользователя(ГруппаПриемник, ПользовательСсылка) Тогда
			МассивНеПеремещенныхПользователей.Добавить(ПользовательСсылка);

			Продолжить;
		КонецЕсли;

		Если ТипЗнч(ПользовательСсылка) = Тип("СправочникСсылка.Пользователи") Тогда
			ИмяКолонкиСостава = "Пользователь";
		Иначе
			ИмяКолонкиСостава = "ВнешнийПользователь";
		КонецЕсли;

		// Если переносимый пользователь не входит в новую группу, то переносим.
		Если ГруппаПриемник = Справочники.ГруппыПользователей.ВсеПользователи Или ГруппаПриемник = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи Тогда
			Если Перемещение Тогда
				УдалитьПользователяИзГруппы(ГруппаИсточник, ПользовательСсылка, ИмяКолонкиСостава);
			КонецЕсли;
			МассивПеремещенныхПользователей.Добавить(ПользовательСсылка);
		ИначеЕсли ГруппаПриемник.Состав.Найти(ПользовательСсылка, ИмяКолонкиСостава) = Неопределено Тогда
			ДобавитьПользователяВГруппу(ГруппаПриемник, ПользовательСсылка, ИмяКолонкиСостава);

			// Удаление пользователя из старой группы.
			Если Перемещение Тогда
				УдалитьПользователяИзГруппы(ГруппаИсточник, ПользовательСсылка, ИмяКолонкиСостава);
			КонецЕсли;

			МассивПеремещенныхПользователей.Добавить(ПользовательСсылка);
		КонецЕсли;
	КонецЦикла;

	СообщениеПользователю = ФормированиеСообщенияПользователю(МассивПеремещенныхПользователей, ГруппаПриемник, Перемещение, МассивНеПеремещенныхПользователей, ГруппаИсточник);

	Если МассивПеремещенныхПользователей.Количество() = 0 И МассивНеПеремещенныхПользователей.Количество() = 0 Тогда
		Если МассивПользователей.Количество() = 1 Тогда
			ТекстСообщения					= "Пользователь ""%1"" уже включен в группу ""%2"".";
			ИмяПеремещаемогоПользователя	= БазоваяПодсистемаСервер.ЗначениеРеквизитаОбъекта(МассивПользователей[0], "Наименование");
		Иначе
			ТекстСообщения					= "Все выбранные пользователи уже включены в группу ""%2"".";
			ИмяПеремещаемогоПользователя	= "";
		КонецЕсли;
		НаименованиеГруппы					= БазоваяПодсистемаСервер.ЗначениеРеквизитаОбъекта(ГруппаПриемник, "Наименование");
		СообщениеПользователю.Сообщение		= СтрШаблон(ТекстСообщения, ИмяПеремещаемогоПользователя, НаименованиеГруппы);
		СообщениеПользователю.ЕстьОшибки	= Истина;

		Возврат СообщениеПользователю;
	КонецЕсли;

	Возврат СообщениеПользователю;
КонецФункции

// Проверяет, что объект информационной базы используется в качестве объекта авторизации
// какого-нибудь внешнего пользователя, кроме заданного внешнего пользователя (если задан).
//
Функция сОбъектАвторизацииИспользуется(Знач СсылкаНаОбъектАвторизации, Знач СсылкаНаТекущегоВнешнегоПользователя, НайденныйВнешнийПользователь = Неопределено, ЕстьПравоДобавленияВнешнегоПользователя = Ложь, ТекстОшибки = "") Экспорт
	ЕстьПравоДобавленияВнешнегоПользователя = ПравоДоступа("Добавление", Метаданные.Справочники.ВнешниеПользователи);

	УстановитьПривилегированныйРежим(Истина);

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ ПЕРВЫЕ 1
	            	  |	ВнешниеПользователи.Ссылка КАК Ссылка
	            	  |ИЗ
	            	  |	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	            	  |ГДЕ
	            	  |	ВнешниеПользователи.ОбъектАвторизации = &СсылкаНаОбъектАвторизации
	            	  |	И ВнешниеПользователи.Ссылка <> &СсылкаНаТекущегоВнешнегоПользователя";
	Запрос.УстановитьПараметр("СсылкаНаТекущегоВнешнегоПользователя", СсылкаНаТекущегоВнешнегоПользователя);
	Запрос.УстановитьПараметр("СсылкаНаОбъектАвторизации", СсылкаНаОбъектАвторизации);

	НачатьТранзакцию();
	Попытка
		Таблица = Запрос.Выполнить().Выгрузить();
		Если Таблица.Количество() > 0 Тогда
			НайденныйВнешнийПользователь = Таблица[0].Ссылка;
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;

	Результат = Таблица.Количество() > 0;
	Если Результат Тогда
		ТекстОшибки = СтрШаблон("Уже существует внешний пользователь, связанный с объектом ""%1"".", СсылкаНаОбъектАвторизации);
	КонецЕсли;

	Возврат Результат;
КонецФункции

// Переопределяет стандартное поведение при выгрузке данных.
// Реквизит ИдентификаторПользователяИБ не переносится.
//
Процедура сПриОтправкеДанных(ЭлементДанных, ОтправкаЭлемента, Подчиненному) Экспорт
	Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить ИЛИ ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		// Стандартная обработка не переопределяется.
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.Пользователи")
	      ИЛИ ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ВнешниеПользователи") Тогда

		ЭлементДанных.ИдентификаторПользователяИБ	= Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		ЭлементДанных.Подготовлен					= Ложь;
		ЭлементДанных.СвойстваПользователяИБ		= Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
КонецПроцедуры

Процедура сПриПолученииДанных(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, ОтПодчиненного) Экспорт
	Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
		// Стандартная обработка не переопределяется.
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("КонстантаМенеджерЗначения.ИспользоватьГруппыПользователей")
	      ИЛИ ТипЗнч(ЭлементДанных) = Тип("КонстантаМенеджерЗначения.ИспользоватьВнешнихПользователей")
	      ИЛИ ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.Пользователи")
	      ИЛИ ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ГруппыПользователей")
	      ИЛИ ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ВнешниеПользователи")
	      ИЛИ ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ГруппыВнешнихПользователей")
	      ИЛИ ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.СоставыГруппПользователей") Тогда

		Если ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.Пользователи") ИЛИ ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ВнешниеПользователи") Тогда
			СписокСвойств =
				"ИдентификаторПользователяИБ,
				|Подготовлен,
				|СвойстваПользователяИБ";

			ЗаполнитьЗначенияСвойств(ЭлементДанных, БазоваяПодсистемаСервер.ЗначенияРеквизитовОбъекта(ЭлементДанных.Ссылка, СписокСвойств));
		ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("УдалениеОбъекта") Тогда
			Если ТипЗнч(ЭлементДанных.Ссылка) = Тип("СправочникСсылка.Пользователи") ИЛИ ТипЗнч(ЭлементДанных.Ссылка) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
				ОбъектПолучен = Ложь;
				Попытка
					Объект = ЭлементДанных.Ссылка.ПолучитьОбъект();
				Исключение
					ОбъектПолучен = Истина;
				КонецПопытки;

				Если ОбъектПолучен Тогда
					Объект.ОбщиеДействияПередУдалениемВОбычномРежимеИПриОбменеДанными();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
