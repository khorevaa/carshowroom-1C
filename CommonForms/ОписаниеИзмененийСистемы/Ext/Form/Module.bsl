#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	НастройкиПодсистемы  = ОбновлениеИБСервер.НастройкиПодсистемы();
	АдресФормыВПрограмме = НастройкиПодсистемы.РасположениеОписанияИзмененийПрограммы;

	Если ЗначениеЗаполнено(АдресФормыВПрограмме) Тогда
		Элементы.АдресФормыВПрограмме.Заголовок = АдресФормыВПрограмме;
	КонецЕсли;

	Если Не Параметры.ПоказыватьТолькоИзменения Тогда
		Элементы.АдресФормыВПрограмме.Видимость = Ложь;
	КонецЕсли;

	Заголовок = СтрШаблон("Что нового в конфигурации %1", Метаданные.Синоним);

	Если ЗначениеЗаполнено(Параметры.ВремяНачалаОбновления) Тогда
		ВремяНачалаОбновления		= Параметры.ВремяНачалаОбновления;
		ВремяОкончанияОбновления	= Параметры.ВремяОкончанияОбновления;
	КонецЕсли;

	Разделы			= ОбновлениеИБСервер.НеотображавшиесяРазделыОписанияИзменений();
	ПоследняяВерсия	= ОбновлениеИБСервер.ПоследняяВерсияОтображенияИзмененийСистемы();

	Если Разделы.Количество() = 0 Тогда
		ДокументОписаниеОбновлений = Метаданные.ОбщиеМакеты.Найти("ОписаниеИзмененийСистемы");
		Если ДокументОписаниеОбновлений <> Неопределено И (ПоследняяВерсия = Неопределено Или Не Параметры.ПоказыватьТолькоИзменения) Тогда
			ВсеРазделы = ОбновлениеИБСервер.РазделыОписанияИзменений();
			Если ТипЗнч(ВсеРазделы) = Тип("СписокЗначений") И ВсеРазделы.Количество() <> 0 Тогда
				Для Каждого Элемент Из ВсеРазделы Цикл
					Разделы.Добавить(Элемент.Представление);
				КонецЦикла;
				ДокументОписаниеОбновлений = ОбновлениеИБСервер.ДокументОписаниеОбновлений(Разделы);
			Иначе
				ДокументОписаниеОбновлений = ПолучитьОбщийМакет(ДокументОписаниеОбновлений);
			КонецЕсли;
		Иначе
			ДокументОписаниеОбновлений = Новый ТабличныйДокумент;
		КонецЕсли;
	Иначе
		ДокументОписаниеОбновлений = ОбновлениеИБСервер.ДокументОписаниеОбновлений(Разделы);
	КонецЕсли;

	Если ДокументОписаниеОбновлений.ВысотаТаблицы = 0 Тогда
		Текст = СтрШаблон("Конфигурация успешно обновлена на версию %1", Метаданные.Версия);
		ДокументОписаниеОбновлений.Область("R1C1:R1C1").Текст = Текст;
	КонецЕсли;

	ОписанияПодсистем  = БазоваяПодсистемаСерверПовтИсп.ОписанияПодсистем();
	Для каждого ИмяПодсистемы Из ОписанияПодсистем.Порядок Цикл
		ОписаниеПодсистемы = ОписанияПодсистем.ПоИменам.Получить(ИмяПодсистемы);
		Если НЕ ЗначениеЗаполнено(ОписаниеПодсистемы.ОсновнойСерверныйМодуль) Тогда
			Продолжить;
		КонецЕсли;
		Модуль = БазоваяПодсистемаСервер.ОбщийМодуль(ОписаниеПодсистемы.ОсновнойСерверныйМодуль);
		Модуль.ПриПодготовкеМакетаОписанияОбновлений(ДокументОписаниеОбновлений);
	КонецЦикла;

	ОписаниеОбновлений.Очистить();
	ОписаниеОбновлений.Вывести(ДокументОписаниеОбновлений);

	СведенияОбОбновлении		= ОбновлениеИБСервер.СведенияОбОбновленииИнформационнойБазы();
	ВремяНачалаОбновления		= СведенияОбОбновлении.ВремяНачалаОбновления;
	ВремяОкончанияОбновления	= СведенияОбОбновлении.ВремяОкончанияОбновления;

	Если СведенияОбОбновлении.ОтложенноеОбновлениеЗавершеноУспешно <> Неопределено
		Или СведенияОбОбновлении.ДеревоОбработчиков <> Неопределено И СведенияОбОбновлении.ДеревоОбработчиков.Строки.Количество() = 0 Тогда

		Элементы.ОтложенноеОбновление.Видимость = Ложь;
	КонецЕсли;

	Если БазоваяПодсистемаСервер.ИнформационнаяБазаФайловая() Тогда
		ЗаголовокСообщения								= "Необходимо выполнить дополнительные процедуры обработки данных";
		Элементы.ОтложенноеОбновлениеДанных.Заголовок	= ЗаголовокСообщения;
	КонецЕсли;

	Если Не ПользователиСервер.ЭтоПолноправныйПользователь(, Истина) Тогда
		Элементы.ОтложенноеОбновлениеДанных.Заголовок = "Не выполнены дополнительные процедуры обработки данных";
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ВремяНачалаОбновления) И Не ЗначениеЗаполнено(ВремяОкончанияОбновления) Тогда
		Элементы.ТехническаяИнформацияОРезультатахОбновления.Видимость = Ложь;
	ИначеЕсли ПользователиСервер.ЭтоПолноправныйПользователь() Тогда
		Элементы.ТехническаяИнформацияОРезультатахОбновления.Видимость = Истина;
	Иначе
		Элементы.ТехническаяИнформацияОРезультатахОбновления.Видимость = Ложь;
	КонецЕсли;

	КлиентСервернаяБаза = Не БазоваяПодсистемаСервер.ИнформационнаяБазаФайловая();

	// Отображение информации о блокировке регламентных заданий.
	Если Не КлиентСервернаяБаза И ПользователиСервер.ЭтоПолноправныйПользователь(, Истина) Тогда
		ПараметрЗапускаКлиента					= ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
		ВыполненоОтключениеРегламентныхЗаданий	= СтрНайти(ПараметрЗапускаКлиента, "РегламентныеЗаданияОтключены") <> 0;
		Если Не ВыполненоОтключениеРегламентныхЗаданий Тогда
			Элементы.ГруппаОтключеныРегламентныеЗадания.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ГруппаОтключеныРегламентныеЗадания.Видимость = Ложь;
	КонецЕсли;

	Элементы.ОписаниеОбновлений.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;

	ОбновлениеИБСервер.УстановитьФлагОтображенияОписанийПоТекущуюВерсию();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если КлиентСервернаяБаза Тогда
		ПодключитьОбработчикОжидания("ОбновитьСтатусОтложенногоОбновления", 60);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОписаниеОбновленийВыбор(Элемент, Область, СтандартнаяОбработка)
	Если СтрНайти(Область.Текст, "http://") = 1 Или СтрНайти(Область.Текст, "https://") = 1 Тогда
		БазоваяПодсистемаКлиент.ОткрытьНавигационнуюСсылку(Область.Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСведенияОРезультатахОбновленияНажатие(Элемент)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоказатьОшибкиИПредупреждения",	Истина);
	ПараметрыФормы.Вставить("ДатаНачала",						ВремяНачалаОбновления);
	ПараметрыФормы.Вставить("ДатаОкончания",					ВремяОкончанияОбновления);

	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма.ЖурналРегистрации", ПараметрыФормы);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтложенноеОбновлениеДанных(Команда)
	ОткрытьФорму("Обработка.РезультатыОбновленияПрограммы.Форма.ИндикацияХодаОтложенногоОбновленияИБ");
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОбновитьСтатусОтложенногоОбновления()
	ОбновитьСтатусОтложенногоОбновленияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусОтложенногоОбновленияНаСервере()
	СведенияОбОбновлении = ОбновлениеИБСервер.СведенияОбОбновленииИнформационнойБазы();
	Если СведенияОбОбновлении.ВремяОкончаниеОтложенногоОбновления <> Неопределено Тогда
		Элементы.ОтложенноеОбновление.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры
