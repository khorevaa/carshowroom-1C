#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыПродолжения;
&НаКлиенте
Перем РезультатВыполненияОбновления;
&НаКлиенте
Перем ОбработкаЗавершения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ВыполняетсяОбновлениеВерсииИБ = Истина;
	ВремяНачалаОбновления = ТекущаяДатаСеанса();

	КлиентСервер  = Не БазоваяПодсистемаСервер.ИнформационнаяБазаФайловая();

	ПараметрыЗапускаПрограммы = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
	ПараметрыЗапускаМассивом = СтрРазделить(ПараметрыЗапускаПрограммы, ";");
	Для Каждого Параметр Из ПараметрыЗапускаМассивом Цикл
		Если СтрНайти(Параметр, "ЧислоПотоковОбновления") > 0 Тогда
			ПотокиОбновления = СтрРазделить(Параметр, "=");
			Попытка
				МаксимальноПотоков = Число(ПотокиОбновления[1]);
			Исключение
				ТекстИсключения = "Неправильно указан параметр запуска программы ""ЧислоПотоковОбновления"".
					|Правильный формат - ""ЧислоПотоковОбновления=Х"", где ""Х"" - максимальное количество потоков обновления.";
				ВызватьИсключение ТекстИсключения;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;

	Если МаксимальноПотоков = 0 Тогда
		МаксимальноПотоков = 8;
	КонецЕсли;

	ПрогрессВыполнения = 5;

	РежимОбновленияДанных = ОбновлениеИБСервер.РежимОбновленияДанных();

	ТолькоОбновлениеПараметровРаботыПрограммы = Не ОбновлениеИБСерверПовтИсп.НеобходимоОбновлениеИнформационнойБазы();

	Если ТолькоОбновлениеПараметровРаботыПрограммы Тогда
		Заголовок								= "Обновление параметров работы программы";
		Элементы.РежимЗапуска.ТекущаяСтраница	= Элементы.ОбновлениеПараметровРаботыПрограммы;
	ИначеЕсли РежимОбновленияДанных = "НачальноеЗаполнение" Тогда
		Заголовок								= "Начальное заполнение данных";
		Элементы.РежимЗапуска.ТекущаяСтраница	= Элементы.НачальноеЗаполнение;
	ИначеЕсли РежимОбновленияДанных = "ПереходСДругойПрограммы" Тогда
		Заголовок								= "Переход с другой программы";
		Элементы.РежимЗапуска.ТекущаяСтраница	= Элементы.ПереходСДругойПрограммы;
		Элементы.ТекстСообщенияПереходСДругойПрограммы.Заголовок = СтрШаблон(Элементы.ТекстСообщенияПереходСДругойПрограммы.Заголовок, Метаданные.Синоним);
	Иначе
		Заголовок								= "Обновление версии программы";
		Элементы.РежимЗапуска.ТекущаяСтраница	= Элементы.ОбновлениеВерсииПрограммы;
		Элементы.ТекстСообщенияОбновляемаяКонфигурация.Заголовок = СтрШаблон(Элементы.ТекстСообщенияОбновляемаяКонфигурация.Заголовок, Метаданные.Синоним, Метаданные.Версия);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Если ВыполняетсяОбновлениеВерсииИБ Тогда
			Отказ = Истина;
		КонецЕсли;

		Возврат;
	КонецЕсли;

	Если ВыполняетсяОбновлениеВерсииИБ Тогда
		Отказ = Истина;
	ИначеЕсли МонопольныйРежимУстановлен Тогда
		СнятьМонопольныйРежим();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТехническаяИнформацияНажатие(Элемент)
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ЗапускатьНеВФоне", Истина);
	ПараметрыОтбора.Вставить("ДатаНачала", ВремяНачалаОбновления);

	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыОтбора, Неопределено);
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Процедура СнятьМонопольныйРежим()
	Если МонопольныйРежим() Тогда
		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;

	МонопольныйРежимУстановлен = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОбновитьПараметрыРаботыПрограммы(Параметры) Экспорт
	ПараметрыПродолжения = Параметры;
	ПодключитьОбработчикОжидания("НачатьОбновлениеПараметровРаботыПрограммы", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачатьОбновлениеПараметровРаботыПрограммы()
	РезультатВыполнения = ЗагрузитьОбновитьПараметрыРаботыПрограммыВФоне();

	ДополнительныеПараметры = Новый Структура("КраткоеПредставлениеОшибки, ПодробноеПредставлениеОшибки");

	Если РезультатВыполнения = "ЗапускНеТребуется" Тогда
		Результат = Новый Структура("Статус", "ЗапускНеТребуется");
		ЗавершитьОбновлениеПараметровРаботыПрограммы(Результат, ДополнительныеПараметры);

		Возврат;
	КонецЕсли;

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьОбновлениеПараметровРаботыПрограммы",ЭтотОбъект, ДополнительныеПараметры);

	ПараметрыОжидания									= БазоваяПодсистемаКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания				= Ложь;
	ПараметрыОжидания.Интервал							= 2;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения		= Истина;
	ПараметрыОжидания.ОповещениеОПрогрессеВыполнения	= Новый ОписаниеОповещения("ПрогрессОбновленияПараметровРаботыПрограммы", ЭтотОбъект);
	БазоваяПодсистемаКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
КонецПроцедуры

&НаСервере
Функция ЗагрузитьОбновитьПараметрыРаботыПрограммыВФоне()
	ОбновитьПовторноИспользуемыеЗначения();

	// Вызов длительной операции (обычно в фоновом задании).
	Возврат РегистрыСведений.ПараметрыРаботыПрограммы.ЗагрузитьОбновитьПараметрыРаботыПрограммыВФоне(0,УникальныйИдентификатор, Истина);
КонецФункции

&НаКлиенте
Процедура ПрогрессОбновленияПараметровРаботыПрограммы(Прогресс, ДополнительныеПараметры) Экспорт
	Если Прогресс = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Прогресс.Статус <> "Выполняется" Тогда
		Возврат;
	КонецЕсли;

	Если Прогресс.Прогресс <> Неопределено Тогда
		Если ТолькоОбновлениеПараметровРаботыПрограммы Тогда
			ПрогрессВыполнения = 5 + (90 * Прогресс.Прогресс.Процент / 100);
		Иначе
			ПрогрессВыполнения = 5 + (5 * Прогресс.Прогресс.Процент / 100);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбновлениеПараметровРаботыПрограммы(Результат, ДополнительныеПараметры) Экспорт
	Попытка
		ОбработанныйРезультат	= ОбработанныйРезультатДлительнойОперации(Результат);
	Исключение
		ИнформацияОбОшибке		= ИнформацияОбОшибке();
		ОбработанныйРезультат	= Новый Структура;
		ОбработанныйРезультат.Вставить("КраткоеПредставлениеОшибки", КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		ОбработанныйРезультат.Вставить("ПодробноеПредставлениеОшибки", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;

	Если ЗначениеЗаполнено(ОбработанныйРезультат.КраткоеПредставлениеОшибки) Тогда
		СообщениеОНеудачномОбновлении(ОбработанныйРезультат, Неопределено);

		Возврат;
	КонецЕсли;

	ПрогрессВыполнения = ?(ТолькоОбновлениеПараметровРаботыПрограммы, 95, 10);

	ПараметрыПродолжения.ПолученныеПараметрыКлиента.Вставить("НеобходимоОбновлениеПараметровРаботыПрограммы");
	ПараметрыПродолжения.Вставить("КоличествоПолученныхПараметровКлиента",ПараметрыПродолжения.ПолученныеПараметрыКлиента.Количество());

	ОбновитьПовторноИспользуемыеЗначения();

	Попытка
		ПараметрыКлиента = БазоваяПодсистемаКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ДополнительныеПараметры.Вставить("КраткоеПредставлениеОшибки", КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		ДополнительныеПараметры.Вставить("ПодробноеПредставлениеОшибки", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		СообщениеОНеудачномОбновлении(ДополнительныеПараметры, Неопределено);

		Возврат;
	КонецПопытки;

	Если Не ТолькоОбновлениеПараметровРаботыПрограммы Тогда
		ВыполнитьОбработкуОповещения(ПараметрыПродолжения.ОбработкаПродолжения);

		Возврат;
	КонецЕсли;

	Если БлокировкаИБ <> Неопределено
		И БлокировкаИБ.Свойство("СнятьБлокировкуФайловойБазы") Тогда
		ОбновлениеИБВызовСервера.СнятьБлокировкуФайловойБазы();
	КонецЕсли;

	ЗакрытьФорму(Ложь, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Отказ, Перезапустить)
	ВыполняетсяОбновлениеВерсииИБ = Ложь;
	Закрыть(Новый Структура("Отказ, Перезапустить", Отказ, Перезапустить));
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОНеудачномОбновлении(ДополнительныеПараметры, ВремяОкончанияОбновления)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьИнформационнуюБазуДействияПриОшибке", ЭтотОбъект);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КраткоеПредставлениеОшибки",   ДополнительныеПараметры.КраткоеПредставлениеОшибки);
	ПараметрыФормы.Вставить("ПодробноеПредставлениеОшибки", ДополнительныеПараметры.ПодробноеПредставлениеОшибки);
	ПараметрыФормы.Вставить("ВремяНачалаОбновления",      ВремяНачалаОбновления);
	ПараметрыФормы.Вставить("ВремяОкончанияОбновления",   ВремяОкончанияОбновления);

	Если ЗначениеЗаполнено(ИмяПланаОбмена) Тогда
		// зарезервировано для новых подсистем
		ПараметрыФормы.Вставить("ИмяПланаОбмена", ИмяПланаОбмена);
	Иначе
		ИмяОткрываемойФормы = "Обработка.РезультатыОбновленияПрограммы.Форма.СообщениеОНеудачномОбновлении";
	КонецЕсли;

	ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы,,,,,ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформационнуюБазуДействияПриОшибке(ЗавершитьРаботу, ДополнительныеПараметры) Экспорт
	Если БлокировкаИБ <> Неопределено И БлокировкаИБ.Свойство("СнятьБлокировкуФайловойБазы") Тогда
		ОбновлениеИБВызовСервера.СнятьБлокировкуФайловойБазы();
	КонецЕсли;

	Если ЗавершитьРаботу <> Ложь Тогда
		ЗакрытьФорму(Истина, Ложь);
	Иначе
		ЗакрытьФорму(Истина, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбработанныйРезультатДлительнойОперации(Результат)
	Возврат РегистрыСведений.ПараметрыРаботыПрограммы.ОбработанныйРезультатДлительнойОперации(Результат);
КонецФункции
